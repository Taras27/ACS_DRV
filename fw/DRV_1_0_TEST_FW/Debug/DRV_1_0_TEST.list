
DRV_1_0_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7a8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  0800b864  0800b864  0001b864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800babc  0800babc  0002017c  2**0
                  CONTENTS
  4 .ARM          00000008  0800babc  0800babc  0001babc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bac4  0800bac4  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bac4  0800bac4  0001bac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bac8  0800bac8  0001bac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800bacc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001948  2000017c  0800bc48  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  20001ac4  0800bc48  00021ac4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d50c  00000000  00000000  000201e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000490f  00000000  00000000  0003d6f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001770  00000000  00000000  00042008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011f9  00000000  00000000  00043778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020cb6  00000000  00000000  00044971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020f82  00000000  00000000  00065627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c028a  00000000  00000000  000865a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000057fc  00000000  00000000  00146834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0014c030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000017c 	.word	0x2000017c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800b84c 	.word	0x0800b84c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000180 	.word	0x20000180
 8000100:	0800b84c 	.word	0x0800b84c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000644:	4b20      	ldr	r3, [pc, #128]	; (80006c8 <MX_FDCAN1_Init+0x88>)
 8000646:	4a21      	ldr	r2, [pc, #132]	; (80006cc <MX_FDCAN1_Init+0x8c>)
 8000648:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800064a:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <MX_FDCAN1_Init+0x88>)
 800064c:	2200      	movs	r2, #0
 800064e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000650:	4b1d      	ldr	r3, [pc, #116]	; (80006c8 <MX_FDCAN1_Init+0x88>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000656:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <MX_FDCAN1_Init+0x88>)
 8000658:	2200      	movs	r2, #0
 800065a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800065c:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <MX_FDCAN1_Init+0x88>)
 800065e:	2200      	movs	r2, #0
 8000660:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000662:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <MX_FDCAN1_Init+0x88>)
 8000664:	2200      	movs	r2, #0
 8000666:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000668:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <MX_FDCAN1_Init+0x88>)
 800066a:	2200      	movs	r2, #0
 800066c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 8;
 800066e:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <MX_FDCAN1_Init+0x88>)
 8000670:	2208      	movs	r2, #8
 8000672:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000674:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <MX_FDCAN1_Init+0x88>)
 8000676:	2201      	movs	r2, #1
 8000678:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <MX_FDCAN1_Init+0x88>)
 800067c:	220d      	movs	r2, #13
 800067e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_FDCAN1_Init+0x88>)
 8000682:	2202      	movs	r2, #2
 8000684:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <MX_FDCAN1_Init+0x88>)
 8000688:	2201      	movs	r2, #1
 800068a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800068c:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_FDCAN1_Init+0x88>)
 800068e:	2201      	movs	r2, #1
 8000690:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000692:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <MX_FDCAN1_Init+0x88>)
 8000694:	2201      	movs	r2, #1
 8000696:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000698:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <MX_FDCAN1_Init+0x88>)
 800069a:	2201      	movs	r2, #1
 800069c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800069e:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <MX_FDCAN1_Init+0x88>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80006a4:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <MX_FDCAN1_Init+0x88>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80006aa:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <MX_FDCAN1_Init+0x88>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80006b0:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <MX_FDCAN1_Init+0x88>)
 80006b2:	0018      	movs	r0, r3
 80006b4:	f001 f93a 	bl	800192c <HAL_FDCAN_Init>
 80006b8:	1e03      	subs	r3, r0, #0
 80006ba:	d001      	beq.n	80006c0 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80006bc:	f000 fc36 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80006c0:	46c0      	nop			; (mov r8, r8)
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	20000198 	.word	0x20000198
 80006cc:	40006400 	.word	0x40006400

080006d0 <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80006d4:	4b20      	ldr	r3, [pc, #128]	; (8000758 <MX_FDCAN2_Init+0x88>)
 80006d6:	4a21      	ldr	r2, [pc, #132]	; (800075c <MX_FDCAN2_Init+0x8c>)
 80006d8:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80006da:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <MX_FDCAN2_Init+0x88>)
 80006dc:	2200      	movs	r2, #0
 80006de:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80006e0:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <MX_FDCAN2_Init+0x88>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <MX_FDCAN2_Init+0x88>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80006ec:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <MX_FDCAN2_Init+0x88>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <MX_FDCAN2_Init+0x88>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80006f8:	4b17      	ldr	r3, [pc, #92]	; (8000758 <MX_FDCAN2_Init+0x88>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 8;
 80006fe:	4b16      	ldr	r3, [pc, #88]	; (8000758 <MX_FDCAN2_Init+0x88>)
 8000700:	2208      	movs	r2, #8
 8000702:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_FDCAN2_Init+0x88>)
 8000706:	2201      	movs	r2, #1
 8000708:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 13;
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <MX_FDCAN2_Init+0x88>)
 800070c:	220d      	movs	r2, #13
 800070e:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_FDCAN2_Init+0x88>)
 8000712:	2202      	movs	r2, #2
 8000714:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <MX_FDCAN2_Init+0x88>)
 8000718:	2201      	movs	r2, #1
 800071a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_FDCAN2_Init+0x88>)
 800071e:	2201      	movs	r2, #1
 8000720:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000722:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <MX_FDCAN2_Init+0x88>)
 8000724:	2201      	movs	r2, #1
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000728:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_FDCAN2_Init+0x88>)
 800072a:	2201      	movs	r2, #1
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 800072e:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <MX_FDCAN2_Init+0x88>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000734:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_FDCAN2_Init+0x88>)
 8000736:	2200      	movs	r2, #0
 8000738:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800073a:	4b07      	ldr	r3, [pc, #28]	; (8000758 <MX_FDCAN2_Init+0x88>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000740:	4b05      	ldr	r3, [pc, #20]	; (8000758 <MX_FDCAN2_Init+0x88>)
 8000742:	0018      	movs	r0, r3
 8000744:	f001 f8f2 	bl	800192c <HAL_FDCAN_Init>
 8000748:	1e03      	subs	r3, r0, #0
 800074a:	d001      	beq.n	8000750 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 800074c:	f000 fbee 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	200001fc 	.word	0x200001fc
 800075c:	40006800 	.word	0x40006800

08000760 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000760:	b590      	push	{r4, r7, lr}
 8000762:	b09f      	sub	sp, #124	; 0x7c
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000768:	2364      	movs	r3, #100	; 0x64
 800076a:	18fb      	adds	r3, r7, r3
 800076c:	0018      	movs	r0, r3
 800076e:	2314      	movs	r3, #20
 8000770:	001a      	movs	r2, r3
 8000772:	2100      	movs	r1, #0
 8000774:	f00a fbe4 	bl	800af40 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000778:	2418      	movs	r4, #24
 800077a:	193b      	adds	r3, r7, r4
 800077c:	0018      	movs	r0, r3
 800077e:	234c      	movs	r3, #76	; 0x4c
 8000780:	001a      	movs	r2, r3
 8000782:	2100      	movs	r1, #0
 8000784:	f00a fbdc 	bl	800af40 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a4e      	ldr	r2, [pc, #312]	; (80008c8 <HAL_FDCAN_MspInit+0x168>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d148      	bne.n	8000824 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000792:	193b      	adds	r3, r7, r4
 8000794:	2280      	movs	r2, #128	; 0x80
 8000796:	0492      	lsls	r2, r2, #18
 8000798:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800079a:	193b      	adds	r3, r7, r4
 800079c:	2200      	movs	r2, #0
 800079e:	649a      	str	r2, [r3, #72]	; 0x48

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007a0:	193b      	adds	r3, r7, r4
 80007a2:	0018      	movs	r0, r3
 80007a4:	f004 fa28 	bl	8004bf8 <HAL_RCCEx_PeriphCLKConfig>
 80007a8:	1e03      	subs	r3, r0, #0
 80007aa:	d001      	beq.n	80007b0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80007ac:	f000 fbbe 	bl	8000f2c <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80007b0:	4b46      	ldr	r3, [pc, #280]	; (80008cc <HAL_FDCAN_MspInit+0x16c>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	1c5a      	adds	r2, r3, #1
 80007b6:	4b45      	ldr	r3, [pc, #276]	; (80008cc <HAL_FDCAN_MspInit+0x16c>)
 80007b8:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80007ba:	4b44      	ldr	r3, [pc, #272]	; (80008cc <HAL_FDCAN_MspInit+0x16c>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d10d      	bne.n	80007de <HAL_FDCAN_MspInit+0x7e>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80007c2:	4b43      	ldr	r3, [pc, #268]	; (80008d0 <HAL_FDCAN_MspInit+0x170>)
 80007c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007c6:	4b42      	ldr	r3, [pc, #264]	; (80008d0 <HAL_FDCAN_MspInit+0x170>)
 80007c8:	2180      	movs	r1, #128	; 0x80
 80007ca:	0149      	lsls	r1, r1, #5
 80007cc:	430a      	orrs	r2, r1
 80007ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80007d0:	4b3f      	ldr	r3, [pc, #252]	; (80008d0 <HAL_FDCAN_MspInit+0x170>)
 80007d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007d4:	2380      	movs	r3, #128	; 0x80
 80007d6:	015b      	lsls	r3, r3, #5
 80007d8:	4013      	ands	r3, r2
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007de:	4b3c      	ldr	r3, [pc, #240]	; (80008d0 <HAL_FDCAN_MspInit+0x170>)
 80007e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007e2:	4b3b      	ldr	r3, [pc, #236]	; (80008d0 <HAL_FDCAN_MspInit+0x170>)
 80007e4:	2108      	movs	r1, #8
 80007e6:	430a      	orrs	r2, r1
 80007e8:	635a      	str	r2, [r3, #52]	; 0x34
 80007ea:	4b39      	ldr	r3, [pc, #228]	; (80008d0 <HAL_FDCAN_MspInit+0x170>)
 80007ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ee:	2208      	movs	r2, #8
 80007f0:	4013      	ands	r3, r2
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007f6:	2164      	movs	r1, #100	; 0x64
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	2203      	movs	r2, #3
 80007fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	2202      	movs	r2, #2
 8000802:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	187b      	adds	r3, r7, r1
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	187b      	adds	r3, r7, r1
 800080c:	2200      	movs	r2, #0
 800080e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN1;
 8000810:	187b      	adds	r3, r7, r1
 8000812:	2203      	movs	r2, #3
 8000814:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000816:	187b      	adds	r3, r7, r1
 8000818:	4a2e      	ldr	r2, [pc, #184]	; (80008d4 <HAL_FDCAN_MspInit+0x174>)
 800081a:	0019      	movs	r1, r3
 800081c:	0010      	movs	r0, r2
 800081e:	f001 fb3f 	bl	8001ea0 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8000822:	e04d      	b.n	80008c0 <HAL_FDCAN_MspInit+0x160>
  else if(fdcanHandle->Instance==FDCAN2)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a2b      	ldr	r2, [pc, #172]	; (80008d8 <HAL_FDCAN_MspInit+0x178>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d148      	bne.n	80008c0 <HAL_FDCAN_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800082e:	2118      	movs	r1, #24
 8000830:	187b      	adds	r3, r7, r1
 8000832:	2280      	movs	r2, #128	; 0x80
 8000834:	0492      	lsls	r2, r2, #18
 8000836:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000838:	187b      	adds	r3, r7, r1
 800083a:	2200      	movs	r2, #0
 800083c:	649a      	str	r2, [r3, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800083e:	187b      	adds	r3, r7, r1
 8000840:	0018      	movs	r0, r3
 8000842:	f004 f9d9 	bl	8004bf8 <HAL_RCCEx_PeriphCLKConfig>
 8000846:	1e03      	subs	r3, r0, #0
 8000848:	d001      	beq.n	800084e <HAL_FDCAN_MspInit+0xee>
      Error_Handler();
 800084a:	f000 fb6f 	bl	8000f2c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800084e:	4b1f      	ldr	r3, [pc, #124]	; (80008cc <HAL_FDCAN_MspInit+0x16c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	1c5a      	adds	r2, r3, #1
 8000854:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <HAL_FDCAN_MspInit+0x16c>)
 8000856:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000858:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <HAL_FDCAN_MspInit+0x16c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d10d      	bne.n	800087c <HAL_FDCAN_MspInit+0x11c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000860:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <HAL_FDCAN_MspInit+0x170>)
 8000862:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000864:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <HAL_FDCAN_MspInit+0x170>)
 8000866:	2180      	movs	r1, #128	; 0x80
 8000868:	0149      	lsls	r1, r1, #5
 800086a:	430a      	orrs	r2, r1
 800086c:	63da      	str	r2, [r3, #60]	; 0x3c
 800086e:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <HAL_FDCAN_MspInit+0x170>)
 8000870:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000872:	2380      	movs	r3, #128	; 0x80
 8000874:	015b      	lsls	r3, r3, #5
 8000876:	4013      	ands	r3, r2
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <HAL_FDCAN_MspInit+0x170>)
 800087e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000880:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <HAL_FDCAN_MspInit+0x170>)
 8000882:	2102      	movs	r1, #2
 8000884:	430a      	orrs	r2, r1
 8000886:	635a      	str	r2, [r3, #52]	; 0x34
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <HAL_FDCAN_MspInit+0x170>)
 800088a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800088c:	2202      	movs	r2, #2
 800088e:	4013      	ands	r3, r2
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000894:	2164      	movs	r1, #100	; 0x64
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2260      	movs	r2, #96	; 0x60
 800089a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2202      	movs	r2, #2
 80008a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN2;
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	2203      	movs	r2, #3
 80008b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	4a09      	ldr	r2, [pc, #36]	; (80008dc <HAL_FDCAN_MspInit+0x17c>)
 80008b8:	0019      	movs	r1, r3
 80008ba:	0010      	movs	r0, r2
 80008bc:	f001 faf0 	bl	8001ea0 <HAL_GPIO_Init>
}
 80008c0:	46c0      	nop			; (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b01f      	add	sp, #124	; 0x7c
 80008c6:	bd90      	pop	{r4, r7, pc}
 80008c8:	40006400 	.word	0x40006400
 80008cc:	20000260 	.word	0x20000260
 80008d0:	40021000 	.word	0x40021000
 80008d4:	50000c00 	.word	0x50000c00
 80008d8:	40006800 	.word	0x40006800
 80008dc:	50000400 	.word	0x50000400

080008e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008e0:	b590      	push	{r4, r7, lr}
 80008e2:	b08b      	sub	sp, #44	; 0x2c
 80008e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e6:	2414      	movs	r4, #20
 80008e8:	193b      	adds	r3, r7, r4
 80008ea:	0018      	movs	r0, r3
 80008ec:	2314      	movs	r3, #20
 80008ee:	001a      	movs	r2, r3
 80008f0:	2100      	movs	r1, #0
 80008f2:	f00a fb25 	bl	800af40 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	4b5d      	ldr	r3, [pc, #372]	; (8000a6c <MX_GPIO_Init+0x18c>)
 80008f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008fa:	4b5c      	ldr	r3, [pc, #368]	; (8000a6c <MX_GPIO_Init+0x18c>)
 80008fc:	2104      	movs	r1, #4
 80008fe:	430a      	orrs	r2, r1
 8000900:	635a      	str	r2, [r3, #52]	; 0x34
 8000902:	4b5a      	ldr	r3, [pc, #360]	; (8000a6c <MX_GPIO_Init+0x18c>)
 8000904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000906:	2204      	movs	r2, #4
 8000908:	4013      	ands	r3, r2
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800090e:	4b57      	ldr	r3, [pc, #348]	; (8000a6c <MX_GPIO_Init+0x18c>)
 8000910:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000912:	4b56      	ldr	r3, [pc, #344]	; (8000a6c <MX_GPIO_Init+0x18c>)
 8000914:	2120      	movs	r1, #32
 8000916:	430a      	orrs	r2, r1
 8000918:	635a      	str	r2, [r3, #52]	; 0x34
 800091a:	4b54      	ldr	r3, [pc, #336]	; (8000a6c <MX_GPIO_Init+0x18c>)
 800091c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800091e:	2220      	movs	r2, #32
 8000920:	4013      	ands	r3, r2
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4b51      	ldr	r3, [pc, #324]	; (8000a6c <MX_GPIO_Init+0x18c>)
 8000928:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800092a:	4b50      	ldr	r3, [pc, #320]	; (8000a6c <MX_GPIO_Init+0x18c>)
 800092c:	2101      	movs	r1, #1
 800092e:	430a      	orrs	r2, r1
 8000930:	635a      	str	r2, [r3, #52]	; 0x34
 8000932:	4b4e      	ldr	r3, [pc, #312]	; (8000a6c <MX_GPIO_Init+0x18c>)
 8000934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000936:	2201      	movs	r2, #1
 8000938:	4013      	ands	r3, r2
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093e:	4b4b      	ldr	r3, [pc, #300]	; (8000a6c <MX_GPIO_Init+0x18c>)
 8000940:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000942:	4b4a      	ldr	r3, [pc, #296]	; (8000a6c <MX_GPIO_Init+0x18c>)
 8000944:	2102      	movs	r1, #2
 8000946:	430a      	orrs	r2, r1
 8000948:	635a      	str	r2, [r3, #52]	; 0x34
 800094a:	4b48      	ldr	r3, [pc, #288]	; (8000a6c <MX_GPIO_Init+0x18c>)
 800094c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800094e:	2202      	movs	r2, #2
 8000950:	4013      	ands	r3, r2
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000956:	4b45      	ldr	r3, [pc, #276]	; (8000a6c <MX_GPIO_Init+0x18c>)
 8000958:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800095a:	4b44      	ldr	r3, [pc, #272]	; (8000a6c <MX_GPIO_Init+0x18c>)
 800095c:	2108      	movs	r1, #8
 800095e:	430a      	orrs	r2, r1
 8000960:	635a      	str	r2, [r3, #52]	; 0x34
 8000962:	4b42      	ldr	r3, [pc, #264]	; (8000a6c <MX_GPIO_Init+0x18c>)
 8000964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000966:	2208      	movs	r2, #8
 8000968:	4013      	ands	r3, r2
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_ERROR_Pin|LED_PROCESS_Pin|LED_OK_Pin, GPIO_PIN_RESET);
 800096e:	23e0      	movs	r3, #224	; 0xe0
 8000970:	021b      	lsls	r3, r3, #8
 8000972:	483f      	ldr	r0, [pc, #252]	; (8000a70 <MX_GPIO_Init+0x190>)
 8000974:	2200      	movs	r2, #0
 8000976:	0019      	movs	r1, r3
 8000978:	f001 fc1b 	bl	80021b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, UART2_CS0_Pin|BUZZ_Pin, GPIO_PIN_RESET);
 800097c:	493d      	ldr	r1, [pc, #244]	; (8000a74 <MX_GPIO_Init+0x194>)
 800097e:	23a0      	movs	r3, #160	; 0xa0
 8000980:	05db      	lsls	r3, r3, #23
 8000982:	2200      	movs	r2, #0
 8000984:	0018      	movs	r0, r3
 8000986:	f001 fc14 	bl	80021b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_CS0_Pin|SPI_CS1_Pin|UART3_CS0_Pin|UART5_CS0_Pin
 800098a:	493b      	ldr	r1, [pc, #236]	; (8000a78 <MX_GPIO_Init+0x198>)
 800098c:	4b3b      	ldr	r3, [pc, #236]	; (8000a7c <MX_GPIO_Init+0x19c>)
 800098e:	2200      	movs	r2, #0
 8000990:	0018      	movs	r0, r3
 8000992:	f001 fc0e 	bl	80021b2 <HAL_GPIO_WritePin>
                          |UART6_CS0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_ERROR_Pin|LED_PROCESS_Pin|LED_OK_Pin;
 8000996:	193b      	adds	r3, r7, r4
 8000998:	22e0      	movs	r2, #224	; 0xe0
 800099a:	0212      	lsls	r2, r2, #8
 800099c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	2201      	movs	r2, #1
 80009a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	193b      	adds	r3, r7, r4
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	193b      	adds	r3, r7, r4
 80009ac:	2200      	movs	r2, #0
 80009ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b0:	193b      	adds	r3, r7, r4
 80009b2:	4a2f      	ldr	r2, [pc, #188]	; (8000a70 <MX_GPIO_Init+0x190>)
 80009b4:	0019      	movs	r1, r3
 80009b6:	0010      	movs	r0, r2
 80009b8:	f001 fa72 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = ADDR0_Pin|ADDR1_Pin|LS1_Pin|LS2_Pin
 80009bc:	193b      	adds	r3, r7, r4
 80009be:	4a30      	ldr	r2, [pc, #192]	; (8000a80 <MX_GPIO_Init+0x1a0>)
 80009c0:	601a      	str	r2, [r3, #0]
                          |LS5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c2:	193b      	adds	r3, r7, r4
 80009c4:	2200      	movs	r2, #0
 80009c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	193b      	adds	r3, r7, r4
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ce:	193a      	adds	r2, r7, r4
 80009d0:	23a0      	movs	r3, #160	; 0xa0
 80009d2:	05db      	lsls	r3, r3, #23
 80009d4:	0011      	movs	r1, r2
 80009d6:	0018      	movs	r0, r3
 80009d8:	f001 fa62 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = UART2_CS0_Pin|BUZZ_Pin;
 80009dc:	193b      	adds	r3, r7, r4
 80009de:	4a25      	ldr	r2, [pc, #148]	; (8000a74 <MX_GPIO_Init+0x194>)
 80009e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	193b      	adds	r3, r7, r4
 80009e4:	2201      	movs	r2, #1
 80009e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	193b      	adds	r3, r7, r4
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	193b      	adds	r3, r7, r4
 80009f0:	2200      	movs	r2, #0
 80009f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f4:	193a      	adds	r2, r7, r4
 80009f6:	23a0      	movs	r3, #160	; 0xa0
 80009f8:	05db      	lsls	r3, r3, #23
 80009fa:	0011      	movs	r1, r2
 80009fc:	0018      	movs	r0, r3
 80009fe:	f001 fa4f 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SPI_CS0_Pin|SPI_CS1_Pin|UART3_CS0_Pin|UART5_CS0_Pin
 8000a02:	193b      	adds	r3, r7, r4
 8000a04:	4a1c      	ldr	r2, [pc, #112]	; (8000a78 <MX_GPIO_Init+0x198>)
 8000a06:	601a      	str	r2, [r3, #0]
                          |UART6_CS0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	193b      	adds	r3, r7, r4
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	193b      	adds	r3, r7, r4
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	193b      	adds	r3, r7, r4
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1a:	193b      	adds	r3, r7, r4
 8000a1c:	4a17      	ldr	r2, [pc, #92]	; (8000a7c <MX_GPIO_Init+0x19c>)
 8000a1e:	0019      	movs	r1, r3
 8000a20:	0010      	movs	r0, r2
 8000a22:	f001 fa3d 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ADDR2_Pin|LS0_Pin|BOOT_BTN_Pin;
 8000a26:	193b      	adds	r3, r7, r4
 8000a28:	4a16      	ldr	r2, [pc, #88]	; (8000a84 <MX_GPIO_Init+0x1a4>)
 8000a2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2c:	193b      	adds	r3, r7, r4
 8000a2e:	2200      	movs	r2, #0
 8000a30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	193b      	adds	r3, r7, r4
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a38:	193b      	adds	r3, r7, r4
 8000a3a:	4a10      	ldr	r2, [pc, #64]	; (8000a7c <MX_GPIO_Init+0x19c>)
 8000a3c:	0019      	movs	r1, r3
 8000a3e:	0010      	movs	r0, r2
 8000a40:	f001 fa2e 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LS3_Pin|LS4_Pin;
 8000a44:	0021      	movs	r1, r4
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	22c0      	movs	r2, #192	; 0xc0
 8000a4a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	2200      	movs	r2, #0
 8000a50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	4a05      	ldr	r2, [pc, #20]	; (8000a70 <MX_GPIO_Init+0x190>)
 8000a5c:	0019      	movs	r1, r3
 8000a5e:	0010      	movs	r0, r2
 8000a60:	f001 fa1e 	bl	8001ea0 <HAL_GPIO_Init>

}
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b00b      	add	sp, #44	; 0x2c
 8000a6a:	bd90      	pop	{r4, r7, pc}
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	50000800 	.word	0x50000800
 8000a74:	00008010 	.word	0x00008010
 8000a78:	0000108b 	.word	0x0000108b
 8000a7c:	50000400 	.word	0x50000400
 8000a80:	00000703 	.word	0x00000703
 8000a84:	00008014 	.word	0x00008014

08000a88 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a8c:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <MX_I2C2_Init+0x74>)
 8000a8e:	4a1c      	ldr	r2, [pc, #112]	; (8000b00 <MX_I2C2_Init+0x78>)
 8000a90:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 8000a92:	4b1a      	ldr	r3, [pc, #104]	; (8000afc <MX_I2C2_Init+0x74>)
 8000a94:	4a1b      	ldr	r2, [pc, #108]	; (8000b04 <MX_I2C2_Init+0x7c>)
 8000a96:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a98:	4b18      	ldr	r3, [pc, #96]	; (8000afc <MX_I2C2_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a9e:	4b17      	ldr	r3, [pc, #92]	; (8000afc <MX_I2C2_Init+0x74>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aa4:	4b15      	ldr	r3, [pc, #84]	; (8000afc <MX_I2C2_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000aaa:	4b14      	ldr	r3, [pc, #80]	; (8000afc <MX_I2C2_Init+0x74>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <MX_I2C2_Init+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <MX_I2C2_Init+0x74>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <MX_I2C2_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_I2C2_Init+0x74>)
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f001 fbad 	bl	8002224 <HAL_I2C_Init>
 8000aca:	1e03      	subs	r3, r0, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ace:	f000 fa2d 	bl	8000f2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <MX_I2C2_Init+0x74>)
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f001 fc3a 	bl	8002350 <HAL_I2CEx_ConfigAnalogFilter>
 8000adc:	1e03      	subs	r3, r0, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ae0:	f000 fa24 	bl	8000f2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <MX_I2C2_Init+0x74>)
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f001 fc7d 	bl	80023e8 <HAL_I2CEx_ConfigDigitalFilter>
 8000aee:	1e03      	subs	r3, r0, #0
 8000af0:	d001      	beq.n	8000af6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000af2:	f000 fa1b 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000264 	.word	0x20000264
 8000b00:	40005800 	.word	0x40005800
 8000b04:	10707dbc 	.word	0x10707dbc

08000b08 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b08:	b590      	push	{r4, r7, lr}
 8000b0a:	b09d      	sub	sp, #116	; 0x74
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	235c      	movs	r3, #92	; 0x5c
 8000b12:	18fb      	adds	r3, r7, r3
 8000b14:	0018      	movs	r0, r3
 8000b16:	2314      	movs	r3, #20
 8000b18:	001a      	movs	r2, r3
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	f00a fa10 	bl	800af40 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b20:	2410      	movs	r4, #16
 8000b22:	193b      	adds	r3, r7, r4
 8000b24:	0018      	movs	r0, r3
 8000b26:	234c      	movs	r3, #76	; 0x4c
 8000b28:	001a      	movs	r2, r3
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	f00a fa08 	bl	800af40 <memset>
  if(i2cHandle->Instance==I2C2)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a22      	ldr	r2, [pc, #136]	; (8000bc0 <HAL_I2C_MspInit+0xb8>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d13e      	bne.n	8000bb8 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000b3a:	193b      	adds	r3, r7, r4
 8000b3c:	2240      	movs	r2, #64	; 0x40
 8000b3e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000b40:	193b      	adds	r3, r7, r4
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b46:	193b      	adds	r3, r7, r4
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f004 f855 	bl	8004bf8 <HAL_RCCEx_PeriphCLKConfig>
 8000b4e:	1e03      	subs	r3, r0, #0
 8000b50:	d001      	beq.n	8000b56 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000b52:	f000 f9eb 	bl	8000f2c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b56:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <HAL_I2C_MspInit+0xbc>)
 8000b58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b5a:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <HAL_I2C_MspInit+0xbc>)
 8000b5c:	2102      	movs	r1, #2
 8000b5e:	430a      	orrs	r2, r1
 8000b60:	635a      	str	r2, [r3, #52]	; 0x34
 8000b62:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <HAL_I2C_MspInit+0xbc>)
 8000b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b66:	2202      	movs	r2, #2
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000b6e:	215c      	movs	r1, #92	; 0x5c
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	22c0      	movs	r2, #192	; 0xc0
 8000b74:	01d2      	lsls	r2, r2, #7
 8000b76:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	2212      	movs	r2, #18
 8000b7c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	187b      	adds	r3, r7, r1
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000b8a:	187b      	adds	r3, r7, r1
 8000b8c:	2206      	movs	r2, #6
 8000b8e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	4a0d      	ldr	r2, [pc, #52]	; (8000bc8 <HAL_I2C_MspInit+0xc0>)
 8000b94:	0019      	movs	r1, r3
 8000b96:	0010      	movs	r0, r2
 8000b98:	f001 f982 	bl	8001ea0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b9c:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <HAL_I2C_MspInit+0xbc>)
 8000b9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <HAL_I2C_MspInit+0xbc>)
 8000ba2:	2180      	movs	r1, #128	; 0x80
 8000ba4:	03c9      	lsls	r1, r1, #15
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	63da      	str	r2, [r3, #60]	; 0x3c
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_I2C_MspInit+0xbc>)
 8000bac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	03db      	lsls	r3, r3, #15
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000bb8:	46c0      	nop			; (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b01d      	add	sp, #116	; 0x74
 8000bbe:	bd90      	pop	{r4, r7, pc}
 8000bc0:	40005800 	.word	0x40005800
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	50000400 	.word	0x50000400

08000bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bce:	b0cf      	sub	sp, #316	; 0x13c
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd2:	f000 fd0d 	bl	80015f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd6:	f000 f8c3 	bl	8000d60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bda:	f7ff fe81 	bl	80008e0 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000bde:	f7ff fd2f 	bl	8000640 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000be2:	f7ff fd75 	bl	80006d0 <MX_FDCAN2_Init>
  MX_I2C2_Init();
 8000be6:	f7ff ff4f 	bl	8000a88 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000bea:	f000 f9a5 	bl	8000f38 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000bee:	f000 fab3 	bl	8001158 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000bf2:	f000 faff 	bl	80011f4 <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 8000bf6:	f000 fb4b 	bl	8001290 <MX_USART5_UART_Init>
  MX_USART6_UART_Init();
 8000bfa:	f000 fb7d 	bl	80012f8 <MX_USART6_UART_Init>
  MX_USB_Device_Init();
 8000bfe:	f009 fbf5 	bl	800a3ec <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
	FDCAN_TxHeaderTypeDef can1TxHeader;


	char *cdc_data = "Hello from drv board: CDC Transport!!!\r\n";
 8000c02:	4b50      	ldr	r3, [pc, #320]	; (8000d44 <main+0x178>)
 8000c04:	2298      	movs	r2, #152	; 0x98
 8000c06:	0052      	lsls	r2, r2, #1
 8000c08:	18ba      	adds	r2, r7, r2
 8000c0a:	6013      	str	r3, [r2, #0]
	char *uart_data[64];
	uint8_t can1_data[] = { 1, 2, 3, 4, 5, 6, 7, 8 };
 8000c0c:	4b4e      	ldr	r3, [pc, #312]	; (8000d48 <main+0x17c>)
 8000c0e:	229c      	movs	r2, #156	; 0x9c
 8000c10:	0052      	lsls	r2, r2, #1
 8000c12:	189b      	adds	r3, r3, r2
 8000c14:	19db      	adds	r3, r3, r7
 8000c16:	4a4d      	ldr	r2, [pc, #308]	; (8000d4c <main+0x180>)
 8000c18:	ca03      	ldmia	r2!, {r0, r1}
 8000c1a:	c303      	stmia	r3!, {r0, r1}

	HAL_FDCAN_Start(&hfdcan1);
 8000c1c:	4b4c      	ldr	r3, [pc, #304]	; (8000d50 <main+0x184>)
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f000 ffea 	bl	8001bf8 <HAL_FDCAN_Start>

	can1TxHeader.Identifier = 0x11;
 8000c24:	2184      	movs	r1, #132	; 0x84
 8000c26:	0049      	lsls	r1, r1, #1
 8000c28:	187b      	adds	r3, r7, r1
 8000c2a:	2211      	movs	r2, #17
 8000c2c:	601a      	str	r2, [r3, #0]
	can1TxHeader.IdType = FDCAN_STANDARD_ID;
 8000c2e:	187b      	adds	r3, r7, r1
 8000c30:	2200      	movs	r2, #0
 8000c32:	605a      	str	r2, [r3, #4]
	can1TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000c34:	187b      	adds	r3, r7, r1
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
	can1TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000c3a:	187b      	adds	r3, r7, r1
 8000c3c:	2280      	movs	r2, #128	; 0x80
 8000c3e:	0312      	lsls	r2, r2, #12
 8000c40:	60da      	str	r2, [r3, #12]
	can1TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000c42:	187b      	adds	r3, r7, r1
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
	can1TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000c48:	187b      	adds	r3, r7, r1
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	615a      	str	r2, [r3, #20]
	can1TxHeader.FDFormat = FDCAN_FD_CAN;
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	2280      	movs	r2, #128	; 0x80
 8000c52:	0392      	lsls	r2, r2, #14
 8000c54:	619a      	str	r2, [r3, #24]
	can1TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2200      	movs	r2, #0
 8000c5a:	61da      	str	r2, [r3, #28]
	can1TxHeader.MessageMarker = 0;
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	2200      	movs	r2, #0
 8000c60:	621a      	str	r2, [r3, #32]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		LS_Test();
 8000c62:	f000 f8d9 	bl	8000e18 <LS_Test>
		CDC_Transmit_FS((uint8_t*)cdc_data, strlen(cdc_data));
 8000c66:	2498      	movs	r4, #152	; 0x98
 8000c68:	0064      	lsls	r4, r4, #1
 8000c6a:	193b      	adds	r3, r7, r4
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f7ff fa48 	bl	8000104 <strlen>
 8000c74:	0003      	movs	r3, r0
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	193b      	adds	r3, r7, r4
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	0011      	movs	r1, r2
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f009 fc38 	bl	800a4f4 <CDC_Transmit_FS>
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &can1TxHeader, can1_data);
 8000c84:	003a      	movs	r2, r7
 8000c86:	2384      	movs	r3, #132	; 0x84
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	18f9      	adds	r1, r7, r3
 8000c8c:	4b30      	ldr	r3, [pc, #192]	; (8000d50 <main+0x184>)
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f000 ffd8 	bl	8001c44 <HAL_FDCAN_AddMessageToTxFifoQ>
		for (uint8_t i = 0; i < 4; i++)
 8000c94:	2338      	movs	r3, #56	; 0x38
 8000c96:	33ff      	adds	r3, #255	; 0xff
 8000c98:	18fb      	adds	r3, r7, r3
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	701a      	strb	r2, [r3, #0]
 8000c9e:	e03f      	b.n	8000d20 <main+0x154>
		{
			uint32_t length = sprintf((char*) uart_data, "Hello from drv board: UART Transport [%02d]!!!\r\n", i);
 8000ca0:	2438      	movs	r4, #56	; 0x38
 8000ca2:	34ff      	adds	r4, #255	; 0xff
 8000ca4:	193b      	adds	r3, r7, r4
 8000ca6:	781a      	ldrb	r2, [r3, #0]
 8000ca8:	492a      	ldr	r1, [pc, #168]	; (8000d54 <main+0x188>)
 8000caa:	2508      	movs	r5, #8
 8000cac:	197b      	adds	r3, r7, r5
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f00a f926 	bl	800af00 <siprintf>
 8000cb4:	0003      	movs	r3, r0
 8000cb6:	2696      	movs	r6, #150	; 0x96
 8000cb8:	0076      	lsls	r6, r6, #1
 8000cba:	19ba      	adds	r2, r7, r6
 8000cbc:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(uart_cs_pin[i].port, uart_cs_pin[i].pin,GPIO_PIN_SET);
 8000cbe:	193b      	adds	r3, r7, r4
 8000cc0:	781a      	ldrb	r2, [r3, #0]
 8000cc2:	4b25      	ldr	r3, [pc, #148]	; (8000d58 <main+0x18c>)
 8000cc4:	00d2      	lsls	r2, r2, #3
 8000cc6:	58d0      	ldr	r0, [r2, r3]
 8000cc8:	193b      	adds	r3, r7, r4
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	4a22      	ldr	r2, [pc, #136]	; (8000d58 <main+0x18c>)
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	18d3      	adds	r3, r2, r3
 8000cd2:	3304      	adds	r3, #4
 8000cd4:	881b      	ldrh	r3, [r3, #0]
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	0019      	movs	r1, r3
 8000cda:	f001 fa6a 	bl	80021b2 <HAL_GPIO_WritePin>
			HAL_UART_Transmit(uart_list[i], (uint8_t*) uart_data, length, 100);
 8000cde:	193b      	adds	r3, r7, r4
 8000ce0:	781a      	ldrb	r2, [r3, #0]
 8000ce2:	4b1e      	ldr	r3, [pc, #120]	; (8000d5c <main+0x190>)
 8000ce4:	0092      	lsls	r2, r2, #2
 8000ce6:	58d0      	ldr	r0, [r2, r3]
 8000ce8:	19bb      	adds	r3, r7, r6
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	1979      	adds	r1, r7, r5
 8000cf0:	2364      	movs	r3, #100	; 0x64
 8000cf2:	f004 facb 	bl	800528c <HAL_UART_Transmit>
			HAL_GPIO_WritePin(uart_cs_pin[i].port, uart_cs_pin[i].pin, GPIO_PIN_RESET);
 8000cf6:	193b      	adds	r3, r7, r4
 8000cf8:	781a      	ldrb	r2, [r3, #0]
 8000cfa:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <main+0x18c>)
 8000cfc:	00d2      	lsls	r2, r2, #3
 8000cfe:	58d0      	ldr	r0, [r2, r3]
 8000d00:	193b      	adds	r3, r7, r4
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	4a14      	ldr	r2, [pc, #80]	; (8000d58 <main+0x18c>)
 8000d06:	00db      	lsls	r3, r3, #3
 8000d08:	18d3      	adds	r3, r2, r3
 8000d0a:	3304      	adds	r3, #4
 8000d0c:	881b      	ldrh	r3, [r3, #0]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	0019      	movs	r1, r3
 8000d12:	f001 fa4e 	bl	80021b2 <HAL_GPIO_WritePin>
		for (uint8_t i = 0; i < 4; i++)
 8000d16:	193b      	adds	r3, r7, r4
 8000d18:	781a      	ldrb	r2, [r3, #0]
 8000d1a:	193b      	adds	r3, r7, r4
 8000d1c:	3201      	adds	r2, #1
 8000d1e:	701a      	strb	r2, [r3, #0]
 8000d20:	2338      	movs	r3, #56	; 0x38
 8000d22:	33ff      	adds	r3, #255	; 0xff
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b03      	cmp	r3, #3
 8000d2a:	d9b9      	bls.n	8000ca0 <main+0xd4>
		}
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 8000d2c:	2380      	movs	r3, #128	; 0x80
 8000d2e:	021a      	lsls	r2, r3, #8
 8000d30:	23a0      	movs	r3, #160	; 0xa0
 8000d32:	05db      	lsls	r3, r3, #23
 8000d34:	0011      	movs	r1, r2
 8000d36:	0018      	movs	r0, r3
 8000d38:	f001 fa58 	bl	80021ec <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000d3c:	2064      	movs	r0, #100	; 0x64
 8000d3e:	f000 fcdd 	bl	80016fc <HAL_Delay>
		LS_Test();
 8000d42:	e78e      	b.n	8000c62 <main+0x96>
 8000d44:	0800b864 	.word	0x0800b864
 8000d48:	fffffec8 	.word	0xfffffec8
 8000d4c:	0800b8c4 	.word	0x0800b8c4
 8000d50:	20000198 	.word	0x20000198
 8000d54:	0800b890 	.word	0x0800b890
 8000d58:	20000000 	.word	0x20000000
 8000d5c:	20000020 	.word	0x20000020

08000d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d60:	b590      	push	{r4, r7, lr}
 8000d62:	b095      	sub	sp, #84	; 0x54
 8000d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d66:	2414      	movs	r4, #20
 8000d68:	193b      	adds	r3, r7, r4
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	233c      	movs	r3, #60	; 0x3c
 8000d6e:	001a      	movs	r2, r3
 8000d70:	2100      	movs	r1, #0
 8000d72:	f00a f8e5 	bl	800af40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	0018      	movs	r0, r3
 8000d7a:	2310      	movs	r3, #16
 8000d7c:	001a      	movs	r2, r3
 8000d7e:	2100      	movs	r1, #0
 8000d80:	f00a f8de 	bl	800af40 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d84:	2380      	movs	r3, #128	; 0x80
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f003 f9df 	bl	800414c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_HSI48;
 8000d8e:	193b      	adds	r3, r7, r4
 8000d90:	2221      	movs	r2, #33	; 0x21
 8000d92:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d94:	193b      	adds	r3, r7, r4
 8000d96:	2280      	movs	r2, #128	; 0x80
 8000d98:	0252      	lsls	r2, r2, #9
 8000d9a:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000d9c:	193b      	adds	r3, r7, r4
 8000d9e:	2280      	movs	r2, #128	; 0x80
 8000da0:	03d2      	lsls	r2, r2, #15
 8000da2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da4:	0021      	movs	r1, r4
 8000da6:	187b      	adds	r3, r7, r1
 8000da8:	2202      	movs	r2, #2
 8000daa:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dac:	187b      	adds	r3, r7, r1
 8000dae:	2203      	movs	r2, #3
 8000db0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000db2:	187b      	adds	r3, r7, r1
 8000db4:	2210      	movs	r2, #16
 8000db6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000db8:	187b      	adds	r3, r7, r1
 8000dba:	2220      	movs	r2, #32
 8000dbc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dbe:	187b      	adds	r3, r7, r1
 8000dc0:	2280      	movs	r2, #128	; 0x80
 8000dc2:	0292      	lsls	r2, r2, #10
 8000dc4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	2280      	movs	r2, #128	; 0x80
 8000dca:	0492      	lsls	r2, r2, #18
 8000dcc:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	2280      	movs	r2, #128	; 0x80
 8000dd2:	0592      	lsls	r2, r2, #22
 8000dd4:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd6:	187b      	adds	r3, r7, r1
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f003 fa03 	bl	80041e4 <HAL_RCC_OscConfig>
 8000dde:	1e03      	subs	r3, r0, #0
 8000de0:	d001      	beq.n	8000de6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000de2:	f000 f8a3 	bl	8000f2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2207      	movs	r2, #7
 8000dea:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	2202      	movs	r2, #2
 8000df0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	2102      	movs	r1, #2
 8000e02:	0018      	movs	r0, r3
 8000e04:	f003 fd4e 	bl	80048a4 <HAL_RCC_ClockConfig>
 8000e08:	1e03      	subs	r3, r0, #0
 8000e0a:	d001      	beq.n	8000e10 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000e0c:	f000 f88e 	bl	8000f2c <Error_Handler>
  }
}
 8000e10:	46c0      	nop			; (mov r8, r8)
 8000e12:	46bd      	mov	sp, r7
 8000e14:	b015      	add	sp, #84	; 0x54
 8000e16:	bd90      	pop	{r4, r7, pc}

08000e18 <LS_Test>:

LS4 -> PC7
LS5 -> PA10
*/

static void LS_Test(void) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0

	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_SET) {
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	021b      	lsls	r3, r3, #8
 8000e20:	4a40      	ldr	r2, [pc, #256]	; (8000f24 <LS_Test+0x10c>)
 8000e22:	0019      	movs	r1, r3
 8000e24:	0010      	movs	r0, r2
 8000e26:	f001 f9a7 	bl	8002178 <HAL_GPIO_ReadPin>
 8000e2a:	0003      	movs	r3, r0
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d107      	bne.n	8000e40 <LS_Test+0x28>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000e30:	2380      	movs	r3, #128	; 0x80
 8000e32:	019b      	lsls	r3, r3, #6
 8000e34:	483c      	ldr	r0, [pc, #240]	; (8000f28 <LS_Test+0x110>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	0019      	movs	r1, r3
 8000e3a:	f001 f9ba 	bl	80021b2 <HAL_GPIO_WritePin>
 8000e3e:	e019      	b.n	8000e74 <LS_Test+0x5c>
	} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_SET) {
 8000e40:	2380      	movs	r3, #128	; 0x80
 8000e42:	005a      	lsls	r2, r3, #1
 8000e44:	23a0      	movs	r3, #160	; 0xa0
 8000e46:	05db      	lsls	r3, r3, #23
 8000e48:	0011      	movs	r1, r2
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f001 f994 	bl	8002178 <HAL_GPIO_ReadPin>
 8000e50:	0003      	movs	r3, r0
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d107      	bne.n	8000e66 <LS_Test+0x4e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000e56:	2380      	movs	r3, #128	; 0x80
 8000e58:	019b      	lsls	r3, r3, #6
 8000e5a:	4833      	ldr	r0, [pc, #204]	; (8000f28 <LS_Test+0x110>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	0019      	movs	r1, r3
 8000e60:	f001 f9a7 	bl	80021b2 <HAL_GPIO_WritePin>
 8000e64:	e006      	b.n	8000e74 <LS_Test+0x5c>
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e66:	2380      	movs	r3, #128	; 0x80
 8000e68:	019b      	lsls	r3, r3, #6
 8000e6a:	482f      	ldr	r0, [pc, #188]	; (8000f28 <LS_Test+0x110>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	0019      	movs	r1, r3
 8000e70:	f001 f99f 	bl	80021b2 <HAL_GPIO_WritePin>
	}

	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET) {
 8000e74:	2380      	movs	r3, #128	; 0x80
 8000e76:	009a      	lsls	r2, r3, #2
 8000e78:	23a0      	movs	r3, #160	; 0xa0
 8000e7a:	05db      	lsls	r3, r3, #23
 8000e7c:	0011      	movs	r1, r2
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f001 f97a 	bl	8002178 <HAL_GPIO_ReadPin>
 8000e84:	0003      	movs	r3, r0
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d107      	bne.n	8000e9a <LS_Test+0x82>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8000e8a:	2380      	movs	r3, #128	; 0x80
 8000e8c:	01db      	lsls	r3, r3, #7
 8000e8e:	4826      	ldr	r0, [pc, #152]	; (8000f28 <LS_Test+0x110>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	0019      	movs	r1, r3
 8000e94:	f001 f98d 	bl	80021b2 <HAL_GPIO_WritePin>
 8000e98:	e016      	b.n	8000ec8 <LS_Test+0xb0>
		} else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_SET) {
 8000e9a:	4b23      	ldr	r3, [pc, #140]	; (8000f28 <LS_Test+0x110>)
 8000e9c:	2140      	movs	r1, #64	; 0x40
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f001 f96a 	bl	8002178 <HAL_GPIO_ReadPin>
 8000ea4:	0003      	movs	r3, r0
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d107      	bne.n	8000eba <LS_Test+0xa2>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8000eaa:	2380      	movs	r3, #128	; 0x80
 8000eac:	01db      	lsls	r3, r3, #7
 8000eae:	481e      	ldr	r0, [pc, #120]	; (8000f28 <LS_Test+0x110>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	0019      	movs	r1, r3
 8000eb4:	f001 f97d 	bl	80021b2 <HAL_GPIO_WritePin>
 8000eb8:	e006      	b.n	8000ec8 <LS_Test+0xb0>
		} else {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000eba:	2380      	movs	r3, #128	; 0x80
 8000ebc:	01db      	lsls	r3, r3, #7
 8000ebe:	481a      	ldr	r0, [pc, #104]	; (8000f28 <LS_Test+0x110>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	0019      	movs	r1, r3
 8000ec4:	f001 f975 	bl	80021b2 <HAL_GPIO_WritePin>
		}
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_SET) {
 8000ec8:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <LS_Test+0x110>)
 8000eca:	2180      	movs	r1, #128	; 0x80
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f001 f953 	bl	8002178 <HAL_GPIO_ReadPin>
 8000ed2:	0003      	movs	r3, r0
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d107      	bne.n	8000ee8 <LS_Test+0xd0>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8000ed8:	2380      	movs	r3, #128	; 0x80
 8000eda:	021b      	lsls	r3, r3, #8
 8000edc:	4812      	ldr	r0, [pc, #72]	; (8000f28 <LS_Test+0x110>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	0019      	movs	r1, r3
 8000ee2:	f001 f966 	bl	80021b2 <HAL_GPIO_WritePin>
		} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == GPIO_PIN_SET) {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
		} else {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
		}
}
 8000ee6:	e019      	b.n	8000f1c <LS_Test+0x104>
		} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == GPIO_PIN_SET) {
 8000ee8:	2380      	movs	r3, #128	; 0x80
 8000eea:	00da      	lsls	r2, r3, #3
 8000eec:	23a0      	movs	r3, #160	; 0xa0
 8000eee:	05db      	lsls	r3, r3, #23
 8000ef0:	0011      	movs	r1, r2
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f001 f940 	bl	8002178 <HAL_GPIO_ReadPin>
 8000ef8:	0003      	movs	r3, r0
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d107      	bne.n	8000f0e <LS_Test+0xf6>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	021b      	lsls	r3, r3, #8
 8000f02:	4809      	ldr	r0, [pc, #36]	; (8000f28 <LS_Test+0x110>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	0019      	movs	r1, r3
 8000f08:	f001 f953 	bl	80021b2 <HAL_GPIO_WritePin>
}
 8000f0c:	e006      	b.n	8000f1c <LS_Test+0x104>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8000f0e:	2380      	movs	r3, #128	; 0x80
 8000f10:	021b      	lsls	r3, r3, #8
 8000f12:	4805      	ldr	r0, [pc, #20]	; (8000f28 <LS_Test+0x110>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	0019      	movs	r1, r3
 8000f18:	f001 f94b 	bl	80021b2 <HAL_GPIO_WritePin>
}
 8000f1c:	46c0      	nop			; (mov r8, r8)
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	50000400 	.word	0x50000400
 8000f28:	50000800 	.word	0x50000800

08000f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f30:	b672      	cpsid	i
}
 8000f32:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <Error_Handler+0x8>
	...

08000f38 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <MX_SPI1_Init+0x74>)
 8000f3e:	4a1c      	ldr	r2, [pc, #112]	; (8000fb0 <MX_SPI1_Init+0x78>)
 8000f40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f42:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <MX_SPI1_Init+0x74>)
 8000f44:	2282      	movs	r2, #130	; 0x82
 8000f46:	0052      	lsls	r2, r2, #1
 8000f48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <MX_SPI1_Init+0x74>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f50:	4b16      	ldr	r3, [pc, #88]	; (8000fac <MX_SPI1_Init+0x74>)
 8000f52:	22e0      	movs	r2, #224	; 0xe0
 8000f54:	00d2      	lsls	r2, r2, #3
 8000f56:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <MX_SPI1_Init+0x74>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f5e:	4b13      	ldr	r3, [pc, #76]	; (8000fac <MX_SPI1_Init+0x74>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f64:	4b11      	ldr	r3, [pc, #68]	; (8000fac <MX_SPI1_Init+0x74>)
 8000f66:	2280      	movs	r2, #128	; 0x80
 8000f68:	0092      	lsls	r2, r2, #2
 8000f6a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <MX_SPI1_Init+0x74>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f72:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <MX_SPI1_Init+0x74>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <MX_SPI1_Init+0x74>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <MX_SPI1_Init+0x74>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f84:	4b09      	ldr	r3, [pc, #36]	; (8000fac <MX_SPI1_Init+0x74>)
 8000f86:	2207      	movs	r2, #7
 8000f88:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f8a:	4b08      	ldr	r3, [pc, #32]	; (8000fac <MX_SPI1_Init+0x74>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <MX_SPI1_Init+0x74>)
 8000f92:	2208      	movs	r2, #8
 8000f94:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f96:	4b05      	ldr	r3, [pc, #20]	; (8000fac <MX_SPI1_Init+0x74>)
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f004 f869 	bl	8005070 <HAL_SPI_Init>
 8000f9e:	1e03      	subs	r3, r0, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000fa2:	f7ff ffc3 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	200002b8 	.word	0x200002b8
 8000fb0:	40013000 	.word	0x40013000

08000fb4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000fb4:	b590      	push	{r4, r7, lr}
 8000fb6:	b08b      	sub	sp, #44	; 0x2c
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	2414      	movs	r4, #20
 8000fbe:	193b      	adds	r3, r7, r4
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	2314      	movs	r3, #20
 8000fc4:	001a      	movs	r2, r3
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	f009 ffba 	bl	800af40 <memset>
  if(spiHandle->Instance==SPI1)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a1b      	ldr	r2, [pc, #108]	; (8001040 <HAL_SPI_MspInit+0x8c>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d130      	bne.n	8001038 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fd6:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <HAL_SPI_MspInit+0x90>)
 8000fd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fda:	4b1a      	ldr	r3, [pc, #104]	; (8001044 <HAL_SPI_MspInit+0x90>)
 8000fdc:	2180      	movs	r1, #128	; 0x80
 8000fde:	0149      	lsls	r1, r1, #5
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	641a      	str	r2, [r3, #64]	; 0x40
 8000fe4:	4b17      	ldr	r3, [pc, #92]	; (8001044 <HAL_SPI_MspInit+0x90>)
 8000fe6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fe8:	2380      	movs	r3, #128	; 0x80
 8000fea:	015b      	lsls	r3, r3, #5
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff2:	4b14      	ldr	r3, [pc, #80]	; (8001044 <HAL_SPI_MspInit+0x90>)
 8000ff4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ff6:	4b13      	ldr	r3, [pc, #76]	; (8001044 <HAL_SPI_MspInit+0x90>)
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	430a      	orrs	r2, r1
 8000ffc:	635a      	str	r2, [r3, #52]	; 0x34
 8000ffe:	4b11      	ldr	r3, [pc, #68]	; (8001044 <HAL_SPI_MspInit+0x90>)
 8001000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001002:	2201      	movs	r2, #1
 8001004:	4013      	ands	r3, r2
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800100a:	0021      	movs	r1, r4
 800100c:	187b      	adds	r3, r7, r1
 800100e:	22e0      	movs	r2, #224	; 0xe0
 8001010:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	187b      	adds	r3, r7, r1
 8001014:	2202      	movs	r2, #2
 8001016:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	187b      	adds	r3, r7, r1
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	187b      	adds	r3, r7, r1
 8001020:	2200      	movs	r2, #0
 8001022:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001024:	187b      	adds	r3, r7, r1
 8001026:	2200      	movs	r2, #0
 8001028:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102a:	187a      	adds	r2, r7, r1
 800102c:	23a0      	movs	r3, #160	; 0xa0
 800102e:	05db      	lsls	r3, r3, #23
 8001030:	0011      	movs	r1, r2
 8001032:	0018      	movs	r0, r3
 8001034:	f000 ff34 	bl	8001ea0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001038:	46c0      	nop			; (mov r8, r8)
 800103a:	46bd      	mov	sp, r7
 800103c:	b00b      	add	sp, #44	; 0x2c
 800103e:	bd90      	pop	{r4, r7, pc}
 8001040:	40013000 	.word	0x40013000
 8001044:	40021000 	.word	0x40021000

08001048 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <HAL_MspInit+0x4c>)
 8001050:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <HAL_MspInit+0x4c>)
 8001054:	2101      	movs	r1, #1
 8001056:	430a      	orrs	r2, r1
 8001058:	641a      	str	r2, [r3, #64]	; 0x40
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <HAL_MspInit+0x4c>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	2201      	movs	r2, #1
 8001060:	4013      	ands	r3, r2
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001066:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <HAL_MspInit+0x4c>)
 8001068:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <HAL_MspInit+0x4c>)
 800106c:	2180      	movs	r1, #128	; 0x80
 800106e:	0549      	lsls	r1, r1, #21
 8001070:	430a      	orrs	r2, r1
 8001072:	63da      	str	r2, [r3, #60]	; 0x3c
 8001074:	4b07      	ldr	r3, [pc, #28]	; (8001094 <HAL_MspInit+0x4c>)
 8001076:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001078:	2380      	movs	r3, #128	; 0x80
 800107a:	055b      	lsls	r3, r3, #21
 800107c:	4013      	ands	r3, r2
 800107e:	603b      	str	r3, [r7, #0]
 8001080:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8001082:	23c0      	movs	r3, #192	; 0xc0
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	0018      	movs	r0, r3
 8001088:	f000 fb5c 	bl	8001744 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800108c:	46c0      	nop			; (mov r8, r8)
 800108e:	46bd      	mov	sp, r7
 8001090:	b002      	add	sp, #8
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40021000 	.word	0x40021000

08001098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800109c:	e7fe      	b.n	800109c <NMI_Handler+0x4>

0800109e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a2:	e7fe      	b.n	80010a2 <HardFault_Handler+0x4>

080010a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010a8:	46c0      	nop			; (mov r8, r8)
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b2:	46c0      	nop			; (mov r8, r8)
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010bc:	f000 fb02 	bl	80016c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c0:	46c0      	nop			; (mov r8, r8)
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <USB_UCPD1_2_IRQHandler>:

/**
  * @brief This function handles USB, UCPD1 and UCPD2 global interrupts.
  */
void USB_UCPD1_2_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_UCPD1_2_IRQn 0 */

  /* USER CODE END USB_UCPD1_2_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 80010cc:	4b03      	ldr	r3, [pc, #12]	; (80010dc <USB_UCPD1_2_IRQHandler+0x14>)
 80010ce:	0018      	movs	r0, r3
 80010d0:	f001 fb7c 	bl	80027cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_UCPD1_2_IRQn 1 */

  /* USER CODE END USB_UCPD1_2_IRQn 1 */
}
 80010d4:	46c0      	nop			; (mov r8, r8)
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	20001454 	.word	0x20001454

080010e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e8:	4a14      	ldr	r2, [pc, #80]	; (800113c <_sbrk+0x5c>)
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <_sbrk+0x60>)
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f4:	4b13      	ldr	r3, [pc, #76]	; (8001144 <_sbrk+0x64>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d102      	bne.n	8001102 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <_sbrk+0x64>)
 80010fe:	4a12      	ldr	r2, [pc, #72]	; (8001148 <_sbrk+0x68>)
 8001100:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001102:	4b10      	ldr	r3, [pc, #64]	; (8001144 <_sbrk+0x64>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	18d3      	adds	r3, r2, r3
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	429a      	cmp	r2, r3
 800110e:	d207      	bcs.n	8001120 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001110:	f009 ff1e 	bl	800af50 <__errno>
 8001114:	0003      	movs	r3, r0
 8001116:	220c      	movs	r2, #12
 8001118:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800111a:	2301      	movs	r3, #1
 800111c:	425b      	negs	r3, r3
 800111e:	e009      	b.n	8001134 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <_sbrk+0x64>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001126:	4b07      	ldr	r3, [pc, #28]	; (8001144 <_sbrk+0x64>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	18d2      	adds	r2, r2, r3
 800112e:	4b05      	ldr	r3, [pc, #20]	; (8001144 <_sbrk+0x64>)
 8001130:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001132:	68fb      	ldr	r3, [r7, #12]
}
 8001134:	0018      	movs	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	b006      	add	sp, #24
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20024000 	.word	0x20024000
 8001140:	00004000 	.word	0x00004000
 8001144:	2000031c 	.word	0x2000031c
 8001148:	20001ac8 	.word	0x20001ac8

0800114c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001150:	46c0      	nop			; (mov r8, r8)
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800115c:	4b23      	ldr	r3, [pc, #140]	; (80011ec <MX_USART2_UART_Init+0x94>)
 800115e:	4a24      	ldr	r2, [pc, #144]	; (80011f0 <MX_USART2_UART_Init+0x98>)
 8001160:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001162:	4b22      	ldr	r3, [pc, #136]	; (80011ec <MX_USART2_UART_Init+0x94>)
 8001164:	22e1      	movs	r2, #225	; 0xe1
 8001166:	0252      	lsls	r2, r2, #9
 8001168:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800116a:	4b20      	ldr	r3, [pc, #128]	; (80011ec <MX_USART2_UART_Init+0x94>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001170:	4b1e      	ldr	r3, [pc, #120]	; (80011ec <MX_USART2_UART_Init+0x94>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001176:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <MX_USART2_UART_Init+0x94>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800117c:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <MX_USART2_UART_Init+0x94>)
 800117e:	220c      	movs	r2, #12
 8001180:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001182:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <MX_USART2_UART_Init+0x94>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001188:	4b18      	ldr	r3, [pc, #96]	; (80011ec <MX_USART2_UART_Init+0x94>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800118e:	4b17      	ldr	r3, [pc, #92]	; (80011ec <MX_USART2_UART_Init+0x94>)
 8001190:	2200      	movs	r2, #0
 8001192:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001194:	4b15      	ldr	r3, [pc, #84]	; (80011ec <MX_USART2_UART_Init+0x94>)
 8001196:	2200      	movs	r2, #0
 8001198:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800119a:	4b14      	ldr	r3, [pc, #80]	; (80011ec <MX_USART2_UART_Init+0x94>)
 800119c:	2200      	movs	r2, #0
 800119e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011a0:	4b12      	ldr	r3, [pc, #72]	; (80011ec <MX_USART2_UART_Init+0x94>)
 80011a2:	0018      	movs	r0, r3
 80011a4:	f004 f81c 	bl	80051e0 <HAL_UART_Init>
 80011a8:	1e03      	subs	r3, r0, #0
 80011aa:	d001      	beq.n	80011b0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80011ac:	f7ff febe 	bl	8000f2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <MX_USART2_UART_Init+0x94>)
 80011b2:	2100      	movs	r1, #0
 80011b4:	0018      	movs	r0, r3
 80011b6:	f004 fe5f 	bl	8005e78 <HAL_UARTEx_SetTxFifoThreshold>
 80011ba:	1e03      	subs	r3, r0, #0
 80011bc:	d001      	beq.n	80011c2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80011be:	f7ff feb5 	bl	8000f2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <MX_USART2_UART_Init+0x94>)
 80011c4:	2100      	movs	r1, #0
 80011c6:	0018      	movs	r0, r3
 80011c8:	f004 fe96 	bl	8005ef8 <HAL_UARTEx_SetRxFifoThreshold>
 80011cc:	1e03      	subs	r3, r0, #0
 80011ce:	d001      	beq.n	80011d4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80011d0:	f7ff feac 	bl	8000f2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <MX_USART2_UART_Init+0x94>)
 80011d6:	0018      	movs	r0, r3
 80011d8:	f004 fe14 	bl	8005e04 <HAL_UARTEx_DisableFifoMode>
 80011dc:	1e03      	subs	r3, r0, #0
 80011de:	d001      	beq.n	80011e4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80011e0:	f7ff fea4 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011e4:	46c0      	nop			; (mov r8, r8)
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	20000320 	.word	0x20000320
 80011f0:	40004400 	.word	0x40004400

080011f4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011f8:	4b23      	ldr	r3, [pc, #140]	; (8001288 <MX_USART3_UART_Init+0x94>)
 80011fa:	4a24      	ldr	r2, [pc, #144]	; (800128c <MX_USART3_UART_Init+0x98>)
 80011fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011fe:	4b22      	ldr	r3, [pc, #136]	; (8001288 <MX_USART3_UART_Init+0x94>)
 8001200:	22e1      	movs	r2, #225	; 0xe1
 8001202:	0252      	lsls	r2, r2, #9
 8001204:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001206:	4b20      	ldr	r3, [pc, #128]	; (8001288 <MX_USART3_UART_Init+0x94>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800120c:	4b1e      	ldr	r3, [pc, #120]	; (8001288 <MX_USART3_UART_Init+0x94>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001212:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <MX_USART3_UART_Init+0x94>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001218:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <MX_USART3_UART_Init+0x94>)
 800121a:	220c      	movs	r2, #12
 800121c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121e:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <MX_USART3_UART_Init+0x94>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001224:	4b18      	ldr	r3, [pc, #96]	; (8001288 <MX_USART3_UART_Init+0x94>)
 8001226:	2200      	movs	r2, #0
 8001228:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800122a:	4b17      	ldr	r3, [pc, #92]	; (8001288 <MX_USART3_UART_Init+0x94>)
 800122c:	2200      	movs	r2, #0
 800122e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001230:	4b15      	ldr	r3, [pc, #84]	; (8001288 <MX_USART3_UART_Init+0x94>)
 8001232:	2200      	movs	r2, #0
 8001234:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001236:	4b14      	ldr	r3, [pc, #80]	; (8001288 <MX_USART3_UART_Init+0x94>)
 8001238:	2200      	movs	r2, #0
 800123a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <MX_USART3_UART_Init+0x94>)
 800123e:	0018      	movs	r0, r3
 8001240:	f003 ffce 	bl	80051e0 <HAL_UART_Init>
 8001244:	1e03      	subs	r3, r0, #0
 8001246:	d001      	beq.n	800124c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001248:	f7ff fe70 	bl	8000f2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800124c:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <MX_USART3_UART_Init+0x94>)
 800124e:	2100      	movs	r1, #0
 8001250:	0018      	movs	r0, r3
 8001252:	f004 fe11 	bl	8005e78 <HAL_UARTEx_SetTxFifoThreshold>
 8001256:	1e03      	subs	r3, r0, #0
 8001258:	d001      	beq.n	800125e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800125a:	f7ff fe67 	bl	8000f2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800125e:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <MX_USART3_UART_Init+0x94>)
 8001260:	2100      	movs	r1, #0
 8001262:	0018      	movs	r0, r3
 8001264:	f004 fe48 	bl	8005ef8 <HAL_UARTEx_SetRxFifoThreshold>
 8001268:	1e03      	subs	r3, r0, #0
 800126a:	d001      	beq.n	8001270 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800126c:	f7ff fe5e 	bl	8000f2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <MX_USART3_UART_Init+0x94>)
 8001272:	0018      	movs	r0, r3
 8001274:	f004 fdc6 	bl	8005e04 <HAL_UARTEx_DisableFifoMode>
 8001278:	1e03      	subs	r3, r0, #0
 800127a:	d001      	beq.n	8001280 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800127c:	f7ff fe56 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001280:	46c0      	nop			; (mov r8, r8)
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	200003b4 	.word	0x200003b4
 800128c:	40004800 	.word	0x40004800

08001290 <MX_USART5_UART_Init>:
/* USART5 init function */

void MX_USART5_UART_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8001294:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <MX_USART5_UART_Init+0x60>)
 8001296:	4a17      	ldr	r2, [pc, #92]	; (80012f4 <MX_USART5_UART_Init+0x64>)
 8001298:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <MX_USART5_UART_Init+0x60>)
 800129c:	22e1      	movs	r2, #225	; 0xe1
 800129e:	0252      	lsls	r2, r2, #9
 80012a0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <MX_USART5_UART_Init+0x60>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_USART5_UART_Init+0x60>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80012ae:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <MX_USART5_UART_Init+0x60>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80012b4:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_USART5_UART_Init+0x60>)
 80012b6:	220c      	movs	r2, #12
 80012b8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ba:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <MX_USART5_UART_Init+0x60>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c0:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <MX_USART5_UART_Init+0x60>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012c6:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <MX_USART5_UART_Init+0x60>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <MX_USART5_UART_Init+0x60>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012d2:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <MX_USART5_UART_Init+0x60>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80012d8:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <MX_USART5_UART_Init+0x60>)
 80012da:	0018      	movs	r0, r3
 80012dc:	f003 ff80 	bl	80051e0 <HAL_UART_Init>
 80012e0:	1e03      	subs	r3, r0, #0
 80012e2:	d001      	beq.n	80012e8 <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 80012e4:	f7ff fe22 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 80012e8:	46c0      	nop			; (mov r8, r8)
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	46c0      	nop			; (mov r8, r8)
 80012f0:	20000448 	.word	0x20000448
 80012f4:	40005000 	.word	0x40005000

080012f8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80012fc:	4b16      	ldr	r3, [pc, #88]	; (8001358 <MX_USART6_UART_Init+0x60>)
 80012fe:	4a17      	ldr	r2, [pc, #92]	; (800135c <MX_USART6_UART_Init+0x64>)
 8001300:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <MX_USART6_UART_Init+0x60>)
 8001304:	22e1      	movs	r2, #225	; 0xe1
 8001306:	0252      	lsls	r2, r2, #9
 8001308:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800130a:	4b13      	ldr	r3, [pc, #76]	; (8001358 <MX_USART6_UART_Init+0x60>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001310:	4b11      	ldr	r3, [pc, #68]	; (8001358 <MX_USART6_UART_Init+0x60>)
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <MX_USART6_UART_Init+0x60>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MX_USART6_UART_Init+0x60>)
 800131e:	220c      	movs	r2, #12
 8001320:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001322:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <MX_USART6_UART_Init+0x60>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <MX_USART6_UART_Init+0x60>)
 800132a:	2200      	movs	r2, #0
 800132c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800132e:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <MX_USART6_UART_Init+0x60>)
 8001330:	2200      	movs	r2, #0
 8001332:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <MX_USART6_UART_Init+0x60>)
 8001336:	2200      	movs	r2, #0
 8001338:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800133a:	4b07      	ldr	r3, [pc, #28]	; (8001358 <MX_USART6_UART_Init+0x60>)
 800133c:	2200      	movs	r2, #0
 800133e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001340:	4b05      	ldr	r3, [pc, #20]	; (8001358 <MX_USART6_UART_Init+0x60>)
 8001342:	0018      	movs	r0, r3
 8001344:	f003 ff4c 	bl	80051e0 <HAL_UART_Init>
 8001348:	1e03      	subs	r3, r0, #0
 800134a:	d001      	beq.n	8001350 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 800134c:	f7ff fdee 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001350:	46c0      	nop			; (mov r8, r8)
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	200004dc 	.word	0x200004dc
 800135c:	40013c00 	.word	0x40013c00

08001360 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b0a3      	sub	sp, #140	; 0x8c
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	2374      	movs	r3, #116	; 0x74
 800136a:	18fb      	adds	r3, r7, r3
 800136c:	0018      	movs	r0, r3
 800136e:	2314      	movs	r3, #20
 8001370:	001a      	movs	r2, r3
 8001372:	2100      	movs	r1, #0
 8001374:	f009 fde4 	bl	800af40 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001378:	2428      	movs	r4, #40	; 0x28
 800137a:	193b      	adds	r3, r7, r4
 800137c:	0018      	movs	r0, r3
 800137e:	234c      	movs	r3, #76	; 0x4c
 8001380:	001a      	movs	r2, r3
 8001382:	2100      	movs	r1, #0
 8001384:	f009 fddc 	bl	800af40 <memset>
  if(uartHandle->Instance==USART2)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a7c      	ldr	r2, [pc, #496]	; (8001580 <HAL_UART_MspInit+0x220>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d13f      	bne.n	8001412 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001392:	193b      	adds	r3, r7, r4
 8001394:	2202      	movs	r2, #2
 8001396:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001398:	193b      	adds	r3, r7, r4
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800139e:	193b      	adds	r3, r7, r4
 80013a0:	0018      	movs	r0, r3
 80013a2:	f003 fc29 	bl	8004bf8 <HAL_RCCEx_PeriphCLKConfig>
 80013a6:	1e03      	subs	r3, r0, #0
 80013a8:	d001      	beq.n	80013ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80013aa:	f7ff fdbf 	bl	8000f2c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013ae:	4b75      	ldr	r3, [pc, #468]	; (8001584 <HAL_UART_MspInit+0x224>)
 80013b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013b2:	4b74      	ldr	r3, [pc, #464]	; (8001584 <HAL_UART_MspInit+0x224>)
 80013b4:	2180      	movs	r1, #128	; 0x80
 80013b6:	0289      	lsls	r1, r1, #10
 80013b8:	430a      	orrs	r2, r1
 80013ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80013bc:	4b71      	ldr	r3, [pc, #452]	; (8001584 <HAL_UART_MspInit+0x224>)
 80013be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013c0:	2380      	movs	r3, #128	; 0x80
 80013c2:	029b      	lsls	r3, r3, #10
 80013c4:	4013      	ands	r3, r2
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
 80013c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	4b6e      	ldr	r3, [pc, #440]	; (8001584 <HAL_UART_MspInit+0x224>)
 80013cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013ce:	4b6d      	ldr	r3, [pc, #436]	; (8001584 <HAL_UART_MspInit+0x224>)
 80013d0:	2101      	movs	r1, #1
 80013d2:	430a      	orrs	r2, r1
 80013d4:	635a      	str	r2, [r3, #52]	; 0x34
 80013d6:	4b6b      	ldr	r3, [pc, #428]	; (8001584 <HAL_UART_MspInit+0x224>)
 80013d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013da:	2201      	movs	r2, #1
 80013dc:	4013      	ands	r3, r2
 80013de:	623b      	str	r3, [r7, #32]
 80013e0:	6a3b      	ldr	r3, [r7, #32]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013e2:	2174      	movs	r1, #116	; 0x74
 80013e4:	187b      	adds	r3, r7, r1
 80013e6:	220c      	movs	r2, #12
 80013e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	187b      	adds	r3, r7, r1
 80013ec:	2202      	movs	r2, #2
 80013ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	187b      	adds	r3, r7, r1
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f6:	187b      	adds	r3, r7, r1
 80013f8:	2200      	movs	r2, #0
 80013fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80013fc:	187b      	adds	r3, r7, r1
 80013fe:	2201      	movs	r2, #1
 8001400:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001402:	187a      	adds	r2, r7, r1
 8001404:	23a0      	movs	r3, #160	; 0xa0
 8001406:	05db      	lsls	r3, r3, #23
 8001408:	0011      	movs	r1, r2
 800140a:	0018      	movs	r0, r3
 800140c:	f000 fd48 	bl	8001ea0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001410:	e0b1      	b.n	8001576 <HAL_UART_MspInit+0x216>
  else if(uartHandle->Instance==USART3)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a5c      	ldr	r2, [pc, #368]	; (8001588 <HAL_UART_MspInit+0x228>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d140      	bne.n	800149e <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800141c:	2128      	movs	r1, #40	; 0x28
 800141e:	187b      	adds	r3, r7, r1
 8001420:	2204      	movs	r2, #4
 8001422:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001424:	187b      	adds	r3, r7, r1
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800142a:	187b      	adds	r3, r7, r1
 800142c:	0018      	movs	r0, r3
 800142e:	f003 fbe3 	bl	8004bf8 <HAL_RCCEx_PeriphCLKConfig>
 8001432:	1e03      	subs	r3, r0, #0
 8001434:	d001      	beq.n	800143a <HAL_UART_MspInit+0xda>
      Error_Handler();
 8001436:	f7ff fd79 	bl	8000f2c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800143a:	4b52      	ldr	r3, [pc, #328]	; (8001584 <HAL_UART_MspInit+0x224>)
 800143c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800143e:	4b51      	ldr	r3, [pc, #324]	; (8001584 <HAL_UART_MspInit+0x224>)
 8001440:	2180      	movs	r1, #128	; 0x80
 8001442:	02c9      	lsls	r1, r1, #11
 8001444:	430a      	orrs	r2, r1
 8001446:	63da      	str	r2, [r3, #60]	; 0x3c
 8001448:	4b4e      	ldr	r3, [pc, #312]	; (8001584 <HAL_UART_MspInit+0x224>)
 800144a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800144c:	2380      	movs	r3, #128	; 0x80
 800144e:	02db      	lsls	r3, r3, #11
 8001450:	4013      	ands	r3, r2
 8001452:	61fb      	str	r3, [r7, #28]
 8001454:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001456:	4b4b      	ldr	r3, [pc, #300]	; (8001584 <HAL_UART_MspInit+0x224>)
 8001458:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800145a:	4b4a      	ldr	r3, [pc, #296]	; (8001584 <HAL_UART_MspInit+0x224>)
 800145c:	2102      	movs	r1, #2
 800145e:	430a      	orrs	r2, r1
 8001460:	635a      	str	r2, [r3, #52]	; 0x34
 8001462:	4b48      	ldr	r3, [pc, #288]	; (8001584 <HAL_UART_MspInit+0x224>)
 8001464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001466:	2202      	movs	r2, #2
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
 800146c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800146e:	2174      	movs	r1, #116	; 0x74
 8001470:	187b      	adds	r3, r7, r1
 8001472:	22c0      	movs	r2, #192	; 0xc0
 8001474:	0112      	lsls	r2, r2, #4
 8001476:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001478:	187b      	adds	r3, r7, r1
 800147a:	2202      	movs	r2, #2
 800147c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	187b      	adds	r3, r7, r1
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001484:	187b      	adds	r3, r7, r1
 8001486:	2200      	movs	r2, #0
 8001488:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800148a:	187b      	adds	r3, r7, r1
 800148c:	2204      	movs	r2, #4
 800148e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001490:	187b      	adds	r3, r7, r1
 8001492:	4a3e      	ldr	r2, [pc, #248]	; (800158c <HAL_UART_MspInit+0x22c>)
 8001494:	0019      	movs	r1, r3
 8001496:	0010      	movs	r0, r2
 8001498:	f000 fd02 	bl	8001ea0 <HAL_GPIO_Init>
}
 800149c:	e06b      	b.n	8001576 <HAL_UART_MspInit+0x216>
  else if(uartHandle->Instance==USART5)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a3b      	ldr	r2, [pc, #236]	; (8001590 <HAL_UART_MspInit+0x230>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d130      	bne.n	800150a <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART5_CLK_ENABLE();
 80014a8:	4b36      	ldr	r3, [pc, #216]	; (8001584 <HAL_UART_MspInit+0x224>)
 80014aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014ac:	4b35      	ldr	r3, [pc, #212]	; (8001584 <HAL_UART_MspInit+0x224>)
 80014ae:	2180      	movs	r1, #128	; 0x80
 80014b0:	0049      	lsls	r1, r1, #1
 80014b2:	430a      	orrs	r2, r1
 80014b4:	63da      	str	r2, [r3, #60]	; 0x3c
 80014b6:	4b33      	ldr	r3, [pc, #204]	; (8001584 <HAL_UART_MspInit+0x224>)
 80014b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014ba:	2380      	movs	r3, #128	; 0x80
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	4013      	ands	r3, r2
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c4:	4b2f      	ldr	r3, [pc, #188]	; (8001584 <HAL_UART_MspInit+0x224>)
 80014c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014c8:	4b2e      	ldr	r3, [pc, #184]	; (8001584 <HAL_UART_MspInit+0x224>)
 80014ca:	2108      	movs	r1, #8
 80014cc:	430a      	orrs	r2, r1
 80014ce:	635a      	str	r2, [r3, #52]	; 0x34
 80014d0:	4b2c      	ldr	r3, [pc, #176]	; (8001584 <HAL_UART_MspInit+0x224>)
 80014d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d4:	2208      	movs	r2, #8
 80014d6:	4013      	ands	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014dc:	2174      	movs	r1, #116	; 0x74
 80014de:	187b      	adds	r3, r7, r1
 80014e0:	220c      	movs	r2, #12
 80014e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	187b      	adds	r3, r7, r1
 80014e6:	2202      	movs	r2, #2
 80014e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	187b      	adds	r3, r7, r1
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f0:	187b      	adds	r3, r7, r1
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 80014f6:	187b      	adds	r3, r7, r1
 80014f8:	2203      	movs	r2, #3
 80014fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014fc:	187b      	adds	r3, r7, r1
 80014fe:	4a25      	ldr	r2, [pc, #148]	; (8001594 <HAL_UART_MspInit+0x234>)
 8001500:	0019      	movs	r1, r3
 8001502:	0010      	movs	r0, r2
 8001504:	f000 fccc 	bl	8001ea0 <HAL_GPIO_Init>
}
 8001508:	e035      	b.n	8001576 <HAL_UART_MspInit+0x216>
  else if(uartHandle->Instance==USART6)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a22      	ldr	r2, [pc, #136]	; (8001598 <HAL_UART_MspInit+0x238>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d130      	bne.n	8001576 <HAL_UART_MspInit+0x216>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <HAL_UART_MspInit+0x224>)
 8001516:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001518:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <HAL_UART_MspInit+0x224>)
 800151a:	2180      	movs	r1, #128	; 0x80
 800151c:	0089      	lsls	r1, r1, #2
 800151e:	430a      	orrs	r2, r1
 8001520:	63da      	str	r2, [r3, #60]	; 0x3c
 8001522:	4b18      	ldr	r3, [pc, #96]	; (8001584 <HAL_UART_MspInit+0x224>)
 8001524:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001526:	2380      	movs	r3, #128	; 0x80
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4013      	ands	r3, r2
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001530:	4b14      	ldr	r3, [pc, #80]	; (8001584 <HAL_UART_MspInit+0x224>)
 8001532:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001534:	4b13      	ldr	r3, [pc, #76]	; (8001584 <HAL_UART_MspInit+0x224>)
 8001536:	2102      	movs	r1, #2
 8001538:	430a      	orrs	r2, r1
 800153a:	635a      	str	r2, [r3, #52]	; 0x34
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <HAL_UART_MspInit+0x224>)
 800153e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001540:	2202      	movs	r2, #2
 8001542:	4013      	ands	r3, r2
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001548:	2174      	movs	r1, #116	; 0x74
 800154a:	187b      	adds	r3, r7, r1
 800154c:	22c0      	movs	r2, #192	; 0xc0
 800154e:	0092      	lsls	r2, r2, #2
 8001550:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	187b      	adds	r3, r7, r1
 8001554:	2202      	movs	r2, #2
 8001556:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	187b      	adds	r3, r7, r1
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	187b      	adds	r3, r7, r1
 8001560:	2200      	movs	r2, #0
 8001562:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001564:	187b      	adds	r3, r7, r1
 8001566:	2208      	movs	r2, #8
 8001568:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156a:	187b      	adds	r3, r7, r1
 800156c:	4a07      	ldr	r2, [pc, #28]	; (800158c <HAL_UART_MspInit+0x22c>)
 800156e:	0019      	movs	r1, r3
 8001570:	0010      	movs	r0, r2
 8001572:	f000 fc95 	bl	8001ea0 <HAL_GPIO_Init>
}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	46bd      	mov	sp, r7
 800157a:	b023      	add	sp, #140	; 0x8c
 800157c:	bd90      	pop	{r4, r7, pc}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	40004400 	.word	0x40004400
 8001584:	40021000 	.word	0x40021000
 8001588:	40004800 	.word	0x40004800
 800158c:	50000400 	.word	0x50000400
 8001590:	40005000 	.word	0x40005000
 8001594:	50000c00 	.word	0x50000c00
 8001598:	40013c00 	.word	0x40013c00

0800159c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800159c:	480d      	ldr	r0, [pc, #52]	; (80015d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800159e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80015a0:	f7ff fdd4 	bl	800114c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015a4:	480c      	ldr	r0, [pc, #48]	; (80015d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80015a6:	490d      	ldr	r1, [pc, #52]	; (80015dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80015a8:	4a0d      	ldr	r2, [pc, #52]	; (80015e0 <LoopForever+0xe>)
  movs r3, #0
 80015aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015ac:	e002      	b.n	80015b4 <LoopCopyDataInit>

080015ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015b2:	3304      	adds	r3, #4

080015b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b8:	d3f9      	bcc.n	80015ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ba:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015bc:	4c0a      	ldr	r4, [pc, #40]	; (80015e8 <LoopForever+0x16>)
  movs r3, #0
 80015be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c0:	e001      	b.n	80015c6 <LoopFillZerobss>

080015c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c4:	3204      	adds	r2, #4

080015c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c8:	d3fb      	bcc.n	80015c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80015ca:	f009 fcc7 	bl	800af5c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80015ce:	f7ff fafd 	bl	8000bcc <main>

080015d2 <LoopForever>:

LoopForever:
  b LoopForever
 80015d2:	e7fe      	b.n	80015d2 <LoopForever>
  ldr   r0, =_estack
 80015d4:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80015d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015dc:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80015e0:	0800bacc 	.word	0x0800bacc
  ldr r2, =_sbss
 80015e4:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80015e8:	20001ac4 	.word	0x20001ac4

080015ec <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015ec:	e7fe      	b.n	80015ec <ADC1_COMP_IRQHandler>
	...

080015f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015f6:	1dfb      	adds	r3, r7, #7
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_Init+0x3c>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4b0a      	ldr	r3, [pc, #40]	; (800162c <HAL_Init+0x3c>)
 8001602:	2180      	movs	r1, #128	; 0x80
 8001604:	0049      	lsls	r1, r1, #1
 8001606:	430a      	orrs	r2, r1
 8001608:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800160a:	2003      	movs	r0, #3
 800160c:	f000 f810 	bl	8001630 <HAL_InitTick>
 8001610:	1e03      	subs	r3, r0, #0
 8001612:	d003      	beq.n	800161c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001614:	1dfb      	adds	r3, r7, #7
 8001616:	2201      	movs	r2, #1
 8001618:	701a      	strb	r2, [r3, #0]
 800161a:	e001      	b.n	8001620 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800161c:	f7ff fd14 	bl	8001048 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001620:	1dfb      	adds	r3, r7, #7
 8001622:	781b      	ldrb	r3, [r3, #0]
}
 8001624:	0018      	movs	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	b002      	add	sp, #8
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40022000 	.word	0x40022000

08001630 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001630:	b590      	push	{r4, r7, lr}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001638:	230f      	movs	r3, #15
 800163a:	18fb      	adds	r3, r7, r3
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001640:	4b1d      	ldr	r3, [pc, #116]	; (80016b8 <HAL_InitTick+0x88>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d02b      	beq.n	80016a0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001648:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <HAL_InitTick+0x8c>)
 800164a:	681c      	ldr	r4, [r3, #0]
 800164c:	4b1a      	ldr	r3, [pc, #104]	; (80016b8 <HAL_InitTick+0x88>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	0019      	movs	r1, r3
 8001652:	23fa      	movs	r3, #250	; 0xfa
 8001654:	0098      	lsls	r0, r3, #2
 8001656:	f7fe fd67 	bl	8000128 <__udivsi3>
 800165a:	0003      	movs	r3, r0
 800165c:	0019      	movs	r1, r3
 800165e:	0020      	movs	r0, r4
 8001660:	f7fe fd62 	bl	8000128 <__udivsi3>
 8001664:	0003      	movs	r3, r0
 8001666:	0018      	movs	r0, r3
 8001668:	f000 f953 	bl	8001912 <HAL_SYSTICK_Config>
 800166c:	1e03      	subs	r3, r0, #0
 800166e:	d112      	bne.n	8001696 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b03      	cmp	r3, #3
 8001674:	d80a      	bhi.n	800168c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	2301      	movs	r3, #1
 800167a:	425b      	negs	r3, r3
 800167c:	2200      	movs	r2, #0
 800167e:	0018      	movs	r0, r3
 8001680:	f000 f922 	bl	80018c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001684:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <HAL_InitTick+0x90>)
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	e00d      	b.n	80016a8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800168c:	230f      	movs	r3, #15
 800168e:	18fb      	adds	r3, r7, r3
 8001690:	2201      	movs	r2, #1
 8001692:	701a      	strb	r2, [r3, #0]
 8001694:	e008      	b.n	80016a8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001696:	230f      	movs	r3, #15
 8001698:	18fb      	adds	r3, r7, r3
 800169a:	2201      	movs	r2, #1
 800169c:	701a      	strb	r2, [r3, #0]
 800169e:	e003      	b.n	80016a8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016a0:	230f      	movs	r3, #15
 80016a2:	18fb      	adds	r3, r7, r3
 80016a4:	2201      	movs	r2, #1
 80016a6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80016a8:	230f      	movs	r3, #15
 80016aa:	18fb      	adds	r3, r7, r3
 80016ac:	781b      	ldrb	r3, [r3, #0]
}
 80016ae:	0018      	movs	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	b005      	add	sp, #20
 80016b4:	bd90      	pop	{r4, r7, pc}
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	20000038 	.word	0x20000038
 80016bc:	20000030 	.word	0x20000030
 80016c0:	20000034 	.word	0x20000034

080016c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <HAL_IncTick+0x1c>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	001a      	movs	r2, r3
 80016ce:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <HAL_IncTick+0x20>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	18d2      	adds	r2, r2, r3
 80016d4:	4b03      	ldr	r3, [pc, #12]	; (80016e4 <HAL_IncTick+0x20>)
 80016d6:	601a      	str	r2, [r3, #0]
}
 80016d8:	46c0      	nop			; (mov r8, r8)
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	46c0      	nop			; (mov r8, r8)
 80016e0:	20000038 	.word	0x20000038
 80016e4:	20000570 	.word	0x20000570

080016e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  return uwTick;
 80016ec:	4b02      	ldr	r3, [pc, #8]	; (80016f8 <HAL_GetTick+0x10>)
 80016ee:	681b      	ldr	r3, [r3, #0]
}
 80016f0:	0018      	movs	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	46c0      	nop			; (mov r8, r8)
 80016f8:	20000570 	.word	0x20000570

080016fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001704:	f7ff fff0 	bl	80016e8 <HAL_GetTick>
 8001708:	0003      	movs	r3, r0
 800170a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	3301      	adds	r3, #1
 8001714:	d005      	beq.n	8001722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001716:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <HAL_Delay+0x44>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	001a      	movs	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	189b      	adds	r3, r3, r2
 8001720:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	f7ff ffe0 	bl	80016e8 <HAL_GetTick>
 8001728:	0002      	movs	r2, r0
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	429a      	cmp	r2, r3
 8001732:	d8f7      	bhi.n	8001724 <HAL_Delay+0x28>
  {
  }
}
 8001734:	46c0      	nop			; (mov r8, r8)
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	46bd      	mov	sp, r7
 800173a:	b004      	add	sp, #16
 800173c:	bd80      	pop	{r7, pc}
 800173e:	46c0      	nop			; (mov r8, r8)
 8001740:	20000038 	.word	0x20000038

08001744 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a06      	ldr	r2, [pc, #24]	; (800176c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001752:	4013      	ands	r3, r2
 8001754:	0019      	movs	r1, r3
 8001756:	4b04      	ldr	r3, [pc, #16]	; (8001768 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	430a      	orrs	r2, r1
 800175c:	601a      	str	r2, [r3, #0]
}
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	46bd      	mov	sp, r7
 8001762:	b002      	add	sp, #8
 8001764:	bd80      	pop	{r7, pc}
 8001766:	46c0      	nop			; (mov r8, r8)
 8001768:	40010000 	.word	0x40010000
 800176c:	fffff9ff 	.word	0xfffff9ff

08001770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	0002      	movs	r2, r0
 8001778:	1dfb      	adds	r3, r7, #7
 800177a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800177c:	1dfb      	adds	r3, r7, #7
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b7f      	cmp	r3, #127	; 0x7f
 8001782:	d809      	bhi.n	8001798 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001784:	1dfb      	adds	r3, r7, #7
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	001a      	movs	r2, r3
 800178a:	231f      	movs	r3, #31
 800178c:	401a      	ands	r2, r3
 800178e:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <__NVIC_EnableIRQ+0x30>)
 8001790:	2101      	movs	r1, #1
 8001792:	4091      	lsls	r1, r2
 8001794:	000a      	movs	r2, r1
 8001796:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001798:	46c0      	nop			; (mov r8, r8)
 800179a:	46bd      	mov	sp, r7
 800179c:	b002      	add	sp, #8
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	e000e100 	.word	0xe000e100

080017a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a4:	b590      	push	{r4, r7, lr}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	0002      	movs	r2, r0
 80017ac:	6039      	str	r1, [r7, #0]
 80017ae:	1dfb      	adds	r3, r7, #7
 80017b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017b2:	1dfb      	adds	r3, r7, #7
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b7f      	cmp	r3, #127	; 0x7f
 80017b8:	d828      	bhi.n	800180c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017ba:	4a2f      	ldr	r2, [pc, #188]	; (8001878 <__NVIC_SetPriority+0xd4>)
 80017bc:	1dfb      	adds	r3, r7, #7
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	b25b      	sxtb	r3, r3
 80017c2:	089b      	lsrs	r3, r3, #2
 80017c4:	33c0      	adds	r3, #192	; 0xc0
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	589b      	ldr	r3, [r3, r2]
 80017ca:	1dfa      	adds	r2, r7, #7
 80017cc:	7812      	ldrb	r2, [r2, #0]
 80017ce:	0011      	movs	r1, r2
 80017d0:	2203      	movs	r2, #3
 80017d2:	400a      	ands	r2, r1
 80017d4:	00d2      	lsls	r2, r2, #3
 80017d6:	21ff      	movs	r1, #255	; 0xff
 80017d8:	4091      	lsls	r1, r2
 80017da:	000a      	movs	r2, r1
 80017dc:	43d2      	mvns	r2, r2
 80017de:	401a      	ands	r2, r3
 80017e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	019b      	lsls	r3, r3, #6
 80017e6:	22ff      	movs	r2, #255	; 0xff
 80017e8:	401a      	ands	r2, r3
 80017ea:	1dfb      	adds	r3, r7, #7
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	0018      	movs	r0, r3
 80017f0:	2303      	movs	r3, #3
 80017f2:	4003      	ands	r3, r0
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017f8:	481f      	ldr	r0, [pc, #124]	; (8001878 <__NVIC_SetPriority+0xd4>)
 80017fa:	1dfb      	adds	r3, r7, #7
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	b25b      	sxtb	r3, r3
 8001800:	089b      	lsrs	r3, r3, #2
 8001802:	430a      	orrs	r2, r1
 8001804:	33c0      	adds	r3, #192	; 0xc0
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800180a:	e031      	b.n	8001870 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800180c:	4a1b      	ldr	r2, [pc, #108]	; (800187c <__NVIC_SetPriority+0xd8>)
 800180e:	1dfb      	adds	r3, r7, #7
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	0019      	movs	r1, r3
 8001814:	230f      	movs	r3, #15
 8001816:	400b      	ands	r3, r1
 8001818:	3b08      	subs	r3, #8
 800181a:	089b      	lsrs	r3, r3, #2
 800181c:	3306      	adds	r3, #6
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	18d3      	adds	r3, r2, r3
 8001822:	3304      	adds	r3, #4
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	1dfa      	adds	r2, r7, #7
 8001828:	7812      	ldrb	r2, [r2, #0]
 800182a:	0011      	movs	r1, r2
 800182c:	2203      	movs	r2, #3
 800182e:	400a      	ands	r2, r1
 8001830:	00d2      	lsls	r2, r2, #3
 8001832:	21ff      	movs	r1, #255	; 0xff
 8001834:	4091      	lsls	r1, r2
 8001836:	000a      	movs	r2, r1
 8001838:	43d2      	mvns	r2, r2
 800183a:	401a      	ands	r2, r3
 800183c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	019b      	lsls	r3, r3, #6
 8001842:	22ff      	movs	r2, #255	; 0xff
 8001844:	401a      	ands	r2, r3
 8001846:	1dfb      	adds	r3, r7, #7
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	0018      	movs	r0, r3
 800184c:	2303      	movs	r3, #3
 800184e:	4003      	ands	r3, r0
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001854:	4809      	ldr	r0, [pc, #36]	; (800187c <__NVIC_SetPriority+0xd8>)
 8001856:	1dfb      	adds	r3, r7, #7
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	001c      	movs	r4, r3
 800185c:	230f      	movs	r3, #15
 800185e:	4023      	ands	r3, r4
 8001860:	3b08      	subs	r3, #8
 8001862:	089b      	lsrs	r3, r3, #2
 8001864:	430a      	orrs	r2, r1
 8001866:	3306      	adds	r3, #6
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	18c3      	adds	r3, r0, r3
 800186c:	3304      	adds	r3, #4
 800186e:	601a      	str	r2, [r3, #0]
}
 8001870:	46c0      	nop			; (mov r8, r8)
 8001872:	46bd      	mov	sp, r7
 8001874:	b003      	add	sp, #12
 8001876:	bd90      	pop	{r4, r7, pc}
 8001878:	e000e100 	.word	0xe000e100
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	1e5a      	subs	r2, r3, #1
 800188c:	2380      	movs	r3, #128	; 0x80
 800188e:	045b      	lsls	r3, r3, #17
 8001890:	429a      	cmp	r2, r3
 8001892:	d301      	bcc.n	8001898 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001894:	2301      	movs	r3, #1
 8001896:	e010      	b.n	80018ba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001898:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <SysTick_Config+0x44>)
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	3a01      	subs	r2, #1
 800189e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018a0:	2301      	movs	r3, #1
 80018a2:	425b      	negs	r3, r3
 80018a4:	2103      	movs	r1, #3
 80018a6:	0018      	movs	r0, r3
 80018a8:	f7ff ff7c 	bl	80017a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ac:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <SysTick_Config+0x44>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018b2:	4b04      	ldr	r3, [pc, #16]	; (80018c4 <SysTick_Config+0x44>)
 80018b4:	2207      	movs	r2, #7
 80018b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	0018      	movs	r0, r3
 80018bc:	46bd      	mov	sp, r7
 80018be:	b002      	add	sp, #8
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	46c0      	nop			; (mov r8, r8)
 80018c4:	e000e010 	.word	0xe000e010

080018c8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60b9      	str	r1, [r7, #8]
 80018d0:	607a      	str	r2, [r7, #4]
 80018d2:	210f      	movs	r1, #15
 80018d4:	187b      	adds	r3, r7, r1
 80018d6:	1c02      	adds	r2, r0, #0
 80018d8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	187b      	adds	r3, r7, r1
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	b25b      	sxtb	r3, r3
 80018e2:	0011      	movs	r1, r2
 80018e4:	0018      	movs	r0, r3
 80018e6:	f7ff ff5d 	bl	80017a4 <__NVIC_SetPriority>
}
 80018ea:	46c0      	nop			; (mov r8, r8)
 80018ec:	46bd      	mov	sp, r7
 80018ee:	b004      	add	sp, #16
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	0002      	movs	r2, r0
 80018fa:	1dfb      	adds	r3, r7, #7
 80018fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018fe:	1dfb      	adds	r3, r7, #7
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	b25b      	sxtb	r3, r3
 8001904:	0018      	movs	r0, r3
 8001906:	f7ff ff33 	bl	8001770 <__NVIC_EnableIRQ>
}
 800190a:	46c0      	nop			; (mov r8, r8)
 800190c:	46bd      	mov	sp, r7
 800190e:	b002      	add	sp, #8
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	0018      	movs	r0, r3
 800191e:	f7ff ffaf 	bl	8001880 <SysTick_Config>
 8001922:	0003      	movs	r3, r0
}
 8001924:	0018      	movs	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	b002      	add	sp, #8
 800192a:	bd80      	pop	{r7, pc}

0800192c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e14e      	b.n	8001bdc <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	225c      	movs	r2, #92	; 0x5c
 8001942:	5c9b      	ldrb	r3, [r3, r2]
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	d107      	bne.n	800195a <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	225d      	movs	r2, #93	; 0x5d
 800194e:	2100      	movs	r1, #0
 8001950:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	0018      	movs	r0, r3
 8001956:	f7fe ff03 	bl	8000760 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	699a      	ldr	r2, [r3, #24]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2110      	movs	r1, #16
 8001966:	438a      	bics	r2, r1
 8001968:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800196a:	f7ff febd 	bl	80016e8 <HAL_GetTick>
 800196e:	0003      	movs	r3, r0
 8001970:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001972:	e012      	b.n	800199a <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001974:	f7ff feb8 	bl	80016e8 <HAL_GetTick>
 8001978:	0002      	movs	r2, r0
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b0a      	cmp	r3, #10
 8001980:	d90b      	bls.n	800199a <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001986:	2201      	movs	r2, #1
 8001988:	431a      	orrs	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	225c      	movs	r2, #92	; 0x5c
 8001992:	2103      	movs	r1, #3
 8001994:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e120      	b.n	8001bdc <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	2208      	movs	r2, #8
 80019a2:	4013      	ands	r3, r2
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	d0e5      	beq.n	8001974 <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	699a      	ldr	r2, [r3, #24]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2101      	movs	r1, #1
 80019b4:	430a      	orrs	r2, r1
 80019b6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019b8:	f7ff fe96 	bl	80016e8 <HAL_GetTick>
 80019bc:	0003      	movs	r3, r0
 80019be:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80019c0:	e012      	b.n	80019e8 <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80019c2:	f7ff fe91 	bl	80016e8 <HAL_GetTick>
 80019c6:	0002      	movs	r2, r0
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b0a      	cmp	r3, #10
 80019ce:	d90b      	bls.n	80019e8 <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019d4:	2201      	movs	r2, #1
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	225c      	movs	r2, #92	; 0x5c
 80019e0:	2103      	movs	r1, #3
 80019e2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e0f9      	b.n	8001bdc <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	2201      	movs	r2, #1
 80019f0:	4013      	ands	r3, r2
 80019f2:	d0e6      	beq.n	80019c2 <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	699a      	ldr	r2, [r3, #24]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2102      	movs	r1, #2
 8001a00:	430a      	orrs	r2, r1
 8001a02:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a76      	ldr	r2, [pc, #472]	; (8001be4 <HAL_FDCAN_Init+0x2b8>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d103      	bne.n	8001a16 <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001a0e:	4a76      	ldr	r2, [pc, #472]	; (8001be8 <HAL_FDCAN_Init+0x2bc>)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	7c1b      	ldrb	r3, [r3, #16]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d108      	bne.n	8001a30 <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	699a      	ldr	r2, [r3, #24]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2140      	movs	r1, #64	; 0x40
 8001a2a:	438a      	bics	r2, r1
 8001a2c:	619a      	str	r2, [r3, #24]
 8001a2e:	e007      	b.n	8001a40 <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	699a      	ldr	r2, [r3, #24]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2140      	movs	r1, #64	; 0x40
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	7c5b      	ldrb	r3, [r3, #17]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d109      	bne.n	8001a5c <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	699a      	ldr	r2, [r3, #24]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2180      	movs	r1, #128	; 0x80
 8001a54:	01c9      	lsls	r1, r1, #7
 8001a56:	430a      	orrs	r2, r1
 8001a58:	619a      	str	r2, [r3, #24]
 8001a5a:	e007      	b.n	8001a6c <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	699a      	ldr	r2, [r3, #24]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4961      	ldr	r1, [pc, #388]	; (8001bec <HAL_FDCAN_Init+0x2c0>)
 8001a68:	400a      	ands	r2, r1
 8001a6a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	7c9b      	ldrb	r3, [r3, #18]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d108      	bne.n	8001a86 <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	699a      	ldr	r2, [r3, #24]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	495c      	ldr	r1, [pc, #368]	; (8001bf0 <HAL_FDCAN_Init+0x2c4>)
 8001a80:	400a      	ands	r2, r1
 8001a82:	619a      	str	r2, [r3, #24]
 8001a84:	e008      	b.n	8001a98 <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	699a      	ldr	r2, [r3, #24]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2180      	movs	r1, #128	; 0x80
 8001a92:	0149      	lsls	r1, r1, #5
 8001a94:	430a      	orrs	r2, r1
 8001a96:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	4a55      	ldr	r2, [pc, #340]	; (8001bf4 <HAL_FDCAN_Init+0x2c8>)
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	0019      	movs	r1, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	699a      	ldr	r2, [r3, #24]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	21a4      	movs	r1, #164	; 0xa4
 8001abc:	438a      	bics	r2, r1
 8001abe:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	691a      	ldr	r2, [r3, #16]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2110      	movs	r1, #16
 8001acc:	438a      	bics	r2, r1
 8001ace:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d108      	bne.n	8001aea <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	699a      	ldr	r2, [r3, #24]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2104      	movs	r1, #4
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	619a      	str	r2, [r3, #24]
 8001ae8:	e02c      	b.n	8001b44 <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d028      	beq.n	8001b44 <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d01c      	beq.n	8001b34 <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	699a      	ldr	r2, [r3, #24]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2180      	movs	r1, #128	; 0x80
 8001b06:	430a      	orrs	r2, r1
 8001b08:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	691a      	ldr	r2, [r3, #16]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2110      	movs	r1, #16
 8001b16:	430a      	orrs	r2, r1
 8001b18:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	d110      	bne.n	8001b44 <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	699a      	ldr	r2, [r3, #24]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2120      	movs	r1, #32
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	619a      	str	r2, [r3, #24]
 8001b32:	e007      	b.n	8001b44 <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	699a      	ldr	r2, [r3, #24]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2120      	movs	r1, #32
 8001b40:	430a      	orrs	r2, r1
 8001b42:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	3b01      	subs	r3, #1
 8001b52:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001b54:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a1b      	ldr	r3, [r3, #32]
 8001b5a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	3b01      	subs	r3, #1
 8001b66:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001b6c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001b6e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	23c0      	movs	r3, #192	; 0xc0
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d115      	bne.n	8001ba8 <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b80:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b86:	3b01      	subs	r3, #1
 8001b88:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001b8a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b90:	3b01      	subs	r3, #1
 8001b92:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001b94:	431a      	orrs	r2, r3
 8001b96:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001ba4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001ba6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	22c0      	movs	r2, #192	; 0xc0
 8001bae:	5899      	ldr	r1, [r3, r2]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	21c0      	movs	r1, #192	; 0xc0
 8001bbc:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f000 f885 	bl	8001cd0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	225c      	movs	r2, #92	; 0x5c
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	0018      	movs	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	b004      	add	sp, #16
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40006400 	.word	0x40006400
 8001be8:	40006500 	.word	0x40006500
 8001bec:	ffffbfff 	.word	0xffffbfff
 8001bf0:	ffffefff 	.word	0xffffefff
 8001bf4:	fffffcff 	.word	0xfffffcff

08001bf8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	225c      	movs	r2, #92	; 0x5c
 8001c04:	5c9b      	ldrb	r3, [r3, r2]
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d110      	bne.n	8001c2e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	225c      	movs	r2, #92	; 0x5c
 8001c10:	2102      	movs	r1, #2
 8001c12:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	699a      	ldr	r2, [r3, #24]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2101      	movs	r1, #1
 8001c20:	438a      	bics	r2, r1
 8001c22:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e006      	b.n	8001c3c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c32:	2204      	movs	r2, #4
 8001c34:	431a      	orrs	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
  }
}
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	b002      	add	sp, #8
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	225c      	movs	r2, #92	; 0x5c
 8001c54:	5c9b      	ldrb	r3, [r3, r2]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d12d      	bne.n	8001cb8 <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	22c4      	movs	r2, #196	; 0xc4
 8001c62:	589a      	ldr	r2, [r3, r2]
 8001c64:	2380      	movs	r3, #128	; 0x80
 8001c66:	039b      	lsls	r3, r3, #14
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d008      	beq.n	8001c7e <HAL_FDCAN_AddMessageToTxFifoQ+0x3a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c70:	2280      	movs	r2, #128	; 0x80
 8001c72:	0092      	lsls	r2, r2, #2
 8001c74:	431a      	orrs	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e023      	b.n	8001cc6 <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	22c4      	movs	r2, #196	; 0xc4
 8001c84:	589b      	ldr	r3, [r3, r2]
 8001c86:	0c1b      	lsrs	r3, r3, #16
 8001c88:	2203      	movs	r2, #3
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	68b9      	ldr	r1, [r7, #8]
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f000 f887 	bl	8001da8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	4091      	lsls	r1, r2
 8001ca4:	000a      	movs	r2, r1
 8001ca6:	21cc      	movs	r1, #204	; 0xcc
 8001ca8:	505a      	str	r2, [r3, r1]

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001caa:	2201      	movs	r2, #1
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	409a      	lsls	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	e006      	b.n	8001cc6 <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cbc:	2208      	movs	r2, #8
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
  }
}
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	b006      	add	sp, #24
 8001ccc:	bd80      	pop	{r7, pc}
	...

08001cd0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001cd8:	4b2f      	ldr	r3, [pc, #188]	; (8001d98 <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 8001cda:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a2e      	ldr	r2, [pc, #184]	; (8001d9c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d105      	bne.n	8001cf2 <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	22d4      	movs	r2, #212	; 0xd4
 8001cea:	0092      	lsls	r2, r2, #2
 8001cec:	4694      	mov	ip, r2
 8001cee:	4463      	add	r3, ip
 8001cf0:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68ba      	ldr	r2, [r7, #8]
 8001cf6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2280      	movs	r2, #128	; 0x80
 8001cfe:	589b      	ldr	r3, [r3, r2]
 8001d00:	4a27      	ldr	r2, [pc, #156]	; (8001da0 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8001d02:	4013      	ands	r3, r2
 8001d04:	0019      	movs	r1, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d0a:	041a      	lsls	r2, r3, #16
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	2180      	movs	r1, #128	; 0x80
 8001d14:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	3370      	adds	r3, #112	; 0x70
 8001d1a:	001a      	movs	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2280      	movs	r2, #128	; 0x80
 8001d26:	589b      	ldr	r3, [r3, r2]
 8001d28:	4a1e      	ldr	r2, [pc, #120]	; (8001da4 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	0019      	movs	r1, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d32:	061a      	lsls	r2, r3, #24
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	2180      	movs	r1, #128	; 0x80
 8001d3c:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	33b0      	adds	r3, #176	; 0xb0
 8001d42:	001a      	movs	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	3389      	adds	r3, #137	; 0x89
 8001d4c:	33ff      	adds	r3, #255	; 0xff
 8001d4e:	001a      	movs	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	2298      	movs	r2, #152	; 0x98
 8001d58:	0092      	lsls	r2, r2, #2
 8001d5a:	189a      	adds	r2, r3, r2
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	229e      	movs	r2, #158	; 0x9e
 8001d64:	0092      	lsls	r2, r2, #2
 8001d66:	189a      	adds	r2, r3, r2
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	e005      	b.n	8001d7e <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	3304      	adds	r3, #4
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	22d4      	movs	r2, #212	; 0xd4
 8001d82:	0092      	lsls	r2, r2, #2
 8001d84:	4694      	mov	ip, r2
 8001d86:	4463      	add	r3, ip
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d3f1      	bcc.n	8001d72 <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	46c0      	nop			; (mov r8, r8)
 8001d92:	46bd      	mov	sp, r7
 8001d94:	b004      	add	sp, #16
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	4000b400 	.word	0x4000b400
 8001d9c:	40006800 	.word	0x40006800
 8001da0:	ffe0ffff 	.word	0xffe0ffff
 8001da4:	f0ffffff 	.word	0xf0ffffff

08001da8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b088      	sub	sp, #32
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
 8001db4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10a      	bne.n	8001dd4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001dc6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	61fb      	str	r3, [r7, #28]
 8001dd2:	e00b      	b.n	8001dec <FDCAN_CopyMessageToRAM+0x44>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001ddc:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001de2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001de4:	2280      	movs	r2, #128	; 0x80
 8001de6:	05d2      	lsls	r2, r2, #23
 8001de8:	4313      	orrs	r3, r2
 8001dea:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001df6:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001dfc:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001e02:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	0013      	movs	r3, r2
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	189b      	adds	r3, r3, r2
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	18cb      	adds	r3, r1, r3
 8001e1c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	69fa      	ldr	r2, [r7, #28]
 8001e22:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	3304      	adds	r3, #4
 8001e28:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	3304      	adds	r3, #4
 8001e34:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
 8001e3a:	e020      	b.n	8001e7e <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	3303      	adds	r3, #3
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	18d3      	adds	r3, r2, r3
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	3302      	adds	r3, #2
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	18cb      	adds	r3, r1, r3
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001e54:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	18cb      	adds	r3, r1, r3
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001e62:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001e64:	6879      	ldr	r1, [r7, #4]
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	188a      	adds	r2, r1, r2
 8001e6a:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001e6c:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	3304      	adds	r3, #4
 8001e76:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	3304      	adds	r3, #4
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	0c1b      	lsrs	r3, r3, #16
 8001e84:	4a05      	ldr	r2, [pc, #20]	; (8001e9c <FDCAN_CopyMessageToRAM+0xf4>)
 8001e86:	5cd3      	ldrb	r3, [r2, r3]
 8001e88:	001a      	movs	r2, r3
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d3d5      	bcc.n	8001e3c <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8001e90:	46c0      	nop			; (mov r8, r8)
 8001e92:	46c0      	nop			; (mov r8, r8)
 8001e94:	46bd      	mov	sp, r7
 8001e96:	b008      	add	sp, #32
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	0800b960 	.word	0x0800b960

08001ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eae:	e14d      	b.n	800214c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	4091      	lsls	r1, r2
 8001eba:	000a      	movs	r2, r1
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d100      	bne.n	8001ec8 <HAL_GPIO_Init+0x28>
 8001ec6:	e13e      	b.n	8002146 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2203      	movs	r2, #3
 8001ece:	4013      	ands	r3, r2
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d005      	beq.n	8001ee0 <HAL_GPIO_Init+0x40>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2203      	movs	r2, #3
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d130      	bne.n	8001f42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	2203      	movs	r2, #3
 8001eec:	409a      	lsls	r2, r3
 8001eee:	0013      	movs	r3, r2
 8001ef0:	43da      	mvns	r2, r3
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	409a      	lsls	r2, r3
 8001f02:	0013      	movs	r3, r2
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f16:	2201      	movs	r2, #1
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	409a      	lsls	r2, r3
 8001f1c:	0013      	movs	r3, r2
 8001f1e:	43da      	mvns	r2, r3
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	4013      	ands	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	091b      	lsrs	r3, r3, #4
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	401a      	ands	r2, r3
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	409a      	lsls	r2, r3
 8001f34:	0013      	movs	r3, r2
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2203      	movs	r2, #3
 8001f48:	4013      	ands	r3, r2
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	d017      	beq.n	8001f7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	2203      	movs	r2, #3
 8001f5a:	409a      	lsls	r2, r3
 8001f5c:	0013      	movs	r3, r2
 8001f5e:	43da      	mvns	r2, r3
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4013      	ands	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	409a      	lsls	r2, r3
 8001f70:	0013      	movs	r3, r2
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2203      	movs	r2, #3
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d123      	bne.n	8001fd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	08da      	lsrs	r2, r3, #3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3208      	adds	r2, #8
 8001f92:	0092      	lsls	r2, r2, #2
 8001f94:	58d3      	ldr	r3, [r2, r3]
 8001f96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	2207      	movs	r2, #7
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	220f      	movs	r2, #15
 8001fa2:	409a      	lsls	r2, r3
 8001fa4:	0013      	movs	r3, r2
 8001fa6:	43da      	mvns	r2, r3
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	4013      	ands	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	691a      	ldr	r2, [r3, #16]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	2107      	movs	r1, #7
 8001fb6:	400b      	ands	r3, r1
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	409a      	lsls	r2, r3
 8001fbc:	0013      	movs	r3, r2
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	08da      	lsrs	r2, r3, #3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3208      	adds	r2, #8
 8001fcc:	0092      	lsls	r2, r2, #2
 8001fce:	6939      	ldr	r1, [r7, #16]
 8001fd0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	2203      	movs	r2, #3
 8001fde:	409a      	lsls	r2, r3
 8001fe0:	0013      	movs	r3, r2
 8001fe2:	43da      	mvns	r2, r3
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2203      	movs	r2, #3
 8001ff0:	401a      	ands	r2, r3
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	409a      	lsls	r2, r3
 8001ff8:	0013      	movs	r3, r2
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	23c0      	movs	r3, #192	; 0xc0
 800200c:	029b      	lsls	r3, r3, #10
 800200e:	4013      	ands	r3, r2
 8002010:	d100      	bne.n	8002014 <HAL_GPIO_Init+0x174>
 8002012:	e098      	b.n	8002146 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002014:	4a53      	ldr	r2, [pc, #332]	; (8002164 <HAL_GPIO_Init+0x2c4>)
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	089b      	lsrs	r3, r3, #2
 800201a:	3318      	adds	r3, #24
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	589b      	ldr	r3, [r3, r2]
 8002020:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	2203      	movs	r2, #3
 8002026:	4013      	ands	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	220f      	movs	r2, #15
 800202c:	409a      	lsls	r2, r3
 800202e:	0013      	movs	r3, r2
 8002030:	43da      	mvns	r2, r3
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4013      	ands	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	23a0      	movs	r3, #160	; 0xa0
 800203c:	05db      	lsls	r3, r3, #23
 800203e:	429a      	cmp	r2, r3
 8002040:	d019      	beq.n	8002076 <HAL_GPIO_Init+0x1d6>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a48      	ldr	r2, [pc, #288]	; (8002168 <HAL_GPIO_Init+0x2c8>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d013      	beq.n	8002072 <HAL_GPIO_Init+0x1d2>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a47      	ldr	r2, [pc, #284]	; (800216c <HAL_GPIO_Init+0x2cc>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d00d      	beq.n	800206e <HAL_GPIO_Init+0x1ce>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a46      	ldr	r2, [pc, #280]	; (8002170 <HAL_GPIO_Init+0x2d0>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d007      	beq.n	800206a <HAL_GPIO_Init+0x1ca>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a45      	ldr	r2, [pc, #276]	; (8002174 <HAL_GPIO_Init+0x2d4>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d101      	bne.n	8002066 <HAL_GPIO_Init+0x1c6>
 8002062:	2304      	movs	r3, #4
 8002064:	e008      	b.n	8002078 <HAL_GPIO_Init+0x1d8>
 8002066:	2305      	movs	r3, #5
 8002068:	e006      	b.n	8002078 <HAL_GPIO_Init+0x1d8>
 800206a:	2303      	movs	r3, #3
 800206c:	e004      	b.n	8002078 <HAL_GPIO_Init+0x1d8>
 800206e:	2302      	movs	r3, #2
 8002070:	e002      	b.n	8002078 <HAL_GPIO_Init+0x1d8>
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <HAL_GPIO_Init+0x1d8>
 8002076:	2300      	movs	r3, #0
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	2103      	movs	r1, #3
 800207c:	400a      	ands	r2, r1
 800207e:	00d2      	lsls	r2, r2, #3
 8002080:	4093      	lsls	r3, r2
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4313      	orrs	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002088:	4936      	ldr	r1, [pc, #216]	; (8002164 <HAL_GPIO_Init+0x2c4>)
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	089b      	lsrs	r3, r3, #2
 800208e:	3318      	adds	r3, #24
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002096:	4b33      	ldr	r3, [pc, #204]	; (8002164 <HAL_GPIO_Init+0x2c4>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	43da      	mvns	r2, r3
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	4013      	ands	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	2380      	movs	r3, #128	; 0x80
 80020ac:	035b      	lsls	r3, r3, #13
 80020ae:	4013      	ands	r3, r2
 80020b0:	d003      	beq.n	80020ba <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020ba:	4b2a      	ldr	r3, [pc, #168]	; (8002164 <HAL_GPIO_Init+0x2c4>)
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80020c0:	4b28      	ldr	r3, [pc, #160]	; (8002164 <HAL_GPIO_Init+0x2c4>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	43da      	mvns	r2, r3
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	4013      	ands	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	2380      	movs	r3, #128	; 0x80
 80020d6:	039b      	lsls	r3, r3, #14
 80020d8:	4013      	ands	r3, r2
 80020da:	d003      	beq.n	80020e4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020e4:	4b1f      	ldr	r3, [pc, #124]	; (8002164 <HAL_GPIO_Init+0x2c4>)
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020ea:	4a1e      	ldr	r2, [pc, #120]	; (8002164 <HAL_GPIO_Init+0x2c4>)
 80020ec:	2384      	movs	r3, #132	; 0x84
 80020ee:	58d3      	ldr	r3, [r2, r3]
 80020f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	43da      	mvns	r2, r3
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4013      	ands	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	2380      	movs	r3, #128	; 0x80
 8002102:	029b      	lsls	r3, r3, #10
 8002104:	4013      	ands	r3, r2
 8002106:	d003      	beq.n	8002110 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	4313      	orrs	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002110:	4914      	ldr	r1, [pc, #80]	; (8002164 <HAL_GPIO_Init+0x2c4>)
 8002112:	2284      	movs	r2, #132	; 0x84
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002118:	4a12      	ldr	r2, [pc, #72]	; (8002164 <HAL_GPIO_Init+0x2c4>)
 800211a:	2380      	movs	r3, #128	; 0x80
 800211c:	58d3      	ldr	r3, [r2, r3]
 800211e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	43da      	mvns	r2, r3
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4013      	ands	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	2380      	movs	r3, #128	; 0x80
 8002130:	025b      	lsls	r3, r3, #9
 8002132:	4013      	ands	r3, r2
 8002134:	d003      	beq.n	800213e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4313      	orrs	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800213e:	4909      	ldr	r1, [pc, #36]	; (8002164 <HAL_GPIO_Init+0x2c4>)
 8002140:	2280      	movs	r2, #128	; 0x80
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	3301      	adds	r3, #1
 800214a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	40da      	lsrs	r2, r3
 8002154:	1e13      	subs	r3, r2, #0
 8002156:	d000      	beq.n	800215a <HAL_GPIO_Init+0x2ba>
 8002158:	e6aa      	b.n	8001eb0 <HAL_GPIO_Init+0x10>
  }
}
 800215a:	46c0      	nop			; (mov r8, r8)
 800215c:	46c0      	nop			; (mov r8, r8)
 800215e:	46bd      	mov	sp, r7
 8002160:	b006      	add	sp, #24
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40021800 	.word	0x40021800
 8002168:	50000400 	.word	0x50000400
 800216c:	50000800 	.word	0x50000800
 8002170:	50000c00 	.word	0x50000c00
 8002174:	50001000 	.word	0x50001000

08002178 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	000a      	movs	r2, r1
 8002182:	1cbb      	adds	r3, r7, #2
 8002184:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	1cba      	adds	r2, r7, #2
 800218c:	8812      	ldrh	r2, [r2, #0]
 800218e:	4013      	ands	r3, r2
 8002190:	d004      	beq.n	800219c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002192:	230f      	movs	r3, #15
 8002194:	18fb      	adds	r3, r7, r3
 8002196:	2201      	movs	r2, #1
 8002198:	701a      	strb	r2, [r3, #0]
 800219a:	e003      	b.n	80021a4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800219c:	230f      	movs	r3, #15
 800219e:	18fb      	adds	r3, r7, r3
 80021a0:	2200      	movs	r2, #0
 80021a2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80021a4:	230f      	movs	r3, #15
 80021a6:	18fb      	adds	r3, r7, r3
 80021a8:	781b      	ldrb	r3, [r3, #0]
}
 80021aa:	0018      	movs	r0, r3
 80021ac:	46bd      	mov	sp, r7
 80021ae:	b004      	add	sp, #16
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
 80021ba:	0008      	movs	r0, r1
 80021bc:	0011      	movs	r1, r2
 80021be:	1cbb      	adds	r3, r7, #2
 80021c0:	1c02      	adds	r2, r0, #0
 80021c2:	801a      	strh	r2, [r3, #0]
 80021c4:	1c7b      	adds	r3, r7, #1
 80021c6:	1c0a      	adds	r2, r1, #0
 80021c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021ca:	1c7b      	adds	r3, r7, #1
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d004      	beq.n	80021dc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021d2:	1cbb      	adds	r3, r7, #2
 80021d4:	881a      	ldrh	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021da:	e003      	b.n	80021e4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021dc:	1cbb      	adds	r3, r7, #2
 80021de:	881a      	ldrh	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021e4:	46c0      	nop			; (mov r8, r8)
 80021e6:	46bd      	mov	sp, r7
 80021e8:	b002      	add	sp, #8
 80021ea:	bd80      	pop	{r7, pc}

080021ec <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	000a      	movs	r2, r1
 80021f6:	1cbb      	adds	r3, r7, #2
 80021f8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002200:	1cbb      	adds	r3, r7, #2
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	4013      	ands	r3, r2
 8002208:	041a      	lsls	r2, r3, #16
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	43db      	mvns	r3, r3
 800220e:	1cb9      	adds	r1, r7, #2
 8002210:	8809      	ldrh	r1, [r1, #0]
 8002212:	400b      	ands	r3, r1
 8002214:	431a      	orrs	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	619a      	str	r2, [r3, #24]
}
 800221a:	46c0      	nop			; (mov r8, r8)
 800221c:	46bd      	mov	sp, r7
 800221e:	b004      	add	sp, #16
 8002220:	bd80      	pop	{r7, pc}
	...

08002224 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e082      	b.n	800233c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2241      	movs	r2, #65	; 0x41
 800223a:	5c9b      	ldrb	r3, [r3, r2]
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d107      	bne.n	8002252 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2240      	movs	r2, #64	; 0x40
 8002246:	2100      	movs	r1, #0
 8002248:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	0018      	movs	r0, r3
 800224e:	f7fe fc5b 	bl	8000b08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2241      	movs	r2, #65	; 0x41
 8002256:	2124      	movs	r1, #36	; 0x24
 8002258:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2101      	movs	r1, #1
 8002266:	438a      	bics	r2, r1
 8002268:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4934      	ldr	r1, [pc, #208]	; (8002344 <HAL_I2C_Init+0x120>)
 8002274:	400a      	ands	r2, r1
 8002276:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4931      	ldr	r1, [pc, #196]	; (8002348 <HAL_I2C_Init+0x124>)
 8002284:	400a      	ands	r2, r1
 8002286:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d108      	bne.n	80022a2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2180      	movs	r1, #128	; 0x80
 800229a:	0209      	lsls	r1, r1, #8
 800229c:	430a      	orrs	r2, r1
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	e007      	b.n	80022b2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2184      	movs	r1, #132	; 0x84
 80022ac:	0209      	lsls	r1, r1, #8
 80022ae:	430a      	orrs	r2, r1
 80022b0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d104      	bne.n	80022c4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2280      	movs	r2, #128	; 0x80
 80022c0:	0112      	lsls	r2, r2, #4
 80022c2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	491f      	ldr	r1, [pc, #124]	; (800234c <HAL_I2C_Init+0x128>)
 80022d0:	430a      	orrs	r2, r1
 80022d2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68da      	ldr	r2, [r3, #12]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	491a      	ldr	r1, [pc, #104]	; (8002348 <HAL_I2C_Init+0x124>)
 80022e0:	400a      	ands	r2, r1
 80022e2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	691a      	ldr	r2, [r3, #16]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	431a      	orrs	r2, r3
 80022ee:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69d9      	ldr	r1, [r3, #28]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a1a      	ldr	r2, [r3, #32]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	430a      	orrs	r2, r1
 800230c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2101      	movs	r1, #1
 800231a:	430a      	orrs	r2, r1
 800231c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2241      	movs	r2, #65	; 0x41
 8002328:	2120      	movs	r1, #32
 800232a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2242      	movs	r2, #66	; 0x42
 8002336:	2100      	movs	r1, #0
 8002338:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	0018      	movs	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	b002      	add	sp, #8
 8002342:	bd80      	pop	{r7, pc}
 8002344:	f0ffffff 	.word	0xf0ffffff
 8002348:	ffff7fff 	.word	0xffff7fff
 800234c:	02008000 	.word	0x02008000

08002350 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2241      	movs	r2, #65	; 0x41
 800235e:	5c9b      	ldrb	r3, [r3, r2]
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b20      	cmp	r3, #32
 8002364:	d138      	bne.n	80023d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2240      	movs	r2, #64	; 0x40
 800236a:	5c9b      	ldrb	r3, [r3, r2]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d101      	bne.n	8002374 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002370:	2302      	movs	r3, #2
 8002372:	e032      	b.n	80023da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2240      	movs	r2, #64	; 0x40
 8002378:	2101      	movs	r1, #1
 800237a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2241      	movs	r2, #65	; 0x41
 8002380:	2124      	movs	r1, #36	; 0x24
 8002382:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2101      	movs	r1, #1
 8002390:	438a      	bics	r2, r1
 8002392:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4911      	ldr	r1, [pc, #68]	; (80023e4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80023a0:	400a      	ands	r2, r1
 80023a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6819      	ldr	r1, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2101      	movs	r1, #1
 80023c0:	430a      	orrs	r2, r1
 80023c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2241      	movs	r2, #65	; 0x41
 80023c8:	2120      	movs	r1, #32
 80023ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2240      	movs	r2, #64	; 0x40
 80023d0:	2100      	movs	r1, #0
 80023d2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	e000      	b.n	80023da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80023d8:	2302      	movs	r3, #2
  }
}
 80023da:	0018      	movs	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	b002      	add	sp, #8
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	ffffefff 	.word	0xffffefff

080023e8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2241      	movs	r2, #65	; 0x41
 80023f6:	5c9b      	ldrb	r3, [r3, r2]
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b20      	cmp	r3, #32
 80023fc:	d139      	bne.n	8002472 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2240      	movs	r2, #64	; 0x40
 8002402:	5c9b      	ldrb	r3, [r3, r2]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d101      	bne.n	800240c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002408:	2302      	movs	r3, #2
 800240a:	e033      	b.n	8002474 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2240      	movs	r2, #64	; 0x40
 8002410:	2101      	movs	r1, #1
 8002412:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2241      	movs	r2, #65	; 0x41
 8002418:	2124      	movs	r1, #36	; 0x24
 800241a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2101      	movs	r1, #1
 8002428:	438a      	bics	r2, r1
 800242a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4a11      	ldr	r2, [pc, #68]	; (800247c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002438:	4013      	ands	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	021b      	lsls	r3, r3, #8
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	4313      	orrs	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2101      	movs	r1, #1
 800245a:	430a      	orrs	r2, r1
 800245c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2241      	movs	r2, #65	; 0x41
 8002462:	2120      	movs	r1, #32
 8002464:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2240      	movs	r2, #64	; 0x40
 800246a:	2100      	movs	r1, #0
 800246c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800246e:	2300      	movs	r3, #0
 8002470:	e000      	b.n	8002474 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002472:	2302      	movs	r3, #2
  }
}
 8002474:	0018      	movs	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	b004      	add	sp, #16
 800247a:	bd80      	pop	{r7, pc}
 800247c:	fffff0ff 	.word	0xfffff0ff

08002480 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	000a      	movs	r2, r1
 800248a:	1cbb      	adds	r3, r7, #2
 800248c:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = 10U;
 800248e:	230a      	movs	r3, #10
 8002490:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8002492:	e002      	b.n	800249a <PCD_GET_EP_RX_CNT+0x1a>
  {
    count--;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	3b01      	subs	r3, #1
 8002498:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1f9      	bne.n	8002494 <PCD_GET_EP_RX_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 80024a0:	1cbb      	adds	r3, r7, #2
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4a06      	ldr	r2, [pc, #24]	; (80024c0 <PCD_GET_EP_RX_CNT+0x40>)
 80024a8:	4694      	mov	ip, r2
 80024aa:	4463      	add	r3, ip
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	0c1b      	lsrs	r3, r3, #16
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	059b      	lsls	r3, r3, #22
 80024b4:	0d9b      	lsrs	r3, r3, #22
 80024b6:	b29b      	uxth	r3, r3
}
 80024b8:	0018      	movs	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	b004      	add	sp, #16
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40009800 	.word	0x40009800

080024c4 <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	000a      	movs	r2, r1
 80024ce:	1cbb      	adds	r3, r7, #2
 80024d0:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = 10U;
 80024d2:	230a      	movs	r3, #10
 80024d4:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80024d6:	e002      	b.n	80024de <PCD_GET_EP_DBUF0_CNT+0x1a>
  {
    count--;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	3b01      	subs	r3, #1
 80024dc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1f9      	bne.n	80024d8 <PCD_GET_EP_DBUF0_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 80024e4:	1cbb      	adds	r3, r7, #2
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4a06      	ldr	r2, [pc, #24]	; (8002504 <PCD_GET_EP_DBUF0_CNT+0x40>)
 80024ec:	4694      	mov	ip, r2
 80024ee:	4463      	add	r3, ip
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	0c1b      	lsrs	r3, r3, #16
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	059b      	lsls	r3, r3, #22
 80024f8:	0d9b      	lsrs	r3, r3, #22
 80024fa:	b29b      	uxth	r3, r3
}
 80024fc:	0018      	movs	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	b004      	add	sp, #16
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40009800 	.word	0x40009800

08002508 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	000a      	movs	r2, r1
 8002512:	1cbb      	adds	r3, r7, #2
 8002514:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = 10U;
 8002516:	230a      	movs	r3, #10
 8002518:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800251a:	e002      	b.n	8002522 <PCD_GET_EP_DBUF1_CNT+0x1a>
  {
    count--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	3b01      	subs	r3, #1
 8002520:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1f9      	bne.n	800251c <PCD_GET_EP_DBUF1_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 8002528:	1cbb      	adds	r3, r7, #2
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	4a06      	ldr	r2, [pc, #24]	; (8002548 <PCD_GET_EP_DBUF1_CNT+0x40>)
 8002530:	4694      	mov	ip, r2
 8002532:	4463      	add	r3, ip
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	0c1b      	lsrs	r3, r3, #16
 8002538:	b29b      	uxth	r3, r3
 800253a:	059b      	lsls	r3, r3, #22
 800253c:	0d9b      	lsrs	r3, r3, #22
 800253e:	b29b      	uxth	r3, r3
}
 8002540:	0018      	movs	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	b004      	add	sp, #16
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40009800 	.word	0x40009800

0800254c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800254c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800254e:	b08f      	sub	sp, #60	; 0x3c
 8002550:	af0a      	add	r7, sp, #40	; 0x28
 8002552:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e10a      	b.n	8002774 <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a86      	ldr	r2, [pc, #536]	; (800277c <HAL_PCD_Init+0x230>)
 8002562:	5c9b      	ldrb	r3, [r3, r2]
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d108      	bne.n	800257c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	23af      	movs	r3, #175	; 0xaf
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	2100      	movs	r1, #0
 8002572:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	0018      	movs	r0, r3
 8002578:	f008 f92c 	bl	800a7d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a7f      	ldr	r2, [pc, #508]	; (800277c <HAL_PCD_Init+0x230>)
 8002580:	2103      	movs	r1, #3
 8002582:	5499      	strb	r1, [r3, r2]

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	611a      	str	r2, [r3, #16]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	0018      	movs	r0, r3
 8002590:	f003 fd66 	bl	8006060 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002594:	230f      	movs	r3, #15
 8002596:	18fb      	adds	r3, r7, r3
 8002598:	2200      	movs	r2, #0
 800259a:	701a      	strb	r2, [r3, #0]
 800259c:	e05b      	b.n	8002656 <HAL_PCD_Init+0x10a>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800259e:	240f      	movs	r4, #15
 80025a0:	193b      	adds	r3, r7, r4
 80025a2:	781a      	ldrb	r2, [r3, #0]
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	203d      	movs	r0, #61	; 0x3d
 80025a8:	0013      	movs	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	189b      	adds	r3, r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	18cb      	adds	r3, r1, r3
 80025b2:	181b      	adds	r3, r3, r0
 80025b4:	2201      	movs	r2, #1
 80025b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025b8:	193b      	adds	r3, r7, r4
 80025ba:	781a      	ldrb	r2, [r3, #0]
 80025bc:	6879      	ldr	r1, [r7, #4]
 80025be:	203c      	movs	r0, #60	; 0x3c
 80025c0:	0013      	movs	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	189b      	adds	r3, r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	18cb      	adds	r3, r1, r3
 80025ca:	181b      	adds	r3, r3, r0
 80025cc:	193a      	adds	r2, r7, r4
 80025ce:	7812      	ldrb	r2, [r2, #0]
 80025d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025d2:	0025      	movs	r5, r4
 80025d4:	193b      	adds	r3, r7, r4
 80025d6:	781a      	ldrb	r2, [r3, #0]
 80025d8:	197b      	adds	r3, r7, r5
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	b29c      	uxth	r4, r3
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	2048      	movs	r0, #72	; 0x48
 80025e2:	0013      	movs	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	189b      	adds	r3, r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	18cb      	adds	r3, r1, r3
 80025ec:	181b      	adds	r3, r3, r0
 80025ee:	1c22      	adds	r2, r4, #0
 80025f0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025f2:	197b      	adds	r3, r7, r5
 80025f4:	781a      	ldrb	r2, [r3, #0]
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	203f      	movs	r0, #63	; 0x3f
 80025fa:	0013      	movs	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	189b      	adds	r3, r3, r2
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	18cb      	adds	r3, r1, r3
 8002604:	181b      	adds	r3, r3, r0
 8002606:	2200      	movs	r2, #0
 8002608:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800260a:	197b      	adds	r3, r7, r5
 800260c:	781a      	ldrb	r2, [r3, #0]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	0013      	movs	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	189b      	adds	r3, r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	18cb      	adds	r3, r1, r3
 800261a:	334c      	adds	r3, #76	; 0x4c
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002620:	197b      	adds	r3, r7, r5
 8002622:	781a      	ldrb	r2, [r3, #0]
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	0013      	movs	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	189b      	adds	r3, r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	18cb      	adds	r3, r1, r3
 8002630:	3350      	adds	r3, #80	; 0x50
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002636:	197b      	adds	r3, r7, r5
 8002638:	781a      	ldrb	r2, [r3, #0]
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	0013      	movs	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	189b      	adds	r3, r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	18cb      	adds	r3, r1, r3
 8002646:	3354      	adds	r3, #84	; 0x54
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800264c:	197b      	adds	r3, r7, r5
 800264e:	781a      	ldrb	r2, [r3, #0]
 8002650:	197b      	adds	r3, r7, r5
 8002652:	3201      	adds	r2, #1
 8002654:	701a      	strb	r2, [r3, #0]
 8002656:	210f      	movs	r1, #15
 8002658:	187b      	adds	r3, r7, r1
 800265a:	781a      	ldrb	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	429a      	cmp	r2, r3
 8002662:	d39c      	bcc.n	800259e <HAL_PCD_Init+0x52>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002664:	187b      	adds	r3, r7, r1
 8002666:	2200      	movs	r2, #0
 8002668:	701a      	strb	r2, [r3, #0]
 800266a:	e056      	b.n	800271a <HAL_PCD_Init+0x1ce>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800266c:	240f      	movs	r4, #15
 800266e:	193b      	adds	r3, r7, r4
 8002670:	781a      	ldrb	r2, [r3, #0]
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	237e      	movs	r3, #126	; 0x7e
 8002676:	33ff      	adds	r3, #255	; 0xff
 8002678:	0019      	movs	r1, r3
 800267a:	0013      	movs	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	189b      	adds	r3, r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	18c3      	adds	r3, r0, r3
 8002684:	185b      	adds	r3, r3, r1
 8002686:	2200      	movs	r2, #0
 8002688:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800268a:	193b      	adds	r3, r7, r4
 800268c:	781a      	ldrb	r2, [r3, #0]
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	23be      	movs	r3, #190	; 0xbe
 8002692:	0059      	lsls	r1, r3, #1
 8002694:	0013      	movs	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	189b      	adds	r3, r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	18c3      	adds	r3, r0, r3
 800269e:	185b      	adds	r3, r3, r1
 80026a0:	193a      	adds	r2, r7, r4
 80026a2:	7812      	ldrb	r2, [r2, #0]
 80026a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026a6:	193b      	adds	r3, r7, r4
 80026a8:	781a      	ldrb	r2, [r3, #0]
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	2380      	movs	r3, #128	; 0x80
 80026ae:	33ff      	adds	r3, #255	; 0xff
 80026b0:	0019      	movs	r1, r3
 80026b2:	0013      	movs	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	189b      	adds	r3, r3, r2
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	18c3      	adds	r3, r0, r3
 80026bc:	185b      	adds	r3, r3, r1
 80026be:	2200      	movs	r2, #0
 80026c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026c2:	193b      	adds	r3, r7, r4
 80026c4:	781a      	ldrb	r2, [r3, #0]
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	23c6      	movs	r3, #198	; 0xc6
 80026ca:	0059      	lsls	r1, r3, #1
 80026cc:	0013      	movs	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	189b      	adds	r3, r3, r2
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	18c3      	adds	r3, r0, r3
 80026d6:	185b      	adds	r3, r3, r1
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026dc:	193b      	adds	r3, r7, r4
 80026de:	781a      	ldrb	r2, [r3, #0]
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	23c8      	movs	r3, #200	; 0xc8
 80026e4:	0059      	lsls	r1, r3, #1
 80026e6:	0013      	movs	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	189b      	adds	r3, r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	18c3      	adds	r3, r0, r3
 80026f0:	185b      	adds	r3, r3, r1
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026f6:	193b      	adds	r3, r7, r4
 80026f8:	781a      	ldrb	r2, [r3, #0]
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	23ca      	movs	r3, #202	; 0xca
 80026fe:	0059      	lsls	r1, r3, #1
 8002700:	0013      	movs	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	189b      	adds	r3, r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	18c3      	adds	r3, r0, r3
 800270a:	185b      	adds	r3, r3, r1
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002710:	193b      	adds	r3, r7, r4
 8002712:	781a      	ldrb	r2, [r3, #0]
 8002714:	193b      	adds	r3, r7, r4
 8002716:	3201      	adds	r2, #1
 8002718:	701a      	strb	r2, [r3, #0]
 800271a:	230f      	movs	r3, #15
 800271c:	18fb      	adds	r3, r7, r3
 800271e:	781a      	ldrb	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	429a      	cmp	r2, r3
 8002726:	d3a1      	bcc.n	800266c <HAL_PCD_Init+0x120>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681c      	ldr	r4, [r3, #0]
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	466b      	mov	r3, sp
 8002730:	001a      	movs	r2, r3
 8002732:	0003      	movs	r3, r0
 8002734:	3310      	adds	r3, #16
 8002736:	cb62      	ldmia	r3!, {r1, r5, r6}
 8002738:	c262      	stmia	r2!, {r1, r5, r6}
 800273a:	cb62      	ldmia	r3!, {r1, r5, r6}
 800273c:	c262      	stmia	r2!, {r1, r5, r6}
 800273e:	cb62      	ldmia	r3!, {r1, r5, r6}
 8002740:	c262      	stmia	r2!, {r1, r5, r6}
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	6841      	ldr	r1, [r0, #4]
 8002748:	6882      	ldr	r2, [r0, #8]
 800274a:	68c3      	ldr	r3, [r0, #12]
 800274c:	0020      	movs	r0, r4
 800274e:	f003 fcb9 	bl	80060c4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2238      	movs	r2, #56	; 0x38
 8002756:	2100      	movs	r1, #0
 8002758:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a07      	ldr	r2, [pc, #28]	; (800277c <HAL_PCD_Init+0x230>)
 800275e:	2101      	movs	r1, #1
 8002760:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002766:	2b01      	cmp	r3, #1
 8002768:	d103      	bne.n	8002772 <HAL_PCD_Init+0x226>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	0018      	movs	r0, r3
 800276e:	f001 fcb1 	bl	80040d4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	0018      	movs	r0, r3
 8002776:	46bd      	mov	sp, r7
 8002778:	b005      	add	sp, #20
 800277a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800277c:	000002bd 	.word	0x000002bd

08002780 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	23af      	movs	r3, #175	; 0xaf
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	5cd3      	ldrb	r3, [r2, r3]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d101      	bne.n	8002798 <HAL_PCD_Start+0x18>
 8002794:	2302      	movs	r3, #2
 8002796:	e014      	b.n	80027c2 <HAL_PCD_Start+0x42>
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	23af      	movs	r3, #175	; 0xaf
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	2101      	movs	r1, #1
 80027a0:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	0018      	movs	r0, r3
 80027a8:	f003 fc46 	bl	8006038 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	0018      	movs	r0, r3
 80027b2:	f005 fb16 	bl	8007de2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	23af      	movs	r3, #175	; 0xaf
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	2100      	movs	r1, #0
 80027be:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	0018      	movs	r0, r3
 80027c4:	46bd      	mov	sp, r7
 80027c6:	b002      	add	sp, #8
 80027c8:	bd80      	pop	{r7, pc}
	...

080027cc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	0018      	movs	r0, r3
 80027da:	f005 fb12 	bl	8007e02 <USB_ReadInterrupts>
 80027de:	0003      	movs	r3, r0
 80027e0:	60fb      	str	r3, [r7, #12]

  /* check if this is an USB pending IT */
  if ((SYSCFG->IT_LINE_SR[8] & (0x1U << 2)) == 0U)
 80027e2:	4a7c      	ldr	r2, [pc, #496]	; (80029d4 <HAL_PCD_IRQHandler+0x208>)
 80027e4:	23a0      	movs	r3, #160	; 0xa0
 80027e6:	58d3      	ldr	r3, [r2, r3]
 80027e8:	2204      	movs	r2, #4
 80027ea:	4013      	ands	r3, r2
 80027ec:	d100      	bne.n	80027f0 <HAL_PCD_IRQHandler+0x24>
 80027ee:	e0ed      	b.n	80029cc <HAL_PCD_IRQHandler+0x200>
  {
    return;
  }

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	2380      	movs	r3, #128	; 0x80
 80027f4:	021b      	lsls	r3, r3, #8
 80027f6:	4013      	ands	r3, r2
 80027f8:	d004      	beq.n	8002804 <HAL_PCD_IRQHandler+0x38>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	0018      	movs	r0, r3
 80027fe:	f000 fb59 	bl	8002eb4 <PCD_EP_ISR_Handler>

    return;
 8002802:	e0e4      	b.n	80029ce <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	2380      	movs	r3, #128	; 0x80
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	4013      	ands	r3, r2
 800280c:	d011      	beq.n	8002832 <HAL_PCD_IRQHandler+0x66>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	496f      	ldr	r1, [pc, #444]	; (80029d8 <HAL_PCD_IRQHandler+0x20c>)
 800281a:	400a      	ands	r2, r1
 800281c:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	0018      	movs	r0, r3
 8002822:	f008 f89a 	bl	800a95a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2100      	movs	r1, #0
 800282a:	0018      	movs	r0, r3
 800282c:	f000 f8e4 	bl	80029f8 <HAL_PCD_SetAddress>

    return;
 8002830:	e0cd      	b.n	80029ce <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	2380      	movs	r3, #128	; 0x80
 8002836:	01db      	lsls	r3, r3, #7
 8002838:	4013      	ands	r3, r2
 800283a:	d008      	beq.n	800284e <HAL_PCD_IRQHandler+0x82>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4965      	ldr	r1, [pc, #404]	; (80029dc <HAL_PCD_IRQHandler+0x210>)
 8002848:	400a      	ands	r2, r1
 800284a:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 800284c:	e0bf      	b.n	80029ce <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	2380      	movs	r3, #128	; 0x80
 8002852:	019b      	lsls	r3, r3, #6
 8002854:	4013      	ands	r3, r2
 8002856:	d008      	beq.n	800286a <HAL_PCD_IRQHandler+0x9e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	495f      	ldr	r1, [pc, #380]	; (80029e0 <HAL_PCD_IRQHandler+0x214>)
 8002864:	400a      	ands	r2, r1
 8002866:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 8002868:	e0b1      	b.n	80029ce <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	2380      	movs	r3, #128	; 0x80
 800286e:	015b      	lsls	r3, r3, #5
 8002870:	4013      	ands	r3, r2
 8002872:	d02c      	beq.n	80028ce <HAL_PCD_IRQHandler+0x102>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2104      	movs	r1, #4
 8002880:	438a      	bics	r2, r1
 8002882:	641a      	str	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2108      	movs	r1, #8
 8002890:	438a      	bics	r2, r1
 8002892:	641a      	str	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	23bd      	movs	r3, #189	; 0xbd
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	5cd3      	ldrb	r3, [r2, r3]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d109      	bne.n	80028b4 <HAL_PCD_IRQHandler+0xe8>
    {
      hpcd->LPM_State = LPM_L0;
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	23bd      	movs	r3, #189	; 0xbd
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	2100      	movs	r1, #0
 80028a8:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2100      	movs	r1, #0
 80028ae:	0018      	movs	r0, r3
 80028b0:	f001 fc32 	bl	8004118 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	0018      	movs	r0, r3
 80028b8:	f008 f890 	bl	800a9dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4947      	ldr	r1, [pc, #284]	; (80029e4 <HAL_PCD_IRQHandler+0x218>)
 80028c8:	400a      	ands	r2, r1
 80028ca:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 80028cc:	e07f      	b.n	80029ce <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	2380      	movs	r3, #128	; 0x80
 80028d2:	011b      	lsls	r3, r3, #4
 80028d4:	4013      	ands	r3, r2
 80028d6:	d01c      	beq.n	8002912 <HAL_PCD_IRQHandler+0x146>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2108      	movs	r1, #8
 80028e4:	430a      	orrs	r2, r1
 80028e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	493d      	ldr	r1, [pc, #244]	; (80029e8 <HAL_PCD_IRQHandler+0x21c>)
 80028f4:	400a      	ands	r2, r1
 80028f6:	645a      	str	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2104      	movs	r1, #4
 8002904:	430a      	orrs	r2, r1
 8002906:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	0018      	movs	r0, r3
 800290c:	f008 f84a 	bl	800a9a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002910:	e05d      	b.n	80029ce <HAL_PCD_IRQHandler+0x202>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2280      	movs	r2, #128	; 0x80
 8002916:	4013      	ands	r3, r2
 8002918:	d038      	beq.n	800298c <HAL_PCD_IRQHandler+0x1c0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4931      	ldr	r1, [pc, #196]	; (80029ec <HAL_PCD_IRQHandler+0x220>)
 8002926:	400a      	ands	r2, r1
 8002928:	645a      	str	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	23bd      	movs	r3, #189	; 0xbd
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	5cd3      	ldrb	r3, [r2, r3]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d125      	bne.n	8002982 <HAL_PCD_IRQHandler+0x1b6>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2104      	movs	r1, #4
 8002942:	430a      	orrs	r2, r1
 8002944:	641a      	str	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2108      	movs	r1, #8
 8002952:	430a      	orrs	r2, r1
 8002954:	641a      	str	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	23bd      	movs	r3, #189	; 0xbd
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	2101      	movs	r1, #1
 800295e:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002966:	089b      	lsrs	r3, r3, #2
 8002968:	223c      	movs	r2, #60	; 0x3c
 800296a:	4013      	ands	r3, r2
 800296c:	0019      	movs	r1, r3
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	23be      	movs	r3, #190	; 0xbe
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2101      	movs	r1, #1
 800297a:	0018      	movs	r0, r3
 800297c:	f001 fbcc 	bl	8004118 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002980:	e025      	b.n	80029ce <HAL_PCD_IRQHandler+0x202>
      HAL_PCD_SuspendCallback(hpcd);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	0018      	movs	r0, r3
 8002986:	f008 f80d 	bl	800a9a4 <HAL_PCD_SuspendCallback>
    return;
 800298a:	e020      	b.n	80029ce <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	2380      	movs	r3, #128	; 0x80
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4013      	ands	r3, r2
 8002994:	d00c      	beq.n	80029b0 <HAL_PCD_IRQHandler+0x1e4>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4913      	ldr	r1, [pc, #76]	; (80029f0 <HAL_PCD_IRQHandler+0x224>)
 80029a2:	400a      	ands	r2, r1
 80029a4:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	0018      	movs	r0, r3
 80029aa:	f007 ffc7 	bl	800a93c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80029ae:	e00e      	b.n	80029ce <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	2380      	movs	r3, #128	; 0x80
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	4013      	ands	r3, r2
 80029b8:	d009      	beq.n	80029ce <HAL_PCD_IRQHandler+0x202>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	490b      	ldr	r1, [pc, #44]	; (80029f4 <HAL_PCD_IRQHandler+0x228>)
 80029c6:	400a      	ands	r2, r1
 80029c8:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 80029ca:	e000      	b.n	80029ce <HAL_PCD_IRQHandler+0x202>
    return;
 80029cc:	46c0      	nop			; (mov r8, r8)
  }
}
 80029ce:	46bd      	mov	sp, r7
 80029d0:	b004      	add	sp, #16
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40010000 	.word	0x40010000
 80029d8:	0000fbff 	.word	0x0000fbff
 80029dc:	0000bfff 	.word	0x0000bfff
 80029e0:	0000dfff 	.word	0x0000dfff
 80029e4:	0000efff 	.word	0x0000efff
 80029e8:	0000f7ff 	.word	0x0000f7ff
 80029ec:	0000ff7f 	.word	0x0000ff7f
 80029f0:	0000fdff 	.word	0x0000fdff
 80029f4:	0000feff 	.word	0x0000feff

080029f8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	000a      	movs	r2, r1
 8002a02:	1cfb      	adds	r3, r7, #3
 8002a04:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	23af      	movs	r3, #175	; 0xaf
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	5cd3      	ldrb	r3, [r2, r3]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d101      	bne.n	8002a16 <HAL_PCD_SetAddress+0x1e>
 8002a12:	2302      	movs	r3, #2
 8002a14:	e017      	b.n	8002a46 <HAL_PCD_SetAddress+0x4e>
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	23af      	movs	r3, #175	; 0xaf
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	1cfa      	adds	r2, r7, #3
 8002a24:	2138      	movs	r1, #56	; 0x38
 8002a26:	7812      	ldrb	r2, [r2, #0]
 8002a28:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	1cfb      	adds	r3, r7, #3
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	0019      	movs	r1, r3
 8002a34:	0010      	movs	r0, r2
 8002a36:	f005 f9c1 	bl	8007dbc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	23af      	movs	r3, #175	; 0xaf
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	2100      	movs	r1, #0
 8002a42:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	0018      	movs	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b002      	add	sp, #8
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a4e:	b590      	push	{r4, r7, lr}
 8002a50:	b085      	sub	sp, #20
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	000c      	movs	r4, r1
 8002a58:	0010      	movs	r0, r2
 8002a5a:	0019      	movs	r1, r3
 8002a5c:	1cfb      	adds	r3, r7, #3
 8002a5e:	1c22      	adds	r2, r4, #0
 8002a60:	701a      	strb	r2, [r3, #0]
 8002a62:	003b      	movs	r3, r7
 8002a64:	1c02      	adds	r2, r0, #0
 8002a66:	801a      	strh	r2, [r3, #0]
 8002a68:	1cbb      	adds	r3, r7, #2
 8002a6a:	1c0a      	adds	r2, r1, #0
 8002a6c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a6e:	230b      	movs	r3, #11
 8002a70:	18fb      	adds	r3, r7, r3
 8002a72:	2200      	movs	r2, #0
 8002a74:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a76:	1cfb      	adds	r3, r7, #3
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	b25b      	sxtb	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	da10      	bge.n	8002aa2 <HAL_PCD_EP_Open+0x54>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a80:	1cfb      	adds	r3, r7, #3
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2207      	movs	r2, #7
 8002a86:	401a      	ands	r2, r3
 8002a88:	0013      	movs	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	189b      	adds	r3, r3, r2
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	3338      	adds	r3, #56	; 0x38
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	18d3      	adds	r3, r2, r3
 8002a96:	3304      	adds	r3, #4
 8002a98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	705a      	strb	r2, [r3, #1]
 8002aa0:	e010      	b.n	8002ac4 <HAL_PCD_EP_Open+0x76>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aa2:	1cfb      	adds	r3, r7, #3
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2207      	movs	r2, #7
 8002aa8:	401a      	ands	r2, r3
 8002aaa:	0013      	movs	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	189b      	adds	r3, r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	3379      	adds	r3, #121	; 0x79
 8002ab4:	33ff      	adds	r3, #255	; 0xff
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	18d3      	adds	r3, r2, r3
 8002aba:	3304      	adds	r3, #4
 8002abc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ac4:	1cfb      	adds	r3, r7, #3
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2207      	movs	r2, #7
 8002aca:	4013      	ands	r3, r2
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ad2:	003b      	movs	r3, r7
 8002ad4:	881a      	ldrh	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	1cba      	adds	r2, r7, #2
 8002ade:	7812      	ldrb	r2, [r2, #0]
 8002ae0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	785b      	ldrb	r3, [r3, #1]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d004      	beq.n	8002af4 <HAL_PCD_EP_Open+0xa6>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	819a      	strh	r2, [r3, #12]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002af4:	1cbb      	adds	r3, r7, #2
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d102      	bne.n	8002b02 <HAL_PCD_EP_Open+0xb4>
  {
    ep->data_pid_start = 0U;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	72da      	strb	r2, [r3, #11]
  }

  __HAL_LOCK(hpcd);
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	23af      	movs	r3, #175	; 0xaf
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	5cd3      	ldrb	r3, [r2, r3]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d101      	bne.n	8002b12 <HAL_PCD_EP_Open+0xc4>
 8002b0e:	2302      	movs	r3, #2
 8002b10:	e013      	b.n	8002b3a <HAL_PCD_EP_Open+0xec>
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	23af      	movs	r3, #175	; 0xaf
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	2101      	movs	r1, #1
 8002b1a:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	0011      	movs	r1, r2
 8002b24:	0018      	movs	r0, r3
 8002b26:	f003 faf7 	bl	8006118 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	23af      	movs	r3, #175	; 0xaf
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	2100      	movs	r1, #0
 8002b32:	54d1      	strb	r1, [r2, r3]

  return ret;
 8002b34:	230b      	movs	r3, #11
 8002b36:	18fb      	adds	r3, r7, r3
 8002b38:	781b      	ldrb	r3, [r3, #0]
}
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	b005      	add	sp, #20
 8002b40:	bd90      	pop	{r4, r7, pc}

08002b42 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b084      	sub	sp, #16
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
 8002b4a:	000a      	movs	r2, r1
 8002b4c:	1cfb      	adds	r3, r7, #3
 8002b4e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b50:	1cfb      	adds	r3, r7, #3
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	b25b      	sxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	da10      	bge.n	8002b7c <HAL_PCD_EP_Close+0x3a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b5a:	1cfb      	adds	r3, r7, #3
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2207      	movs	r2, #7
 8002b60:	401a      	ands	r2, r3
 8002b62:	0013      	movs	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	189b      	adds	r3, r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	3338      	adds	r3, #56	; 0x38
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	18d3      	adds	r3, r2, r3
 8002b70:	3304      	adds	r3, #4
 8002b72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2201      	movs	r2, #1
 8002b78:	705a      	strb	r2, [r3, #1]
 8002b7a:	e010      	b.n	8002b9e <HAL_PCD_EP_Close+0x5c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b7c:	1cfb      	adds	r3, r7, #3
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2207      	movs	r2, #7
 8002b82:	401a      	ands	r2, r3
 8002b84:	0013      	movs	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	189b      	adds	r3, r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	3379      	adds	r3, #121	; 0x79
 8002b8e:	33ff      	adds	r3, #255	; 0xff
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	18d3      	adds	r3, r2, r3
 8002b94:	3304      	adds	r3, #4
 8002b96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002b9e:	1cfb      	adds	r3, r7, #3
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2207      	movs	r2, #7
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	23af      	movs	r3, #175	; 0xaf
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	5cd3      	ldrb	r3, [r2, r3]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d101      	bne.n	8002bbc <HAL_PCD_EP_Close+0x7a>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	e011      	b.n	8002be0 <HAL_PCD_EP_Close+0x9e>
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	23af      	movs	r3, #175	; 0xaf
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	0011      	movs	r1, r2
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f003 fde6 	bl	80067a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	23af      	movs	r3, #175	; 0xaf
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	2100      	movs	r1, #0
 8002bdc:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	0018      	movs	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	b004      	add	sp, #16
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	607a      	str	r2, [r7, #4]
 8002bf2:	603b      	str	r3, [r7, #0]
 8002bf4:	200b      	movs	r0, #11
 8002bf6:	183b      	adds	r3, r7, r0
 8002bf8:	1c0a      	adds	r2, r1, #0
 8002bfa:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bfc:	0001      	movs	r1, r0
 8002bfe:	187b      	adds	r3, r7, r1
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	2207      	movs	r2, #7
 8002c04:	401a      	ands	r2, r3
 8002c06:	0013      	movs	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	189b      	adds	r3, r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	3379      	adds	r3, #121	; 0x79
 8002c10:	33ff      	adds	r3, #255	; 0xff
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	18d3      	adds	r3, r2, r3
 8002c16:	3304      	adds	r3, #4
 8002c18:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c32:	187b      	adds	r3, r7, r1
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2207      	movs	r2, #7
 8002c38:	4013      	ands	r3, r2
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c40:	187b      	adds	r3, r7, r1
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2207      	movs	r2, #7
 8002c46:	4013      	ands	r3, r2
 8002c48:	d107      	bne.n	8002c5a <HAL_PCD_EP_Receive+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	0011      	movs	r1, r2
 8002c52:	0018      	movs	r0, r3
 8002c54:	f003 ff0a 	bl	8006a6c <USB_EPStartXfer>
 8002c58:	e006      	b.n	8002c68 <HAL_PCD_EP_Receive+0x80>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	0011      	movs	r1, r2
 8002c62:	0018      	movs	r0, r3
 8002c64:	f003 ff02 	bl	8006a6c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	b006      	add	sp, #24
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b082      	sub	sp, #8
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
 8002c7a:	000a      	movs	r2, r1
 8002c7c:	1cfb      	adds	r3, r7, #3
 8002c7e:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002c80:	1cfb      	adds	r3, r7, #3
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2207      	movs	r2, #7
 8002c86:	401a      	ands	r2, r3
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	23cc      	movs	r3, #204	; 0xcc
 8002c8c:	0059      	lsls	r1, r3, #1
 8002c8e:	0013      	movs	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	189b      	adds	r3, r3, r2
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	18c3      	adds	r3, r0, r3
 8002c98:	185b      	adds	r3, r3, r1
 8002c9a:	681b      	ldr	r3, [r3, #0]
}
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	b002      	add	sp, #8
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	607a      	str	r2, [r7, #4]
 8002cae:	603b      	str	r3, [r7, #0]
 8002cb0:	200b      	movs	r0, #11
 8002cb2:	183b      	adds	r3, r7, r0
 8002cb4:	1c0a      	adds	r2, r1, #0
 8002cb6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cb8:	183b      	adds	r3, r7, r0
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2207      	movs	r2, #7
 8002cbe:	401a      	ands	r2, r3
 8002cc0:	0013      	movs	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	189b      	adds	r3, r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	3338      	adds	r3, #56	; 0x38
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	18d3      	adds	r3, r2, r3
 8002cce:	3304      	adds	r3, #4
 8002cd0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2224      	movs	r2, #36	; 0x24
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cf8:	183b      	adds	r3, r7, r0
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2207      	movs	r2, #7
 8002cfe:	4013      	ands	r3, r2
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d06:	183b      	adds	r3, r7, r0
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	2207      	movs	r2, #7
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d107      	bne.n	8002d20 <HAL_PCD_EP_Transmit+0x7c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	0011      	movs	r1, r2
 8002d18:	0018      	movs	r0, r3
 8002d1a:	f003 fea7 	bl	8006a6c <USB_EPStartXfer>
 8002d1e:	e006      	b.n	8002d2e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	0011      	movs	r1, r2
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f003 fe9f 	bl	8006a6c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	0018      	movs	r0, r3
 8002d32:	46bd      	mov	sp, r7
 8002d34:	b006      	add	sp, #24
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	000a      	movs	r2, r1
 8002d42:	1cfb      	adds	r3, r7, #3
 8002d44:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d46:	1cfb      	adds	r3, r7, #3
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2207      	movs	r2, #7
 8002d4c:	401a      	ands	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d901      	bls.n	8002d5a <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e048      	b.n	8002dec <HAL_PCD_EP_SetStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d5a:	1cfb      	adds	r3, r7, #3
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	b25b      	sxtb	r3, r3
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	da10      	bge.n	8002d86 <HAL_PCD_EP_SetStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d64:	1cfb      	adds	r3, r7, #3
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2207      	movs	r2, #7
 8002d6a:	401a      	ands	r2, r3
 8002d6c:	0013      	movs	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	189b      	adds	r3, r3, r2
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	3338      	adds	r3, #56	; 0x38
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	18d3      	adds	r3, r2, r3
 8002d7a:	3304      	adds	r3, #4
 8002d7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2201      	movs	r2, #1
 8002d82:	705a      	strb	r2, [r3, #1]
 8002d84:	e00e      	b.n	8002da4 <HAL_PCD_EP_SetStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d86:	1cfb      	adds	r3, r7, #3
 8002d88:	781a      	ldrb	r2, [r3, #0]
 8002d8a:	0013      	movs	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	189b      	adds	r3, r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	3379      	adds	r3, #121	; 0x79
 8002d94:	33ff      	adds	r3, #255	; 0xff
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	18d3      	adds	r3, r2, r3
 8002d9a:	3304      	adds	r3, #4
 8002d9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2201      	movs	r2, #1
 8002da8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002daa:	1cfb      	adds	r3, r7, #3
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2207      	movs	r2, #7
 8002db0:	4013      	ands	r3, r2
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	23af      	movs	r3, #175	; 0xaf
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	5cd3      	ldrb	r3, [r2, r3]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d101      	bne.n	8002dc8 <HAL_PCD_EP_SetStall+0x90>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e011      	b.n	8002dec <HAL_PCD_EP_SetStall+0xb4>
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	23af      	movs	r3, #175	; 0xaf
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	2101      	movs	r1, #1
 8002dd0:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	0011      	movs	r1, r2
 8002dda:	0018      	movs	r0, r3
 8002ddc:	f004 ff1a 	bl	8007c14 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	23af      	movs	r3, #175	; 0xaf
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	2100      	movs	r1, #0
 8002de8:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	0018      	movs	r0, r3
 8002dee:	46bd      	mov	sp, r7
 8002df0:	b004      	add	sp, #16
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	000a      	movs	r2, r1
 8002dfe:	1cfb      	adds	r3, r7, #3
 8002e00:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e02:	1cfb      	adds	r3, r7, #3
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	220f      	movs	r2, #15
 8002e08:	401a      	ands	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d901      	bls.n	8002e16 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e04a      	b.n	8002eac <HAL_PCD_EP_ClrStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e16:	1cfb      	adds	r3, r7, #3
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	b25b      	sxtb	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	da10      	bge.n	8002e42 <HAL_PCD_EP_ClrStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e20:	1cfb      	adds	r3, r7, #3
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	2207      	movs	r2, #7
 8002e26:	401a      	ands	r2, r3
 8002e28:	0013      	movs	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	189b      	adds	r3, r3, r2
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	3338      	adds	r3, #56	; 0x38
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	18d3      	adds	r3, r2, r3
 8002e36:	3304      	adds	r3, #4
 8002e38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	705a      	strb	r2, [r3, #1]
 8002e40:	e010      	b.n	8002e64 <HAL_PCD_EP_ClrStall+0x70>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e42:	1cfb      	adds	r3, r7, #3
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2207      	movs	r2, #7
 8002e48:	401a      	ands	r2, r3
 8002e4a:	0013      	movs	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	189b      	adds	r3, r3, r2
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	3379      	adds	r3, #121	; 0x79
 8002e54:	33ff      	adds	r3, #255	; 0xff
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	18d3      	adds	r3, r2, r3
 8002e5a:	3304      	adds	r3, #4
 8002e5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e6a:	1cfb      	adds	r3, r7, #3
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2207      	movs	r2, #7
 8002e70:	4013      	ands	r3, r2
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	23af      	movs	r3, #175	; 0xaf
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	5cd3      	ldrb	r3, [r2, r3]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d101      	bne.n	8002e88 <HAL_PCD_EP_ClrStall+0x94>
 8002e84:	2302      	movs	r3, #2
 8002e86:	e011      	b.n	8002eac <HAL_PCD_EP_ClrStall+0xb8>
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	23af      	movs	r3, #175	; 0xaf
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	2101      	movs	r1, #1
 8002e90:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	0011      	movs	r1, r2
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	f004 fefc 	bl	8007c98 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	23af      	movs	r3, #175	; 0xaf
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	0018      	movs	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	b004      	add	sp, #16
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002eb4:	b5b0      	push	{r4, r5, r7, lr}
 8002eb6:	b08e      	sub	sp, #56	; 0x38
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ebc:	f000 fb90 	bl	80035e0 <PCD_EP_ISR_Handler+0x72c>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ec6:	202a      	movs	r0, #42	; 0x2a
 8002ec8:	183b      	adds	r3, r7, r0
 8002eca:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 8002ecc:	183b      	adds	r3, r7, r0
 8002ece:	881b      	ldrh	r3, [r3, #0]
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	2429      	movs	r4, #41	; 0x29
 8002ed4:	193b      	adds	r3, r7, r4
 8002ed6:	210f      	movs	r1, #15
 8002ed8:	400a      	ands	r2, r1
 8002eda:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8002edc:	193b      	adds	r3, r7, r4
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d000      	beq.n	8002ee6 <PCD_EP_ISR_Handler+0x32>
 8002ee4:	e136      	b.n	8003154 <PCD_EP_ISR_Handler+0x2a0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002ee6:	183b      	adds	r3, r7, r0
 8002ee8:	881b      	ldrh	r3, [r3, #0]
 8002eea:	2210      	movs	r2, #16
 8002eec:	4013      	ands	r3, r2
 8002eee:	d143      	bne.n	8002f78 <PCD_EP_ISR_Handler+0xc4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4acb      	ldr	r2, [pc, #812]	; (8003224 <PCD_EP_ISR_Handler+0x370>)
 8002ef8:	4013      	ands	r3, r2
 8002efa:	60bb      	str	r3, [r7, #8]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	2180      	movs	r1, #128	; 0x80
 8002f04:	0209      	lsls	r1, r1, #8
 8002f06:	430a      	orrs	r2, r1
 8002f08:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	333c      	adds	r3, #60	; 0x3c
 8002f0e:	637b      	str	r3, [r7, #52]	; 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	4ac4      	ldr	r2, [pc, #784]	; (8003228 <PCD_EP_ISR_Handler+0x374>)
 8002f18:	4694      	mov	ip, r2
 8002f1a:	4463      	add	r3, ip
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	0c1b      	lsrs	r3, r3, #16
 8002f20:	059b      	lsls	r3, r3, #22
 8002f22:	0d9a      	lsrs	r2, r3, #22
 8002f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f26:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f2a:	695a      	ldr	r2, [r3, #20]
 8002f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	18d2      	adds	r2, r2, r3
 8002f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f34:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2100      	movs	r1, #0
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	f007 fce0 	bl	800a900 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2238      	movs	r2, #56	; 0x38
 8002f44:	5c9b      	ldrb	r3, [r3, r2]
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d100      	bne.n	8002f4e <PCD_EP_ISR_Handler+0x9a>
 8002f4c:	e348      	b.n	80035e0 <PCD_EP_ISR_Handler+0x72c>
 8002f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d000      	beq.n	8002f58 <PCD_EP_ISR_Handler+0xa4>
 8002f56:	e343      	b.n	80035e0 <PCD_EP_ISR_Handler+0x72c>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2238      	movs	r2, #56	; 0x38
 8002f5c:	5c9b      	ldrb	r3, [r3, r2]
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2280      	movs	r2, #128	; 0x80
 8002f62:	4252      	negs	r2, r2
 8002f64:	4313      	orrs	r3, r2
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	64da      	str	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2238      	movs	r2, #56	; 0x38
 8002f72:	2100      	movs	r1, #0
 8002f74:	5499      	strb	r1, [r3, r2]
 8002f76:	e333      	b.n	80035e0 <PCD_EP_ISR_Handler+0x72c>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	337d      	adds	r3, #125	; 0x7d
 8002f7c:	33ff      	adds	r3, #255	; 0xff
 8002f7e:	637b      	str	r3, [r7, #52]	; 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	2126      	movs	r1, #38	; 0x26
 8002f88:	187b      	adds	r3, r7, r1
 8002f8a:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002f8c:	187b      	adds	r3, r7, r1
 8002f8e:	881a      	ldrh	r2, [r3, #0]
 8002f90:	2380      	movs	r3, #128	; 0x80
 8002f92:	011b      	lsls	r3, r3, #4
 8002f94:	4013      	ands	r3, r2
 8002f96:	d02a      	beq.n	8002fee <PCD_EP_ISR_Handler+0x13a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	0019      	movs	r1, r3
 8002fa4:	0010      	movs	r0, r2
 8002fa6:	f7ff fa6b 	bl	8002480 <PCD_GET_EP_RX_CNT>
 8002faa:	0003      	movs	r3, r0
 8002fac:	001a      	movs	r2, r3
 8002fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6818      	ldr	r0, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	22b1      	movs	r2, #177	; 0xb1
 8002fba:	0092      	lsls	r2, r2, #2
 8002fbc:	1899      	adds	r1, r3, r2
 8002fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc0:	889a      	ldrh	r2, [r3, #4]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	f004 ff9e 	bl	8007f08 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a96      	ldr	r2, [pc, #600]	; (800322c <PCD_EP_ISR_Handler+0x378>)
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	2180      	movs	r1, #128	; 0x80
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f007 fc54 	bl	800a894 <HAL_PCD_SetupStageCallback>
 8002fec:	e2f8      	b.n	80035e0 <PCD_EP_ISR_Handler+0x72c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 8002fee:	2326      	movs	r3, #38	; 0x26
 8002ff0:	18fb      	adds	r3, r7, r3
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	5e9b      	ldrsh	r3, [r3, r2]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	db00      	blt.n	8002ffc <PCD_EP_ISR_Handler+0x148>
 8002ffa:	e2f1      	b.n	80035e0 <PCD_EP_ISR_Handler+0x72c>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a8a      	ldr	r2, [pc, #552]	; (800322c <PCD_EP_ISR_Handler+0x378>)
 8003004:	4013      	ands	r3, r2
 8003006:	617b      	str	r3, [r7, #20]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	2180      	movs	r1, #128	; 0x80
 8003010:	430a      	orrs	r2, r1
 8003012:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	b29b      	uxth	r3, r3
 800301e:	0019      	movs	r1, r3
 8003020:	0010      	movs	r0, r2
 8003022:	f7ff fa2d 	bl	8002480 <PCD_GET_EP_RX_CNT>
 8003026:	0003      	movs	r3, r0
 8003028:	001a      	movs	r2, r3
 800302a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800302c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800302e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d01a      	beq.n	800306c <PCD_EP_ISR_Handler+0x1b8>
 8003036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d016      	beq.n	800306c <PCD_EP_ISR_Handler+0x1b8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6818      	ldr	r0, [r3, #0]
 8003042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003044:	6959      	ldr	r1, [r3, #20]
 8003046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003048:	889a      	ldrh	r2, [r3, #4]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800304a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800304c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800304e:	b29b      	uxth	r3, r3
 8003050:	f004 ff5a 	bl	8007f08 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003056:	695a      	ldr	r2, [r3, #20]
 8003058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800305a:	69db      	ldr	r3, [r3, #28]
 800305c:	18d2      	adds	r2, r2, r3
 800305e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003060:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2100      	movs	r1, #0
 8003066:	0018      	movs	r0, r3
 8003068:	f007 fc29 	bl	800a8be <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	2126      	movs	r1, #38	; 0x26
 8003074:	187b      	adds	r3, r7, r1
 8003076:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003078:	187b      	adds	r3, r7, r1
 800307a:	881a      	ldrh	r2, [r3, #0]
 800307c:	2380      	movs	r3, #128	; 0x80
 800307e:	011b      	lsls	r3, r3, #4
 8003080:	4013      	ands	r3, r2
 8003082:	d000      	beq.n	8003086 <PCD_EP_ISR_Handler+0x1d2>
 8003084:	e2ac      	b.n	80035e0 <PCD_EP_ISR_Handler+0x72c>
 8003086:	187b      	adds	r3, r7, r1
 8003088:	881a      	ldrh	r2, [r3, #0]
 800308a:	23c0      	movs	r3, #192	; 0xc0
 800308c:	019b      	lsls	r3, r3, #6
 800308e:	401a      	ands	r2, r3
 8003090:	23c0      	movs	r3, #192	; 0xc0
 8003092:	019b      	lsls	r3, r3, #6
 8003094:	429a      	cmp	r2, r3
 8003096:	d100      	bne.n	800309a <PCD_EP_ISR_Handler+0x1e6>
 8003098:	e2a2      	b.n	80035e0 <PCD_EP_ISR_Handler+0x72c>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800309a:	4b63      	ldr	r3, [pc, #396]	; (8003228 <PCD_EP_ISR_Handler+0x374>)
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	4b62      	ldr	r3, [pc, #392]	; (8003228 <PCD_EP_ISR_Handler+0x374>)
 80030a0:	0412      	lsls	r2, r2, #16
 80030a2:	0c12      	lsrs	r2, r2, #16
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	2b3e      	cmp	r3, #62	; 0x3e
 80030ac:	d916      	bls.n	80030dc <PCD_EP_ISR_Handler+0x228>
 80030ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	095b      	lsrs	r3, r3, #5
 80030b4:	61bb      	str	r3, [r7, #24]
 80030b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	221f      	movs	r2, #31
 80030bc:	4013      	ands	r3, r2
 80030be:	d102      	bne.n	80030c6 <PCD_EP_ISR_Handler+0x212>
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	61bb      	str	r3, [r7, #24]
 80030c6:	4b58      	ldr	r3, [pc, #352]	; (8003228 <PCD_EP_ISR_Handler+0x374>)
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	069b      	lsls	r3, r3, #26
 80030ce:	431a      	orrs	r2, r3
 80030d0:	4b55      	ldr	r3, [pc, #340]	; (8003228 <PCD_EP_ISR_Handler+0x374>)
 80030d2:	2180      	movs	r1, #128	; 0x80
 80030d4:	0609      	lsls	r1, r1, #24
 80030d6:	430a      	orrs	r2, r1
 80030d8:	605a      	str	r2, [r3, #4]
 80030da:	e024      	b.n	8003126 <PCD_EP_ISR_Handler+0x272>
 80030dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10d      	bne.n	8003100 <PCD_EP_ISR_Handler+0x24c>
 80030e4:	4b50      	ldr	r3, [pc, #320]	; (8003228 <PCD_EP_ISR_Handler+0x374>)
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	4b4f      	ldr	r3, [pc, #316]	; (8003228 <PCD_EP_ISR_Handler+0x374>)
 80030ea:	4951      	ldr	r1, [pc, #324]	; (8003230 <PCD_EP_ISR_Handler+0x37c>)
 80030ec:	400a      	ands	r2, r1
 80030ee:	605a      	str	r2, [r3, #4]
 80030f0:	4b4d      	ldr	r3, [pc, #308]	; (8003228 <PCD_EP_ISR_Handler+0x374>)
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	4b4c      	ldr	r3, [pc, #304]	; (8003228 <PCD_EP_ISR_Handler+0x374>)
 80030f6:	2180      	movs	r1, #128	; 0x80
 80030f8:	0609      	lsls	r1, r1, #24
 80030fa:	430a      	orrs	r2, r1
 80030fc:	605a      	str	r2, [r3, #4]
 80030fe:	e012      	b.n	8003126 <PCD_EP_ISR_Handler+0x272>
 8003100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	085b      	lsrs	r3, r3, #1
 8003106:	61bb      	str	r3, [r7, #24]
 8003108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	2201      	movs	r2, #1
 800310e:	4013      	ands	r3, r2
 8003110:	d002      	beq.n	8003118 <PCD_EP_ISR_Handler+0x264>
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	3301      	adds	r3, #1
 8003116:	61bb      	str	r3, [r7, #24]
 8003118:	4b43      	ldr	r3, [pc, #268]	; (8003228 <PCD_EP_ISR_Handler+0x374>)
 800311a:	6859      	ldr	r1, [r3, #4]
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	069a      	lsls	r2, r3, #26
 8003120:	4b41      	ldr	r3, [pc, #260]	; (8003228 <PCD_EP_ISR_Handler+0x374>)
 8003122:	430a      	orrs	r2, r1
 8003124:	605a      	str	r2, [r3, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a41      	ldr	r2, [pc, #260]	; (8003234 <PCD_EP_ISR_Handler+0x380>)
 800312e:	4013      	ands	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	2280      	movs	r2, #128	; 0x80
 8003136:	0152      	lsls	r2, r2, #5
 8003138:	4053      	eors	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	2280      	movs	r2, #128	; 0x80
 8003140:	0192      	lsls	r2, r2, #6
 8003142:	4053      	eors	r3, r2
 8003144:	613b      	str	r3, [r7, #16]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	493a      	ldr	r1, [pc, #232]	; (8003238 <PCD_EP_ISR_Handler+0x384>)
 800314e:	430a      	orrs	r2, r1
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	e245      	b.n	80035e0 <PCD_EP_ISR_Handler+0x72c>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	001a      	movs	r2, r3
 800315a:	2129      	movs	r1, #41	; 0x29
 800315c:	187b      	adds	r3, r7, r1
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	18d3      	adds	r3, r2, r3
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	2026      	movs	r0, #38	; 0x26
 8003168:	183b      	adds	r3, r7, r0
 800316a:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_VTRX) != 0U)
 800316c:	183b      	adds	r3, r7, r0
 800316e:	2200      	movs	r2, #0
 8003170:	5e9b      	ldrsh	r3, [r3, r2]
 8003172:	2b00      	cmp	r3, #0
 8003174:	db00      	blt.n	8003178 <PCD_EP_ISR_Handler+0x2c4>
 8003176:	e0e4      	b.n	8003342 <PCD_EP_ISR_Handler+0x48e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	001a      	movs	r2, r3
 800317e:	187b      	adds	r3, r7, r1
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	18d3      	adds	r3, r2, r3
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a28      	ldr	r2, [pc, #160]	; (800322c <PCD_EP_ISR_Handler+0x378>)
 800318a:	4013      	ands	r3, r2
 800318c:	623b      	str	r3, [r7, #32]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	001a      	movs	r2, r3
 8003194:	0008      	movs	r0, r1
 8003196:	187b      	adds	r3, r7, r1
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	18d3      	adds	r3, r2, r3
 800319e:	6a3a      	ldr	r2, [r7, #32]
 80031a0:	2180      	movs	r1, #128	; 0x80
 80031a2:	430a      	orrs	r2, r1
 80031a4:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80031a6:	183b      	adds	r3, r7, r0
 80031a8:	781a      	ldrb	r2, [r3, #0]
 80031aa:	0013      	movs	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	189b      	adds	r3, r3, r2
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	3379      	adds	r3, #121	; 0x79
 80031b4:	33ff      	adds	r3, #255	; 0xff
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	18d3      	adds	r3, r2, r3
 80031ba:	3304      	adds	r3, #4
 80031bc:	637b      	str	r3, [r7, #52]	; 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80031be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031c0:	7a9b      	ldrb	r3, [r3, #10]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d11d      	bne.n	8003202 <PCD_EP_ISR_Handler+0x34e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	252c      	movs	r5, #44	; 0x2c
 80031d2:	197c      	adds	r4, r7, r5
 80031d4:	0019      	movs	r1, r3
 80031d6:	0010      	movs	r0, r2
 80031d8:	f7ff f952 	bl	8002480 <PCD_GET_EP_RX_CNT>
 80031dc:	0003      	movs	r3, r0
 80031de:	8023      	strh	r3, [r4, #0]

          if (count != 0U)
 80031e0:	002c      	movs	r4, r5
 80031e2:	193b      	adds	r3, r7, r4
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d100      	bne.n	80031ec <PCD_EP_ISR_Handler+0x338>
 80031ea:	e082      	b.n	80032f2 <PCD_EP_ISR_Handler+0x43e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6818      	ldr	r0, [r3, #0]
 80031f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031f2:	6959      	ldr	r1, [r3, #20]
 80031f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031f6:	889a      	ldrh	r2, [r3, #4]
 80031f8:	193b      	adds	r3, r7, r4
 80031fa:	881b      	ldrh	r3, [r3, #0]
 80031fc:	f004 fe84 	bl	8007f08 <USB_ReadPMA>
 8003200:	e077      	b.n	80032f2 <PCD_EP_ISR_Handler+0x43e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003204:	78db      	ldrb	r3, [r3, #3]
 8003206:	2b02      	cmp	r3, #2
 8003208:	d118      	bne.n	800323c <PCD_EP_ISR_Handler+0x388>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800320a:	232c      	movs	r3, #44	; 0x2c
 800320c:	18fc      	adds	r4, r7, r3
 800320e:	2326      	movs	r3, #38	; 0x26
 8003210:	18fb      	adds	r3, r7, r3
 8003212:	881a      	ldrh	r2, [r3, #0]
 8003214:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	0018      	movs	r0, r3
 800321a:	f000 f9ef 	bl	80035fc <HAL_PCD_EP_DB_Receive>
 800321e:	0003      	movs	r3, r0
 8003220:	8023      	strh	r3, [r4, #0]
 8003222:	e066      	b.n	80032f2 <PCD_EP_ISR_Handler+0x43e>
 8003224:	07ff8f0f 	.word	0x07ff8f0f
 8003228:	40009800 	.word	0x40009800
 800322c:	07ff0f8f 	.word	0x07ff0f8f
 8003230:	83ffffff 	.word	0x83ffffff
 8003234:	07ffbf8f 	.word	0x07ffbf8f
 8003238:	00008080 	.word	0x00008080
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	001a      	movs	r2, r3
 8003242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	18d3      	adds	r3, r2, r3
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4adb      	ldr	r2, [pc, #876]	; (80035bc <PCD_EP_ISR_Handler+0x708>)
 800324e:	4013      	ands	r3, r2
 8003250:	61fb      	str	r3, [r7, #28]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	001a      	movs	r2, r3
 8003258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	18d3      	adds	r3, r2, r3
 8003260:	69fa      	ldr	r2, [r7, #28]
 8003262:	49d7      	ldr	r1, [pc, #860]	; (80035c0 <PCD_EP_ISR_Handler+0x70c>)
 8003264:	430a      	orrs	r2, r1
 8003266:	601a      	str	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	001a      	movs	r2, r3
 800326e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	18d3      	adds	r3, r2, r3
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	2380      	movs	r3, #128	; 0x80
 800327a:	01db      	lsls	r3, r3, #7
 800327c:	4013      	ands	r3, r2
 800327e:	d01c      	beq.n	80032ba <PCD_EP_ISR_Handler+0x406>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	b29b      	uxth	r3, r3
 800328a:	252c      	movs	r5, #44	; 0x2c
 800328c:	197c      	adds	r4, r7, r5
 800328e:	0019      	movs	r1, r3
 8003290:	0010      	movs	r0, r2
 8003292:	f7ff f917 	bl	80024c4 <PCD_GET_EP_DBUF0_CNT>
 8003296:	0003      	movs	r3, r0
 8003298:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 800329a:	002c      	movs	r4, r5
 800329c:	193b      	adds	r3, r7, r4
 800329e:	881b      	ldrh	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d026      	beq.n	80032f2 <PCD_EP_ISR_Handler+0x43e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6818      	ldr	r0, [r3, #0]
 80032a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032aa:	6959      	ldr	r1, [r3, #20]
 80032ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ae:	88da      	ldrh	r2, [r3, #6]
 80032b0:	193b      	adds	r3, r7, r4
 80032b2:	881b      	ldrh	r3, [r3, #0]
 80032b4:	f004 fe28 	bl	8007f08 <USB_ReadPMA>
 80032b8:	e01b      	b.n	80032f2 <PCD_EP_ISR_Handler+0x43e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	252c      	movs	r5, #44	; 0x2c
 80032c6:	197c      	adds	r4, r7, r5
 80032c8:	0019      	movs	r1, r3
 80032ca:	0010      	movs	r0, r2
 80032cc:	f7ff f91c 	bl	8002508 <PCD_GET_EP_DBUF1_CNT>
 80032d0:	0003      	movs	r3, r0
 80032d2:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 80032d4:	002c      	movs	r4, r5
 80032d6:	193b      	adds	r3, r7, r4
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d009      	beq.n	80032f2 <PCD_EP_ISR_Handler+0x43e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6818      	ldr	r0, [r3, #0]
 80032e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032e4:	6959      	ldr	r1, [r3, #20]
 80032e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032e8:	891a      	ldrh	r2, [r3, #8]
 80032ea:	193b      	adds	r3, r7, r4
 80032ec:	881b      	ldrh	r3, [r3, #0]
 80032ee:	f004 fe0b 	bl	8007f08 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80032f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032f4:	69da      	ldr	r2, [r3, #28]
 80032f6:	212c      	movs	r1, #44	; 0x2c
 80032f8:	187b      	adds	r3, r7, r1
 80032fa:	881b      	ldrh	r3, [r3, #0]
 80032fc:	18d2      	adds	r2, r2, r3
 80032fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003300:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003304:	695a      	ldr	r2, [r3, #20]
 8003306:	187b      	adds	r3, r7, r1
 8003308:	881b      	ldrh	r3, [r3, #0]
 800330a:	18d2      	adds	r2, r2, r3
 800330c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800330e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d005      	beq.n	8003324 <PCD_EP_ISR_Handler+0x470>
 8003318:	187b      	adds	r3, r7, r1
 800331a:	881a      	ldrh	r2, [r3, #0]
 800331c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	429a      	cmp	r2, r3
 8003322:	d207      	bcs.n	8003334 <PCD_EP_ISR_Handler+0x480>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003326:	781a      	ldrb	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	0011      	movs	r1, r2
 800332c:	0018      	movs	r0, r3
 800332e:	f007 fac6 	bl	800a8be <HAL_PCD_DataOutStageCallback>
 8003332:	e006      	b.n	8003342 <PCD_EP_ISR_Handler+0x48e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800333a:	0011      	movs	r1, r2
 800333c:	0018      	movs	r0, r3
 800333e:	f003 fb95 	bl	8006a6c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 8003342:	2026      	movs	r0, #38	; 0x26
 8003344:	183b      	adds	r3, r7, r0
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	2280      	movs	r2, #128	; 0x80
 800334a:	4013      	ands	r3, r2
 800334c:	d100      	bne.n	8003350 <PCD_EP_ISR_Handler+0x49c>
 800334e:	e147      	b.n	80035e0 <PCD_EP_ISR_Handler+0x72c>
      {
        ep = &hpcd->IN_ep[epindex];
 8003350:	2129      	movs	r1, #41	; 0x29
 8003352:	187b      	adds	r3, r7, r1
 8003354:	781a      	ldrb	r2, [r3, #0]
 8003356:	0013      	movs	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	189b      	adds	r3, r3, r2
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	3338      	adds	r3, #56	; 0x38
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	18d3      	adds	r3, r2, r3
 8003364:	3304      	adds	r3, #4
 8003366:	637b      	str	r3, [r7, #52]	; 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	001a      	movs	r2, r3
 800336e:	187b      	adds	r3, r7, r1
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	18d3      	adds	r3, r2, r3
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a92      	ldr	r2, [pc, #584]	; (80035c4 <PCD_EP_ISR_Handler+0x710>)
 800337a:	4013      	ands	r3, r2
 800337c:	633b      	str	r3, [r7, #48]	; 0x30
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	001a      	movs	r2, r3
 8003384:	187b      	adds	r3, r7, r1
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	18d3      	adds	r3, r2, r3
 800338c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800338e:	2180      	movs	r1, #128	; 0x80
 8003390:	0209      	lsls	r1, r1, #8
 8003392:	430a      	orrs	r2, r1
 8003394:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003398:	78db      	ldrb	r3, [r3, #3]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d000      	beq.n	80033a0 <PCD_EP_ISR_Handler+0x4ec>
 800339e:	e0c3      	b.n	8003528 <PCD_EP_ISR_Handler+0x674>
        {
          ep->xfer_len = 0U;
 80033a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033a2:	2200      	movs	r2, #0
 80033a4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80033a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033a8:	7a9b      	ldrb	r3, [r3, #10]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d100      	bne.n	80033b0 <PCD_EP_ISR_Handler+0x4fc>
 80033ae:	e0b3      	b.n	8003518 <PCD_EP_ISR_Handler+0x664>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80033b0:	183b      	adds	r3, r7, r0
 80033b2:	881b      	ldrh	r3, [r3, #0]
 80033b4:	2240      	movs	r2, #64	; 0x40
 80033b6:	4013      	ands	r3, r2
 80033b8:	d057      	beq.n	800346a <PCD_EP_ISR_Handler+0x5b6>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033bc:	785b      	ldrb	r3, [r3, #1]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d131      	bne.n	8003426 <PCD_EP_ISR_Handler+0x572>
 80033c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	4a7f      	ldr	r2, [pc, #508]	; (80035c8 <PCD_EP_ISR_Handler+0x714>)
 80033ca:	4694      	mov	ip, r2
 80033cc:	4463      	add	r3, ip
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	497c      	ldr	r1, [pc, #496]	; (80035c8 <PCD_EP_ISR_Handler+0x714>)
 80033d8:	468c      	mov	ip, r1
 80033da:	4463      	add	r3, ip
 80033dc:	0412      	lsls	r2, r2, #16
 80033de:	0c12      	lsrs	r2, r2, #16
 80033e0:	601a      	str	r2, [r3, #0]
 80033e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	4a77      	ldr	r2, [pc, #476]	; (80035c8 <PCD_EP_ISR_Handler+0x714>)
 80033ea:	4694      	mov	ip, r2
 80033ec:	4463      	add	r3, ip
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	4974      	ldr	r1, [pc, #464]	; (80035c8 <PCD_EP_ISR_Handler+0x714>)
 80033f8:	468c      	mov	ip, r1
 80033fa:	4463      	add	r3, ip
 80033fc:	4973      	ldr	r1, [pc, #460]	; (80035cc <PCD_EP_ISR_Handler+0x718>)
 80033fe:	400a      	ands	r2, r1
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	4a6f      	ldr	r2, [pc, #444]	; (80035c8 <PCD_EP_ISR_Handler+0x714>)
 800340a:	4694      	mov	ip, r2
 800340c:	4463      	add	r3, ip
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	496c      	ldr	r1, [pc, #432]	; (80035c8 <PCD_EP_ISR_Handler+0x714>)
 8003418:	468c      	mov	ip, r1
 800341a:	4463      	add	r3, ip
 800341c:	2180      	movs	r1, #128	; 0x80
 800341e:	0609      	lsls	r1, r1, #24
 8003420:	430a      	orrs	r2, r1
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	e078      	b.n	8003518 <PCD_EP_ISR_Handler+0x664>
 8003426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003428:	785b      	ldrb	r3, [r3, #1]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d174      	bne.n	8003518 <PCD_EP_ISR_Handler+0x664>
 800342e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	4a64      	ldr	r2, [pc, #400]	; (80035c8 <PCD_EP_ISR_Handler+0x714>)
 8003436:	4694      	mov	ip, r2
 8003438:	4463      	add	r3, ip
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	4961      	ldr	r1, [pc, #388]	; (80035c8 <PCD_EP_ISR_Handler+0x714>)
 8003444:	468c      	mov	ip, r1
 8003446:	4463      	add	r3, ip
 8003448:	0412      	lsls	r2, r2, #16
 800344a:	0c12      	lsrs	r2, r2, #16
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	4a5c      	ldr	r2, [pc, #368]	; (80035c8 <PCD_EP_ISR_Handler+0x714>)
 8003456:	189a      	adds	r2, r3, r2
 8003458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	495a      	ldr	r1, [pc, #360]	; (80035c8 <PCD_EP_ISR_Handler+0x714>)
 8003460:	468c      	mov	ip, r1
 8003462:	4463      	add	r3, ip
 8003464:	6812      	ldr	r2, [r2, #0]
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	e056      	b.n	8003518 <PCD_EP_ISR_Handler+0x664>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800346a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800346c:	785b      	ldrb	r3, [r3, #1]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d131      	bne.n	80034d6 <PCD_EP_ISR_Handler+0x622>
 8003472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	4a53      	ldr	r2, [pc, #332]	; (80035c8 <PCD_EP_ISR_Handler+0x714>)
 800347a:	4694      	mov	ip, r2
 800347c:	4463      	add	r3, ip
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	4950      	ldr	r1, [pc, #320]	; (80035c8 <PCD_EP_ISR_Handler+0x714>)
 8003488:	468c      	mov	ip, r1
 800348a:	4463      	add	r3, ip
 800348c:	0412      	lsls	r2, r2, #16
 800348e:	0c12      	lsrs	r2, r2, #16
 8003490:	605a      	str	r2, [r3, #4]
 8003492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	4a4b      	ldr	r2, [pc, #300]	; (80035c8 <PCD_EP_ISR_Handler+0x714>)
 800349a:	4694      	mov	ip, r2
 800349c:	4463      	add	r3, ip
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	4948      	ldr	r1, [pc, #288]	; (80035c8 <PCD_EP_ISR_Handler+0x714>)
 80034a8:	468c      	mov	ip, r1
 80034aa:	4463      	add	r3, ip
 80034ac:	4947      	ldr	r1, [pc, #284]	; (80035cc <PCD_EP_ISR_Handler+0x718>)
 80034ae:	400a      	ands	r2, r1
 80034b0:	605a      	str	r2, [r3, #4]
 80034b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	4a43      	ldr	r2, [pc, #268]	; (80035c8 <PCD_EP_ISR_Handler+0x714>)
 80034ba:	4694      	mov	ip, r2
 80034bc:	4463      	add	r3, ip
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	4940      	ldr	r1, [pc, #256]	; (80035c8 <PCD_EP_ISR_Handler+0x714>)
 80034c8:	468c      	mov	ip, r1
 80034ca:	4463      	add	r3, ip
 80034cc:	2180      	movs	r1, #128	; 0x80
 80034ce:	0609      	lsls	r1, r1, #24
 80034d0:	430a      	orrs	r2, r1
 80034d2:	605a      	str	r2, [r3, #4]
 80034d4:	e020      	b.n	8003518 <PCD_EP_ISR_Handler+0x664>
 80034d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034d8:	785b      	ldrb	r3, [r3, #1]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d11c      	bne.n	8003518 <PCD_EP_ISR_Handler+0x664>
 80034de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	4a38      	ldr	r2, [pc, #224]	; (80035c8 <PCD_EP_ISR_Handler+0x714>)
 80034e6:	4694      	mov	ip, r2
 80034e8:	4463      	add	r3, ip
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	4935      	ldr	r1, [pc, #212]	; (80035c8 <PCD_EP_ISR_Handler+0x714>)
 80034f4:	468c      	mov	ip, r1
 80034f6:	4463      	add	r3, ip
 80034f8:	0412      	lsls	r2, r2, #16
 80034fa:	0c12      	lsrs	r2, r2, #16
 80034fc:	605a      	str	r2, [r3, #4]
 80034fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	4a30      	ldr	r2, [pc, #192]	; (80035c8 <PCD_EP_ISR_Handler+0x714>)
 8003506:	189a      	adds	r2, r3, r2
 8003508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	492e      	ldr	r1, [pc, #184]	; (80035c8 <PCD_EP_ISR_Handler+0x714>)
 8003510:	468c      	mov	ip, r1
 8003512:	4463      	add	r3, ip
 8003514:	6852      	ldr	r2, [r2, #4]
 8003516:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800351a:	781a      	ldrb	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	0011      	movs	r1, r2
 8003520:	0018      	movs	r0, r3
 8003522:	f007 f9ed 	bl	800a900 <HAL_PCD_DataInStageCallback>
 8003526:	e05b      	b.n	80035e0 <PCD_EP_ISR_Handler+0x72c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003528:	2326      	movs	r3, #38	; 0x26
 800352a:	18fb      	adds	r3, r7, r3
 800352c:	881a      	ldrh	r2, [r3, #0]
 800352e:	2380      	movs	r3, #128	; 0x80
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	4013      	ands	r3, r2
 8003534:	d14c      	bne.n	80035d0 <PCD_EP_ISR_Handler+0x71c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	4a22      	ldr	r2, [pc, #136]	; (80035c8 <PCD_EP_ISR_Handler+0x714>)
 800353e:	4694      	mov	ip, r2
 8003540:	4463      	add	r3, ip
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	0c1b      	lsrs	r3, r3, #16
 8003546:	b29a      	uxth	r2, r3
 8003548:	212e      	movs	r1, #46	; 0x2e
 800354a:	187b      	adds	r3, r7, r1
 800354c:	0592      	lsls	r2, r2, #22
 800354e:	0d92      	lsrs	r2, r2, #22
 8003550:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8003552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003554:	699a      	ldr	r2, [r3, #24]
 8003556:	187b      	adds	r3, r7, r1
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	429a      	cmp	r2, r3
 800355c:	d907      	bls.n	800356e <PCD_EP_ISR_Handler+0x6ba>
            {
              ep->xfer_len -= TxPctSize;
 800355e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003560:	699a      	ldr	r2, [r3, #24]
 8003562:	187b      	adds	r3, r7, r1
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	1ad2      	subs	r2, r2, r3
 8003568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800356a:	619a      	str	r2, [r3, #24]
 800356c:	e002      	b.n	8003574 <PCD_EP_ISR_Handler+0x6c0>
            }
            else
            {
              ep->xfer_len = 0U;
 800356e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003570:	2200      	movs	r2, #0
 8003572:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d107      	bne.n	800358c <PCD_EP_ISR_Handler+0x6d8>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800357c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800357e:	781a      	ldrb	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	0011      	movs	r1, r2
 8003584:	0018      	movs	r0, r3
 8003586:	f007 f9bb 	bl	800a900 <HAL_PCD_DataInStageCallback>
 800358a:	e029      	b.n	80035e0 <PCD_EP_ISR_Handler+0x72c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800358c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800358e:	695a      	ldr	r2, [r3, #20]
 8003590:	212e      	movs	r1, #46	; 0x2e
 8003592:	187b      	adds	r3, r7, r1
 8003594:	881b      	ldrh	r3, [r3, #0]
 8003596:	18d2      	adds	r2, r2, r3
 8003598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800359c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359e:	69da      	ldr	r2, [r3, #28]
 80035a0:	187b      	adds	r3, r7, r1
 80035a2:	881b      	ldrh	r3, [r3, #0]
 80035a4:	18d2      	adds	r2, r2, r3
 80035a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035b0:	0011      	movs	r1, r2
 80035b2:	0018      	movs	r0, r3
 80035b4:	f003 fa5a 	bl	8006a6c <USB_EPStartXfer>
 80035b8:	e012      	b.n	80035e0 <PCD_EP_ISR_Handler+0x72c>
 80035ba:	46c0      	nop			; (mov r8, r8)
 80035bc:	07ff8f8f 	.word	0x07ff8f8f
 80035c0:	000080c0 	.word	0x000080c0
 80035c4:	07ff8f0f 	.word	0x07ff8f0f
 80035c8:	40009800 	.word	0x40009800
 80035cc:	83ffffff 	.word	0x83ffffff
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80035d0:	2326      	movs	r3, #38	; 0x26
 80035d2:	18fb      	adds	r3, r7, r3
 80035d4:	881a      	ldrh	r2, [r3, #0]
 80035d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	0018      	movs	r0, r3
 80035dc:	f000 f8fa 	bl	80037d4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035e6:	2380      	movs	r3, #128	; 0x80
 80035e8:	021b      	lsls	r3, r3, #8
 80035ea:	4013      	ands	r3, r2
 80035ec:	d000      	beq.n	80035f0 <PCD_EP_ISR_Handler+0x73c>
 80035ee:	e467      	b.n	8002ec0 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	0018      	movs	r0, r3
 80035f4:	46bd      	mov	sp, r7
 80035f6:	b00e      	add	sp, #56	; 0x38
 80035f8:	bdb0      	pop	{r4, r5, r7, pc}
 80035fa:	46c0      	nop			; (mov r8, r8)

080035fc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80035fc:	b5b0      	push	{r4, r5, r7, lr}
 80035fe:	b08a      	sub	sp, #40	; 0x28
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	1dbb      	adds	r3, r7, #6
 8003608:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800360a:	1dbb      	adds	r3, r7, #6
 800360c:	881a      	ldrh	r2, [r3, #0]
 800360e:	2380      	movs	r3, #128	; 0x80
 8003610:	01db      	lsls	r3, r3, #7
 8003612:	4013      	ands	r3, r2
 8003614:	d068      	beq.n	80036e8 <HAL_PCD_EP_DB_Receive+0xec>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	b29b      	uxth	r3, r3
 8003620:	251e      	movs	r5, #30
 8003622:	197c      	adds	r4, r7, r5
 8003624:	0019      	movs	r1, r3
 8003626:	0010      	movs	r0, r2
 8003628:	f7fe ff4c 	bl	80024c4 <PCD_GET_EP_DBUF0_CNT>
 800362c:	0003      	movs	r3, r0
 800362e:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	699a      	ldr	r2, [r3, #24]
 8003634:	197b      	adds	r3, r7, r5
 8003636:	881b      	ldrh	r3, [r3, #0]
 8003638:	429a      	cmp	r2, r3
 800363a:	d307      	bcc.n	800364c <HAL_PCD_EP_DB_Receive+0x50>
    {
      ep->xfer_len -= count;
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	699a      	ldr	r2, [r3, #24]
 8003640:	197b      	adds	r3, r7, r5
 8003642:	881b      	ldrh	r3, [r3, #0]
 8003644:	1ad2      	subs	r2, r2, r3
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	619a      	str	r2, [r3, #24]
 800364a:	e002      	b.n	8003652 <HAL_PCD_EP_DB_Receive+0x56>
    }
    else
    {
      ep->xfer_len = 0U;
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	2200      	movs	r2, #0
 8003650:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d11a      	bne.n	8003690 <HAL_PCD_EP_DB_Receive+0x94>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	001a      	movs	r2, r3
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	18d3      	adds	r3, r2, r3
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a56      	ldr	r2, [pc, #344]	; (80037c4 <HAL_PCD_EP_DB_Receive+0x1c8>)
 800366c:	4013      	ands	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	2280      	movs	r2, #128	; 0x80
 8003674:	0192      	lsls	r2, r2, #6
 8003676:	4053      	eors	r3, r2
 8003678:	61bb      	str	r3, [r7, #24]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	001a      	movs	r2, r3
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	18d3      	adds	r3, r2, r3
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	494f      	ldr	r1, [pc, #316]	; (80037c8 <HAL_PCD_EP_DB_Receive+0x1cc>)
 800368c:	430a      	orrs	r2, r1
 800368e:	601a      	str	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003690:	1dbb      	adds	r3, r7, #6
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	2240      	movs	r2, #64	; 0x40
 8003696:	4013      	ands	r3, r2
 8003698:	d015      	beq.n	80036c6 <HAL_PCD_EP_DB_Receive+0xca>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	001a      	movs	r2, r3
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	18d3      	adds	r3, r2, r3
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a48      	ldr	r2, [pc, #288]	; (80037cc <HAL_PCD_EP_DB_Receive+0x1d0>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	617b      	str	r3, [r7, #20]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	001a      	movs	r2, r3
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	18d3      	adds	r3, r2, r3
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	4943      	ldr	r1, [pc, #268]	; (80037d0 <HAL_PCD_EP_DB_Receive+0x1d4>)
 80036c2:	430a      	orrs	r2, r1
 80036c4:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 80036c6:	241e      	movs	r4, #30
 80036c8:	193b      	adds	r3, r7, r4
 80036ca:	881b      	ldrh	r3, [r3, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d100      	bne.n	80036d2 <HAL_PCD_EP_DB_Receive+0xd6>
 80036d0:	e071      	b.n	80037b6 <HAL_PCD_EP_DB_Receive+0x1ba>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6818      	ldr	r0, [r3, #0]
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	6959      	ldr	r1, [r3, #20]
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	88da      	ldrh	r2, [r3, #6]
 80036de:	193b      	adds	r3, r7, r4
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	f004 fc11 	bl	8007f08 <USB_ReadPMA>
 80036e6:	e066      	b.n	80037b6 <HAL_PCD_EP_DB_Receive+0x1ba>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	251e      	movs	r5, #30
 80036f4:	197c      	adds	r4, r7, r5
 80036f6:	0019      	movs	r1, r3
 80036f8:	0010      	movs	r0, r2
 80036fa:	f7fe ff05 	bl	8002508 <PCD_GET_EP_DBUF1_CNT>
 80036fe:	0003      	movs	r3, r0
 8003700:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	699a      	ldr	r2, [r3, #24]
 8003706:	197b      	adds	r3, r7, r5
 8003708:	881b      	ldrh	r3, [r3, #0]
 800370a:	429a      	cmp	r2, r3
 800370c:	d307      	bcc.n	800371e <HAL_PCD_EP_DB_Receive+0x122>
    {
      ep->xfer_len -= count;
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	699a      	ldr	r2, [r3, #24]
 8003712:	197b      	adds	r3, r7, r5
 8003714:	881b      	ldrh	r3, [r3, #0]
 8003716:	1ad2      	subs	r2, r2, r3
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	619a      	str	r2, [r3, #24]
 800371c:	e002      	b.n	8003724 <HAL_PCD_EP_DB_Receive+0x128>
    }
    else
    {
      ep->xfer_len = 0U;
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	2200      	movs	r2, #0
 8003722:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d11a      	bne.n	8003762 <HAL_PCD_EP_DB_Receive+0x166>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	001a      	movs	r2, r3
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	18d3      	adds	r3, r2, r3
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a21      	ldr	r2, [pc, #132]	; (80037c4 <HAL_PCD_EP_DB_Receive+0x1c8>)
 800373e:	4013      	ands	r3, r2
 8003740:	627b      	str	r3, [r7, #36]	; 0x24
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	2280      	movs	r2, #128	; 0x80
 8003746:	0192      	lsls	r2, r2, #6
 8003748:	4053      	eors	r3, r2
 800374a:	627b      	str	r3, [r7, #36]	; 0x24
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	001a      	movs	r2, r3
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	18d3      	adds	r3, r2, r3
 800375a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800375c:	491a      	ldr	r1, [pc, #104]	; (80037c8 <HAL_PCD_EP_DB_Receive+0x1cc>)
 800375e:	430a      	orrs	r2, r1
 8003760:	601a      	str	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003762:	1dbb      	adds	r3, r7, #6
 8003764:	881b      	ldrh	r3, [r3, #0]
 8003766:	2240      	movs	r2, #64	; 0x40
 8003768:	4013      	ands	r3, r2
 800376a:	d115      	bne.n	8003798 <HAL_PCD_EP_DB_Receive+0x19c>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	001a      	movs	r2, r3
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	18d3      	adds	r3, r2, r3
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a13      	ldr	r2, [pc, #76]	; (80037cc <HAL_PCD_EP_DB_Receive+0x1d0>)
 800377e:	4013      	ands	r3, r2
 8003780:	623b      	str	r3, [r7, #32]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	001a      	movs	r2, r3
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	18d3      	adds	r3, r2, r3
 8003790:	6a3a      	ldr	r2, [r7, #32]
 8003792:	490f      	ldr	r1, [pc, #60]	; (80037d0 <HAL_PCD_EP_DB_Receive+0x1d4>)
 8003794:	430a      	orrs	r2, r1
 8003796:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 8003798:	241e      	movs	r4, #30
 800379a:	193b      	adds	r3, r7, r4
 800379c:	881b      	ldrh	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d009      	beq.n	80037b6 <HAL_PCD_EP_DB_Receive+0x1ba>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6818      	ldr	r0, [r3, #0]
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	6959      	ldr	r1, [r3, #20]
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	891a      	ldrh	r2, [r3, #8]
 80037ae:	193b      	adds	r3, r7, r4
 80037b0:	881b      	ldrh	r3, [r3, #0]
 80037b2:	f004 fba9 	bl	8007f08 <USB_ReadPMA>
    }
  }

  return count;
 80037b6:	231e      	movs	r3, #30
 80037b8:	18fb      	adds	r3, r7, r3
 80037ba:	881b      	ldrh	r3, [r3, #0]
}
 80037bc:	0018      	movs	r0, r3
 80037be:	46bd      	mov	sp, r7
 80037c0:	b00a      	add	sp, #40	; 0x28
 80037c2:	bdb0      	pop	{r4, r5, r7, pc}
 80037c4:	07ffbf8f 	.word	0x07ffbf8f
 80037c8:	00008080 	.word	0x00008080
 80037cc:	07ff8f8f 	.word	0x07ff8f8f
 80037d0:	000080c0 	.word	0x000080c0

080037d4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80037d4:	b5b0      	push	{r4, r5, r7, lr}
 80037d6:	b08e      	sub	sp, #56	; 0x38
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	1dbb      	adds	r3, r7, #6
 80037e0:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80037e2:	1dbb      	adds	r3, r7, #6
 80037e4:	881b      	ldrh	r3, [r3, #0]
 80037e6:	2240      	movs	r2, #64	; 0x40
 80037e8:	4013      	ands	r3, r2
 80037ea:	d100      	bne.n	80037ee <HAL_PCD_EP_DB_Transmit+0x1a>
 80037ec:	e1fc      	b.n	8003be8 <HAL_PCD_EP_DB_Transmit+0x414>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	2526      	movs	r5, #38	; 0x26
 80037fa:	197c      	adds	r4, r7, r5
 80037fc:	0019      	movs	r1, r3
 80037fe:	0010      	movs	r0, r2
 8003800:	f7fe fe60 	bl	80024c4 <PCD_GET_EP_DBUF0_CNT>
 8003804:	0003      	movs	r3, r0
 8003806:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len > TxPctSize)
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	699a      	ldr	r2, [r3, #24]
 800380c:	197b      	adds	r3, r7, r5
 800380e:	881b      	ldrh	r3, [r3, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d907      	bls.n	8003824 <HAL_PCD_EP_DB_Transmit+0x50>
    {
      ep->xfer_len -= TxPctSize;
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	699a      	ldr	r2, [r3, #24]
 8003818:	197b      	adds	r3, r7, r5
 800381a:	881b      	ldrh	r3, [r3, #0]
 800381c:	1ad2      	subs	r2, r2, r3
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	619a      	str	r2, [r3, #24]
 8003822:	e002      	b.n	800382a <HAL_PCD_EP_DB_Transmit+0x56>
    }
    else
    {
      ep->xfer_len = 0U;
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2200      	movs	r2, #0
 8003828:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d000      	beq.n	8003834 <HAL_PCD_EP_DB_Transmit+0x60>
 8003832:	e0d2      	b.n	80039da <HAL_PCD_EP_DB_Transmit+0x206>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	785b      	ldrb	r3, [r3, #1]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d131      	bne.n	80038a0 <HAL_PCD_EP_DB_Transmit+0xcc>
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	4ae5      	ldr	r2, [pc, #916]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003844:	4694      	mov	ip, r2
 8003846:	4463      	add	r3, ip
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	49e1      	ldr	r1, [pc, #900]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003852:	468c      	mov	ip, r1
 8003854:	4463      	add	r3, ip
 8003856:	0412      	lsls	r2, r2, #16
 8003858:	0c12      	lsrs	r2, r2, #16
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	4add      	ldr	r2, [pc, #884]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003864:	4694      	mov	ip, r2
 8003866:	4463      	add	r3, ip
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	49d9      	ldr	r1, [pc, #868]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003872:	468c      	mov	ip, r1
 8003874:	4463      	add	r3, ip
 8003876:	49d9      	ldr	r1, [pc, #868]	; (8003bdc <HAL_PCD_EP_DB_Transmit+0x408>)
 8003878:	400a      	ands	r2, r1
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	00db      	lsls	r3, r3, #3
 8003882:	4ad5      	ldr	r2, [pc, #852]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003884:	4694      	mov	ip, r2
 8003886:	4463      	add	r3, ip
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	49d1      	ldr	r1, [pc, #836]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003892:	468c      	mov	ip, r1
 8003894:	4463      	add	r3, ip
 8003896:	2180      	movs	r1, #128	; 0x80
 8003898:	0609      	lsls	r1, r1, #24
 800389a:	430a      	orrs	r2, r1
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	e020      	b.n	80038e2 <HAL_PCD_EP_DB_Transmit+0x10e>
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	785b      	ldrb	r3, [r3, #1]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d11c      	bne.n	80038e2 <HAL_PCD_EP_DB_Transmit+0x10e>
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	4aca      	ldr	r2, [pc, #808]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x404>)
 80038b0:	4694      	mov	ip, r2
 80038b2:	4463      	add	r3, ip
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	49c6      	ldr	r1, [pc, #792]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x404>)
 80038be:	468c      	mov	ip, r1
 80038c0:	4463      	add	r3, ip
 80038c2:	0412      	lsls	r2, r2, #16
 80038c4:	0c12      	lsrs	r2, r2, #16
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	4ac2      	ldr	r2, [pc, #776]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x404>)
 80038d0:	189a      	adds	r2, r3, r2
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	49bf      	ldr	r1, [pc, #764]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x404>)
 80038da:	468c      	mov	ip, r1
 80038dc:	4463      	add	r3, ip
 80038de:	6812      	ldr	r2, [r2, #0]
 80038e0:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	785b      	ldrb	r3, [r3, #1]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d131      	bne.n	800394e <HAL_PCD_EP_DB_Transmit+0x17a>
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	4ab9      	ldr	r2, [pc, #740]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x404>)
 80038f2:	4694      	mov	ip, r2
 80038f4:	4463      	add	r3, ip
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	49b6      	ldr	r1, [pc, #728]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003900:	468c      	mov	ip, r1
 8003902:	4463      	add	r3, ip
 8003904:	0412      	lsls	r2, r2, #16
 8003906:	0c12      	lsrs	r2, r2, #16
 8003908:	605a      	str	r2, [r3, #4]
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	4ab1      	ldr	r2, [pc, #708]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003912:	4694      	mov	ip, r2
 8003914:	4463      	add	r3, ip
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	49ae      	ldr	r1, [pc, #696]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003920:	468c      	mov	ip, r1
 8003922:	4463      	add	r3, ip
 8003924:	49ad      	ldr	r1, [pc, #692]	; (8003bdc <HAL_PCD_EP_DB_Transmit+0x408>)
 8003926:	400a      	ands	r2, r1
 8003928:	605a      	str	r2, [r3, #4]
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	4aa9      	ldr	r2, [pc, #676]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003932:	4694      	mov	ip, r2
 8003934:	4463      	add	r3, ip
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	49a6      	ldr	r1, [pc, #664]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003940:	468c      	mov	ip, r1
 8003942:	4463      	add	r3, ip
 8003944:	2180      	movs	r1, #128	; 0x80
 8003946:	0609      	lsls	r1, r1, #24
 8003948:	430a      	orrs	r2, r1
 800394a:	605a      	str	r2, [r3, #4]
 800394c:	e020      	b.n	8003990 <HAL_PCD_EP_DB_Transmit+0x1bc>
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	785b      	ldrb	r3, [r3, #1]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d11c      	bne.n	8003990 <HAL_PCD_EP_DB_Transmit+0x1bc>
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	4a9e      	ldr	r2, [pc, #632]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x404>)
 800395e:	4694      	mov	ip, r2
 8003960:	4463      	add	r3, ip
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	499b      	ldr	r1, [pc, #620]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x404>)
 800396c:	468c      	mov	ip, r1
 800396e:	4463      	add	r3, ip
 8003970:	0412      	lsls	r2, r2, #16
 8003972:	0c12      	lsrs	r2, r2, #16
 8003974:	605a      	str	r2, [r3, #4]
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	4a96      	ldr	r2, [pc, #600]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x404>)
 800397e:	189a      	adds	r2, r3, r2
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	4994      	ldr	r1, [pc, #592]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003988:	468c      	mov	ip, r1
 800398a:	4463      	add	r3, ip
 800398c:	6852      	ldr	r2, [r2, #4]
 800398e:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	781a      	ldrb	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	0011      	movs	r1, r2
 8003998:	0018      	movs	r0, r3
 800399a:	f006 ffb1 	bl	800a900 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800399e:	1dbb      	adds	r3, r7, #6
 80039a0:	881a      	ldrh	r2, [r3, #0]
 80039a2:	2380      	movs	r3, #128	; 0x80
 80039a4:	01db      	lsls	r3, r3, #7
 80039a6:	4013      	ands	r3, r2
 80039a8:	d100      	bne.n	80039ac <HAL_PCD_EP_DB_Transmit+0x1d8>
 80039aa:	e31a      	b.n	8003fe2 <HAL_PCD_EP_DB_Transmit+0x80e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	001a      	movs	r2, r3
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	18d3      	adds	r3, r2, r3
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a88      	ldr	r2, [pc, #544]	; (8003be0 <HAL_PCD_EP_DB_Transmit+0x40c>)
 80039be:	4013      	ands	r3, r2
 80039c0:	633b      	str	r3, [r7, #48]	; 0x30
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	001a      	movs	r2, r3
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	18d3      	adds	r3, r2, r3
 80039d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039d2:	4984      	ldr	r1, [pc, #528]	; (8003be4 <HAL_PCD_EP_DB_Transmit+0x410>)
 80039d4:	430a      	orrs	r2, r1
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	e303      	b.n	8003fe2 <HAL_PCD_EP_DB_Transmit+0x80e>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80039da:	1dbb      	adds	r3, r7, #6
 80039dc:	881a      	ldrh	r2, [r3, #0]
 80039de:	2380      	movs	r3, #128	; 0x80
 80039e0:	01db      	lsls	r3, r3, #7
 80039e2:	4013      	ands	r3, r2
 80039e4:	d015      	beq.n	8003a12 <HAL_PCD_EP_DB_Transmit+0x23e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	001a      	movs	r2, r3
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	18d3      	adds	r3, r2, r3
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a7a      	ldr	r2, [pc, #488]	; (8003be0 <HAL_PCD_EP_DB_Transmit+0x40c>)
 80039f8:	4013      	ands	r3, r2
 80039fa:	623b      	str	r3, [r7, #32]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	001a      	movs	r2, r3
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	18d3      	adds	r3, r2, r3
 8003a0a:	6a3a      	ldr	r2, [r7, #32]
 8003a0c:	4975      	ldr	r1, [pc, #468]	; (8003be4 <HAL_PCD_EP_DB_Transmit+0x410>)
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	2224      	movs	r2, #36	; 0x24
 8003a16:	5c9b      	ldrb	r3, [r3, r2]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d000      	beq.n	8003a1e <HAL_PCD_EP_DB_Transmit+0x24a>
 8003a1c:	e2e1      	b.n	8003fe2 <HAL_PCD_EP_DB_Transmit+0x80e>
      {
        ep->xfer_buff += TxPctSize;
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	695a      	ldr	r2, [r3, #20]
 8003a22:	2126      	movs	r1, #38	; 0x26
 8003a24:	187b      	adds	r3, r7, r1
 8003a26:	881b      	ldrh	r3, [r3, #0]
 8003a28:	18d2      	adds	r2, r2, r3
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	69da      	ldr	r2, [r3, #28]
 8003a32:	187b      	adds	r3, r7, r1
 8003a34:	881b      	ldrh	r3, [r3, #0]
 8003a36:	18d2      	adds	r2, r2, r3
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	6a1a      	ldr	r2, [r3, #32]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d309      	bcc.n	8003a5c <HAL_PCD_EP_DB_Transmit+0x288>
        {
          len = ep->maxpacket;
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_len_db -= len;
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	6a1a      	ldr	r2, [r3, #32]
 8003a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a54:	1ad2      	subs	r2, r2, r3
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	621a      	str	r2, [r3, #32]
 8003a5a:	e016      	b.n	8003a8a <HAL_PCD_EP_DB_Transmit+0x2b6>
        }
        else if (ep->xfer_len_db == 0U)
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d108      	bne.n	8003a76 <HAL_PCD_EP_DB_Transmit+0x2a2>
        {
          len = TxPctSize;
 8003a64:	2326      	movs	r3, #38	; 0x26
 8003a66:	18fb      	adds	r3, r7, r3
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_fill_db = 0U;
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	2224      	movs	r2, #36	; 0x24
 8003a70:	2100      	movs	r1, #0
 8003a72:	5499      	strb	r1, [r3, r2]
 8003a74:	e009      	b.n	8003a8a <HAL_PCD_EP_DB_Transmit+0x2b6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	2224      	movs	r2, #36	; 0x24
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_len_db = 0U;
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	2200      	movs	r2, #0
 8003a88:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	785b      	ldrb	r3, [r3, #1]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d172      	bne.n	8003b78 <HAL_PCD_EP_DB_Transmit+0x3a4>
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	4a4f      	ldr	r2, [pc, #316]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003a9a:	4694      	mov	ip, r2
 8003a9c:	4463      	add	r3, ip
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	494c      	ldr	r1, [pc, #304]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003aa8:	468c      	mov	ip, r1
 8003aaa:	4463      	add	r3, ip
 8003aac:	0412      	lsls	r2, r2, #16
 8003aae:	0c12      	lsrs	r2, r2, #16
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab4:	2b3e      	cmp	r3, #62	; 0x3e
 8003ab6:	d91e      	bls.n	8003af6 <HAL_PCD_EP_DB_Transmit+0x322>
 8003ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aba:	095b      	lsrs	r3, r3, #5
 8003abc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac0:	221f      	movs	r2, #31
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	d102      	bne.n	8003acc <HAL_PCD_EP_DB_Transmit+0x2f8>
 8003ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	62bb      	str	r3, [r7, #40]	; 0x28
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	4a41      	ldr	r2, [pc, #260]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003ad4:	4694      	mov	ip, r2
 8003ad6:	4463      	add	r3, ip
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003adc:	069b      	lsls	r3, r3, #26
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	493c      	ldr	r1, [pc, #240]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003ae8:	468c      	mov	ip, r1
 8003aea:	4463      	add	r3, ip
 8003aec:	2180      	movs	r1, #128	; 0x80
 8003aee:	0609      	lsls	r1, r1, #24
 8003af0:	430a      	orrs	r2, r1
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	e065      	b.n	8003bc2 <HAL_PCD_EP_DB_Transmit+0x3ee>
 8003af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d121      	bne.n	8003b40 <HAL_PCD_EP_DB_Transmit+0x36c>
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	4a35      	ldr	r2, [pc, #212]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003b04:	4694      	mov	ip, r2
 8003b06:	4463      	add	r3, ip
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	4931      	ldr	r1, [pc, #196]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003b12:	468c      	mov	ip, r1
 8003b14:	4463      	add	r3, ip
 8003b16:	4931      	ldr	r1, [pc, #196]	; (8003bdc <HAL_PCD_EP_DB_Transmit+0x408>)
 8003b18:	400a      	ands	r2, r1
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	4a2d      	ldr	r2, [pc, #180]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003b24:	4694      	mov	ip, r2
 8003b26:	4463      	add	r3, ip
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	4929      	ldr	r1, [pc, #164]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003b32:	468c      	mov	ip, r1
 8003b34:	4463      	add	r3, ip
 8003b36:	2180      	movs	r1, #128	; 0x80
 8003b38:	0609      	lsls	r1, r1, #24
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	601a      	str	r2, [r3, #0]
 8003b3e:	e040      	b.n	8003bc2 <HAL_PCD_EP_DB_Transmit+0x3ee>
 8003b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b42:	085b      	lsrs	r3, r3, #1
 8003b44:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b48:	2201      	movs	r2, #1
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	d002      	beq.n	8003b54 <HAL_PCD_EP_DB_Transmit+0x380>
 8003b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b50:	3301      	adds	r3, #1
 8003b52:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	4a1f      	ldr	r2, [pc, #124]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003b5c:	4694      	mov	ip, r2
 8003b5e:	4463      	add	r3, ip
 8003b60:	6819      	ldr	r1, [r3, #0]
 8003b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b64:	069a      	lsls	r2, r3, #26
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	481a      	ldr	r0, [pc, #104]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003b6e:	4684      	mov	ip, r0
 8003b70:	4463      	add	r3, ip
 8003b72:	430a      	orrs	r2, r1
 8003b74:	601a      	str	r2, [r3, #0]
 8003b76:	e024      	b.n	8003bc2 <HAL_PCD_EP_DB_Transmit+0x3ee>
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	785b      	ldrb	r3, [r3, #1]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d120      	bne.n	8003bc2 <HAL_PCD_EP_DB_Transmit+0x3ee>
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	4a14      	ldr	r2, [pc, #80]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003b88:	4694      	mov	ip, r2
 8003b8a:	4463      	add	r3, ip
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	4910      	ldr	r1, [pc, #64]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003b96:	468c      	mov	ip, r1
 8003b98:	4463      	add	r3, ip
 8003b9a:	0412      	lsls	r2, r2, #16
 8003b9c:	0c12      	lsrs	r2, r2, #16
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	4a0c      	ldr	r2, [pc, #48]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003ba8:	4694      	mov	ip, r2
 8003baa:	4463      	add	r3, ip
 8003bac:	6819      	ldr	r1, [r3, #0]
 8003bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb0:	041a      	lsls	r2, r3, #16
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	4807      	ldr	r0, [pc, #28]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003bba:	4684      	mov	ip, r0
 8003bbc:	4463      	add	r3, ip
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6818      	ldr	r0, [r3, #0]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	6959      	ldr	r1, [r3, #20]
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	88da      	ldrh	r2, [r3, #6]
 8003bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	f004 f923 	bl	8007e1c <USB_WritePMA>
 8003bd6:	e204      	b.n	8003fe2 <HAL_PCD_EP_DB_Transmit+0x80e>
 8003bd8:	40009800 	.word	0x40009800
 8003bdc:	83ffffff 	.word	0x83ffffff
 8003be0:	07ff8f8f 	.word	0x07ff8f8f
 8003be4:	0000c080 	.word	0x0000c080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	2526      	movs	r5, #38	; 0x26
 8003bf4:	197c      	adds	r4, r7, r5
 8003bf6:	0019      	movs	r1, r3
 8003bf8:	0010      	movs	r0, r2
 8003bfa:	f7fe fc85 	bl	8002508 <PCD_GET_EP_DBUF1_CNT>
 8003bfe:	0003      	movs	r3, r0
 8003c00:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= TxPctSize)
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	699a      	ldr	r2, [r3, #24]
 8003c06:	197b      	adds	r3, r7, r5
 8003c08:	881b      	ldrh	r3, [r3, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d307      	bcc.n	8003c1e <HAL_PCD_EP_DB_Transmit+0x44a>
    {
      ep->xfer_len -= TxPctSize;
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	699a      	ldr	r2, [r3, #24]
 8003c12:	197b      	adds	r3, r7, r5
 8003c14:	881b      	ldrh	r3, [r3, #0]
 8003c16:	1ad2      	subs	r2, r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	619a      	str	r2, [r3, #24]
 8003c1c:	e002      	b.n	8003c24 <HAL_PCD_EP_DB_Transmit+0x450>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	2200      	movs	r2, #0
 8003c22:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d000      	beq.n	8003c2e <HAL_PCD_EP_DB_Transmit+0x45a>
 8003c2c:	e0d2      	b.n	8003dd4 <HAL_PCD_EP_DB_Transmit+0x600>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	785b      	ldrb	r3, [r3, #1]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d131      	bne.n	8003c9a <HAL_PCD_EP_DB_Transmit+0x4c6>
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	4acd      	ldr	r2, [pc, #820]	; (8003f74 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003c3e:	4694      	mov	ip, r2
 8003c40:	4463      	add	r3, ip
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	00db      	lsls	r3, r3, #3
 8003c4a:	49ca      	ldr	r1, [pc, #808]	; (8003f74 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003c4c:	468c      	mov	ip, r1
 8003c4e:	4463      	add	r3, ip
 8003c50:	0412      	lsls	r2, r2, #16
 8003c52:	0c12      	lsrs	r2, r2, #16
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	4ac5      	ldr	r2, [pc, #788]	; (8003f74 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003c5e:	4694      	mov	ip, r2
 8003c60:	4463      	add	r3, ip
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	49c2      	ldr	r1, [pc, #776]	; (8003f74 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003c6c:	468c      	mov	ip, r1
 8003c6e:	4463      	add	r3, ip
 8003c70:	49c1      	ldr	r1, [pc, #772]	; (8003f78 <HAL_PCD_EP_DB_Transmit+0x7a4>)
 8003c72:	400a      	ands	r2, r1
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4abd      	ldr	r2, [pc, #756]	; (8003f74 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003c7e:	4694      	mov	ip, r2
 8003c80:	4463      	add	r3, ip
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	00db      	lsls	r3, r3, #3
 8003c8a:	49ba      	ldr	r1, [pc, #744]	; (8003f74 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003c8c:	468c      	mov	ip, r1
 8003c8e:	4463      	add	r3, ip
 8003c90:	2180      	movs	r1, #128	; 0x80
 8003c92:	0609      	lsls	r1, r1, #24
 8003c94:	430a      	orrs	r2, r1
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	e020      	b.n	8003cdc <HAL_PCD_EP_DB_Transmit+0x508>
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	785b      	ldrb	r3, [r3, #1]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d11c      	bne.n	8003cdc <HAL_PCD_EP_DB_Transmit+0x508>
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	4ab2      	ldr	r2, [pc, #712]	; (8003f74 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003caa:	4694      	mov	ip, r2
 8003cac:	4463      	add	r3, ip
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	00db      	lsls	r3, r3, #3
 8003cb6:	49af      	ldr	r1, [pc, #700]	; (8003f74 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003cb8:	468c      	mov	ip, r1
 8003cba:	4463      	add	r3, ip
 8003cbc:	0412      	lsls	r2, r2, #16
 8003cbe:	0c12      	lsrs	r2, r2, #16
 8003cc0:	601a      	str	r2, [r3, #0]
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	4aaa      	ldr	r2, [pc, #680]	; (8003f74 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003cca:	189a      	adds	r2, r3, r2
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	49a8      	ldr	r1, [pc, #672]	; (8003f74 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003cd4:	468c      	mov	ip, r1
 8003cd6:	4463      	add	r3, ip
 8003cd8:	6812      	ldr	r2, [r2, #0]
 8003cda:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	785b      	ldrb	r3, [r3, #1]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d131      	bne.n	8003d48 <HAL_PCD_EP_DB_Transmit+0x574>
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	4aa2      	ldr	r2, [pc, #648]	; (8003f74 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003cec:	4694      	mov	ip, r2
 8003cee:	4463      	add	r3, ip
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	499e      	ldr	r1, [pc, #632]	; (8003f74 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003cfa:	468c      	mov	ip, r1
 8003cfc:	4463      	add	r3, ip
 8003cfe:	0412      	lsls	r2, r2, #16
 8003d00:	0c12      	lsrs	r2, r2, #16
 8003d02:	605a      	str	r2, [r3, #4]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	4a9a      	ldr	r2, [pc, #616]	; (8003f74 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003d0c:	4694      	mov	ip, r2
 8003d0e:	4463      	add	r3, ip
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	4996      	ldr	r1, [pc, #600]	; (8003f74 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003d1a:	468c      	mov	ip, r1
 8003d1c:	4463      	add	r3, ip
 8003d1e:	4996      	ldr	r1, [pc, #600]	; (8003f78 <HAL_PCD_EP_DB_Transmit+0x7a4>)
 8003d20:	400a      	ands	r2, r1
 8003d22:	605a      	str	r2, [r3, #4]
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	4a92      	ldr	r2, [pc, #584]	; (8003f74 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003d2c:	4694      	mov	ip, r2
 8003d2e:	4463      	add	r3, ip
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	498e      	ldr	r1, [pc, #568]	; (8003f74 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003d3a:	468c      	mov	ip, r1
 8003d3c:	4463      	add	r3, ip
 8003d3e:	2180      	movs	r1, #128	; 0x80
 8003d40:	0609      	lsls	r1, r1, #24
 8003d42:	430a      	orrs	r2, r1
 8003d44:	605a      	str	r2, [r3, #4]
 8003d46:	e020      	b.n	8003d8a <HAL_PCD_EP_DB_Transmit+0x5b6>
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	785b      	ldrb	r3, [r3, #1]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d11c      	bne.n	8003d8a <HAL_PCD_EP_DB_Transmit+0x5b6>
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	4a87      	ldr	r2, [pc, #540]	; (8003f74 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003d58:	4694      	mov	ip, r2
 8003d5a:	4463      	add	r3, ip
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	4983      	ldr	r1, [pc, #524]	; (8003f74 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003d66:	468c      	mov	ip, r1
 8003d68:	4463      	add	r3, ip
 8003d6a:	0412      	lsls	r2, r2, #16
 8003d6c:	0c12      	lsrs	r2, r2, #16
 8003d6e:	605a      	str	r2, [r3, #4]
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	00db      	lsls	r3, r3, #3
 8003d76:	4a7f      	ldr	r2, [pc, #508]	; (8003f74 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003d78:	189a      	adds	r2, r3, r2
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	497c      	ldr	r1, [pc, #496]	; (8003f74 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003d82:	468c      	mov	ip, r1
 8003d84:	4463      	add	r3, ip
 8003d86:	6852      	ldr	r2, [r2, #4]
 8003d88:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	781a      	ldrb	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	0011      	movs	r1, r2
 8003d92:	0018      	movs	r0, r3
 8003d94:	f006 fdb4 	bl	800a900 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003d98:	1dbb      	adds	r3, r7, #6
 8003d9a:	881a      	ldrh	r2, [r3, #0]
 8003d9c:	2380      	movs	r3, #128	; 0x80
 8003d9e:	01db      	lsls	r3, r3, #7
 8003da0:	4013      	ands	r3, r2
 8003da2:	d000      	beq.n	8003da6 <HAL_PCD_EP_DB_Transmit+0x5d2>
 8003da4:	e11d      	b.n	8003fe2 <HAL_PCD_EP_DB_Transmit+0x80e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	001a      	movs	r2, r3
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	18d3      	adds	r3, r2, r3
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a71      	ldr	r2, [pc, #452]	; (8003f7c <HAL_PCD_EP_DB_Transmit+0x7a8>)
 8003db8:	4013      	ands	r3, r2
 8003dba:	61fb      	str	r3, [r7, #28]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	001a      	movs	r2, r3
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	18d3      	adds	r3, r2, r3
 8003dca:	69fa      	ldr	r2, [r7, #28]
 8003dcc:	496c      	ldr	r1, [pc, #432]	; (8003f80 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	e106      	b.n	8003fe2 <HAL_PCD_EP_DB_Transmit+0x80e>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003dd4:	1dbb      	adds	r3, r7, #6
 8003dd6:	881a      	ldrh	r2, [r3, #0]
 8003dd8:	2380      	movs	r3, #128	; 0x80
 8003dda:	01db      	lsls	r3, r3, #7
 8003ddc:	4013      	ands	r3, r2
 8003dde:	d115      	bne.n	8003e0c <HAL_PCD_EP_DB_Transmit+0x638>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	001a      	movs	r2, r3
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	18d3      	adds	r3, r2, r3
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a62      	ldr	r2, [pc, #392]	; (8003f7c <HAL_PCD_EP_DB_Transmit+0x7a8>)
 8003df2:	4013      	ands	r3, r2
 8003df4:	617b      	str	r3, [r7, #20]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	001a      	movs	r2, r3
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	18d3      	adds	r3, r2, r3
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	495e      	ldr	r1, [pc, #376]	; (8003f80 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	2224      	movs	r2, #36	; 0x24
 8003e10:	5c9b      	ldrb	r3, [r3, r2]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d000      	beq.n	8003e18 <HAL_PCD_EP_DB_Transmit+0x644>
 8003e16:	e0e4      	b.n	8003fe2 <HAL_PCD_EP_DB_Transmit+0x80e>
      {
        ep->xfer_buff += TxPctSize;
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	695a      	ldr	r2, [r3, #20]
 8003e1c:	2126      	movs	r1, #38	; 0x26
 8003e1e:	187b      	adds	r3, r7, r1
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	18d2      	adds	r2, r2, r3
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	69da      	ldr	r2, [r3, #28]
 8003e2c:	187b      	adds	r3, r7, r1
 8003e2e:	881b      	ldrh	r3, [r3, #0]
 8003e30:	18d2      	adds	r2, r2, r3
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	6a1a      	ldr	r2, [r3, #32]
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d309      	bcc.n	8003e56 <HAL_PCD_EP_DB_Transmit+0x682>
        {
          len = ep->maxpacket;
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_len_db -= len;
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	6a1a      	ldr	r2, [r3, #32]
 8003e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4e:	1ad2      	subs	r2, r2, r3
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	621a      	str	r2, [r3, #32]
 8003e54:	e016      	b.n	8003e84 <HAL_PCD_EP_DB_Transmit+0x6b0>
        }
        else if (ep->xfer_len_db == 0U)
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d108      	bne.n	8003e70 <HAL_PCD_EP_DB_Transmit+0x69c>
        {
          len = TxPctSize;
 8003e5e:	2326      	movs	r3, #38	; 0x26
 8003e60:	18fb      	adds	r3, r7, r3
 8003e62:	881b      	ldrh	r3, [r3, #0]
 8003e64:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_fill_db = 0U;
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	2224      	movs	r2, #36	; 0x24
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	5499      	strb	r1, [r3, r2]
 8003e6e:	e009      	b.n	8003e84 <HAL_PCD_EP_DB_Transmit+0x6b0>
        }
        else
        {
          len = ep->xfer_len_db;
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_len_db = 0U;
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	2224      	movs	r2, #36	; 0x24
 8003e80:	2100      	movs	r1, #0
 8003e82:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	785b      	ldrb	r3, [r3, #1]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d000      	beq.n	8003e8e <HAL_PCD_EP_DB_Transmit+0x6ba>
 8003e8c:	e07a      	b.n	8003f84 <HAL_PCD_EP_DB_Transmit+0x7b0>
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	4a37      	ldr	r2, [pc, #220]	; (8003f74 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003e96:	4694      	mov	ip, r2
 8003e98:	4463      	add	r3, ip
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	4934      	ldr	r1, [pc, #208]	; (8003f74 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003ea4:	468c      	mov	ip, r1
 8003ea6:	4463      	add	r3, ip
 8003ea8:	0412      	lsls	r2, r2, #16
 8003eaa:	0c12      	lsrs	r2, r2, #16
 8003eac:	605a      	str	r2, [r3, #4]
 8003eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb0:	2b3e      	cmp	r3, #62	; 0x3e
 8003eb2:	d91e      	bls.n	8003ef2 <HAL_PCD_EP_DB_Transmit+0x71e>
 8003eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb6:	095b      	lsrs	r3, r3, #5
 8003eb8:	61bb      	str	r3, [r7, #24]
 8003eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ebc:	221f      	movs	r2, #31
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	d102      	bne.n	8003ec8 <HAL_PCD_EP_DB_Transmit+0x6f4>
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	61bb      	str	r3, [r7, #24]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	4a29      	ldr	r2, [pc, #164]	; (8003f74 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003ed0:	4694      	mov	ip, r2
 8003ed2:	4463      	add	r3, ip
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	069b      	lsls	r3, r3, #26
 8003eda:	431a      	orrs	r2, r3
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	00db      	lsls	r3, r3, #3
 8003ee2:	4924      	ldr	r1, [pc, #144]	; (8003f74 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003ee4:	468c      	mov	ip, r1
 8003ee6:	4463      	add	r3, ip
 8003ee8:	2180      	movs	r1, #128	; 0x80
 8003eea:	0609      	lsls	r1, r1, #24
 8003eec:	430a      	orrs	r2, r1
 8003eee:	605a      	str	r2, [r3, #4]
 8003ef0:	e06d      	b.n	8003fce <HAL_PCD_EP_DB_Transmit+0x7fa>
 8003ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d121      	bne.n	8003f3c <HAL_PCD_EP_DB_Transmit+0x768>
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	4a1d      	ldr	r2, [pc, #116]	; (8003f74 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003f00:	4694      	mov	ip, r2
 8003f02:	4463      	add	r3, ip
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	4919      	ldr	r1, [pc, #100]	; (8003f74 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003f0e:	468c      	mov	ip, r1
 8003f10:	4463      	add	r3, ip
 8003f12:	4919      	ldr	r1, [pc, #100]	; (8003f78 <HAL_PCD_EP_DB_Transmit+0x7a4>)
 8003f14:	400a      	ands	r2, r1
 8003f16:	605a      	str	r2, [r3, #4]
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	00db      	lsls	r3, r3, #3
 8003f1e:	4a15      	ldr	r2, [pc, #84]	; (8003f74 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003f20:	4694      	mov	ip, r2
 8003f22:	4463      	add	r3, ip
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	4911      	ldr	r1, [pc, #68]	; (8003f74 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003f2e:	468c      	mov	ip, r1
 8003f30:	4463      	add	r3, ip
 8003f32:	2180      	movs	r1, #128	; 0x80
 8003f34:	0609      	lsls	r1, r1, #24
 8003f36:	430a      	orrs	r2, r1
 8003f38:	605a      	str	r2, [r3, #4]
 8003f3a:	e048      	b.n	8003fce <HAL_PCD_EP_DB_Transmit+0x7fa>
 8003f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3e:	085b      	lsrs	r3, r3, #1
 8003f40:	61bb      	str	r3, [r7, #24]
 8003f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f44:	2201      	movs	r2, #1
 8003f46:	4013      	ands	r3, r2
 8003f48:	d002      	beq.n	8003f50 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	61bb      	str	r3, [r7, #24]
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	00db      	lsls	r3, r3, #3
 8003f56:	4a07      	ldr	r2, [pc, #28]	; (8003f74 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003f58:	4694      	mov	ip, r2
 8003f5a:	4463      	add	r3, ip
 8003f5c:	6859      	ldr	r1, [r3, #4]
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	069a      	lsls	r2, r3, #26
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	4802      	ldr	r0, [pc, #8]	; (8003f74 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003f6a:	4684      	mov	ip, r0
 8003f6c:	4463      	add	r3, ip
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	605a      	str	r2, [r3, #4]
 8003f72:	e02c      	b.n	8003fce <HAL_PCD_EP_DB_Transmit+0x7fa>
 8003f74:	40009800 	.word	0x40009800
 8003f78:	83ffffff 	.word	0x83ffffff
 8003f7c:	07ff8f8f 	.word	0x07ff8f8f
 8003f80:	0000c080 	.word	0x0000c080
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	785b      	ldrb	r3, [r3, #1]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d120      	bne.n	8003fce <HAL_PCD_EP_DB_Transmit+0x7fa>
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	4a25      	ldr	r2, [pc, #148]	; (8004028 <HAL_PCD_EP_DB_Transmit+0x854>)
 8003f94:	4694      	mov	ip, r2
 8003f96:	4463      	add	r3, ip
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	4921      	ldr	r1, [pc, #132]	; (8004028 <HAL_PCD_EP_DB_Transmit+0x854>)
 8003fa2:	468c      	mov	ip, r1
 8003fa4:	4463      	add	r3, ip
 8003fa6:	0412      	lsls	r2, r2, #16
 8003fa8:	0c12      	lsrs	r2, r2, #16
 8003faa:	605a      	str	r2, [r3, #4]
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	00db      	lsls	r3, r3, #3
 8003fb2:	4a1d      	ldr	r2, [pc, #116]	; (8004028 <HAL_PCD_EP_DB_Transmit+0x854>)
 8003fb4:	4694      	mov	ip, r2
 8003fb6:	4463      	add	r3, ip
 8003fb8:	6859      	ldr	r1, [r3, #4]
 8003fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fbc:	041a      	lsls	r2, r3, #16
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	4818      	ldr	r0, [pc, #96]	; (8004028 <HAL_PCD_EP_DB_Transmit+0x854>)
 8003fc6:	4684      	mov	ip, r0
 8003fc8:	4463      	add	r3, ip
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6818      	ldr	r0, [r3, #0]
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	6959      	ldr	r1, [r3, #20]
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	891a      	ldrh	r2, [r3, #8]
 8003fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	f003 ff1d 	bl	8007e1c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	001a      	movs	r2, r3
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	18d3      	adds	r3, r2, r3
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a0e      	ldr	r2, [pc, #56]	; (800402c <HAL_PCD_EP_DB_Transmit+0x858>)
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ffa:	2210      	movs	r2, #16
 8003ffc:	4053      	eors	r3, r2
 8003ffe:	637b      	str	r3, [r7, #52]	; 0x34
 8004000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004002:	2220      	movs	r2, #32
 8004004:	4053      	eors	r3, r2
 8004006:	637b      	str	r3, [r7, #52]	; 0x34
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	001a      	movs	r2, r3
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	18d3      	adds	r3, r2, r3
 8004016:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004018:	4905      	ldr	r1, [pc, #20]	; (8004030 <HAL_PCD_EP_DB_Transmit+0x85c>)
 800401a:	430a      	orrs	r2, r1
 800401c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	0018      	movs	r0, r3
 8004022:	46bd      	mov	sp, r7
 8004024:	b00e      	add	sp, #56	; 0x38
 8004026:	bdb0      	pop	{r4, r5, r7, pc}
 8004028:	40009800 	.word	0x40009800
 800402c:	07ff8fbf 	.word	0x07ff8fbf
 8004030:	00008080 	.word	0x00008080

08004034 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004034:	b590      	push	{r4, r7, lr}
 8004036:	b087      	sub	sp, #28
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	0008      	movs	r0, r1
 800403e:	0011      	movs	r1, r2
 8004040:	607b      	str	r3, [r7, #4]
 8004042:	240a      	movs	r4, #10
 8004044:	193b      	adds	r3, r7, r4
 8004046:	1c02      	adds	r2, r0, #0
 8004048:	801a      	strh	r2, [r3, #0]
 800404a:	2308      	movs	r3, #8
 800404c:	18fb      	adds	r3, r7, r3
 800404e:	1c0a      	adds	r2, r1, #0
 8004050:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004052:	0021      	movs	r1, r4
 8004054:	187b      	adds	r3, r7, r1
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	2280      	movs	r2, #128	; 0x80
 800405a:	4013      	ands	r3, r2
 800405c:	b29b      	uxth	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00d      	beq.n	800407e <HAL_PCDEx_PMAConfig+0x4a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004062:	187b      	adds	r3, r7, r1
 8004064:	881b      	ldrh	r3, [r3, #0]
 8004066:	2207      	movs	r2, #7
 8004068:	401a      	ands	r2, r3
 800406a:	0013      	movs	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	189b      	adds	r3, r3, r2
 8004070:	00db      	lsls	r3, r3, #3
 8004072:	3338      	adds	r3, #56	; 0x38
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	18d3      	adds	r3, r2, r3
 8004078:	3304      	adds	r3, #4
 800407a:	617b      	str	r3, [r7, #20]
 800407c:	e00c      	b.n	8004098 <HAL_PCDEx_PMAConfig+0x64>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800407e:	230a      	movs	r3, #10
 8004080:	18fb      	adds	r3, r7, r3
 8004082:	881a      	ldrh	r2, [r3, #0]
 8004084:	0013      	movs	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	189b      	adds	r3, r3, r2
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	3379      	adds	r3, #121	; 0x79
 800408e:	33ff      	adds	r3, #255	; 0xff
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	18d3      	adds	r3, r2, r3
 8004094:	3304      	adds	r3, #4
 8004096:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004098:	2308      	movs	r3, #8
 800409a:	18fb      	adds	r3, r7, r3
 800409c:	881b      	ldrh	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d107      	bne.n	80040b2 <HAL_PCDEx_PMAConfig+0x7e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2200      	movs	r2, #0
 80040a6:	729a      	strb	r2, [r3, #10]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	809a      	strh	r2, [r3, #4]
 80040b0:	e00b      	b.n	80040ca <HAL_PCDEx_PMAConfig+0x96>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	2201      	movs	r2, #1
 80040b6:	729a      	strb	r2, [r3, #10]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	0c1b      	lsrs	r3, r3, #16
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	811a      	strh	r2, [r3, #8]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	0018      	movs	r0, r3
 80040ce:	46bd      	mov	sp, r7
 80040d0:	b007      	add	sp, #28
 80040d2:	bd90      	pop	{r4, r7, pc}

080040d4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	23bf      	movs	r3, #191	; 0xbf
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	2101      	movs	r1, #1
 80040ea:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	23bd      	movs	r3, #189	; 0xbd
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	2100      	movs	r1, #0
 80040f4:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fa:	2201      	movs	r2, #1
 80040fc:	431a      	orrs	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	655a      	str	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004106:	2202      	movs	r2, #2
 8004108:	431a      	orrs	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	0018      	movs	r0, r3
 8004112:	46bd      	mov	sp, r7
 8004114:	b004      	add	sp, #16
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	000a      	movs	r2, r1
 8004122:	1cfb      	adds	r3, r7, #3
 8004124:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004126:	46c0      	nop			; (mov r8, r8)
 8004128:	46bd      	mov	sp, r7
 800412a:	b002      	add	sp, #8
 800412c:	bd80      	pop	{r7, pc}
	...

08004130 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004134:	4b04      	ldr	r3, [pc, #16]	; (8004148 <HAL_PWREx_EnableVddUSB+0x18>)
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	4b03      	ldr	r3, [pc, #12]	; (8004148 <HAL_PWREx_EnableVddUSB+0x18>)
 800413a:	2180      	movs	r1, #128	; 0x80
 800413c:	00c9      	lsls	r1, r1, #3
 800413e:	430a      	orrs	r2, r1
 8004140:	605a      	str	r2, [r3, #4]
}
 8004142:	46c0      	nop			; (mov r8, r8)
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40007000 	.word	0x40007000

0800414c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004154:	4b19      	ldr	r3, [pc, #100]	; (80041bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a19      	ldr	r2, [pc, #100]	; (80041c0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800415a:	4013      	ands	r3, r2
 800415c:	0019      	movs	r1, r3
 800415e:	4b17      	ldr	r3, [pc, #92]	; (80041bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	430a      	orrs	r2, r1
 8004164:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	2380      	movs	r3, #128	; 0x80
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	429a      	cmp	r2, r3
 800416e:	d11f      	bne.n	80041b0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004170:	4b14      	ldr	r3, [pc, #80]	; (80041c4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	0013      	movs	r3, r2
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	189b      	adds	r3, r3, r2
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	4912      	ldr	r1, [pc, #72]	; (80041c8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800417e:	0018      	movs	r0, r3
 8004180:	f7fb ffd2 	bl	8000128 <__udivsi3>
 8004184:	0003      	movs	r3, r0
 8004186:	3301      	adds	r3, #1
 8004188:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800418a:	e008      	b.n	800419e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	3b01      	subs	r3, #1
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	e001      	b.n	800419e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e009      	b.n	80041b2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800419e:	4b07      	ldr	r3, [pc, #28]	; (80041bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80041a0:	695a      	ldr	r2, [r3, #20]
 80041a2:	2380      	movs	r3, #128	; 0x80
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	401a      	ands	r2, r3
 80041a8:	2380      	movs	r3, #128	; 0x80
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d0ed      	beq.n	800418c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	0018      	movs	r0, r3
 80041b4:	46bd      	mov	sp, r7
 80041b6:	b004      	add	sp, #16
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	46c0      	nop			; (mov r8, r8)
 80041bc:	40007000 	.word	0x40007000
 80041c0:	fffff9ff 	.word	0xfffff9ff
 80041c4:	20000030 	.word	0x20000030
 80041c8:	000f4240 	.word	0x000f4240

080041cc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80041d0:	4b03      	ldr	r3, [pc, #12]	; (80041e0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	23e0      	movs	r3, #224	; 0xe0
 80041d6:	01db      	lsls	r3, r3, #7
 80041d8:	4013      	ands	r3, r2
}
 80041da:	0018      	movs	r0, r3
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	40021000 	.word	0x40021000

080041e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b088      	sub	sp, #32
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d102      	bne.n	80041f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	f000 fb50 	bl	8004898 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2201      	movs	r2, #1
 80041fe:	4013      	ands	r3, r2
 8004200:	d100      	bne.n	8004204 <HAL_RCC_OscConfig+0x20>
 8004202:	e07c      	b.n	80042fe <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004204:	4bc3      	ldr	r3, [pc, #780]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	2238      	movs	r2, #56	; 0x38
 800420a:	4013      	ands	r3, r2
 800420c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800420e:	4bc1      	ldr	r3, [pc, #772]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	2203      	movs	r2, #3
 8004214:	4013      	ands	r3, r2
 8004216:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	2b10      	cmp	r3, #16
 800421c:	d102      	bne.n	8004224 <HAL_RCC_OscConfig+0x40>
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	2b03      	cmp	r3, #3
 8004222:	d002      	beq.n	800422a <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	2b08      	cmp	r3, #8
 8004228:	d10b      	bne.n	8004242 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800422a:	4bba      	ldr	r3, [pc, #744]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	2380      	movs	r3, #128	; 0x80
 8004230:	029b      	lsls	r3, r3, #10
 8004232:	4013      	ands	r3, r2
 8004234:	d062      	beq.n	80042fc <HAL_RCC_OscConfig+0x118>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d15e      	bne.n	80042fc <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e32a      	b.n	8004898 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	2380      	movs	r3, #128	; 0x80
 8004248:	025b      	lsls	r3, r3, #9
 800424a:	429a      	cmp	r2, r3
 800424c:	d107      	bne.n	800425e <HAL_RCC_OscConfig+0x7a>
 800424e:	4bb1      	ldr	r3, [pc, #708]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	4bb0      	ldr	r3, [pc, #704]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 8004254:	2180      	movs	r1, #128	; 0x80
 8004256:	0249      	lsls	r1, r1, #9
 8004258:	430a      	orrs	r2, r1
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	e020      	b.n	80042a0 <HAL_RCC_OscConfig+0xbc>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	23a0      	movs	r3, #160	; 0xa0
 8004264:	02db      	lsls	r3, r3, #11
 8004266:	429a      	cmp	r2, r3
 8004268:	d10e      	bne.n	8004288 <HAL_RCC_OscConfig+0xa4>
 800426a:	4baa      	ldr	r3, [pc, #680]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	4ba9      	ldr	r3, [pc, #676]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 8004270:	2180      	movs	r1, #128	; 0x80
 8004272:	02c9      	lsls	r1, r1, #11
 8004274:	430a      	orrs	r2, r1
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	4ba6      	ldr	r3, [pc, #664]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	4ba5      	ldr	r3, [pc, #660]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 800427e:	2180      	movs	r1, #128	; 0x80
 8004280:	0249      	lsls	r1, r1, #9
 8004282:	430a      	orrs	r2, r1
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	e00b      	b.n	80042a0 <HAL_RCC_OscConfig+0xbc>
 8004288:	4ba2      	ldr	r3, [pc, #648]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	4ba1      	ldr	r3, [pc, #644]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 800428e:	49a2      	ldr	r1, [pc, #648]	; (8004518 <HAL_RCC_OscConfig+0x334>)
 8004290:	400a      	ands	r2, r1
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	4b9f      	ldr	r3, [pc, #636]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	4b9e      	ldr	r3, [pc, #632]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 800429a:	49a0      	ldr	r1, [pc, #640]	; (800451c <HAL_RCC_OscConfig+0x338>)
 800429c:	400a      	ands	r2, r1
 800429e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d014      	beq.n	80042d2 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a8:	f7fd fa1e 	bl	80016e8 <HAL_GetTick>
 80042ac:	0003      	movs	r3, r0
 80042ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042b0:	e008      	b.n	80042c4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042b2:	f7fd fa19 	bl	80016e8 <HAL_GetTick>
 80042b6:	0002      	movs	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b64      	cmp	r3, #100	; 0x64
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e2e9      	b.n	8004898 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042c4:	4b93      	ldr	r3, [pc, #588]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	2380      	movs	r3, #128	; 0x80
 80042ca:	029b      	lsls	r3, r3, #10
 80042cc:	4013      	ands	r3, r2
 80042ce:	d0f0      	beq.n	80042b2 <HAL_RCC_OscConfig+0xce>
 80042d0:	e015      	b.n	80042fe <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d2:	f7fd fa09 	bl	80016e8 <HAL_GetTick>
 80042d6:	0003      	movs	r3, r0
 80042d8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042dc:	f7fd fa04 	bl	80016e8 <HAL_GetTick>
 80042e0:	0002      	movs	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b64      	cmp	r3, #100	; 0x64
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e2d4      	b.n	8004898 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042ee:	4b89      	ldr	r3, [pc, #548]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	2380      	movs	r3, #128	; 0x80
 80042f4:	029b      	lsls	r3, r3, #10
 80042f6:	4013      	ands	r3, r2
 80042f8:	d1f0      	bne.n	80042dc <HAL_RCC_OscConfig+0xf8>
 80042fa:	e000      	b.n	80042fe <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042fc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2202      	movs	r2, #2
 8004304:	4013      	ands	r3, r2
 8004306:	d100      	bne.n	800430a <HAL_RCC_OscConfig+0x126>
 8004308:	e099      	b.n	800443e <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800430a:	4b82      	ldr	r3, [pc, #520]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	2238      	movs	r2, #56	; 0x38
 8004310:	4013      	ands	r3, r2
 8004312:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004314:	4b7f      	ldr	r3, [pc, #508]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	2203      	movs	r2, #3
 800431a:	4013      	ands	r3, r2
 800431c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	2b10      	cmp	r3, #16
 8004322:	d102      	bne.n	800432a <HAL_RCC_OscConfig+0x146>
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	2b02      	cmp	r3, #2
 8004328:	d002      	beq.n	8004330 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d135      	bne.n	800439c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004330:	4b78      	ldr	r3, [pc, #480]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	2380      	movs	r3, #128	; 0x80
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	4013      	ands	r3, r2
 800433a:	d005      	beq.n	8004348 <HAL_RCC_OscConfig+0x164>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e2a7      	b.n	8004898 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004348:	4b72      	ldr	r3, [pc, #456]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	4a74      	ldr	r2, [pc, #464]	; (8004520 <HAL_RCC_OscConfig+0x33c>)
 800434e:	4013      	ands	r3, r2
 8004350:	0019      	movs	r1, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	021a      	lsls	r2, r3, #8
 8004358:	4b6e      	ldr	r3, [pc, #440]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 800435a:	430a      	orrs	r2, r1
 800435c:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d112      	bne.n	800438a <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004364:	4b6b      	ldr	r3, [pc, #428]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a6e      	ldr	r2, [pc, #440]	; (8004524 <HAL_RCC_OscConfig+0x340>)
 800436a:	4013      	ands	r3, r2
 800436c:	0019      	movs	r1, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691a      	ldr	r2, [r3, #16]
 8004372:	4b68      	ldr	r3, [pc, #416]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 8004374:	430a      	orrs	r2, r1
 8004376:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004378:	4b66      	ldr	r3, [pc, #408]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	0adb      	lsrs	r3, r3, #11
 800437e:	2207      	movs	r2, #7
 8004380:	4013      	ands	r3, r2
 8004382:	4a69      	ldr	r2, [pc, #420]	; (8004528 <HAL_RCC_OscConfig+0x344>)
 8004384:	40da      	lsrs	r2, r3
 8004386:	4b69      	ldr	r3, [pc, #420]	; (800452c <HAL_RCC_OscConfig+0x348>)
 8004388:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800438a:	4b69      	ldr	r3, [pc, #420]	; (8004530 <HAL_RCC_OscConfig+0x34c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	0018      	movs	r0, r3
 8004390:	f7fd f94e 	bl	8001630 <HAL_InitTick>
 8004394:	1e03      	subs	r3, r0, #0
 8004396:	d051      	beq.n	800443c <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e27d      	b.n	8004898 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d030      	beq.n	8004406 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80043a4:	4b5b      	ldr	r3, [pc, #364]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a5e      	ldr	r2, [pc, #376]	; (8004524 <HAL_RCC_OscConfig+0x340>)
 80043aa:	4013      	ands	r3, r2
 80043ac:	0019      	movs	r1, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	691a      	ldr	r2, [r3, #16]
 80043b2:	4b58      	ldr	r3, [pc, #352]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 80043b4:	430a      	orrs	r2, r1
 80043b6:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80043b8:	4b56      	ldr	r3, [pc, #344]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	4b55      	ldr	r3, [pc, #340]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 80043be:	2180      	movs	r1, #128	; 0x80
 80043c0:	0049      	lsls	r1, r1, #1
 80043c2:	430a      	orrs	r2, r1
 80043c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c6:	f7fd f98f 	bl	80016e8 <HAL_GetTick>
 80043ca:	0003      	movs	r3, r0
 80043cc:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043ce:	e008      	b.n	80043e2 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043d0:	f7fd f98a 	bl	80016e8 <HAL_GetTick>
 80043d4:	0002      	movs	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e25a      	b.n	8004898 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043e2:	4b4c      	ldr	r3, [pc, #304]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	2380      	movs	r3, #128	; 0x80
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	4013      	ands	r3, r2
 80043ec:	d0f0      	beq.n	80043d0 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ee:	4b49      	ldr	r3, [pc, #292]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	4a4b      	ldr	r2, [pc, #300]	; (8004520 <HAL_RCC_OscConfig+0x33c>)
 80043f4:	4013      	ands	r3, r2
 80043f6:	0019      	movs	r1, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	021a      	lsls	r2, r3, #8
 80043fe:	4b45      	ldr	r3, [pc, #276]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 8004400:	430a      	orrs	r2, r1
 8004402:	605a      	str	r2, [r3, #4]
 8004404:	e01b      	b.n	800443e <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004406:	4b43      	ldr	r3, [pc, #268]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	4b42      	ldr	r3, [pc, #264]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 800440c:	4949      	ldr	r1, [pc, #292]	; (8004534 <HAL_RCC_OscConfig+0x350>)
 800440e:	400a      	ands	r2, r1
 8004410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004412:	f7fd f969 	bl	80016e8 <HAL_GetTick>
 8004416:	0003      	movs	r3, r0
 8004418:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800441c:	f7fd f964 	bl	80016e8 <HAL_GetTick>
 8004420:	0002      	movs	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e234      	b.n	8004898 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800442e:	4b39      	ldr	r3, [pc, #228]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	2380      	movs	r3, #128	; 0x80
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	4013      	ands	r3, r2
 8004438:	d1f0      	bne.n	800441c <HAL_RCC_OscConfig+0x238>
 800443a:	e000      	b.n	800443e <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800443c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2208      	movs	r2, #8
 8004444:	4013      	ands	r3, r2
 8004446:	d047      	beq.n	80044d8 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004448:	4b32      	ldr	r3, [pc, #200]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	2238      	movs	r2, #56	; 0x38
 800444e:	4013      	ands	r3, r2
 8004450:	2b18      	cmp	r3, #24
 8004452:	d10a      	bne.n	800446a <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004454:	4b2f      	ldr	r3, [pc, #188]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 8004456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004458:	2202      	movs	r2, #2
 800445a:	4013      	ands	r3, r2
 800445c:	d03c      	beq.n	80044d8 <HAL_RCC_OscConfig+0x2f4>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d138      	bne.n	80044d8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e216      	b.n	8004898 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d019      	beq.n	80044a6 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004472:	4b28      	ldr	r3, [pc, #160]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 8004474:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004476:	4b27      	ldr	r3, [pc, #156]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 8004478:	2101      	movs	r1, #1
 800447a:	430a      	orrs	r2, r1
 800447c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447e:	f7fd f933 	bl	80016e8 <HAL_GetTick>
 8004482:	0003      	movs	r3, r0
 8004484:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004488:	f7fd f92e 	bl	80016e8 <HAL_GetTick>
 800448c:	0002      	movs	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e1fe      	b.n	8004898 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800449a:	4b1e      	ldr	r3, [pc, #120]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 800449c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800449e:	2202      	movs	r2, #2
 80044a0:	4013      	ands	r3, r2
 80044a2:	d0f1      	beq.n	8004488 <HAL_RCC_OscConfig+0x2a4>
 80044a4:	e018      	b.n	80044d8 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80044a6:	4b1b      	ldr	r3, [pc, #108]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 80044a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80044aa:	4b1a      	ldr	r3, [pc, #104]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 80044ac:	2101      	movs	r1, #1
 80044ae:	438a      	bics	r2, r1
 80044b0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b2:	f7fd f919 	bl	80016e8 <HAL_GetTick>
 80044b6:	0003      	movs	r3, r0
 80044b8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044bc:	f7fd f914 	bl	80016e8 <HAL_GetTick>
 80044c0:	0002      	movs	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e1e4      	b.n	8004898 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044ce:	4b11      	ldr	r3, [pc, #68]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 80044d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044d2:	2202      	movs	r2, #2
 80044d4:	4013      	ands	r3, r2
 80044d6:	d1f1      	bne.n	80044bc <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2204      	movs	r2, #4
 80044de:	4013      	ands	r3, r2
 80044e0:	d100      	bne.n	80044e4 <HAL_RCC_OscConfig+0x300>
 80044e2:	e0c7      	b.n	8004674 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044e4:	231f      	movs	r3, #31
 80044e6:	18fb      	adds	r3, r7, r3
 80044e8:	2200      	movs	r2, #0
 80044ea:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80044ec:	4b09      	ldr	r3, [pc, #36]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	2238      	movs	r2, #56	; 0x38
 80044f2:	4013      	ands	r3, r2
 80044f4:	2b20      	cmp	r3, #32
 80044f6:	d11f      	bne.n	8004538 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80044f8:	4b06      	ldr	r3, [pc, #24]	; (8004514 <HAL_RCC_OscConfig+0x330>)
 80044fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044fc:	2202      	movs	r2, #2
 80044fe:	4013      	ands	r3, r2
 8004500:	d100      	bne.n	8004504 <HAL_RCC_OscConfig+0x320>
 8004502:	e0b7      	b.n	8004674 <HAL_RCC_OscConfig+0x490>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d000      	beq.n	800450e <HAL_RCC_OscConfig+0x32a>
 800450c:	e0b2      	b.n	8004674 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e1c2      	b.n	8004898 <HAL_RCC_OscConfig+0x6b4>
 8004512:	46c0      	nop			; (mov r8, r8)
 8004514:	40021000 	.word	0x40021000
 8004518:	fffeffff 	.word	0xfffeffff
 800451c:	fffbffff 	.word	0xfffbffff
 8004520:	ffff80ff 	.word	0xffff80ff
 8004524:	ffffc7ff 	.word	0xffffc7ff
 8004528:	00f42400 	.word	0x00f42400
 800452c:	20000030 	.word	0x20000030
 8004530:	20000034 	.word	0x20000034
 8004534:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004538:	4bb5      	ldr	r3, [pc, #724]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 800453a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800453c:	2380      	movs	r3, #128	; 0x80
 800453e:	055b      	lsls	r3, r3, #21
 8004540:	4013      	ands	r3, r2
 8004542:	d101      	bne.n	8004548 <HAL_RCC_OscConfig+0x364>
 8004544:	2301      	movs	r3, #1
 8004546:	e000      	b.n	800454a <HAL_RCC_OscConfig+0x366>
 8004548:	2300      	movs	r3, #0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d011      	beq.n	8004572 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800454e:	4bb0      	ldr	r3, [pc, #704]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 8004550:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004552:	4baf      	ldr	r3, [pc, #700]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 8004554:	2180      	movs	r1, #128	; 0x80
 8004556:	0549      	lsls	r1, r1, #21
 8004558:	430a      	orrs	r2, r1
 800455a:	63da      	str	r2, [r3, #60]	; 0x3c
 800455c:	4bac      	ldr	r3, [pc, #688]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 800455e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004560:	2380      	movs	r3, #128	; 0x80
 8004562:	055b      	lsls	r3, r3, #21
 8004564:	4013      	ands	r3, r2
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800456a:	231f      	movs	r3, #31
 800456c:	18fb      	adds	r3, r7, r3
 800456e:	2201      	movs	r2, #1
 8004570:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004572:	4ba8      	ldr	r3, [pc, #672]	; (8004814 <HAL_RCC_OscConfig+0x630>)
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	2380      	movs	r3, #128	; 0x80
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	4013      	ands	r3, r2
 800457c:	d11a      	bne.n	80045b4 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800457e:	4ba5      	ldr	r3, [pc, #660]	; (8004814 <HAL_RCC_OscConfig+0x630>)
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	4ba4      	ldr	r3, [pc, #656]	; (8004814 <HAL_RCC_OscConfig+0x630>)
 8004584:	2180      	movs	r1, #128	; 0x80
 8004586:	0049      	lsls	r1, r1, #1
 8004588:	430a      	orrs	r2, r1
 800458a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800458c:	f7fd f8ac 	bl	80016e8 <HAL_GetTick>
 8004590:	0003      	movs	r3, r0
 8004592:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004594:	e008      	b.n	80045a8 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004596:	f7fd f8a7 	bl	80016e8 <HAL_GetTick>
 800459a:	0002      	movs	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e177      	b.n	8004898 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045a8:	4b9a      	ldr	r3, [pc, #616]	; (8004814 <HAL_RCC_OscConfig+0x630>)
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	2380      	movs	r3, #128	; 0x80
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	4013      	ands	r3, r2
 80045b2:	d0f0      	beq.n	8004596 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d106      	bne.n	80045ca <HAL_RCC_OscConfig+0x3e6>
 80045bc:	4b94      	ldr	r3, [pc, #592]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 80045be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045c0:	4b93      	ldr	r3, [pc, #588]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 80045c2:	2101      	movs	r1, #1
 80045c4:	430a      	orrs	r2, r1
 80045c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80045c8:	e01c      	b.n	8004604 <HAL_RCC_OscConfig+0x420>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	2b05      	cmp	r3, #5
 80045d0:	d10c      	bne.n	80045ec <HAL_RCC_OscConfig+0x408>
 80045d2:	4b8f      	ldr	r3, [pc, #572]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 80045d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045d6:	4b8e      	ldr	r3, [pc, #568]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 80045d8:	2104      	movs	r1, #4
 80045da:	430a      	orrs	r2, r1
 80045dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80045de:	4b8c      	ldr	r3, [pc, #560]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 80045e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045e2:	4b8b      	ldr	r3, [pc, #556]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 80045e4:	2101      	movs	r1, #1
 80045e6:	430a      	orrs	r2, r1
 80045e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80045ea:	e00b      	b.n	8004604 <HAL_RCC_OscConfig+0x420>
 80045ec:	4b88      	ldr	r3, [pc, #544]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 80045ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045f0:	4b87      	ldr	r3, [pc, #540]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 80045f2:	2101      	movs	r1, #1
 80045f4:	438a      	bics	r2, r1
 80045f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80045f8:	4b85      	ldr	r3, [pc, #532]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 80045fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045fc:	4b84      	ldr	r3, [pc, #528]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 80045fe:	2104      	movs	r1, #4
 8004600:	438a      	bics	r2, r1
 8004602:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d014      	beq.n	8004636 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460c:	f7fd f86c 	bl	80016e8 <HAL_GetTick>
 8004610:	0003      	movs	r3, r0
 8004612:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004614:	e009      	b.n	800462a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004616:	f7fd f867 	bl	80016e8 <HAL_GetTick>
 800461a:	0002      	movs	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	4a7d      	ldr	r2, [pc, #500]	; (8004818 <HAL_RCC_OscConfig+0x634>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e136      	b.n	8004898 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800462a:	4b79      	ldr	r3, [pc, #484]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 800462c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800462e:	2202      	movs	r2, #2
 8004630:	4013      	ands	r3, r2
 8004632:	d0f0      	beq.n	8004616 <HAL_RCC_OscConfig+0x432>
 8004634:	e013      	b.n	800465e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004636:	f7fd f857 	bl	80016e8 <HAL_GetTick>
 800463a:	0003      	movs	r3, r0
 800463c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800463e:	e009      	b.n	8004654 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004640:	f7fd f852 	bl	80016e8 <HAL_GetTick>
 8004644:	0002      	movs	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	4a73      	ldr	r2, [pc, #460]	; (8004818 <HAL_RCC_OscConfig+0x634>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d901      	bls.n	8004654 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e121      	b.n	8004898 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004654:	4b6e      	ldr	r3, [pc, #440]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 8004656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004658:	2202      	movs	r2, #2
 800465a:	4013      	ands	r3, r2
 800465c:	d1f0      	bne.n	8004640 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800465e:	231f      	movs	r3, #31
 8004660:	18fb      	adds	r3, r7, r3
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d105      	bne.n	8004674 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004668:	4b69      	ldr	r3, [pc, #420]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 800466a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800466c:	4b68      	ldr	r3, [pc, #416]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 800466e:	496b      	ldr	r1, [pc, #428]	; (800481c <HAL_RCC_OscConfig+0x638>)
 8004670:	400a      	ands	r2, r1
 8004672:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2220      	movs	r2, #32
 800467a:	4013      	ands	r3, r2
 800467c:	d039      	beq.n	80046f2 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d01b      	beq.n	80046be <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004686:	4b62      	ldr	r3, [pc, #392]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	4b61      	ldr	r3, [pc, #388]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 800468c:	2180      	movs	r1, #128	; 0x80
 800468e:	03c9      	lsls	r1, r1, #15
 8004690:	430a      	orrs	r2, r1
 8004692:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004694:	f7fd f828 	bl	80016e8 <HAL_GetTick>
 8004698:	0003      	movs	r3, r0
 800469a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800469c:	e008      	b.n	80046b0 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800469e:	f7fd f823 	bl	80016e8 <HAL_GetTick>
 80046a2:	0002      	movs	r2, r0
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e0f3      	b.n	8004898 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80046b0:	4b57      	ldr	r3, [pc, #348]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	2380      	movs	r3, #128	; 0x80
 80046b6:	041b      	lsls	r3, r3, #16
 80046b8:	4013      	ands	r3, r2
 80046ba:	d0f0      	beq.n	800469e <HAL_RCC_OscConfig+0x4ba>
 80046bc:	e019      	b.n	80046f2 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80046be:	4b54      	ldr	r3, [pc, #336]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	4b53      	ldr	r3, [pc, #332]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 80046c4:	4956      	ldr	r1, [pc, #344]	; (8004820 <HAL_RCC_OscConfig+0x63c>)
 80046c6:	400a      	ands	r2, r1
 80046c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ca:	f7fd f80d 	bl	80016e8 <HAL_GetTick>
 80046ce:	0003      	movs	r3, r0
 80046d0:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046d4:	f7fd f808 	bl	80016e8 <HAL_GetTick>
 80046d8:	0002      	movs	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e0d8      	b.n	8004898 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80046e6:	4b4a      	ldr	r3, [pc, #296]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	2380      	movs	r3, #128	; 0x80
 80046ec:	041b      	lsls	r3, r3, #16
 80046ee:	4013      	ands	r3, r2
 80046f0:	d1f0      	bne.n	80046d4 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d100      	bne.n	80046fc <HAL_RCC_OscConfig+0x518>
 80046fa:	e0cc      	b.n	8004896 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046fc:	4b44      	ldr	r3, [pc, #272]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	2238      	movs	r2, #56	; 0x38
 8004702:	4013      	ands	r3, r2
 8004704:	2b10      	cmp	r3, #16
 8004706:	d100      	bne.n	800470a <HAL_RCC_OscConfig+0x526>
 8004708:	e07b      	b.n	8004802 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	2b02      	cmp	r3, #2
 8004710:	d156      	bne.n	80047c0 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004712:	4b3f      	ldr	r3, [pc, #252]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	4b3e      	ldr	r3, [pc, #248]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 8004718:	4942      	ldr	r1, [pc, #264]	; (8004824 <HAL_RCC_OscConfig+0x640>)
 800471a:	400a      	ands	r2, r1
 800471c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471e:	f7fc ffe3 	bl	80016e8 <HAL_GetTick>
 8004722:	0003      	movs	r3, r0
 8004724:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004726:	e008      	b.n	800473a <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004728:	f7fc ffde 	bl	80016e8 <HAL_GetTick>
 800472c:	0002      	movs	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e0ae      	b.n	8004898 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800473a:	4b35      	ldr	r3, [pc, #212]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	2380      	movs	r3, #128	; 0x80
 8004740:	049b      	lsls	r3, r3, #18
 8004742:	4013      	ands	r3, r2
 8004744:	d1f0      	bne.n	8004728 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004746:	4b32      	ldr	r3, [pc, #200]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	4a37      	ldr	r2, [pc, #220]	; (8004828 <HAL_RCC_OscConfig+0x644>)
 800474c:	4013      	ands	r3, r2
 800474e:	0019      	movs	r1, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004758:	431a      	orrs	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475e:	021b      	lsls	r3, r3, #8
 8004760:	431a      	orrs	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004766:	431a      	orrs	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800476c:	431a      	orrs	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004772:	431a      	orrs	r2, r3
 8004774:	4b26      	ldr	r3, [pc, #152]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 8004776:	430a      	orrs	r2, r1
 8004778:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800477a:	4b25      	ldr	r3, [pc, #148]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	4b24      	ldr	r3, [pc, #144]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 8004780:	2180      	movs	r1, #128	; 0x80
 8004782:	0449      	lsls	r1, r1, #17
 8004784:	430a      	orrs	r2, r1
 8004786:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004788:	4b21      	ldr	r3, [pc, #132]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 800478a:	68da      	ldr	r2, [r3, #12]
 800478c:	4b20      	ldr	r3, [pc, #128]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 800478e:	2180      	movs	r1, #128	; 0x80
 8004790:	0549      	lsls	r1, r1, #21
 8004792:	430a      	orrs	r2, r1
 8004794:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004796:	f7fc ffa7 	bl	80016e8 <HAL_GetTick>
 800479a:	0003      	movs	r3, r0
 800479c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a0:	f7fc ffa2 	bl	80016e8 <HAL_GetTick>
 80047a4:	0002      	movs	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e072      	b.n	8004898 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047b2:	4b17      	ldr	r3, [pc, #92]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	2380      	movs	r3, #128	; 0x80
 80047b8:	049b      	lsls	r3, r3, #18
 80047ba:	4013      	ands	r3, r2
 80047bc:	d0f0      	beq.n	80047a0 <HAL_RCC_OscConfig+0x5bc>
 80047be:	e06a      	b.n	8004896 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047c0:	4b13      	ldr	r3, [pc, #76]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	4b12      	ldr	r3, [pc, #72]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 80047c6:	4917      	ldr	r1, [pc, #92]	; (8004824 <HAL_RCC_OscConfig+0x640>)
 80047c8:	400a      	ands	r2, r1
 80047ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047cc:	f7fc ff8c 	bl	80016e8 <HAL_GetTick>
 80047d0:	0003      	movs	r3, r0
 80047d2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047d4:	e008      	b.n	80047e8 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047d6:	f7fc ff87 	bl	80016e8 <HAL_GetTick>
 80047da:	0002      	movs	r2, r0
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e057      	b.n	8004898 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047e8:	4b09      	ldr	r3, [pc, #36]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	2380      	movs	r3, #128	; 0x80
 80047ee:	049b      	lsls	r3, r3, #18
 80047f0:	4013      	ands	r3, r2
 80047f2:	d1f0      	bne.n	80047d6 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80047f4:	4b06      	ldr	r3, [pc, #24]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 80047f6:	68da      	ldr	r2, [r3, #12]
 80047f8:	4b05      	ldr	r3, [pc, #20]	; (8004810 <HAL_RCC_OscConfig+0x62c>)
 80047fa:	490c      	ldr	r1, [pc, #48]	; (800482c <HAL_RCC_OscConfig+0x648>)
 80047fc:	400a      	ands	r2, r1
 80047fe:	60da      	str	r2, [r3, #12]
 8004800:	e049      	b.n	8004896 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d112      	bne.n	8004830 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e044      	b.n	8004898 <HAL_RCC_OscConfig+0x6b4>
 800480e:	46c0      	nop			; (mov r8, r8)
 8004810:	40021000 	.word	0x40021000
 8004814:	40007000 	.word	0x40007000
 8004818:	00001388 	.word	0x00001388
 800481c:	efffffff 	.word	0xefffffff
 8004820:	ffbfffff 	.word	0xffbfffff
 8004824:	feffffff 	.word	0xfeffffff
 8004828:	11c1808c 	.word	0x11c1808c
 800482c:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004830:	4b1b      	ldr	r3, [pc, #108]	; (80048a0 <HAL_RCC_OscConfig+0x6bc>)
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2203      	movs	r2, #3
 800483a:	401a      	ands	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004840:	429a      	cmp	r2, r3
 8004842:	d126      	bne.n	8004892 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	2270      	movs	r2, #112	; 0x70
 8004848:	401a      	ands	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800484e:	429a      	cmp	r2, r3
 8004850:	d11f      	bne.n	8004892 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	23fe      	movs	r3, #254	; 0xfe
 8004856:	01db      	lsls	r3, r3, #7
 8004858:	401a      	ands	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004860:	429a      	cmp	r2, r3
 8004862:	d116      	bne.n	8004892 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	23f8      	movs	r3, #248	; 0xf8
 8004868:	039b      	lsls	r3, r3, #14
 800486a:	401a      	ands	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004870:	429a      	cmp	r2, r3
 8004872:	d10e      	bne.n	8004892 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	23e0      	movs	r3, #224	; 0xe0
 8004878:	051b      	lsls	r3, r3, #20
 800487a:	401a      	ands	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004880:	429a      	cmp	r2, r3
 8004882:	d106      	bne.n	8004892 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	0f5b      	lsrs	r3, r3, #29
 8004888:	075a      	lsls	r2, r3, #29
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800488e:	429a      	cmp	r2, r3
 8004890:	d001      	beq.n	8004896 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e000      	b.n	8004898 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	0018      	movs	r0, r3
 800489a:	46bd      	mov	sp, r7
 800489c:	b008      	add	sp, #32
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40021000 	.word	0x40021000

080048a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d101      	bne.n	80048b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e0e9      	b.n	8004a8c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048b8:	4b76      	ldr	r3, [pc, #472]	; (8004a94 <HAL_RCC_ClockConfig+0x1f0>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2207      	movs	r2, #7
 80048be:	4013      	ands	r3, r2
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d91e      	bls.n	8004904 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048c6:	4b73      	ldr	r3, [pc, #460]	; (8004a94 <HAL_RCC_ClockConfig+0x1f0>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2207      	movs	r2, #7
 80048cc:	4393      	bics	r3, r2
 80048ce:	0019      	movs	r1, r3
 80048d0:	4b70      	ldr	r3, [pc, #448]	; (8004a94 <HAL_RCC_ClockConfig+0x1f0>)
 80048d2:	683a      	ldr	r2, [r7, #0]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80048d8:	f7fc ff06 	bl	80016e8 <HAL_GetTick>
 80048dc:	0003      	movs	r3, r0
 80048de:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80048e0:	e009      	b.n	80048f6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048e2:	f7fc ff01 	bl	80016e8 <HAL_GetTick>
 80048e6:	0002      	movs	r2, r0
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	4a6a      	ldr	r2, [pc, #424]	; (8004a98 <HAL_RCC_ClockConfig+0x1f4>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e0ca      	b.n	8004a8c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80048f6:	4b67      	ldr	r3, [pc, #412]	; (8004a94 <HAL_RCC_ClockConfig+0x1f0>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2207      	movs	r2, #7
 80048fc:	4013      	ands	r3, r2
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	429a      	cmp	r2, r3
 8004902:	d1ee      	bne.n	80048e2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2202      	movs	r2, #2
 800490a:	4013      	ands	r3, r2
 800490c:	d015      	beq.n	800493a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2204      	movs	r2, #4
 8004914:	4013      	ands	r3, r2
 8004916:	d006      	beq.n	8004926 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004918:	4b60      	ldr	r3, [pc, #384]	; (8004a9c <HAL_RCC_ClockConfig+0x1f8>)
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	4b5f      	ldr	r3, [pc, #380]	; (8004a9c <HAL_RCC_ClockConfig+0x1f8>)
 800491e:	21e0      	movs	r1, #224	; 0xe0
 8004920:	01c9      	lsls	r1, r1, #7
 8004922:	430a      	orrs	r2, r1
 8004924:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004926:	4b5d      	ldr	r3, [pc, #372]	; (8004a9c <HAL_RCC_ClockConfig+0x1f8>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	4a5d      	ldr	r2, [pc, #372]	; (8004aa0 <HAL_RCC_ClockConfig+0x1fc>)
 800492c:	4013      	ands	r3, r2
 800492e:	0019      	movs	r1, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689a      	ldr	r2, [r3, #8]
 8004934:	4b59      	ldr	r3, [pc, #356]	; (8004a9c <HAL_RCC_ClockConfig+0x1f8>)
 8004936:	430a      	orrs	r2, r1
 8004938:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2201      	movs	r2, #1
 8004940:	4013      	ands	r3, r2
 8004942:	d057      	beq.n	80049f4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d107      	bne.n	800495c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800494c:	4b53      	ldr	r3, [pc, #332]	; (8004a9c <HAL_RCC_ClockConfig+0x1f8>)
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	2380      	movs	r3, #128	; 0x80
 8004952:	029b      	lsls	r3, r3, #10
 8004954:	4013      	ands	r3, r2
 8004956:	d12b      	bne.n	80049b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e097      	b.n	8004a8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	2b02      	cmp	r3, #2
 8004962:	d107      	bne.n	8004974 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004964:	4b4d      	ldr	r3, [pc, #308]	; (8004a9c <HAL_RCC_ClockConfig+0x1f8>)
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	2380      	movs	r3, #128	; 0x80
 800496a:	049b      	lsls	r3, r3, #18
 800496c:	4013      	ands	r3, r2
 800496e:	d11f      	bne.n	80049b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e08b      	b.n	8004a8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d107      	bne.n	800498c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800497c:	4b47      	ldr	r3, [pc, #284]	; (8004a9c <HAL_RCC_ClockConfig+0x1f8>)
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	2380      	movs	r3, #128	; 0x80
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	4013      	ands	r3, r2
 8004986:	d113      	bne.n	80049b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e07f      	b.n	8004a8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	2b03      	cmp	r3, #3
 8004992:	d106      	bne.n	80049a2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004994:	4b41      	ldr	r3, [pc, #260]	; (8004a9c <HAL_RCC_ClockConfig+0x1f8>)
 8004996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004998:	2202      	movs	r2, #2
 800499a:	4013      	ands	r3, r2
 800499c:	d108      	bne.n	80049b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e074      	b.n	8004a8c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049a2:	4b3e      	ldr	r3, [pc, #248]	; (8004a9c <HAL_RCC_ClockConfig+0x1f8>)
 80049a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a6:	2202      	movs	r2, #2
 80049a8:	4013      	ands	r3, r2
 80049aa:	d101      	bne.n	80049b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e06d      	b.n	8004a8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049b0:	4b3a      	ldr	r3, [pc, #232]	; (8004a9c <HAL_RCC_ClockConfig+0x1f8>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	2207      	movs	r2, #7
 80049b6:	4393      	bics	r3, r2
 80049b8:	0019      	movs	r1, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	4b37      	ldr	r3, [pc, #220]	; (8004a9c <HAL_RCC_ClockConfig+0x1f8>)
 80049c0:	430a      	orrs	r2, r1
 80049c2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049c4:	f7fc fe90 	bl	80016e8 <HAL_GetTick>
 80049c8:	0003      	movs	r3, r0
 80049ca:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049cc:	e009      	b.n	80049e2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049ce:	f7fc fe8b 	bl	80016e8 <HAL_GetTick>
 80049d2:	0002      	movs	r2, r0
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	4a2f      	ldr	r2, [pc, #188]	; (8004a98 <HAL_RCC_ClockConfig+0x1f4>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e054      	b.n	8004a8c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049e2:	4b2e      	ldr	r3, [pc, #184]	; (8004a9c <HAL_RCC_ClockConfig+0x1f8>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	2238      	movs	r2, #56	; 0x38
 80049e8:	401a      	ands	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d1ec      	bne.n	80049ce <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049f4:	4b27      	ldr	r3, [pc, #156]	; (8004a94 <HAL_RCC_ClockConfig+0x1f0>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2207      	movs	r2, #7
 80049fa:	4013      	ands	r3, r2
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d21e      	bcs.n	8004a40 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a02:	4b24      	ldr	r3, [pc, #144]	; (8004a94 <HAL_RCC_ClockConfig+0x1f0>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2207      	movs	r2, #7
 8004a08:	4393      	bics	r3, r2
 8004a0a:	0019      	movs	r1, r3
 8004a0c:	4b21      	ldr	r3, [pc, #132]	; (8004a94 <HAL_RCC_ClockConfig+0x1f0>)
 8004a0e:	683a      	ldr	r2, [r7, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a14:	f7fc fe68 	bl	80016e8 <HAL_GetTick>
 8004a18:	0003      	movs	r3, r0
 8004a1a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004a1c:	e009      	b.n	8004a32 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a1e:	f7fc fe63 	bl	80016e8 <HAL_GetTick>
 8004a22:	0002      	movs	r2, r0
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	4a1b      	ldr	r2, [pc, #108]	; (8004a98 <HAL_RCC_ClockConfig+0x1f4>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e02c      	b.n	8004a8c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004a32:	4b18      	ldr	r3, [pc, #96]	; (8004a94 <HAL_RCC_ClockConfig+0x1f0>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2207      	movs	r2, #7
 8004a38:	4013      	ands	r3, r2
 8004a3a:	683a      	ldr	r2, [r7, #0]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d1ee      	bne.n	8004a1e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2204      	movs	r2, #4
 8004a46:	4013      	ands	r3, r2
 8004a48:	d009      	beq.n	8004a5e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004a4a:	4b14      	ldr	r3, [pc, #80]	; (8004a9c <HAL_RCC_ClockConfig+0x1f8>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	4a15      	ldr	r2, [pc, #84]	; (8004aa4 <HAL_RCC_ClockConfig+0x200>)
 8004a50:	4013      	ands	r3, r2
 8004a52:	0019      	movs	r1, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68da      	ldr	r2, [r3, #12]
 8004a58:	4b10      	ldr	r3, [pc, #64]	; (8004a9c <HAL_RCC_ClockConfig+0x1f8>)
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004a5e:	f000 f829 	bl	8004ab4 <HAL_RCC_GetSysClockFreq>
 8004a62:	0001      	movs	r1, r0
 8004a64:	4b0d      	ldr	r3, [pc, #52]	; (8004a9c <HAL_RCC_ClockConfig+0x1f8>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	0a1b      	lsrs	r3, r3, #8
 8004a6a:	220f      	movs	r2, #15
 8004a6c:	401a      	ands	r2, r3
 8004a6e:	4b0e      	ldr	r3, [pc, #56]	; (8004aa8 <HAL_RCC_ClockConfig+0x204>)
 8004a70:	0092      	lsls	r2, r2, #2
 8004a72:	58d3      	ldr	r3, [r2, r3]
 8004a74:	221f      	movs	r2, #31
 8004a76:	4013      	ands	r3, r2
 8004a78:	000a      	movs	r2, r1
 8004a7a:	40da      	lsrs	r2, r3
 8004a7c:	4b0b      	ldr	r3, [pc, #44]	; (8004aac <HAL_RCC_ClockConfig+0x208>)
 8004a7e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004a80:	4b0b      	ldr	r3, [pc, #44]	; (8004ab0 <HAL_RCC_ClockConfig+0x20c>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	0018      	movs	r0, r3
 8004a86:	f7fc fdd3 	bl	8001630 <HAL_InitTick>
 8004a8a:	0003      	movs	r3, r0
}
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	b004      	add	sp, #16
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	40022000 	.word	0x40022000
 8004a98:	00001388 	.word	0x00001388
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	fffff0ff 	.word	0xfffff0ff
 8004aa4:	ffff8fff 	.word	0xffff8fff
 8004aa8:	0800b900 	.word	0x0800b900
 8004aac:	20000030 	.word	0x20000030
 8004ab0:	20000034 	.word	0x20000034

08004ab4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004aba:	4b3c      	ldr	r3, [pc, #240]	; (8004bac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	2238      	movs	r2, #56	; 0x38
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	d10f      	bne.n	8004ae4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004ac4:	4b39      	ldr	r3, [pc, #228]	; (8004bac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	0adb      	lsrs	r3, r3, #11
 8004aca:	2207      	movs	r2, #7
 8004acc:	4013      	ands	r3, r2
 8004ace:	2201      	movs	r2, #1
 8004ad0:	409a      	lsls	r2, r3
 8004ad2:	0013      	movs	r3, r2
 8004ad4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004ad6:	6839      	ldr	r1, [r7, #0]
 8004ad8:	4835      	ldr	r0, [pc, #212]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004ada:	f7fb fb25 	bl	8000128 <__udivsi3>
 8004ade:	0003      	movs	r3, r0
 8004ae0:	613b      	str	r3, [r7, #16]
 8004ae2:	e05d      	b.n	8004ba0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ae4:	4b31      	ldr	r3, [pc, #196]	; (8004bac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	2238      	movs	r2, #56	; 0x38
 8004aea:	4013      	ands	r3, r2
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	d102      	bne.n	8004af6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004af0:	4b30      	ldr	r3, [pc, #192]	; (8004bb4 <HAL_RCC_GetSysClockFreq+0x100>)
 8004af2:	613b      	str	r3, [r7, #16]
 8004af4:	e054      	b.n	8004ba0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004af6:	4b2d      	ldr	r3, [pc, #180]	; (8004bac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	2238      	movs	r2, #56	; 0x38
 8004afc:	4013      	ands	r3, r2
 8004afe:	2b10      	cmp	r3, #16
 8004b00:	d138      	bne.n	8004b74 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004b02:	4b2a      	ldr	r3, [pc, #168]	; (8004bac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	2203      	movs	r2, #3
 8004b08:	4013      	ands	r3, r2
 8004b0a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b0c:	4b27      	ldr	r3, [pc, #156]	; (8004bac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	091b      	lsrs	r3, r3, #4
 8004b12:	2207      	movs	r2, #7
 8004b14:	4013      	ands	r3, r2
 8004b16:	3301      	adds	r3, #1
 8004b18:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2b03      	cmp	r3, #3
 8004b1e:	d10d      	bne.n	8004b3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b20:	68b9      	ldr	r1, [r7, #8]
 8004b22:	4824      	ldr	r0, [pc, #144]	; (8004bb4 <HAL_RCC_GetSysClockFreq+0x100>)
 8004b24:	f7fb fb00 	bl	8000128 <__udivsi3>
 8004b28:	0003      	movs	r3, r0
 8004b2a:	0019      	movs	r1, r3
 8004b2c:	4b1f      	ldr	r3, [pc, #124]	; (8004bac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	0a1b      	lsrs	r3, r3, #8
 8004b32:	227f      	movs	r2, #127	; 0x7f
 8004b34:	4013      	ands	r3, r2
 8004b36:	434b      	muls	r3, r1
 8004b38:	617b      	str	r3, [r7, #20]
        break;
 8004b3a:	e00d      	b.n	8004b58 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004b3c:	68b9      	ldr	r1, [r7, #8]
 8004b3e:	481c      	ldr	r0, [pc, #112]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004b40:	f7fb faf2 	bl	8000128 <__udivsi3>
 8004b44:	0003      	movs	r3, r0
 8004b46:	0019      	movs	r1, r3
 8004b48:	4b18      	ldr	r3, [pc, #96]	; (8004bac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	0a1b      	lsrs	r3, r3, #8
 8004b4e:	227f      	movs	r2, #127	; 0x7f
 8004b50:	4013      	ands	r3, r2
 8004b52:	434b      	muls	r3, r1
 8004b54:	617b      	str	r3, [r7, #20]
        break;
 8004b56:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004b58:	4b14      	ldr	r3, [pc, #80]	; (8004bac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	0f5b      	lsrs	r3, r3, #29
 8004b5e:	2207      	movs	r2, #7
 8004b60:	4013      	ands	r3, r2
 8004b62:	3301      	adds	r3, #1
 8004b64:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004b66:	6879      	ldr	r1, [r7, #4]
 8004b68:	6978      	ldr	r0, [r7, #20]
 8004b6a:	f7fb fadd 	bl	8000128 <__udivsi3>
 8004b6e:	0003      	movs	r3, r0
 8004b70:	613b      	str	r3, [r7, #16]
 8004b72:	e015      	b.n	8004ba0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004b74:	4b0d      	ldr	r3, [pc, #52]	; (8004bac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	2238      	movs	r2, #56	; 0x38
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	2b20      	cmp	r3, #32
 8004b7e:	d103      	bne.n	8004b88 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004b80:	2380      	movs	r3, #128	; 0x80
 8004b82:	021b      	lsls	r3, r3, #8
 8004b84:	613b      	str	r3, [r7, #16]
 8004b86:	e00b      	b.n	8004ba0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004b88:	4b08      	ldr	r3, [pc, #32]	; (8004bac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	2238      	movs	r2, #56	; 0x38
 8004b8e:	4013      	ands	r3, r2
 8004b90:	2b18      	cmp	r3, #24
 8004b92:	d103      	bne.n	8004b9c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004b94:	23fa      	movs	r3, #250	; 0xfa
 8004b96:	01db      	lsls	r3, r3, #7
 8004b98:	613b      	str	r3, [r7, #16]
 8004b9a:	e001      	b.n	8004ba0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004ba0:	693b      	ldr	r3, [r7, #16]
}
 8004ba2:	0018      	movs	r0, r3
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	b006      	add	sp, #24
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	46c0      	nop			; (mov r8, r8)
 8004bac:	40021000 	.word	0x40021000
 8004bb0:	00f42400 	.word	0x00f42400
 8004bb4:	007a1200 	.word	0x007a1200

08004bb8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bbc:	4b02      	ldr	r3, [pc, #8]	; (8004bc8 <HAL_RCC_GetHCLKFreq+0x10>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
}
 8004bc0:	0018      	movs	r0, r3
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	46c0      	nop			; (mov r8, r8)
 8004bc8:	20000030 	.word	0x20000030

08004bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bcc:	b5b0      	push	{r4, r5, r7, lr}
 8004bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004bd0:	f7ff fff2 	bl	8004bb8 <HAL_RCC_GetHCLKFreq>
 8004bd4:	0004      	movs	r4, r0
 8004bd6:	f7ff faf9 	bl	80041cc <LL_RCC_GetAPB1Prescaler>
 8004bda:	0003      	movs	r3, r0
 8004bdc:	0b1a      	lsrs	r2, r3, #12
 8004bde:	4b05      	ldr	r3, [pc, #20]	; (8004bf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004be0:	0092      	lsls	r2, r2, #2
 8004be2:	58d3      	ldr	r3, [r2, r3]
 8004be4:	221f      	movs	r2, #31
 8004be6:	4013      	ands	r3, r2
 8004be8:	40dc      	lsrs	r4, r3
 8004bea:	0023      	movs	r3, r4
}
 8004bec:	0018      	movs	r0, r3
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bdb0      	pop	{r4, r5, r7, pc}
 8004bf2:	46c0      	nop			; (mov r8, r8)
 8004bf4:	0800b940 	.word	0x0800b940

08004bf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004c00:	2313      	movs	r3, #19
 8004c02:	18fb      	adds	r3, r7, r3
 8004c04:	2200      	movs	r2, #0
 8004c06:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c08:	2312      	movs	r3, #18
 8004c0a:	18fb      	adds	r3, r7, r3
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	2380      	movs	r3, #128	; 0x80
 8004c16:	029b      	lsls	r3, r3, #10
 8004c18:	4013      	ands	r3, r2
 8004c1a:	d100      	bne.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004c1c:	e0ad      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c1e:	2011      	movs	r0, #17
 8004c20:	183b      	adds	r3, r7, r0
 8004c22:	2200      	movs	r2, #0
 8004c24:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c26:	4b47      	ldr	r3, [pc, #284]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004c28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c2a:	2380      	movs	r3, #128	; 0x80
 8004c2c:	055b      	lsls	r3, r3, #21
 8004c2e:	4013      	ands	r3, r2
 8004c30:	d110      	bne.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c32:	4b44      	ldr	r3, [pc, #272]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004c34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c36:	4b43      	ldr	r3, [pc, #268]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004c38:	2180      	movs	r1, #128	; 0x80
 8004c3a:	0549      	lsls	r1, r1, #21
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004c40:	4b40      	ldr	r3, [pc, #256]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004c42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c44:	2380      	movs	r3, #128	; 0x80
 8004c46:	055b      	lsls	r3, r3, #21
 8004c48:	4013      	ands	r3, r2
 8004c4a:	60bb      	str	r3, [r7, #8]
 8004c4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c4e:	183b      	adds	r3, r7, r0
 8004c50:	2201      	movs	r2, #1
 8004c52:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c54:	4b3c      	ldr	r3, [pc, #240]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	4b3b      	ldr	r3, [pc, #236]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004c5a:	2180      	movs	r1, #128	; 0x80
 8004c5c:	0049      	lsls	r1, r1, #1
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c62:	f7fc fd41 	bl	80016e8 <HAL_GetTick>
 8004c66:	0003      	movs	r3, r0
 8004c68:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c6a:	e00b      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c6c:	f7fc fd3c 	bl	80016e8 <HAL_GetTick>
 8004c70:	0002      	movs	r2, r0
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d904      	bls.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004c7a:	2313      	movs	r3, #19
 8004c7c:	18fb      	adds	r3, r7, r3
 8004c7e:	2203      	movs	r2, #3
 8004c80:	701a      	strb	r2, [r3, #0]
        break;
 8004c82:	e005      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c84:	4b30      	ldr	r3, [pc, #192]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	2380      	movs	r3, #128	; 0x80
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	d0ed      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004c90:	2313      	movs	r3, #19
 8004c92:	18fb      	adds	r3, r7, r3
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d15e      	bne.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c9a:	4b2a      	ldr	r3, [pc, #168]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004c9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c9e:	23c0      	movs	r3, #192	; 0xc0
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d019      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d014      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004cb6:	4b23      	ldr	r3, [pc, #140]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cba:	4a24      	ldr	r2, [pc, #144]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cc0:	4b20      	ldr	r3, [pc, #128]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004cc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004cc4:	4b1f      	ldr	r3, [pc, #124]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004cc6:	2180      	movs	r1, #128	; 0x80
 8004cc8:	0249      	lsls	r1, r1, #9
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cce:	4b1d      	ldr	r3, [pc, #116]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004cd0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004cd2:	4b1c      	ldr	r3, [pc, #112]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004cd4:	491e      	ldr	r1, [pc, #120]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8004cd6:	400a      	ands	r2, r1
 8004cd8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004cda:	4b1a      	ldr	r3, [pc, #104]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	d016      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce8:	f7fc fcfe 	bl	80016e8 <HAL_GetTick>
 8004cec:	0003      	movs	r3, r0
 8004cee:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cf0:	e00c      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cf2:	f7fc fcf9 	bl	80016e8 <HAL_GetTick>
 8004cf6:	0002      	movs	r2, r0
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	4a15      	ldr	r2, [pc, #84]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d904      	bls.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004d02:	2313      	movs	r3, #19
 8004d04:	18fb      	adds	r3, r7, r3
 8004d06:	2203      	movs	r2, #3
 8004d08:	701a      	strb	r2, [r3, #0]
            break;
 8004d0a:	e004      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d0c:	4b0d      	ldr	r3, [pc, #52]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d10:	2202      	movs	r2, #2
 8004d12:	4013      	ands	r3, r2
 8004d14:	d0ed      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004d16:	2313      	movs	r3, #19
 8004d18:	18fb      	adds	r3, r7, r3
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10a      	bne.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d20:	4b08      	ldr	r3, [pc, #32]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d24:	4a09      	ldr	r2, [pc, #36]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004d26:	4013      	ands	r3, r2
 8004d28:	0019      	movs	r1, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d2e:	4b05      	ldr	r3, [pc, #20]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004d30:	430a      	orrs	r2, r1
 8004d32:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d34:	e016      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d36:	2312      	movs	r3, #18
 8004d38:	18fb      	adds	r3, r7, r3
 8004d3a:	2213      	movs	r2, #19
 8004d3c:	18ba      	adds	r2, r7, r2
 8004d3e:	7812      	ldrb	r2, [r2, #0]
 8004d40:	701a      	strb	r2, [r3, #0]
 8004d42:	e00f      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004d44:	40021000 	.word	0x40021000
 8004d48:	40007000 	.word	0x40007000
 8004d4c:	fffffcff 	.word	0xfffffcff
 8004d50:	fffeffff 	.word	0xfffeffff
 8004d54:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d58:	2312      	movs	r3, #18
 8004d5a:	18fb      	adds	r3, r7, r3
 8004d5c:	2213      	movs	r2, #19
 8004d5e:	18ba      	adds	r2, r7, r2
 8004d60:	7812      	ldrb	r2, [r2, #0]
 8004d62:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d64:	2311      	movs	r3, #17
 8004d66:	18fb      	adds	r3, r7, r3
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d105      	bne.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d6e:	4bb6      	ldr	r3, [pc, #728]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d72:	4bb5      	ldr	r3, [pc, #724]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d74:	49b5      	ldr	r1, [pc, #724]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004d76:	400a      	ands	r2, r1
 8004d78:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	4013      	ands	r3, r2
 8004d82:	d009      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d84:	4bb0      	ldr	r3, [pc, #704]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d88:	2203      	movs	r2, #3
 8004d8a:	4393      	bics	r3, r2
 8004d8c:	0019      	movs	r1, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685a      	ldr	r2, [r3, #4]
 8004d92:	4bad      	ldr	r3, [pc, #692]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d94:	430a      	orrs	r2, r1
 8004d96:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2202      	movs	r2, #2
 8004d9e:	4013      	ands	r3, r2
 8004da0:	d009      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004da2:	4ba9      	ldr	r3, [pc, #676]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da6:	220c      	movs	r2, #12
 8004da8:	4393      	bics	r3, r2
 8004daa:	0019      	movs	r1, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	4ba5      	ldr	r3, [pc, #660]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004db2:	430a      	orrs	r2, r1
 8004db4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2204      	movs	r2, #4
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	d009      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004dc0:	4ba1      	ldr	r3, [pc, #644]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc4:	2230      	movs	r2, #48	; 0x30
 8004dc6:	4393      	bics	r3, r2
 8004dc8:	0019      	movs	r1, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68da      	ldr	r2, [r3, #12]
 8004dce:	4b9e      	ldr	r3, [pc, #632]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2210      	movs	r2, #16
 8004dda:	4013      	ands	r3, r2
 8004ddc:	d009      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004dde:	4b9a      	ldr	r3, [pc, #616]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de2:	4a9b      	ldr	r2, [pc, #620]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004de4:	4013      	ands	r3, r2
 8004de6:	0019      	movs	r1, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	691a      	ldr	r2, [r3, #16]
 8004dec:	4b96      	ldr	r3, [pc, #600]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004dee:	430a      	orrs	r2, r1
 8004df0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	2380      	movs	r3, #128	; 0x80
 8004df8:	015b      	lsls	r3, r3, #5
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	d009      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8004dfe:	4b92      	ldr	r3, [pc, #584]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e02:	4a94      	ldr	r2, [pc, #592]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e04:	4013      	ands	r3, r2
 8004e06:	0019      	movs	r1, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	695a      	ldr	r2, [r3, #20]
 8004e0c:	4b8e      	ldr	r3, [pc, #568]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	2380      	movs	r3, #128	; 0x80
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	d009      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e1e:	4b8a      	ldr	r3, [pc, #552]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e22:	4a8d      	ldr	r2, [pc, #564]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8004e24:	4013      	ands	r3, r2
 8004e26:	0019      	movs	r1, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e2c:	4b86      	ldr	r3, [pc, #536]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	2380      	movs	r3, #128	; 0x80
 8004e38:	00db      	lsls	r3, r3, #3
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	d009      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e3e:	4b82      	ldr	r3, [pc, #520]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e42:	4a86      	ldr	r2, [pc, #536]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8004e44:	4013      	ands	r3, r2
 8004e46:	0019      	movs	r1, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e4c:	4b7e      	ldr	r3, [pc, #504]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2220      	movs	r2, #32
 8004e58:	4013      	ands	r3, r2
 8004e5a:	d009      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e5c:	4b7a      	ldr	r3, [pc, #488]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e60:	4a7f      	ldr	r2, [pc, #508]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004e62:	4013      	ands	r3, r2
 8004e64:	0019      	movs	r1, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699a      	ldr	r2, [r3, #24]
 8004e6a:	4b77      	ldr	r3, [pc, #476]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2240      	movs	r2, #64	; 0x40
 8004e76:	4013      	ands	r3, r2
 8004e78:	d009      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e7a:	4b73      	ldr	r3, [pc, #460]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e7e:	4a79      	ldr	r2, [pc, #484]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8004e80:	4013      	ands	r3, r2
 8004e82:	0019      	movs	r1, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	69da      	ldr	r2, [r3, #28]
 8004e88:	4b6f      	ldr	r3, [pc, #444]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	2380      	movs	r3, #128	; 0x80
 8004e94:	01db      	lsls	r3, r3, #7
 8004e96:	4013      	ands	r3, r2
 8004e98:	d015      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e9a:	4b6b      	ldr	r3, [pc, #428]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	0899      	lsrs	r1, r3, #2
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ea6:	4b68      	ldr	r3, [pc, #416]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eb0:	2380      	movs	r3, #128	; 0x80
 8004eb2:	05db      	lsls	r3, r3, #23
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d106      	bne.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004eb8:	4b63      	ldr	r3, [pc, #396]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004eba:	68da      	ldr	r2, [r3, #12]
 8004ebc:	4b62      	ldr	r3, [pc, #392]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ebe:	2180      	movs	r1, #128	; 0x80
 8004ec0:	0249      	lsls	r1, r1, #9
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	2380      	movs	r3, #128	; 0x80
 8004ecc:	031b      	lsls	r3, r3, #12
 8004ece:	4013      	ands	r3, r2
 8004ed0:	d009      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ed2:	4b5d      	ldr	r3, [pc, #372]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed6:	2240      	movs	r2, #64	; 0x40
 8004ed8:	4393      	bics	r3, r2
 8004eda:	0019      	movs	r1, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ee0:	4b59      	ldr	r3, [pc, #356]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	2380      	movs	r3, #128	; 0x80
 8004eec:	039b      	lsls	r3, r3, #14
 8004eee:	4013      	ands	r3, r2
 8004ef0:	d016      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004ef2:	4b55      	ldr	r3, [pc, #340]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef6:	4a5c      	ldr	r2, [pc, #368]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004ef8:	4013      	ands	r3, r2
 8004efa:	0019      	movs	r1, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f00:	4b51      	ldr	r3, [pc, #324]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f02:	430a      	orrs	r2, r1
 8004f04:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f0a:	2380      	movs	r3, #128	; 0x80
 8004f0c:	03db      	lsls	r3, r3, #15
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d106      	bne.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004f12:	4b4d      	ldr	r3, [pc, #308]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f14:	68da      	ldr	r2, [r3, #12]
 8004f16:	4b4c      	ldr	r3, [pc, #304]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f18:	2180      	movs	r1, #128	; 0x80
 8004f1a:	0449      	lsls	r1, r1, #17
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	2380      	movs	r3, #128	; 0x80
 8004f26:	03db      	lsls	r3, r3, #15
 8004f28:	4013      	ands	r3, r2
 8004f2a:	d016      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004f2c:	4b46      	ldr	r3, [pc, #280]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f30:	4a4e      	ldr	r2, [pc, #312]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004f32:	4013      	ands	r3, r2
 8004f34:	0019      	movs	r1, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f3a:	4b43      	ldr	r3, [pc, #268]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f44:	2380      	movs	r3, #128	; 0x80
 8004f46:	045b      	lsls	r3, r3, #17
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d106      	bne.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004f4c:	4b3e      	ldr	r3, [pc, #248]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f4e:	68da      	ldr	r2, [r3, #12]
 8004f50:	4b3d      	ldr	r3, [pc, #244]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f52:	2180      	movs	r1, #128	; 0x80
 8004f54:	0449      	lsls	r1, r1, #17
 8004f56:	430a      	orrs	r2, r1
 8004f58:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	2380      	movs	r3, #128	; 0x80
 8004f60:	011b      	lsls	r3, r3, #4
 8004f62:	4013      	ands	r3, r2
 8004f64:	d014      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004f66:	4b38      	ldr	r3, [pc, #224]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f6a:	2203      	movs	r2, #3
 8004f6c:	4393      	bics	r3, r2
 8004f6e:	0019      	movs	r1, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a1a      	ldr	r2, [r3, #32]
 8004f74:	4b34      	ldr	r3, [pc, #208]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f76:	430a      	orrs	r2, r1
 8004f78:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d106      	bne.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004f82:	4b31      	ldr	r3, [pc, #196]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f84:	68da      	ldr	r2, [r3, #12]
 8004f86:	4b30      	ldr	r3, [pc, #192]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f88:	2180      	movs	r1, #128	; 0x80
 8004f8a:	0249      	lsls	r1, r1, #9
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	2380      	movs	r3, #128	; 0x80
 8004f96:	019b      	lsls	r3, r3, #6
 8004f98:	4013      	ands	r3, r2
 8004f9a:	d014      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004f9c:	4b2a      	ldr	r3, [pc, #168]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa0:	220c      	movs	r2, #12
 8004fa2:	4393      	bics	r3, r2
 8004fa4:	0019      	movs	r1, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004faa:	4b27      	ldr	r3, [pc, #156]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fac:	430a      	orrs	r2, r1
 8004fae:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb4:	2b04      	cmp	r3, #4
 8004fb6:	d106      	bne.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004fb8:	4b23      	ldr	r3, [pc, #140]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fba:	68da      	ldr	r2, [r3, #12]
 8004fbc:	4b22      	ldr	r3, [pc, #136]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fbe:	2180      	movs	r1, #128	; 0x80
 8004fc0:	0249      	lsls	r1, r1, #9
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	2380      	movs	r3, #128	; 0x80
 8004fcc:	045b      	lsls	r3, r3, #17
 8004fce:	4013      	ands	r3, r2
 8004fd0:	d016      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fd2:	4b1d      	ldr	r3, [pc, #116]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd6:	4a22      	ldr	r2, [pc, #136]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004fd8:	4013      	ands	r3, r2
 8004fda:	0019      	movs	r1, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fe0:	4b19      	ldr	r3, [pc, #100]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fea:	2380      	movs	r3, #128	; 0x80
 8004fec:	019b      	lsls	r3, r3, #6
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d106      	bne.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004ff2:	4b15      	ldr	r3, [pc, #84]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	4b14      	ldr	r3, [pc, #80]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ff8:	2180      	movs	r1, #128	; 0x80
 8004ffa:	0449      	lsls	r1, r1, #17
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	2380      	movs	r3, #128	; 0x80
 8005006:	049b      	lsls	r3, r3, #18
 8005008:	4013      	ands	r3, r2
 800500a:	d016      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800500c:	4b0e      	ldr	r3, [pc, #56]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800500e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005010:	4a10      	ldr	r2, [pc, #64]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005012:	4013      	ands	r3, r2
 8005014:	0019      	movs	r1, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800501a:	4b0b      	ldr	r3, [pc, #44]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800501c:	430a      	orrs	r2, r1
 800501e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005024:	2380      	movs	r3, #128	; 0x80
 8005026:	005b      	lsls	r3, r3, #1
 8005028:	429a      	cmp	r2, r3
 800502a:	d106      	bne.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800502c:	4b06      	ldr	r3, [pc, #24]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800502e:	68da      	ldr	r2, [r3, #12]
 8005030:	4b05      	ldr	r3, [pc, #20]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005032:	2180      	movs	r1, #128	; 0x80
 8005034:	0449      	lsls	r1, r1, #17
 8005036:	430a      	orrs	r2, r1
 8005038:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800503a:	2312      	movs	r3, #18
 800503c:	18fb      	adds	r3, r7, r3
 800503e:	781b      	ldrb	r3, [r3, #0]
}
 8005040:	0018      	movs	r0, r3
 8005042:	46bd      	mov	sp, r7
 8005044:	b006      	add	sp, #24
 8005046:	bd80      	pop	{r7, pc}
 8005048:	40021000 	.word	0x40021000
 800504c:	efffffff 	.word	0xefffffff
 8005050:	fffff3ff 	.word	0xfffff3ff
 8005054:	fffffcff 	.word	0xfffffcff
 8005058:	fff3ffff 	.word	0xfff3ffff
 800505c:	ffcfffff 	.word	0xffcfffff
 8005060:	ffffcfff 	.word	0xffffcfff
 8005064:	ffff3fff 	.word	0xffff3fff
 8005068:	ffbfffff 	.word	0xffbfffff
 800506c:	feffffff 	.word	0xfeffffff

08005070 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e0a8      	b.n	80051d4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005086:	2b00      	cmp	r3, #0
 8005088:	d109      	bne.n	800509e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	2382      	movs	r3, #130	; 0x82
 8005090:	005b      	lsls	r3, r3, #1
 8005092:	429a      	cmp	r2, r3
 8005094:	d009      	beq.n	80050aa <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	61da      	str	r2, [r3, #28]
 800509c:	e005      	b.n	80050aa <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	225d      	movs	r2, #93	; 0x5d
 80050b4:	5c9b      	ldrb	r3, [r3, r2]
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d107      	bne.n	80050cc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	225c      	movs	r2, #92	; 0x5c
 80050c0:	2100      	movs	r1, #0
 80050c2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	0018      	movs	r0, r3
 80050c8:	f7fb ff74 	bl	8000fb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	225d      	movs	r2, #93	; 0x5d
 80050d0:	2102      	movs	r1, #2
 80050d2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2140      	movs	r1, #64	; 0x40
 80050e0:	438a      	bics	r2, r1
 80050e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68da      	ldr	r2, [r3, #12]
 80050e8:	23e0      	movs	r3, #224	; 0xe0
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d902      	bls.n	80050f6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80050f0:	2300      	movs	r3, #0
 80050f2:	60fb      	str	r3, [r7, #12]
 80050f4:	e002      	b.n	80050fc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80050f6:	2380      	movs	r3, #128	; 0x80
 80050f8:	015b      	lsls	r3, r3, #5
 80050fa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68da      	ldr	r2, [r3, #12]
 8005100:	23f0      	movs	r3, #240	; 0xf0
 8005102:	011b      	lsls	r3, r3, #4
 8005104:	429a      	cmp	r2, r3
 8005106:	d008      	beq.n	800511a <HAL_SPI_Init+0xaa>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68da      	ldr	r2, [r3, #12]
 800510c:	23e0      	movs	r3, #224	; 0xe0
 800510e:	00db      	lsls	r3, r3, #3
 8005110:	429a      	cmp	r2, r3
 8005112:	d002      	beq.n	800511a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685a      	ldr	r2, [r3, #4]
 800511e:	2382      	movs	r3, #130	; 0x82
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	401a      	ands	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6899      	ldr	r1, [r3, #8]
 8005128:	2384      	movs	r3, #132	; 0x84
 800512a:	021b      	lsls	r3, r3, #8
 800512c:	400b      	ands	r3, r1
 800512e:	431a      	orrs	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	2102      	movs	r1, #2
 8005136:	400b      	ands	r3, r1
 8005138:	431a      	orrs	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	2101      	movs	r1, #1
 8005140:	400b      	ands	r3, r1
 8005142:	431a      	orrs	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6999      	ldr	r1, [r3, #24]
 8005148:	2380      	movs	r3, #128	; 0x80
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	400b      	ands	r3, r1
 800514e:	431a      	orrs	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	69db      	ldr	r3, [r3, #28]
 8005154:	2138      	movs	r1, #56	; 0x38
 8005156:	400b      	ands	r3, r1
 8005158:	431a      	orrs	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	2180      	movs	r1, #128	; 0x80
 8005160:	400b      	ands	r3, r1
 8005162:	431a      	orrs	r2, r3
 8005164:	0011      	movs	r1, r2
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800516a:	2380      	movs	r3, #128	; 0x80
 800516c:	019b      	lsls	r3, r3, #6
 800516e:	401a      	ands	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	430a      	orrs	r2, r1
 8005176:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	0c1b      	lsrs	r3, r3, #16
 800517e:	2204      	movs	r2, #4
 8005180:	401a      	ands	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005186:	2110      	movs	r1, #16
 8005188:	400b      	ands	r3, r1
 800518a:	431a      	orrs	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005190:	2108      	movs	r1, #8
 8005192:	400b      	ands	r3, r1
 8005194:	431a      	orrs	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	68d9      	ldr	r1, [r3, #12]
 800519a:	23f0      	movs	r3, #240	; 0xf0
 800519c:	011b      	lsls	r3, r3, #4
 800519e:	400b      	ands	r3, r1
 80051a0:	431a      	orrs	r2, r3
 80051a2:	0011      	movs	r1, r2
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	2380      	movs	r3, #128	; 0x80
 80051a8:	015b      	lsls	r3, r3, #5
 80051aa:	401a      	ands	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	430a      	orrs	r2, r1
 80051b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	69da      	ldr	r2, [r3, #28]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4907      	ldr	r1, [pc, #28]	; (80051dc <HAL_SPI_Init+0x16c>)
 80051c0:	400a      	ands	r2, r1
 80051c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	225d      	movs	r2, #93	; 0x5d
 80051ce:	2101      	movs	r1, #1
 80051d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	0018      	movs	r0, r3
 80051d6:	46bd      	mov	sp, r7
 80051d8:	b004      	add	sp, #16
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	fffff7ff 	.word	0xfffff7ff

080051e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e046      	b.n	8005280 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2288      	movs	r2, #136	; 0x88
 80051f6:	589b      	ldr	r3, [r3, r2]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d107      	bne.n	800520c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2284      	movs	r2, #132	; 0x84
 8005200:	2100      	movs	r1, #0
 8005202:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	0018      	movs	r0, r3
 8005208:	f7fc f8aa 	bl	8001360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2288      	movs	r2, #136	; 0x88
 8005210:	2124      	movs	r1, #36	; 0x24
 8005212:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2101      	movs	r1, #1
 8005220:	438a      	bics	r2, r1
 8005222:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	0018      	movs	r0, r3
 8005228:	f000 f8cc 	bl	80053c4 <UART_SetConfig>
 800522c:	0003      	movs	r3, r0
 800522e:	2b01      	cmp	r3, #1
 8005230:	d101      	bne.n	8005236 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e024      	b.n	8005280 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	0018      	movs	r0, r3
 8005242:	f000 fc15 	bl	8005a70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	490d      	ldr	r1, [pc, #52]	; (8005288 <HAL_UART_Init+0xa8>)
 8005252:	400a      	ands	r2, r1
 8005254:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	689a      	ldr	r2, [r3, #8]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	212a      	movs	r1, #42	; 0x2a
 8005262:	438a      	bics	r2, r1
 8005264:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2101      	movs	r1, #1
 8005272:	430a      	orrs	r2, r1
 8005274:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	0018      	movs	r0, r3
 800527a:	f000 fcad 	bl	8005bd8 <UART_CheckIdleState>
 800527e:	0003      	movs	r3, r0
}
 8005280:	0018      	movs	r0, r3
 8005282:	46bd      	mov	sp, r7
 8005284:	b002      	add	sp, #8
 8005286:	bd80      	pop	{r7, pc}
 8005288:	ffffb7ff 	.word	0xffffb7ff

0800528c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b08a      	sub	sp, #40	; 0x28
 8005290:	af02      	add	r7, sp, #8
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	603b      	str	r3, [r7, #0]
 8005298:	1dbb      	adds	r3, r7, #6
 800529a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2288      	movs	r2, #136	; 0x88
 80052a0:	589b      	ldr	r3, [r3, r2]
 80052a2:	2b20      	cmp	r3, #32
 80052a4:	d000      	beq.n	80052a8 <HAL_UART_Transmit+0x1c>
 80052a6:	e088      	b.n	80053ba <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <HAL_UART_Transmit+0x2a>
 80052ae:	1dbb      	adds	r3, r7, #6
 80052b0:	881b      	ldrh	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e080      	b.n	80053bc <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	689a      	ldr	r2, [r3, #8]
 80052be:	2380      	movs	r3, #128	; 0x80
 80052c0:	015b      	lsls	r3, r3, #5
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d109      	bne.n	80052da <HAL_UART_Transmit+0x4e>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d105      	bne.n	80052da <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	2201      	movs	r2, #1
 80052d2:	4013      	ands	r3, r2
 80052d4:	d001      	beq.n	80052da <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e070      	b.n	80053bc <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2290      	movs	r2, #144	; 0x90
 80052de:	2100      	movs	r1, #0
 80052e0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2288      	movs	r2, #136	; 0x88
 80052e6:	2121      	movs	r1, #33	; 0x21
 80052e8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052ea:	f7fc f9fd 	bl	80016e8 <HAL_GetTick>
 80052ee:	0003      	movs	r3, r0
 80052f0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	1dba      	adds	r2, r7, #6
 80052f6:	2154      	movs	r1, #84	; 0x54
 80052f8:	8812      	ldrh	r2, [r2, #0]
 80052fa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	1dba      	adds	r2, r7, #6
 8005300:	2156      	movs	r1, #86	; 0x56
 8005302:	8812      	ldrh	r2, [r2, #0]
 8005304:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	689a      	ldr	r2, [r3, #8]
 800530a:	2380      	movs	r3, #128	; 0x80
 800530c:	015b      	lsls	r3, r3, #5
 800530e:	429a      	cmp	r2, r3
 8005310:	d108      	bne.n	8005324 <HAL_UART_Transmit+0x98>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d104      	bne.n	8005324 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800531a:	2300      	movs	r3, #0
 800531c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	61bb      	str	r3, [r7, #24]
 8005322:	e003      	b.n	800532c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005328:	2300      	movs	r3, #0
 800532a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800532c:	e02c      	b.n	8005388 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	0013      	movs	r3, r2
 8005338:	2200      	movs	r2, #0
 800533a:	2180      	movs	r1, #128	; 0x80
 800533c:	f000 fc9a 	bl	8005c74 <UART_WaitOnFlagUntilTimeout>
 8005340:	1e03      	subs	r3, r0, #0
 8005342:	d001      	beq.n	8005348 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e039      	b.n	80053bc <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10b      	bne.n	8005366 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	881b      	ldrh	r3, [r3, #0]
 8005352:	001a      	movs	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	05d2      	lsls	r2, r2, #23
 800535a:	0dd2      	lsrs	r2, r2, #23
 800535c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	3302      	adds	r3, #2
 8005362:	61bb      	str	r3, [r7, #24]
 8005364:	e007      	b.n	8005376 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	781a      	ldrb	r2, [r3, #0]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	3301      	adds	r3, #1
 8005374:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2256      	movs	r2, #86	; 0x56
 800537a:	5a9b      	ldrh	r3, [r3, r2]
 800537c:	b29b      	uxth	r3, r3
 800537e:	3b01      	subs	r3, #1
 8005380:	b299      	uxth	r1, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2256      	movs	r2, #86	; 0x56
 8005386:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2256      	movs	r2, #86	; 0x56
 800538c:	5a9b      	ldrh	r3, [r3, r2]
 800538e:	b29b      	uxth	r3, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1cc      	bne.n	800532e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	0013      	movs	r3, r2
 800539e:	2200      	movs	r2, #0
 80053a0:	2140      	movs	r1, #64	; 0x40
 80053a2:	f000 fc67 	bl	8005c74 <UART_WaitOnFlagUntilTimeout>
 80053a6:	1e03      	subs	r3, r0, #0
 80053a8:	d001      	beq.n	80053ae <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e006      	b.n	80053bc <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2288      	movs	r2, #136	; 0x88
 80053b2:	2120      	movs	r1, #32
 80053b4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80053b6:	2300      	movs	r3, #0
 80053b8:	e000      	b.n	80053bc <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80053ba:	2302      	movs	r3, #2
  }
}
 80053bc:	0018      	movs	r0, r3
 80053be:	46bd      	mov	sp, r7
 80053c0:	b008      	add	sp, #32
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053c4:	b5b0      	push	{r4, r5, r7, lr}
 80053c6:	b090      	sub	sp, #64	; 0x40
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053cc:	231a      	movs	r3, #26
 80053ce:	2220      	movs	r2, #32
 80053d0:	189b      	adds	r3, r3, r2
 80053d2:	19db      	adds	r3, r3, r7
 80053d4:	2200      	movs	r2, #0
 80053d6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	431a      	orrs	r2, r3
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	431a      	orrs	r2, r3
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	69db      	ldr	r3, [r3, #28]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4ac1      	ldr	r2, [pc, #772]	; (80056fc <UART_SetConfig+0x338>)
 80053f8:	4013      	ands	r3, r2
 80053fa:	0019      	movs	r1, r3
 80053fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005402:	430b      	orrs	r3, r1
 8005404:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	4abc      	ldr	r2, [pc, #752]	; (8005700 <UART_SetConfig+0x33c>)
 800540e:	4013      	ands	r3, r2
 8005410:	0018      	movs	r0, r3
 8005412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005414:	68d9      	ldr	r1, [r3, #12]
 8005416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	0003      	movs	r3, r0
 800541c:	430b      	orrs	r3, r1
 800541e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4ab6      	ldr	r2, [pc, #728]	; (8005704 <UART_SetConfig+0x340>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d009      	beq.n	8005444 <UART_SetConfig+0x80>
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4ab4      	ldr	r2, [pc, #720]	; (8005708 <UART_SetConfig+0x344>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d004      	beq.n	8005444 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800543a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005440:	4313      	orrs	r3, r2
 8005442:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	4ab0      	ldr	r2, [pc, #704]	; (800570c <UART_SetConfig+0x348>)
 800544c:	4013      	ands	r3, r2
 800544e:	0019      	movs	r1, r3
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005456:	430b      	orrs	r3, r1
 8005458:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005460:	220f      	movs	r2, #15
 8005462:	4393      	bics	r3, r2
 8005464:	0018      	movs	r0, r3
 8005466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005468:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	0003      	movs	r3, r0
 8005470:	430b      	orrs	r3, r1
 8005472:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4aa5      	ldr	r2, [pc, #660]	; (8005710 <UART_SetConfig+0x34c>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d131      	bne.n	80054e2 <UART_SetConfig+0x11e>
 800547e:	4ba5      	ldr	r3, [pc, #660]	; (8005714 <UART_SetConfig+0x350>)
 8005480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005482:	2203      	movs	r2, #3
 8005484:	4013      	ands	r3, r2
 8005486:	2b03      	cmp	r3, #3
 8005488:	d01d      	beq.n	80054c6 <UART_SetConfig+0x102>
 800548a:	d823      	bhi.n	80054d4 <UART_SetConfig+0x110>
 800548c:	2b02      	cmp	r3, #2
 800548e:	d00c      	beq.n	80054aa <UART_SetConfig+0xe6>
 8005490:	d820      	bhi.n	80054d4 <UART_SetConfig+0x110>
 8005492:	2b00      	cmp	r3, #0
 8005494:	d002      	beq.n	800549c <UART_SetConfig+0xd8>
 8005496:	2b01      	cmp	r3, #1
 8005498:	d00e      	beq.n	80054b8 <UART_SetConfig+0xf4>
 800549a:	e01b      	b.n	80054d4 <UART_SetConfig+0x110>
 800549c:	231b      	movs	r3, #27
 800549e:	2220      	movs	r2, #32
 80054a0:	189b      	adds	r3, r3, r2
 80054a2:	19db      	adds	r3, r3, r7
 80054a4:	2200      	movs	r2, #0
 80054a6:	701a      	strb	r2, [r3, #0]
 80054a8:	e154      	b.n	8005754 <UART_SetConfig+0x390>
 80054aa:	231b      	movs	r3, #27
 80054ac:	2220      	movs	r2, #32
 80054ae:	189b      	adds	r3, r3, r2
 80054b0:	19db      	adds	r3, r3, r7
 80054b2:	2202      	movs	r2, #2
 80054b4:	701a      	strb	r2, [r3, #0]
 80054b6:	e14d      	b.n	8005754 <UART_SetConfig+0x390>
 80054b8:	231b      	movs	r3, #27
 80054ba:	2220      	movs	r2, #32
 80054bc:	189b      	adds	r3, r3, r2
 80054be:	19db      	adds	r3, r3, r7
 80054c0:	2204      	movs	r2, #4
 80054c2:	701a      	strb	r2, [r3, #0]
 80054c4:	e146      	b.n	8005754 <UART_SetConfig+0x390>
 80054c6:	231b      	movs	r3, #27
 80054c8:	2220      	movs	r2, #32
 80054ca:	189b      	adds	r3, r3, r2
 80054cc:	19db      	adds	r3, r3, r7
 80054ce:	2208      	movs	r2, #8
 80054d0:	701a      	strb	r2, [r3, #0]
 80054d2:	e13f      	b.n	8005754 <UART_SetConfig+0x390>
 80054d4:	231b      	movs	r3, #27
 80054d6:	2220      	movs	r2, #32
 80054d8:	189b      	adds	r3, r3, r2
 80054da:	19db      	adds	r3, r3, r7
 80054dc:	2210      	movs	r2, #16
 80054de:	701a      	strb	r2, [r3, #0]
 80054e0:	e138      	b.n	8005754 <UART_SetConfig+0x390>
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a8c      	ldr	r2, [pc, #560]	; (8005718 <UART_SetConfig+0x354>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d131      	bne.n	8005550 <UART_SetConfig+0x18c>
 80054ec:	4b89      	ldr	r3, [pc, #548]	; (8005714 <UART_SetConfig+0x350>)
 80054ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f0:	220c      	movs	r2, #12
 80054f2:	4013      	ands	r3, r2
 80054f4:	2b0c      	cmp	r3, #12
 80054f6:	d01d      	beq.n	8005534 <UART_SetConfig+0x170>
 80054f8:	d823      	bhi.n	8005542 <UART_SetConfig+0x17e>
 80054fa:	2b08      	cmp	r3, #8
 80054fc:	d00c      	beq.n	8005518 <UART_SetConfig+0x154>
 80054fe:	d820      	bhi.n	8005542 <UART_SetConfig+0x17e>
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <UART_SetConfig+0x146>
 8005504:	2b04      	cmp	r3, #4
 8005506:	d00e      	beq.n	8005526 <UART_SetConfig+0x162>
 8005508:	e01b      	b.n	8005542 <UART_SetConfig+0x17e>
 800550a:	231b      	movs	r3, #27
 800550c:	2220      	movs	r2, #32
 800550e:	189b      	adds	r3, r3, r2
 8005510:	19db      	adds	r3, r3, r7
 8005512:	2200      	movs	r2, #0
 8005514:	701a      	strb	r2, [r3, #0]
 8005516:	e11d      	b.n	8005754 <UART_SetConfig+0x390>
 8005518:	231b      	movs	r3, #27
 800551a:	2220      	movs	r2, #32
 800551c:	189b      	adds	r3, r3, r2
 800551e:	19db      	adds	r3, r3, r7
 8005520:	2202      	movs	r2, #2
 8005522:	701a      	strb	r2, [r3, #0]
 8005524:	e116      	b.n	8005754 <UART_SetConfig+0x390>
 8005526:	231b      	movs	r3, #27
 8005528:	2220      	movs	r2, #32
 800552a:	189b      	adds	r3, r3, r2
 800552c:	19db      	adds	r3, r3, r7
 800552e:	2204      	movs	r2, #4
 8005530:	701a      	strb	r2, [r3, #0]
 8005532:	e10f      	b.n	8005754 <UART_SetConfig+0x390>
 8005534:	231b      	movs	r3, #27
 8005536:	2220      	movs	r2, #32
 8005538:	189b      	adds	r3, r3, r2
 800553a:	19db      	adds	r3, r3, r7
 800553c:	2208      	movs	r2, #8
 800553e:	701a      	strb	r2, [r3, #0]
 8005540:	e108      	b.n	8005754 <UART_SetConfig+0x390>
 8005542:	231b      	movs	r3, #27
 8005544:	2220      	movs	r2, #32
 8005546:	189b      	adds	r3, r3, r2
 8005548:	19db      	adds	r3, r3, r7
 800554a:	2210      	movs	r2, #16
 800554c:	701a      	strb	r2, [r3, #0]
 800554e:	e101      	b.n	8005754 <UART_SetConfig+0x390>
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a71      	ldr	r2, [pc, #452]	; (800571c <UART_SetConfig+0x358>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d131      	bne.n	80055be <UART_SetConfig+0x1fa>
 800555a:	4b6e      	ldr	r3, [pc, #440]	; (8005714 <UART_SetConfig+0x350>)
 800555c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555e:	2230      	movs	r2, #48	; 0x30
 8005560:	4013      	ands	r3, r2
 8005562:	2b30      	cmp	r3, #48	; 0x30
 8005564:	d01d      	beq.n	80055a2 <UART_SetConfig+0x1de>
 8005566:	d823      	bhi.n	80055b0 <UART_SetConfig+0x1ec>
 8005568:	2b20      	cmp	r3, #32
 800556a:	d00c      	beq.n	8005586 <UART_SetConfig+0x1c2>
 800556c:	d820      	bhi.n	80055b0 <UART_SetConfig+0x1ec>
 800556e:	2b00      	cmp	r3, #0
 8005570:	d002      	beq.n	8005578 <UART_SetConfig+0x1b4>
 8005572:	2b10      	cmp	r3, #16
 8005574:	d00e      	beq.n	8005594 <UART_SetConfig+0x1d0>
 8005576:	e01b      	b.n	80055b0 <UART_SetConfig+0x1ec>
 8005578:	231b      	movs	r3, #27
 800557a:	2220      	movs	r2, #32
 800557c:	189b      	adds	r3, r3, r2
 800557e:	19db      	adds	r3, r3, r7
 8005580:	2200      	movs	r2, #0
 8005582:	701a      	strb	r2, [r3, #0]
 8005584:	e0e6      	b.n	8005754 <UART_SetConfig+0x390>
 8005586:	231b      	movs	r3, #27
 8005588:	2220      	movs	r2, #32
 800558a:	189b      	adds	r3, r3, r2
 800558c:	19db      	adds	r3, r3, r7
 800558e:	2202      	movs	r2, #2
 8005590:	701a      	strb	r2, [r3, #0]
 8005592:	e0df      	b.n	8005754 <UART_SetConfig+0x390>
 8005594:	231b      	movs	r3, #27
 8005596:	2220      	movs	r2, #32
 8005598:	189b      	adds	r3, r3, r2
 800559a:	19db      	adds	r3, r3, r7
 800559c:	2204      	movs	r2, #4
 800559e:	701a      	strb	r2, [r3, #0]
 80055a0:	e0d8      	b.n	8005754 <UART_SetConfig+0x390>
 80055a2:	231b      	movs	r3, #27
 80055a4:	2220      	movs	r2, #32
 80055a6:	189b      	adds	r3, r3, r2
 80055a8:	19db      	adds	r3, r3, r7
 80055aa:	2208      	movs	r2, #8
 80055ac:	701a      	strb	r2, [r3, #0]
 80055ae:	e0d1      	b.n	8005754 <UART_SetConfig+0x390>
 80055b0:	231b      	movs	r3, #27
 80055b2:	2220      	movs	r2, #32
 80055b4:	189b      	adds	r3, r3, r2
 80055b6:	19db      	adds	r3, r3, r7
 80055b8:	2210      	movs	r2, #16
 80055ba:	701a      	strb	r2, [r3, #0]
 80055bc:	e0ca      	b.n	8005754 <UART_SetConfig+0x390>
 80055be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a57      	ldr	r2, [pc, #348]	; (8005720 <UART_SetConfig+0x35c>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d106      	bne.n	80055d6 <UART_SetConfig+0x212>
 80055c8:	231b      	movs	r3, #27
 80055ca:	2220      	movs	r2, #32
 80055cc:	189b      	adds	r3, r3, r2
 80055ce:	19db      	adds	r3, r3, r7
 80055d0:	2200      	movs	r2, #0
 80055d2:	701a      	strb	r2, [r3, #0]
 80055d4:	e0be      	b.n	8005754 <UART_SetConfig+0x390>
 80055d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a52      	ldr	r2, [pc, #328]	; (8005724 <UART_SetConfig+0x360>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d106      	bne.n	80055ee <UART_SetConfig+0x22a>
 80055e0:	231b      	movs	r3, #27
 80055e2:	2220      	movs	r2, #32
 80055e4:	189b      	adds	r3, r3, r2
 80055e6:	19db      	adds	r3, r3, r7
 80055e8:	2200      	movs	r2, #0
 80055ea:	701a      	strb	r2, [r3, #0]
 80055ec:	e0b2      	b.n	8005754 <UART_SetConfig+0x390>
 80055ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a4d      	ldr	r2, [pc, #308]	; (8005728 <UART_SetConfig+0x364>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d106      	bne.n	8005606 <UART_SetConfig+0x242>
 80055f8:	231b      	movs	r3, #27
 80055fa:	2220      	movs	r2, #32
 80055fc:	189b      	adds	r3, r3, r2
 80055fe:	19db      	adds	r3, r3, r7
 8005600:	2200      	movs	r2, #0
 8005602:	701a      	strb	r2, [r3, #0]
 8005604:	e0a6      	b.n	8005754 <UART_SetConfig+0x390>
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a3e      	ldr	r2, [pc, #248]	; (8005704 <UART_SetConfig+0x340>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d13e      	bne.n	800568e <UART_SetConfig+0x2ca>
 8005610:	4b40      	ldr	r3, [pc, #256]	; (8005714 <UART_SetConfig+0x350>)
 8005612:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005614:	23c0      	movs	r3, #192	; 0xc0
 8005616:	011b      	lsls	r3, r3, #4
 8005618:	4013      	ands	r3, r2
 800561a:	22c0      	movs	r2, #192	; 0xc0
 800561c:	0112      	lsls	r2, r2, #4
 800561e:	4293      	cmp	r3, r2
 8005620:	d027      	beq.n	8005672 <UART_SetConfig+0x2ae>
 8005622:	22c0      	movs	r2, #192	; 0xc0
 8005624:	0112      	lsls	r2, r2, #4
 8005626:	4293      	cmp	r3, r2
 8005628:	d82a      	bhi.n	8005680 <UART_SetConfig+0x2bc>
 800562a:	2280      	movs	r2, #128	; 0x80
 800562c:	0112      	lsls	r2, r2, #4
 800562e:	4293      	cmp	r3, r2
 8005630:	d011      	beq.n	8005656 <UART_SetConfig+0x292>
 8005632:	2280      	movs	r2, #128	; 0x80
 8005634:	0112      	lsls	r2, r2, #4
 8005636:	4293      	cmp	r3, r2
 8005638:	d822      	bhi.n	8005680 <UART_SetConfig+0x2bc>
 800563a:	2b00      	cmp	r3, #0
 800563c:	d004      	beq.n	8005648 <UART_SetConfig+0x284>
 800563e:	2280      	movs	r2, #128	; 0x80
 8005640:	00d2      	lsls	r2, r2, #3
 8005642:	4293      	cmp	r3, r2
 8005644:	d00e      	beq.n	8005664 <UART_SetConfig+0x2a0>
 8005646:	e01b      	b.n	8005680 <UART_SetConfig+0x2bc>
 8005648:	231b      	movs	r3, #27
 800564a:	2220      	movs	r2, #32
 800564c:	189b      	adds	r3, r3, r2
 800564e:	19db      	adds	r3, r3, r7
 8005650:	2200      	movs	r2, #0
 8005652:	701a      	strb	r2, [r3, #0]
 8005654:	e07e      	b.n	8005754 <UART_SetConfig+0x390>
 8005656:	231b      	movs	r3, #27
 8005658:	2220      	movs	r2, #32
 800565a:	189b      	adds	r3, r3, r2
 800565c:	19db      	adds	r3, r3, r7
 800565e:	2202      	movs	r2, #2
 8005660:	701a      	strb	r2, [r3, #0]
 8005662:	e077      	b.n	8005754 <UART_SetConfig+0x390>
 8005664:	231b      	movs	r3, #27
 8005666:	2220      	movs	r2, #32
 8005668:	189b      	adds	r3, r3, r2
 800566a:	19db      	adds	r3, r3, r7
 800566c:	2204      	movs	r2, #4
 800566e:	701a      	strb	r2, [r3, #0]
 8005670:	e070      	b.n	8005754 <UART_SetConfig+0x390>
 8005672:	231b      	movs	r3, #27
 8005674:	2220      	movs	r2, #32
 8005676:	189b      	adds	r3, r3, r2
 8005678:	19db      	adds	r3, r3, r7
 800567a:	2208      	movs	r2, #8
 800567c:	701a      	strb	r2, [r3, #0]
 800567e:	e069      	b.n	8005754 <UART_SetConfig+0x390>
 8005680:	231b      	movs	r3, #27
 8005682:	2220      	movs	r2, #32
 8005684:	189b      	adds	r3, r3, r2
 8005686:	19db      	adds	r3, r3, r7
 8005688:	2210      	movs	r2, #16
 800568a:	701a      	strb	r2, [r3, #0]
 800568c:	e062      	b.n	8005754 <UART_SetConfig+0x390>
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a1d      	ldr	r2, [pc, #116]	; (8005708 <UART_SetConfig+0x344>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d157      	bne.n	8005748 <UART_SetConfig+0x384>
 8005698:	4b1e      	ldr	r3, [pc, #120]	; (8005714 <UART_SetConfig+0x350>)
 800569a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800569c:	23c0      	movs	r3, #192	; 0xc0
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4013      	ands	r3, r2
 80056a2:	22c0      	movs	r2, #192	; 0xc0
 80056a4:	0092      	lsls	r2, r2, #2
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d040      	beq.n	800572c <UART_SetConfig+0x368>
 80056aa:	22c0      	movs	r2, #192	; 0xc0
 80056ac:	0092      	lsls	r2, r2, #2
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d843      	bhi.n	800573a <UART_SetConfig+0x376>
 80056b2:	2280      	movs	r2, #128	; 0x80
 80056b4:	0092      	lsls	r2, r2, #2
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d011      	beq.n	80056de <UART_SetConfig+0x31a>
 80056ba:	2280      	movs	r2, #128	; 0x80
 80056bc:	0092      	lsls	r2, r2, #2
 80056be:	4293      	cmp	r3, r2
 80056c0:	d83b      	bhi.n	800573a <UART_SetConfig+0x376>
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d004      	beq.n	80056d0 <UART_SetConfig+0x30c>
 80056c6:	2280      	movs	r2, #128	; 0x80
 80056c8:	0052      	lsls	r2, r2, #1
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d00e      	beq.n	80056ec <UART_SetConfig+0x328>
 80056ce:	e034      	b.n	800573a <UART_SetConfig+0x376>
 80056d0:	231b      	movs	r3, #27
 80056d2:	2220      	movs	r2, #32
 80056d4:	189b      	adds	r3, r3, r2
 80056d6:	19db      	adds	r3, r3, r7
 80056d8:	2200      	movs	r2, #0
 80056da:	701a      	strb	r2, [r3, #0]
 80056dc:	e03a      	b.n	8005754 <UART_SetConfig+0x390>
 80056de:	231b      	movs	r3, #27
 80056e0:	2220      	movs	r2, #32
 80056e2:	189b      	adds	r3, r3, r2
 80056e4:	19db      	adds	r3, r3, r7
 80056e6:	2202      	movs	r2, #2
 80056e8:	701a      	strb	r2, [r3, #0]
 80056ea:	e033      	b.n	8005754 <UART_SetConfig+0x390>
 80056ec:	231b      	movs	r3, #27
 80056ee:	2220      	movs	r2, #32
 80056f0:	189b      	adds	r3, r3, r2
 80056f2:	19db      	adds	r3, r3, r7
 80056f4:	2204      	movs	r2, #4
 80056f6:	701a      	strb	r2, [r3, #0]
 80056f8:	e02c      	b.n	8005754 <UART_SetConfig+0x390>
 80056fa:	46c0      	nop			; (mov r8, r8)
 80056fc:	cfff69f3 	.word	0xcfff69f3
 8005700:	ffffcfff 	.word	0xffffcfff
 8005704:	40008000 	.word	0x40008000
 8005708:	40008400 	.word	0x40008400
 800570c:	11fff4ff 	.word	0x11fff4ff
 8005710:	40013800 	.word	0x40013800
 8005714:	40021000 	.word	0x40021000
 8005718:	40004400 	.word	0x40004400
 800571c:	40004800 	.word	0x40004800
 8005720:	40004c00 	.word	0x40004c00
 8005724:	40005000 	.word	0x40005000
 8005728:	40013c00 	.word	0x40013c00
 800572c:	231b      	movs	r3, #27
 800572e:	2220      	movs	r2, #32
 8005730:	189b      	adds	r3, r3, r2
 8005732:	19db      	adds	r3, r3, r7
 8005734:	2208      	movs	r2, #8
 8005736:	701a      	strb	r2, [r3, #0]
 8005738:	e00c      	b.n	8005754 <UART_SetConfig+0x390>
 800573a:	231b      	movs	r3, #27
 800573c:	2220      	movs	r2, #32
 800573e:	189b      	adds	r3, r3, r2
 8005740:	19db      	adds	r3, r3, r7
 8005742:	2210      	movs	r2, #16
 8005744:	701a      	strb	r2, [r3, #0]
 8005746:	e005      	b.n	8005754 <UART_SetConfig+0x390>
 8005748:	231b      	movs	r3, #27
 800574a:	2220      	movs	r2, #32
 800574c:	189b      	adds	r3, r3, r2
 800574e:	19db      	adds	r3, r3, r7
 8005750:	2210      	movs	r2, #16
 8005752:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4ac1      	ldr	r2, [pc, #772]	; (8005a60 <UART_SetConfig+0x69c>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d005      	beq.n	800576a <UART_SetConfig+0x3a6>
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4ac0      	ldr	r2, [pc, #768]	; (8005a64 <UART_SetConfig+0x6a0>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d000      	beq.n	800576a <UART_SetConfig+0x3a6>
 8005768:	e093      	b.n	8005892 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800576a:	231b      	movs	r3, #27
 800576c:	2220      	movs	r2, #32
 800576e:	189b      	adds	r3, r3, r2
 8005770:	19db      	adds	r3, r3, r7
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	2b08      	cmp	r3, #8
 8005776:	d015      	beq.n	80057a4 <UART_SetConfig+0x3e0>
 8005778:	dc18      	bgt.n	80057ac <UART_SetConfig+0x3e8>
 800577a:	2b04      	cmp	r3, #4
 800577c:	d00d      	beq.n	800579a <UART_SetConfig+0x3d6>
 800577e:	dc15      	bgt.n	80057ac <UART_SetConfig+0x3e8>
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <UART_SetConfig+0x3c6>
 8005784:	2b02      	cmp	r3, #2
 8005786:	d005      	beq.n	8005794 <UART_SetConfig+0x3d0>
 8005788:	e010      	b.n	80057ac <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800578a:	f7ff fa1f 	bl	8004bcc <HAL_RCC_GetPCLK1Freq>
 800578e:	0003      	movs	r3, r0
 8005790:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005792:	e014      	b.n	80057be <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005794:	4bb4      	ldr	r3, [pc, #720]	; (8005a68 <UART_SetConfig+0x6a4>)
 8005796:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005798:	e011      	b.n	80057be <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800579a:	f7ff f98b 	bl	8004ab4 <HAL_RCC_GetSysClockFreq>
 800579e:	0003      	movs	r3, r0
 80057a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80057a2:	e00c      	b.n	80057be <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057a4:	2380      	movs	r3, #128	; 0x80
 80057a6:	021b      	lsls	r3, r3, #8
 80057a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80057aa:	e008      	b.n	80057be <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 80057ac:	2300      	movs	r3, #0
 80057ae:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80057b0:	231a      	movs	r3, #26
 80057b2:	2220      	movs	r2, #32
 80057b4:	189b      	adds	r3, r3, r2
 80057b6:	19db      	adds	r3, r3, r7
 80057b8:	2201      	movs	r2, #1
 80057ba:	701a      	strb	r2, [r3, #0]
        break;
 80057bc:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80057be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d100      	bne.n	80057c6 <UART_SetConfig+0x402>
 80057c4:	e135      	b.n	8005a32 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80057c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057ca:	4ba8      	ldr	r3, [pc, #672]	; (8005a6c <UART_SetConfig+0x6a8>)
 80057cc:	0052      	lsls	r2, r2, #1
 80057ce:	5ad3      	ldrh	r3, [r2, r3]
 80057d0:	0019      	movs	r1, r3
 80057d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80057d4:	f7fa fca8 	bl	8000128 <__udivsi3>
 80057d8:	0003      	movs	r3, r0
 80057da:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	0013      	movs	r3, r2
 80057e2:	005b      	lsls	r3, r3, #1
 80057e4:	189b      	adds	r3, r3, r2
 80057e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d305      	bcc.n	80057f8 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80057ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d906      	bls.n	8005806 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80057f8:	231a      	movs	r3, #26
 80057fa:	2220      	movs	r2, #32
 80057fc:	189b      	adds	r3, r3, r2
 80057fe:	19db      	adds	r3, r3, r7
 8005800:	2201      	movs	r2, #1
 8005802:	701a      	strb	r2, [r3, #0]
 8005804:	e044      	b.n	8005890 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005808:	61bb      	str	r3, [r7, #24]
 800580a:	2300      	movs	r3, #0
 800580c:	61fb      	str	r3, [r7, #28]
 800580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005810:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005812:	4b96      	ldr	r3, [pc, #600]	; (8005a6c <UART_SetConfig+0x6a8>)
 8005814:	0052      	lsls	r2, r2, #1
 8005816:	5ad3      	ldrh	r3, [r2, r3]
 8005818:	613b      	str	r3, [r7, #16]
 800581a:	2300      	movs	r3, #0
 800581c:	617b      	str	r3, [r7, #20]
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	69b8      	ldr	r0, [r7, #24]
 8005824:	69f9      	ldr	r1, [r7, #28]
 8005826:	f7fa fdf5 	bl	8000414 <__aeabi_uldivmod>
 800582a:	0002      	movs	r2, r0
 800582c:	000b      	movs	r3, r1
 800582e:	0e11      	lsrs	r1, r2, #24
 8005830:	021d      	lsls	r5, r3, #8
 8005832:	430d      	orrs	r5, r1
 8005834:	0214      	lsls	r4, r2, #8
 8005836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	085b      	lsrs	r3, r3, #1
 800583c:	60bb      	str	r3, [r7, #8]
 800583e:	2300      	movs	r3, #0
 8005840:	60fb      	str	r3, [r7, #12]
 8005842:	68b8      	ldr	r0, [r7, #8]
 8005844:	68f9      	ldr	r1, [r7, #12]
 8005846:	1900      	adds	r0, r0, r4
 8005848:	4169      	adcs	r1, r5
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	603b      	str	r3, [r7, #0]
 8005850:	2300      	movs	r3, #0
 8005852:	607b      	str	r3, [r7, #4]
 8005854:	683a      	ldr	r2, [r7, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f7fa fddc 	bl	8000414 <__aeabi_uldivmod>
 800585c:	0002      	movs	r2, r0
 800585e:	000b      	movs	r3, r1
 8005860:	0013      	movs	r3, r2
 8005862:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005866:	23c0      	movs	r3, #192	; 0xc0
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	429a      	cmp	r2, r3
 800586c:	d309      	bcc.n	8005882 <UART_SetConfig+0x4be>
 800586e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005870:	2380      	movs	r3, #128	; 0x80
 8005872:	035b      	lsls	r3, r3, #13
 8005874:	429a      	cmp	r2, r3
 8005876:	d204      	bcs.n	8005882 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800587e:	60da      	str	r2, [r3, #12]
 8005880:	e006      	b.n	8005890 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8005882:	231a      	movs	r3, #26
 8005884:	2220      	movs	r2, #32
 8005886:	189b      	adds	r3, r3, r2
 8005888:	19db      	adds	r3, r3, r7
 800588a:	2201      	movs	r2, #1
 800588c:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800588e:	e0d0      	b.n	8005a32 <UART_SetConfig+0x66e>
 8005890:	e0cf      	b.n	8005a32 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	69da      	ldr	r2, [r3, #28]
 8005896:	2380      	movs	r3, #128	; 0x80
 8005898:	021b      	lsls	r3, r3, #8
 800589a:	429a      	cmp	r2, r3
 800589c:	d000      	beq.n	80058a0 <UART_SetConfig+0x4dc>
 800589e:	e070      	b.n	8005982 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 80058a0:	231b      	movs	r3, #27
 80058a2:	2220      	movs	r2, #32
 80058a4:	189b      	adds	r3, r3, r2
 80058a6:	19db      	adds	r3, r3, r7
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	2b08      	cmp	r3, #8
 80058ac:	d015      	beq.n	80058da <UART_SetConfig+0x516>
 80058ae:	dc18      	bgt.n	80058e2 <UART_SetConfig+0x51e>
 80058b0:	2b04      	cmp	r3, #4
 80058b2:	d00d      	beq.n	80058d0 <UART_SetConfig+0x50c>
 80058b4:	dc15      	bgt.n	80058e2 <UART_SetConfig+0x51e>
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d002      	beq.n	80058c0 <UART_SetConfig+0x4fc>
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d005      	beq.n	80058ca <UART_SetConfig+0x506>
 80058be:	e010      	b.n	80058e2 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058c0:	f7ff f984 	bl	8004bcc <HAL_RCC_GetPCLK1Freq>
 80058c4:	0003      	movs	r3, r0
 80058c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80058c8:	e014      	b.n	80058f4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058ca:	4b67      	ldr	r3, [pc, #412]	; (8005a68 <UART_SetConfig+0x6a4>)
 80058cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80058ce:	e011      	b.n	80058f4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058d0:	f7ff f8f0 	bl	8004ab4 <HAL_RCC_GetSysClockFreq>
 80058d4:	0003      	movs	r3, r0
 80058d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80058d8:	e00c      	b.n	80058f4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058da:	2380      	movs	r3, #128	; 0x80
 80058dc:	021b      	lsls	r3, r3, #8
 80058de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80058e0:	e008      	b.n	80058f4 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80058e2:	2300      	movs	r3, #0
 80058e4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80058e6:	231a      	movs	r3, #26
 80058e8:	2220      	movs	r2, #32
 80058ea:	189b      	adds	r3, r3, r2
 80058ec:	19db      	adds	r3, r3, r7
 80058ee:	2201      	movs	r2, #1
 80058f0:	701a      	strb	r2, [r3, #0]
        break;
 80058f2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d100      	bne.n	80058fc <UART_SetConfig+0x538>
 80058fa:	e09a      	b.n	8005a32 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005900:	4b5a      	ldr	r3, [pc, #360]	; (8005a6c <UART_SetConfig+0x6a8>)
 8005902:	0052      	lsls	r2, r2, #1
 8005904:	5ad3      	ldrh	r3, [r2, r3]
 8005906:	0019      	movs	r1, r3
 8005908:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800590a:	f7fa fc0d 	bl	8000128 <__udivsi3>
 800590e:	0003      	movs	r3, r0
 8005910:	005a      	lsls	r2, r3, #1
 8005912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	085b      	lsrs	r3, r3, #1
 8005918:	18d2      	adds	r2, r2, r3
 800591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	0019      	movs	r1, r3
 8005920:	0010      	movs	r0, r2
 8005922:	f7fa fc01 	bl	8000128 <__udivsi3>
 8005926:	0003      	movs	r3, r0
 8005928:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800592a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592c:	2b0f      	cmp	r3, #15
 800592e:	d921      	bls.n	8005974 <UART_SetConfig+0x5b0>
 8005930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005932:	2380      	movs	r3, #128	; 0x80
 8005934:	025b      	lsls	r3, r3, #9
 8005936:	429a      	cmp	r2, r3
 8005938:	d21c      	bcs.n	8005974 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800593a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593c:	b29a      	uxth	r2, r3
 800593e:	200e      	movs	r0, #14
 8005940:	2420      	movs	r4, #32
 8005942:	1903      	adds	r3, r0, r4
 8005944:	19db      	adds	r3, r3, r7
 8005946:	210f      	movs	r1, #15
 8005948:	438a      	bics	r2, r1
 800594a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800594c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594e:	085b      	lsrs	r3, r3, #1
 8005950:	b29b      	uxth	r3, r3
 8005952:	2207      	movs	r2, #7
 8005954:	4013      	ands	r3, r2
 8005956:	b299      	uxth	r1, r3
 8005958:	1903      	adds	r3, r0, r4
 800595a:	19db      	adds	r3, r3, r7
 800595c:	1902      	adds	r2, r0, r4
 800595e:	19d2      	adds	r2, r2, r7
 8005960:	8812      	ldrh	r2, [r2, #0]
 8005962:	430a      	orrs	r2, r1
 8005964:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	1902      	adds	r2, r0, r4
 800596c:	19d2      	adds	r2, r2, r7
 800596e:	8812      	ldrh	r2, [r2, #0]
 8005970:	60da      	str	r2, [r3, #12]
 8005972:	e05e      	b.n	8005a32 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8005974:	231a      	movs	r3, #26
 8005976:	2220      	movs	r2, #32
 8005978:	189b      	adds	r3, r3, r2
 800597a:	19db      	adds	r3, r3, r7
 800597c:	2201      	movs	r2, #1
 800597e:	701a      	strb	r2, [r3, #0]
 8005980:	e057      	b.n	8005a32 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005982:	231b      	movs	r3, #27
 8005984:	2220      	movs	r2, #32
 8005986:	189b      	adds	r3, r3, r2
 8005988:	19db      	adds	r3, r3, r7
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	2b08      	cmp	r3, #8
 800598e:	d015      	beq.n	80059bc <UART_SetConfig+0x5f8>
 8005990:	dc18      	bgt.n	80059c4 <UART_SetConfig+0x600>
 8005992:	2b04      	cmp	r3, #4
 8005994:	d00d      	beq.n	80059b2 <UART_SetConfig+0x5ee>
 8005996:	dc15      	bgt.n	80059c4 <UART_SetConfig+0x600>
 8005998:	2b00      	cmp	r3, #0
 800599a:	d002      	beq.n	80059a2 <UART_SetConfig+0x5de>
 800599c:	2b02      	cmp	r3, #2
 800599e:	d005      	beq.n	80059ac <UART_SetConfig+0x5e8>
 80059a0:	e010      	b.n	80059c4 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059a2:	f7ff f913 	bl	8004bcc <HAL_RCC_GetPCLK1Freq>
 80059a6:	0003      	movs	r3, r0
 80059a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80059aa:	e014      	b.n	80059d6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059ac:	4b2e      	ldr	r3, [pc, #184]	; (8005a68 <UART_SetConfig+0x6a4>)
 80059ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80059b0:	e011      	b.n	80059d6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059b2:	f7ff f87f 	bl	8004ab4 <HAL_RCC_GetSysClockFreq>
 80059b6:	0003      	movs	r3, r0
 80059b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80059ba:	e00c      	b.n	80059d6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059bc:	2380      	movs	r3, #128	; 0x80
 80059be:	021b      	lsls	r3, r3, #8
 80059c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80059c2:	e008      	b.n	80059d6 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80059c4:	2300      	movs	r3, #0
 80059c6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80059c8:	231a      	movs	r3, #26
 80059ca:	2220      	movs	r2, #32
 80059cc:	189b      	adds	r3, r3, r2
 80059ce:	19db      	adds	r3, r3, r7
 80059d0:	2201      	movs	r2, #1
 80059d2:	701a      	strb	r2, [r3, #0]
        break;
 80059d4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80059d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d02a      	beq.n	8005a32 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059e0:	4b22      	ldr	r3, [pc, #136]	; (8005a6c <UART_SetConfig+0x6a8>)
 80059e2:	0052      	lsls	r2, r2, #1
 80059e4:	5ad3      	ldrh	r3, [r2, r3]
 80059e6:	0019      	movs	r1, r3
 80059e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80059ea:	f7fa fb9d 	bl	8000128 <__udivsi3>
 80059ee:	0003      	movs	r3, r0
 80059f0:	001a      	movs	r2, r3
 80059f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	085b      	lsrs	r3, r3, #1
 80059f8:	18d2      	adds	r2, r2, r3
 80059fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	0019      	movs	r1, r3
 8005a00:	0010      	movs	r0, r2
 8005a02:	f7fa fb91 	bl	8000128 <__udivsi3>
 8005a06:	0003      	movs	r3, r0
 8005a08:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0c:	2b0f      	cmp	r3, #15
 8005a0e:	d90a      	bls.n	8005a26 <UART_SetConfig+0x662>
 8005a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a12:	2380      	movs	r3, #128	; 0x80
 8005a14:	025b      	lsls	r3, r3, #9
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d205      	bcs.n	8005a26 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	60da      	str	r2, [r3, #12]
 8005a24:	e005      	b.n	8005a32 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8005a26:	231a      	movs	r3, #26
 8005a28:	2220      	movs	r2, #32
 8005a2a:	189b      	adds	r3, r3, r2
 8005a2c:	19db      	adds	r3, r3, r7
 8005a2e:	2201      	movs	r2, #1
 8005a30:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a34:	226a      	movs	r2, #106	; 0x6a
 8005a36:	2101      	movs	r1, #1
 8005a38:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3c:	2268      	movs	r2, #104	; 0x68
 8005a3e:	2101      	movs	r1, #1
 8005a40:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a44:	2200      	movs	r2, #0
 8005a46:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005a4e:	231a      	movs	r3, #26
 8005a50:	2220      	movs	r2, #32
 8005a52:	189b      	adds	r3, r3, r2
 8005a54:	19db      	adds	r3, r3, r7
 8005a56:	781b      	ldrb	r3, [r3, #0]
}
 8005a58:	0018      	movs	r0, r3
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	b010      	add	sp, #64	; 0x40
 8005a5e:	bdb0      	pop	{r4, r5, r7, pc}
 8005a60:	40008000 	.word	0x40008000
 8005a64:	40008400 	.word	0x40008400
 8005a68:	00f42400 	.word	0x00f42400
 8005a6c:	0800b970 	.word	0x0800b970

08005a70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	4013      	ands	r3, r2
 8005a80:	d00b      	beq.n	8005a9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	4a4a      	ldr	r2, [pc, #296]	; (8005bb4 <UART_AdvFeatureConfig+0x144>)
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	0019      	movs	r1, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	d00b      	beq.n	8005abc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	4a43      	ldr	r2, [pc, #268]	; (8005bb8 <UART_AdvFeatureConfig+0x148>)
 8005aac:	4013      	ands	r3, r2
 8005aae:	0019      	movs	r1, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac0:	2204      	movs	r2, #4
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	d00b      	beq.n	8005ade <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	4a3b      	ldr	r2, [pc, #236]	; (8005bbc <UART_AdvFeatureConfig+0x14c>)
 8005ace:	4013      	ands	r3, r2
 8005ad0:	0019      	movs	r1, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae2:	2208      	movs	r2, #8
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	d00b      	beq.n	8005b00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	4a34      	ldr	r2, [pc, #208]	; (8005bc0 <UART_AdvFeatureConfig+0x150>)
 8005af0:	4013      	ands	r3, r2
 8005af2:	0019      	movs	r1, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	430a      	orrs	r2, r1
 8005afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b04:	2210      	movs	r2, #16
 8005b06:	4013      	ands	r3, r2
 8005b08:	d00b      	beq.n	8005b22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	4a2c      	ldr	r2, [pc, #176]	; (8005bc4 <UART_AdvFeatureConfig+0x154>)
 8005b12:	4013      	ands	r3, r2
 8005b14:	0019      	movs	r1, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b26:	2220      	movs	r2, #32
 8005b28:	4013      	ands	r3, r2
 8005b2a:	d00b      	beq.n	8005b44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	4a25      	ldr	r2, [pc, #148]	; (8005bc8 <UART_AdvFeatureConfig+0x158>)
 8005b34:	4013      	ands	r3, r2
 8005b36:	0019      	movs	r1, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b48:	2240      	movs	r2, #64	; 0x40
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	d01d      	beq.n	8005b8a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	4a1d      	ldr	r2, [pc, #116]	; (8005bcc <UART_AdvFeatureConfig+0x15c>)
 8005b56:	4013      	ands	r3, r2
 8005b58:	0019      	movs	r1, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b6a:	2380      	movs	r3, #128	; 0x80
 8005b6c:	035b      	lsls	r3, r3, #13
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d10b      	bne.n	8005b8a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	4a15      	ldr	r2, [pc, #84]	; (8005bd0 <UART_AdvFeatureConfig+0x160>)
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	0019      	movs	r1, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8e:	2280      	movs	r2, #128	; 0x80
 8005b90:	4013      	ands	r3, r2
 8005b92:	d00b      	beq.n	8005bac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	4a0e      	ldr	r2, [pc, #56]	; (8005bd4 <UART_AdvFeatureConfig+0x164>)
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	0019      	movs	r1, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	605a      	str	r2, [r3, #4]
  }
}
 8005bac:	46c0      	nop			; (mov r8, r8)
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	b002      	add	sp, #8
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	fffdffff 	.word	0xfffdffff
 8005bb8:	fffeffff 	.word	0xfffeffff
 8005bbc:	fffbffff 	.word	0xfffbffff
 8005bc0:	ffff7fff 	.word	0xffff7fff
 8005bc4:	ffffefff 	.word	0xffffefff
 8005bc8:	ffffdfff 	.word	0xffffdfff
 8005bcc:	ffefffff 	.word	0xffefffff
 8005bd0:	ff9fffff 	.word	0xff9fffff
 8005bd4:	fff7ffff 	.word	0xfff7ffff

08005bd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af02      	add	r7, sp, #8
 8005bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2290      	movs	r2, #144	; 0x90
 8005be4:	2100      	movs	r1, #0
 8005be6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005be8:	f7fb fd7e 	bl	80016e8 <HAL_GetTick>
 8005bec:	0003      	movs	r3, r0
 8005bee:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2208      	movs	r2, #8
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	2b08      	cmp	r3, #8
 8005bfc:	d10c      	bne.n	8005c18 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2280      	movs	r2, #128	; 0x80
 8005c02:	0391      	lsls	r1, r2, #14
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	4a1a      	ldr	r2, [pc, #104]	; (8005c70 <UART_CheckIdleState+0x98>)
 8005c08:	9200      	str	r2, [sp, #0]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f000 f832 	bl	8005c74 <UART_WaitOnFlagUntilTimeout>
 8005c10:	1e03      	subs	r3, r0, #0
 8005c12:	d001      	beq.n	8005c18 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e026      	b.n	8005c66 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2204      	movs	r2, #4
 8005c20:	4013      	ands	r3, r2
 8005c22:	2b04      	cmp	r3, #4
 8005c24:	d10c      	bne.n	8005c40 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2280      	movs	r2, #128	; 0x80
 8005c2a:	03d1      	lsls	r1, r2, #15
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	4a10      	ldr	r2, [pc, #64]	; (8005c70 <UART_CheckIdleState+0x98>)
 8005c30:	9200      	str	r2, [sp, #0]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f000 f81e 	bl	8005c74 <UART_WaitOnFlagUntilTimeout>
 8005c38:	1e03      	subs	r3, r0, #0
 8005c3a:	d001      	beq.n	8005c40 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e012      	b.n	8005c66 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2288      	movs	r2, #136	; 0x88
 8005c44:	2120      	movs	r1, #32
 8005c46:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	228c      	movs	r2, #140	; 0x8c
 8005c4c:	2120      	movs	r1, #32
 8005c4e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2284      	movs	r2, #132	; 0x84
 8005c60:	2100      	movs	r1, #0
 8005c62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	0018      	movs	r0, r3
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	b004      	add	sp, #16
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	46c0      	nop			; (mov r8, r8)
 8005c70:	01ffffff 	.word	0x01ffffff

08005c74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b094      	sub	sp, #80	; 0x50
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	603b      	str	r3, [r7, #0]
 8005c80:	1dfb      	adds	r3, r7, #7
 8005c82:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c84:	e0a7      	b.n	8005dd6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c88:	3301      	adds	r3, #1
 8005c8a:	d100      	bne.n	8005c8e <UART_WaitOnFlagUntilTimeout+0x1a>
 8005c8c:	e0a3      	b.n	8005dd6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c8e:	f7fb fd2b 	bl	80016e8 <HAL_GetTick>
 8005c92:	0002      	movs	r2, r0
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d302      	bcc.n	8005ca4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d13f      	bne.n	8005d24 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ca4:	f3ef 8310 	mrs	r3, PRIMASK
 8005ca8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005cac:	647b      	str	r3, [r7, #68]	; 0x44
 8005cae:	2301      	movs	r3, #1
 8005cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb4:	f383 8810 	msr	PRIMASK, r3
}
 8005cb8:	46c0      	nop			; (mov r8, r8)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	494e      	ldr	r1, [pc, #312]	; (8005e00 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005cc6:	400a      	ands	r2, r1
 8005cc8:	601a      	str	r2, [r3, #0]
 8005cca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ccc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd0:	f383 8810 	msr	PRIMASK, r3
}
 8005cd4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cd6:	f3ef 8310 	mrs	r3, PRIMASK
 8005cda:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cde:	643b      	str	r3, [r7, #64]	; 0x40
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce6:	f383 8810 	msr	PRIMASK, r3
}
 8005cea:	46c0      	nop			; (mov r8, r8)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689a      	ldr	r2, [r3, #8]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2101      	movs	r1, #1
 8005cf8:	438a      	bics	r2, r1
 8005cfa:	609a      	str	r2, [r3, #8]
 8005cfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d02:	f383 8810 	msr	PRIMASK, r3
}
 8005d06:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2288      	movs	r2, #136	; 0x88
 8005d0c:	2120      	movs	r1, #32
 8005d0e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	228c      	movs	r2, #140	; 0x8c
 8005d14:	2120      	movs	r1, #32
 8005d16:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2284      	movs	r2, #132	; 0x84
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e069      	b.n	8005df8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2204      	movs	r2, #4
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	d052      	beq.n	8005dd6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	69da      	ldr	r2, [r3, #28]
 8005d36:	2380      	movs	r3, #128	; 0x80
 8005d38:	011b      	lsls	r3, r3, #4
 8005d3a:	401a      	ands	r2, r3
 8005d3c:	2380      	movs	r3, #128	; 0x80
 8005d3e:	011b      	lsls	r3, r3, #4
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d148      	bne.n	8005dd6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2280      	movs	r2, #128	; 0x80
 8005d4a:	0112      	lsls	r2, r2, #4
 8005d4c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d4e:	f3ef 8310 	mrs	r3, PRIMASK
 8005d52:	613b      	str	r3, [r7, #16]
  return(result);
 8005d54:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005d56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d58:	2301      	movs	r3, #1
 8005d5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	f383 8810 	msr	PRIMASK, r3
}
 8005d62:	46c0      	nop			; (mov r8, r8)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4924      	ldr	r1, [pc, #144]	; (8005e00 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005d70:	400a      	ands	r2, r1
 8005d72:	601a      	str	r2, [r3, #0]
 8005d74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d76:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	f383 8810 	msr	PRIMASK, r3
}
 8005d7e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d80:	f3ef 8310 	mrs	r3, PRIMASK
 8005d84:	61fb      	str	r3, [r7, #28]
  return(result);
 8005d86:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d88:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d8e:	6a3b      	ldr	r3, [r7, #32]
 8005d90:	f383 8810 	msr	PRIMASK, r3
}
 8005d94:	46c0      	nop			; (mov r8, r8)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2101      	movs	r1, #1
 8005da2:	438a      	bics	r2, r1
 8005da4:	609a      	str	r2, [r3, #8]
 8005da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005da8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dac:	f383 8810 	msr	PRIMASK, r3
}
 8005db0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2288      	movs	r2, #136	; 0x88
 8005db6:	2120      	movs	r1, #32
 8005db8:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	228c      	movs	r2, #140	; 0x8c
 8005dbe:	2120      	movs	r1, #32
 8005dc0:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2290      	movs	r2, #144	; 0x90
 8005dc6:	2120      	movs	r1, #32
 8005dc8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2284      	movs	r2, #132	; 0x84
 8005dce:	2100      	movs	r1, #0
 8005dd0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e010      	b.n	8005df8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	69db      	ldr	r3, [r3, #28]
 8005ddc:	68ba      	ldr	r2, [r7, #8]
 8005dde:	4013      	ands	r3, r2
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	425a      	negs	r2, r3
 8005de6:	4153      	adcs	r3, r2
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	001a      	movs	r2, r3
 8005dec:	1dfb      	adds	r3, r7, #7
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d100      	bne.n	8005df6 <UART_WaitOnFlagUntilTimeout+0x182>
 8005df4:	e747      	b.n	8005c86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	0018      	movs	r0, r3
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	b014      	add	sp, #80	; 0x50
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	fffffe5f 	.word	0xfffffe5f

08005e04 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2284      	movs	r2, #132	; 0x84
 8005e10:	5c9b      	ldrb	r3, [r3, r2]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d101      	bne.n	8005e1a <HAL_UARTEx_DisableFifoMode+0x16>
 8005e16:	2302      	movs	r3, #2
 8005e18:	e027      	b.n	8005e6a <HAL_UARTEx_DisableFifoMode+0x66>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2284      	movs	r2, #132	; 0x84
 8005e1e:	2101      	movs	r1, #1
 8005e20:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2288      	movs	r2, #136	; 0x88
 8005e26:	2124      	movs	r1, #36	; 0x24
 8005e28:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2101      	movs	r1, #1
 8005e3e:	438a      	bics	r2, r1
 8005e40:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	4a0b      	ldr	r2, [pc, #44]	; (8005e74 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005e46:	4013      	ands	r3, r2
 8005e48:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2288      	movs	r2, #136	; 0x88
 8005e5c:	2120      	movs	r1, #32
 8005e5e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2284      	movs	r2, #132	; 0x84
 8005e64:	2100      	movs	r1, #0
 8005e66:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	0018      	movs	r0, r3
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	b004      	add	sp, #16
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	46c0      	nop			; (mov r8, r8)
 8005e74:	dfffffff 	.word	0xdfffffff

08005e78 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2284      	movs	r2, #132	; 0x84
 8005e86:	5c9b      	ldrb	r3, [r3, r2]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d101      	bne.n	8005e90 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	e02e      	b.n	8005eee <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2284      	movs	r2, #132	; 0x84
 8005e94:	2101      	movs	r1, #1
 8005e96:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2288      	movs	r2, #136	; 0x88
 8005e9c:	2124      	movs	r1, #36	; 0x24
 8005e9e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2101      	movs	r1, #1
 8005eb4:	438a      	bics	r2, r1
 8005eb6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	00db      	lsls	r3, r3, #3
 8005ec0:	08d9      	lsrs	r1, r3, #3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	683a      	ldr	r2, [r7, #0]
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	0018      	movs	r0, r3
 8005ed0:	f000 f854 	bl	8005f7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2288      	movs	r2, #136	; 0x88
 8005ee0:	2120      	movs	r1, #32
 8005ee2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2284      	movs	r2, #132	; 0x84
 8005ee8:	2100      	movs	r1, #0
 8005eea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	0018      	movs	r0, r3
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	b004      	add	sp, #16
 8005ef4:	bd80      	pop	{r7, pc}
	...

08005ef8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2284      	movs	r2, #132	; 0x84
 8005f06:	5c9b      	ldrb	r3, [r3, r2]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d101      	bne.n	8005f10 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	e02f      	b.n	8005f70 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2284      	movs	r2, #132	; 0x84
 8005f14:	2101      	movs	r1, #1
 8005f16:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2288      	movs	r2, #136	; 0x88
 8005f1c:	2124      	movs	r1, #36	; 0x24
 8005f1e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2101      	movs	r1, #1
 8005f34:	438a      	bics	r2, r1
 8005f36:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	4a0e      	ldr	r2, [pc, #56]	; (8005f78 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005f40:	4013      	ands	r3, r2
 8005f42:	0019      	movs	r1, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	683a      	ldr	r2, [r7, #0]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	0018      	movs	r0, r3
 8005f52:	f000 f813 	bl	8005f7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2288      	movs	r2, #136	; 0x88
 8005f62:	2120      	movs	r1, #32
 8005f64:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2284      	movs	r2, #132	; 0x84
 8005f6a:	2100      	movs	r1, #0
 8005f6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	0018      	movs	r0, r3
 8005f72:	46bd      	mov	sp, r7
 8005f74:	b004      	add	sp, #16
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	f1ffffff 	.word	0xf1ffffff

08005f7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d108      	bne.n	8005f9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	226a      	movs	r2, #106	; 0x6a
 8005f90:	2101      	movs	r1, #1
 8005f92:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2268      	movs	r2, #104	; 0x68
 8005f98:	2101      	movs	r1, #1
 8005f9a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005f9c:	e043      	b.n	8006026 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005f9e:	260f      	movs	r6, #15
 8005fa0:	19bb      	adds	r3, r7, r6
 8005fa2:	2208      	movs	r2, #8
 8005fa4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005fa6:	200e      	movs	r0, #14
 8005fa8:	183b      	adds	r3, r7, r0
 8005faa:	2208      	movs	r2, #8
 8005fac:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	0e5b      	lsrs	r3, r3, #25
 8005fb6:	b2da      	uxtb	r2, r3
 8005fb8:	240d      	movs	r4, #13
 8005fba:	193b      	adds	r3, r7, r4
 8005fbc:	2107      	movs	r1, #7
 8005fbe:	400a      	ands	r2, r1
 8005fc0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	0f5b      	lsrs	r3, r3, #29
 8005fca:	b2da      	uxtb	r2, r3
 8005fcc:	250c      	movs	r5, #12
 8005fce:	197b      	adds	r3, r7, r5
 8005fd0:	2107      	movs	r1, #7
 8005fd2:	400a      	ands	r2, r1
 8005fd4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fd6:	183b      	adds	r3, r7, r0
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	197a      	adds	r2, r7, r5
 8005fdc:	7812      	ldrb	r2, [r2, #0]
 8005fde:	4914      	ldr	r1, [pc, #80]	; (8006030 <UARTEx_SetNbDataToProcess+0xb4>)
 8005fe0:	5c8a      	ldrb	r2, [r1, r2]
 8005fe2:	435a      	muls	r2, r3
 8005fe4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005fe6:	197b      	adds	r3, r7, r5
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	4a12      	ldr	r2, [pc, #72]	; (8006034 <UARTEx_SetNbDataToProcess+0xb8>)
 8005fec:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fee:	0019      	movs	r1, r3
 8005ff0:	f7fa f924 	bl	800023c <__divsi3>
 8005ff4:	0003      	movs	r3, r0
 8005ff6:	b299      	uxth	r1, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	226a      	movs	r2, #106	; 0x6a
 8005ffc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ffe:	19bb      	adds	r3, r7, r6
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	193a      	adds	r2, r7, r4
 8006004:	7812      	ldrb	r2, [r2, #0]
 8006006:	490a      	ldr	r1, [pc, #40]	; (8006030 <UARTEx_SetNbDataToProcess+0xb4>)
 8006008:	5c8a      	ldrb	r2, [r1, r2]
 800600a:	435a      	muls	r2, r3
 800600c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800600e:	193b      	adds	r3, r7, r4
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	4a08      	ldr	r2, [pc, #32]	; (8006034 <UARTEx_SetNbDataToProcess+0xb8>)
 8006014:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006016:	0019      	movs	r1, r3
 8006018:	f7fa f910 	bl	800023c <__divsi3>
 800601c:	0003      	movs	r3, r0
 800601e:	b299      	uxth	r1, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2268      	movs	r2, #104	; 0x68
 8006024:	5299      	strh	r1, [r3, r2]
}
 8006026:	46c0      	nop			; (mov r8, r8)
 8006028:	46bd      	mov	sp, r7
 800602a:	b005      	add	sp, #20
 800602c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800602e:	46c0      	nop			; (mov r8, r8)
 8006030:	0800b988 	.word	0x0800b988
 8006034:	0800b990 	.word	0x0800b990

08006038 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006046:	4b05      	ldr	r3, [pc, #20]	; (800605c <USB_EnableGlobalInt+0x24>)
 8006048:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	0018      	movs	r0, r3
 8006054:	46bd      	mov	sp, r7
 8006056:	b004      	add	sp, #16
 8006058:	bd80      	pop	{r7, pc}
 800605a:	46c0      	nop			; (mov r8, r8)
 800605c:	0000bf80 	.word	0x0000bf80

08006060 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006068:	4b06      	ldr	r3, [pc, #24]	; (8006084 <USB_DisableGlobalInt+0x24>)
 800606a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	43d2      	mvns	r2, r2
 8006074:	401a      	ands	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	0018      	movs	r0, r3
 800607e:	46bd      	mov	sp, r7
 8006080:	b004      	add	sp, #16
 8006082:	bd80      	pop	{r7, pc}
 8006084:	0000bf80 	.word	0x0000bf80

08006088 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	000a      	movs	r2, r1
 8006092:	1cfb      	adds	r3, r7, #3
 8006094:	701a      	strb	r2, [r3, #0]
  if (mode == USB_DEVICE_MODE)
 8006096:	1cfb      	adds	r3, r7, #3
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d106      	bne.n	80060ac <USB_SetCurrentMode+0x24>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a2:	005b      	lsls	r3, r3, #1
 80060a4:	085a      	lsrs	r2, r3, #1
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	641a      	str	r2, [r3, #64]	; 0x40
 80060aa:	e006      	b.n	80060ba <USB_SetCurrentMode+0x32>
  }
  else
  {
    USBx->CNTR |= USB_CNTR_HOST;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b0:	2280      	movs	r2, #128	; 0x80
 80060b2:	0612      	lsls	r2, r2, #24
 80060b4:	431a      	orrs	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	641a      	str	r2, [r3, #64]	; 0x40
  }

  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	0018      	movs	r0, r3
 80060be:	46bd      	mov	sp, r7
 80060c0:	b002      	add	sp, #8
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 80060c4:	b084      	sub	sp, #16
 80060c6:	b590      	push	{r4, r7, lr}
 80060c8:	b083      	sub	sp, #12
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
 80060ce:	2004      	movs	r0, #4
 80060d0:	2410      	movs	r4, #16
 80060d2:	1900      	adds	r0, r0, r4
 80060d4:	2408      	movs	r4, #8
 80060d6:	46a4      	mov	ip, r4
 80060d8:	44bc      	add	ip, r7
 80060da:	4460      	add	r0, ip
 80060dc:	6001      	str	r1, [r0, #0]
 80060de:	6042      	str	r2, [r0, #4]
 80060e0:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);
  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ec:	2201      	movs	r2, #1
 80060ee:	4393      	bics	r3, r2
 80060f0:	001a      	movs	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the Device Mode */
  (void)USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2100      	movs	r1, #0
 80060fa:	0018      	movs	r0, r3
 80060fc:	f7ff ffc4 	bl	8006088 <USB_SetCurrentMode>

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	645a      	str	r2, [r3, #68]	; 0x44

  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	0018      	movs	r0, r3
 800610a:	46bd      	mov	sp, r7
 800610c:	b003      	add	sp, #12
 800610e:	bc90      	pop	{r4, r7}
 8006110:	bc08      	pop	{r3}
 8006112:	b004      	add	sp, #16
 8006114:	4718      	bx	r3
	...

08006118 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b09e      	sub	sp, #120	; 0x78
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006122:	2377      	movs	r3, #119	; 0x77
 8006124:	18fb      	adds	r3, r7, r3
 8006126:	2200      	movs	r2, #0
 8006128:	701a      	strb	r2, [r3, #0]
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	18d3      	adds	r3, r2, r3
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4ad8      	ldr	r2, [pc, #864]	; (8006498 <USB_ActivateEndpoint+0x380>)
 8006138:	4013      	ands	r3, r2
 800613a:	673b      	str	r3, [r7, #112]	; 0x70

  /* initialize Endpoint */
  switch (ep->type)
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	78db      	ldrb	r3, [r3, #3]
 8006140:	2b03      	cmp	r3, #3
 8006142:	d00e      	beq.n	8006162 <USB_ActivateEndpoint+0x4a>
 8006144:	dc19      	bgt.n	800617a <USB_ActivateEndpoint+0x62>
 8006146:	2b02      	cmp	r3, #2
 8006148:	d01c      	beq.n	8006184 <USB_ActivateEndpoint+0x6c>
 800614a:	dc16      	bgt.n	800617a <USB_ActivateEndpoint+0x62>
 800614c:	2b00      	cmp	r3, #0
 800614e:	d002      	beq.n	8006156 <USB_ActivateEndpoint+0x3e>
 8006150:	2b01      	cmp	r3, #1
 8006152:	d00c      	beq.n	800616e <USB_ActivateEndpoint+0x56>
 8006154:	e011      	b.n	800617a <USB_ActivateEndpoint+0x62>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006156:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006158:	2280      	movs	r2, #128	; 0x80
 800615a:	0092      	lsls	r2, r2, #2
 800615c:	4313      	orrs	r3, r2
 800615e:	673b      	str	r3, [r7, #112]	; 0x70
      break;
 8006160:	e011      	b.n	8006186 <USB_ActivateEndpoint+0x6e>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006162:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006164:	22c0      	movs	r2, #192	; 0xc0
 8006166:	00d2      	lsls	r2, r2, #3
 8006168:	4313      	orrs	r3, r2
 800616a:	673b      	str	r3, [r7, #112]	; 0x70
      break;
 800616c:	e00b      	b.n	8006186 <USB_ActivateEndpoint+0x6e>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800616e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006170:	2280      	movs	r2, #128	; 0x80
 8006172:	00d2      	lsls	r2, r2, #3
 8006174:	4313      	orrs	r3, r2
 8006176:	673b      	str	r3, [r7, #112]	; 0x70
      break;
 8006178:	e005      	b.n	8006186 <USB_ActivateEndpoint+0x6e>

    default:
      ret = HAL_ERROR;
 800617a:	2377      	movs	r3, #119	; 0x77
 800617c:	18fb      	adds	r3, r7, r3
 800617e:	2201      	movs	r2, #1
 8006180:	701a      	strb	r2, [r3, #0]
      break;
 8006182:	e000      	b.n	8006186 <USB_ActivateEndpoint+0x6e>
      break;
 8006184:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	18d3      	adds	r3, r2, r3
 8006190:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006192:	49c2      	ldr	r1, [pc, #776]	; (800649c <USB_ActivateEndpoint+0x384>)
 8006194:	430a      	orrs	r2, r1
 8006196:	601a      	str	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	18d3      	adds	r3, r2, r3
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4abe      	ldr	r2, [pc, #760]	; (80064a0 <USB_ActivateEndpoint+0x388>)
 80061a6:	4013      	ands	r3, r2
 80061a8:	683a      	ldr	r2, [r7, #0]
 80061aa:	7812      	ldrb	r2, [r2, #0]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	18d3      	adds	r3, r2, r3
 80061ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80061bc:	49b7      	ldr	r1, [pc, #732]	; (800649c <USB_ActivateEndpoint+0x384>)
 80061be:	430a      	orrs	r2, r1
 80061c0:	601a      	str	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	7a9b      	ldrb	r3, [r3, #10]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d000      	beq.n	80061cc <USB_ActivateEndpoint+0xb4>
 80061ca:	e177      	b.n	80064bc <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	785b      	ldrb	r3, [r3, #1]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d06e      	beq.n	80062b2 <USB_ActivateEndpoint+0x19a>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	00db      	lsls	r3, r3, #3
 80061da:	4ab2      	ldr	r2, [pc, #712]	; (80064a4 <USB_ActivateEndpoint+0x38c>)
 80061dc:	4694      	mov	ip, r2
 80061de:	4463      	add	r3, ip
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	00db      	lsls	r3, r3, #3
 80061e8:	49ae      	ldr	r1, [pc, #696]	; (80064a4 <USB_ActivateEndpoint+0x38c>)
 80061ea:	468c      	mov	ip, r1
 80061ec:	4463      	add	r3, ip
 80061ee:	0c12      	lsrs	r2, r2, #16
 80061f0:	0412      	lsls	r2, r2, #16
 80061f2:	601a      	str	r2, [r3, #0]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	00db      	lsls	r3, r3, #3
 80061fa:	4aaa      	ldr	r2, [pc, #680]	; (80064a4 <USB_ActivateEndpoint+0x38c>)
 80061fc:	4694      	mov	ip, r2
 80061fe:	4463      	add	r3, ip
 8006200:	6819      	ldr	r1, [r3, #0]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	889b      	ldrh	r3, [r3, #4]
 8006206:	089b      	lsrs	r3, r3, #2
 8006208:	b29b      	uxth	r3, r3
 800620a:	009a      	lsls	r2, r3, #2
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	00db      	lsls	r3, r3, #3
 8006212:	48a4      	ldr	r0, [pc, #656]	; (80064a4 <USB_ActivateEndpoint+0x38c>)
 8006214:	4684      	mov	ip, r0
 8006216:	4463      	add	r3, ip
 8006218:	430a      	orrs	r2, r1
 800621a:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	18d3      	adds	r3, r2, r3
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	61bb      	str	r3, [r7, #24]
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	2240      	movs	r2, #64	; 0x40
 800622e:	4013      	ands	r3, r2
 8006230:	d011      	beq.n	8006256 <USB_ActivateEndpoint+0x13e>
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	18d3      	adds	r3, r2, r3
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a98      	ldr	r2, [pc, #608]	; (80064a0 <USB_ActivateEndpoint+0x388>)
 8006240:	4013      	ands	r3, r2
 8006242:	617b      	str	r3, [r7, #20]
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	18d3      	adds	r3, r2, r3
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	4995      	ldr	r1, [pc, #596]	; (80064a8 <USB_ActivateEndpoint+0x390>)
 8006252:	430a      	orrs	r2, r1
 8006254:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	78db      	ldrb	r3, [r3, #3]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d016      	beq.n	800628c <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	18d3      	adds	r3, r2, r3
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a90      	ldr	r2, [pc, #576]	; (80064ac <USB_ActivateEndpoint+0x394>)
 800626c:	4013      	ands	r3, r2
 800626e:	60fb      	str	r3, [r7, #12]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2220      	movs	r2, #32
 8006274:	4053      	eors	r3, r2
 8006276:	60fb      	str	r3, [r7, #12]
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	18d3      	adds	r3, r2, r3
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	4985      	ldr	r1, [pc, #532]	; (800649c <USB_ActivateEndpoint+0x384>)
 8006286:	430a      	orrs	r2, r1
 8006288:	601a      	str	r2, [r3, #0]
 800628a:	e270      	b.n	800676e <USB_ActivateEndpoint+0x656>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	18d3      	adds	r3, r2, r3
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a84      	ldr	r2, [pc, #528]	; (80064ac <USB_ActivateEndpoint+0x394>)
 800629a:	4013      	ands	r3, r2
 800629c:	613b      	str	r3, [r7, #16]
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	18d3      	adds	r3, r2, r3
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	497c      	ldr	r1, [pc, #496]	; (800649c <USB_ActivateEndpoint+0x384>)
 80062ac:	430a      	orrs	r2, r1
 80062ae:	601a      	str	r2, [r3, #0]
 80062b0:	e25d      	b.n	800676e <USB_ActivateEndpoint+0x656>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	00db      	lsls	r3, r3, #3
 80062b8:	4a7a      	ldr	r2, [pc, #488]	; (80064a4 <USB_ActivateEndpoint+0x38c>)
 80062ba:	4694      	mov	ip, r2
 80062bc:	4463      	add	r3, ip
 80062be:	685a      	ldr	r2, [r3, #4]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	00db      	lsls	r3, r3, #3
 80062c6:	4977      	ldr	r1, [pc, #476]	; (80064a4 <USB_ActivateEndpoint+0x38c>)
 80062c8:	468c      	mov	ip, r1
 80062ca:	4463      	add	r3, ip
 80062cc:	0c12      	lsrs	r2, r2, #16
 80062ce:	0412      	lsls	r2, r2, #16
 80062d0:	605a      	str	r2, [r3, #4]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	00db      	lsls	r3, r3, #3
 80062d8:	4a72      	ldr	r2, [pc, #456]	; (80064a4 <USB_ActivateEndpoint+0x38c>)
 80062da:	4694      	mov	ip, r2
 80062dc:	4463      	add	r3, ip
 80062de:	6859      	ldr	r1, [r3, #4]
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	889b      	ldrh	r3, [r3, #4]
 80062e4:	089b      	lsrs	r3, r3, #2
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	009a      	lsls	r2, r3, #2
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	00db      	lsls	r3, r3, #3
 80062f0:	486c      	ldr	r0, [pc, #432]	; (80064a4 <USB_ActivateEndpoint+0x38c>)
 80062f2:	4684      	mov	ip, r0
 80062f4:	4463      	add	r3, ip
 80062f6:	430a      	orrs	r2, r1
 80062f8:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	00db      	lsls	r3, r3, #3
 8006300:	4a68      	ldr	r2, [pc, #416]	; (80064a4 <USB_ActivateEndpoint+0x38c>)
 8006302:	4694      	mov	ip, r2
 8006304:	4463      	add	r3, ip
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	00db      	lsls	r3, r3, #3
 800630e:	4965      	ldr	r1, [pc, #404]	; (80064a4 <USB_ActivateEndpoint+0x38c>)
 8006310:	468c      	mov	ip, r1
 8006312:	4463      	add	r3, ip
 8006314:	0412      	lsls	r2, r2, #16
 8006316:	0c12      	lsrs	r2, r2, #16
 8006318:	605a      	str	r2, [r3, #4]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	2b3e      	cmp	r3, #62	; 0x3e
 8006320:	d920      	bls.n	8006364 <USB_ActivateEndpoint+0x24c>
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	095b      	lsrs	r3, r3, #5
 8006328:	66fb      	str	r3, [r7, #108]	; 0x6c
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	221f      	movs	r2, #31
 8006330:	4013      	ands	r3, r2
 8006332:	d102      	bne.n	800633a <USB_ActivateEndpoint+0x222>
 8006334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006336:	3b01      	subs	r3, #1
 8006338:	66fb      	str	r3, [r7, #108]	; 0x6c
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	00db      	lsls	r3, r3, #3
 8006340:	4a58      	ldr	r2, [pc, #352]	; (80064a4 <USB_ActivateEndpoint+0x38c>)
 8006342:	4694      	mov	ip, r2
 8006344:	4463      	add	r3, ip
 8006346:	685a      	ldr	r2, [r3, #4]
 8006348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800634a:	069b      	lsls	r3, r3, #26
 800634c:	431a      	orrs	r2, r3
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	00db      	lsls	r3, r3, #3
 8006354:	4953      	ldr	r1, [pc, #332]	; (80064a4 <USB_ActivateEndpoint+0x38c>)
 8006356:	468c      	mov	ip, r1
 8006358:	4463      	add	r3, ip
 800635a:	2180      	movs	r1, #128	; 0x80
 800635c:	0609      	lsls	r1, r1, #24
 800635e:	430a      	orrs	r2, r1
 8006360:	605a      	str	r2, [r3, #4]
 8006362:	e042      	b.n	80063ea <USB_ActivateEndpoint+0x2d2>
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d121      	bne.n	80063b0 <USB_ActivateEndpoint+0x298>
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	00db      	lsls	r3, r3, #3
 8006372:	4a4c      	ldr	r2, [pc, #304]	; (80064a4 <USB_ActivateEndpoint+0x38c>)
 8006374:	4694      	mov	ip, r2
 8006376:	4463      	add	r3, ip
 8006378:	685a      	ldr	r2, [r3, #4]
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	00db      	lsls	r3, r3, #3
 8006380:	4948      	ldr	r1, [pc, #288]	; (80064a4 <USB_ActivateEndpoint+0x38c>)
 8006382:	468c      	mov	ip, r1
 8006384:	4463      	add	r3, ip
 8006386:	494a      	ldr	r1, [pc, #296]	; (80064b0 <USB_ActivateEndpoint+0x398>)
 8006388:	400a      	ands	r2, r1
 800638a:	605a      	str	r2, [r3, #4]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	00db      	lsls	r3, r3, #3
 8006392:	4a44      	ldr	r2, [pc, #272]	; (80064a4 <USB_ActivateEndpoint+0x38c>)
 8006394:	4694      	mov	ip, r2
 8006396:	4463      	add	r3, ip
 8006398:	685a      	ldr	r2, [r3, #4]
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	00db      	lsls	r3, r3, #3
 80063a0:	4940      	ldr	r1, [pc, #256]	; (80064a4 <USB_ActivateEndpoint+0x38c>)
 80063a2:	468c      	mov	ip, r1
 80063a4:	4463      	add	r3, ip
 80063a6:	2180      	movs	r1, #128	; 0x80
 80063a8:	0609      	lsls	r1, r1, #24
 80063aa:	430a      	orrs	r2, r1
 80063ac:	605a      	str	r2, [r3, #4]
 80063ae:	e01c      	b.n	80063ea <USB_ActivateEndpoint+0x2d2>
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	085b      	lsrs	r3, r3, #1
 80063b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	2201      	movs	r2, #1
 80063be:	4013      	ands	r3, r2
 80063c0:	d002      	beq.n	80063c8 <USB_ActivateEndpoint+0x2b0>
 80063c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063c4:	3301      	adds	r3, #1
 80063c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	00db      	lsls	r3, r3, #3
 80063ce:	4a35      	ldr	r2, [pc, #212]	; (80064a4 <USB_ActivateEndpoint+0x38c>)
 80063d0:	4694      	mov	ip, r2
 80063d2:	4463      	add	r3, ip
 80063d4:	6859      	ldr	r1, [r3, #4]
 80063d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063d8:	069a      	lsls	r2, r3, #26
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	00db      	lsls	r3, r3, #3
 80063e0:	4830      	ldr	r0, [pc, #192]	; (80064a4 <USB_ActivateEndpoint+0x38c>)
 80063e2:	4684      	mov	ip, r0
 80063e4:	4463      	add	r3, ip
 80063e6:	430a      	orrs	r2, r1
 80063e8:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	18d3      	adds	r3, r2, r3
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80063f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063fa:	2380      	movs	r3, #128	; 0x80
 80063fc:	01db      	lsls	r3, r3, #7
 80063fe:	4013      	ands	r3, r2
 8006400:	d011      	beq.n	8006426 <USB_ActivateEndpoint+0x30e>
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	18d3      	adds	r3, r2, r3
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a24      	ldr	r2, [pc, #144]	; (80064a0 <USB_ActivateEndpoint+0x388>)
 8006410:	4013      	ands	r3, r2
 8006412:	627b      	str	r3, [r7, #36]	; 0x24
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	18d3      	adds	r3, r2, r3
 800641e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006420:	4924      	ldr	r1, [pc, #144]	; (80064b4 <USB_ActivateEndpoint+0x39c>)
 8006422:	430a      	orrs	r2, r1
 8006424:	601a      	str	r2, [r3, #0]

      if (ep->num == 0U)
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d11c      	bne.n	8006468 <USB_ActivateEndpoint+0x350>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	18d3      	adds	r3, r2, r3
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a1f      	ldr	r2, [pc, #124]	; (80064b8 <USB_ActivateEndpoint+0x3a0>)
 800643c:	4013      	ands	r3, r2
 800643e:	61fb      	str	r3, [r7, #28]
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	2280      	movs	r2, #128	; 0x80
 8006444:	0152      	lsls	r2, r2, #5
 8006446:	4053      	eors	r3, r2
 8006448:	61fb      	str	r3, [r7, #28]
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	2280      	movs	r2, #128	; 0x80
 800644e:	0192      	lsls	r2, r2, #6
 8006450:	4053      	eors	r3, r2
 8006452:	61fb      	str	r3, [r7, #28]
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	18d3      	adds	r3, r2, r3
 800645e:	69fa      	ldr	r2, [r7, #28]
 8006460:	490e      	ldr	r1, [pc, #56]	; (800649c <USB_ActivateEndpoint+0x384>)
 8006462:	430a      	orrs	r2, r1
 8006464:	601a      	str	r2, [r3, #0]
 8006466:	e182      	b.n	800676e <USB_ActivateEndpoint+0x656>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	18d3      	adds	r3, r2, r3
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a10      	ldr	r2, [pc, #64]	; (80064b8 <USB_ActivateEndpoint+0x3a0>)
 8006476:	4013      	ands	r3, r2
 8006478:	623b      	str	r3, [r7, #32]
 800647a:	6a3b      	ldr	r3, [r7, #32]
 800647c:	2280      	movs	r2, #128	; 0x80
 800647e:	0192      	lsls	r2, r2, #6
 8006480:	4053      	eors	r3, r2
 8006482:	623b      	str	r3, [r7, #32]
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	18d3      	adds	r3, r2, r3
 800648e:	6a3a      	ldr	r2, [r7, #32]
 8006490:	4902      	ldr	r1, [pc, #8]	; (800649c <USB_ActivateEndpoint+0x384>)
 8006492:	430a      	orrs	r2, r1
 8006494:	601a      	str	r2, [r3, #0]
 8006496:	e16a      	b.n	800676e <USB_ActivateEndpoint+0x656>
 8006498:	07ff898f 	.word	0x07ff898f
 800649c:	00008080 	.word	0x00008080
 80064a0:	07ff8f8f 	.word	0x07ff8f8f
 80064a4:	40009800 	.word	0x40009800
 80064a8:	000080c0 	.word	0x000080c0
 80064ac:	07ff8fbf 	.word	0x07ff8fbf
 80064b0:	83ffffff 	.word	0x83ffffff
 80064b4:	0000c080 	.word	0x0000c080
 80064b8:	07ffbf8f 	.word	0x07ffbf8f
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	78db      	ldrb	r3, [r3, #3]
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d112      	bne.n	80064ea <USB_ActivateEndpoint+0x3d2>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	18d3      	adds	r3, r2, r3
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4aaa      	ldr	r2, [pc, #680]	; (800677c <USB_ActivateEndpoint+0x664>)
 80064d2:	4013      	ands	r3, r2
 80064d4:	663b      	str	r3, [r7, #96]	; 0x60
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	18d3      	adds	r3, r2, r3
 80064e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80064e2:	49a7      	ldr	r1, [pc, #668]	; (8006780 <USB_ActivateEndpoint+0x668>)
 80064e4:	430a      	orrs	r2, r1
 80064e6:	601a      	str	r2, [r3, #0]
 80064e8:	e011      	b.n	800650e <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	18d3      	adds	r3, r2, r3
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4aa3      	ldr	r2, [pc, #652]	; (8006784 <USB_ActivateEndpoint+0x66c>)
 80064f8:	4013      	ands	r3, r2
 80064fa:	667b      	str	r3, [r7, #100]	; 0x64
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	18d3      	adds	r3, r2, r3
 8006506:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006508:	499f      	ldr	r1, [pc, #636]	; (8006788 <USB_ActivateEndpoint+0x670>)
 800650a:	430a      	orrs	r2, r1
 800650c:	601a      	str	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	00db      	lsls	r3, r3, #3
 8006514:	4a9d      	ldr	r2, [pc, #628]	; (800678c <USB_ActivateEndpoint+0x674>)
 8006516:	4694      	mov	ip, r2
 8006518:	4463      	add	r3, ip
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	00db      	lsls	r3, r3, #3
 8006522:	499a      	ldr	r1, [pc, #616]	; (800678c <USB_ActivateEndpoint+0x674>)
 8006524:	468c      	mov	ip, r1
 8006526:	4463      	add	r3, ip
 8006528:	0c12      	lsrs	r2, r2, #16
 800652a:	0412      	lsls	r2, r2, #16
 800652c:	601a      	str	r2, [r3, #0]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	00db      	lsls	r3, r3, #3
 8006534:	4a95      	ldr	r2, [pc, #596]	; (800678c <USB_ActivateEndpoint+0x674>)
 8006536:	4694      	mov	ip, r2
 8006538:	4463      	add	r3, ip
 800653a:	6819      	ldr	r1, [r3, #0]
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	88db      	ldrh	r3, [r3, #6]
 8006540:	089b      	lsrs	r3, r3, #2
 8006542:	b29b      	uxth	r3, r3
 8006544:	009a      	lsls	r2, r3, #2
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	00db      	lsls	r3, r3, #3
 800654c:	488f      	ldr	r0, [pc, #572]	; (800678c <USB_ActivateEndpoint+0x674>)
 800654e:	4684      	mov	ip, r0
 8006550:	4463      	add	r3, ip
 8006552:	430a      	orrs	r2, r1
 8006554:	601a      	str	r2, [r3, #0]
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	00db      	lsls	r3, r3, #3
 800655c:	4a8b      	ldr	r2, [pc, #556]	; (800678c <USB_ActivateEndpoint+0x674>)
 800655e:	4694      	mov	ip, r2
 8006560:	4463      	add	r3, ip
 8006562:	685a      	ldr	r2, [r3, #4]
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	00db      	lsls	r3, r3, #3
 800656a:	4988      	ldr	r1, [pc, #544]	; (800678c <USB_ActivateEndpoint+0x674>)
 800656c:	468c      	mov	ip, r1
 800656e:	4463      	add	r3, ip
 8006570:	0c12      	lsrs	r2, r2, #16
 8006572:	0412      	lsls	r2, r2, #16
 8006574:	605a      	str	r2, [r3, #4]
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	00db      	lsls	r3, r3, #3
 800657c:	4a83      	ldr	r2, [pc, #524]	; (800678c <USB_ActivateEndpoint+0x674>)
 800657e:	4694      	mov	ip, r2
 8006580:	4463      	add	r3, ip
 8006582:	6859      	ldr	r1, [r3, #4]
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	891b      	ldrh	r3, [r3, #8]
 8006588:	089b      	lsrs	r3, r3, #2
 800658a:	b29b      	uxth	r3, r3
 800658c:	009a      	lsls	r2, r3, #2
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	00db      	lsls	r3, r3, #3
 8006594:	487d      	ldr	r0, [pc, #500]	; (800678c <USB_ActivateEndpoint+0x674>)
 8006596:	4684      	mov	ip, r0
 8006598:	4463      	add	r3, ip
 800659a:	430a      	orrs	r2, r1
 800659c:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	785b      	ldrb	r3, [r3, #1]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d169      	bne.n	800667a <USB_ActivateEndpoint+0x562>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	18d3      	adds	r3, r2, r3
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	643b      	str	r3, [r7, #64]	; 0x40
 80065b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065b6:	2380      	movs	r3, #128	; 0x80
 80065b8:	01db      	lsls	r3, r3, #7
 80065ba:	4013      	ands	r3, r2
 80065bc:	d011      	beq.n	80065e2 <USB_ActivateEndpoint+0x4ca>
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	18d3      	adds	r3, r2, r3
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a6c      	ldr	r2, [pc, #432]	; (800677c <USB_ActivateEndpoint+0x664>)
 80065cc:	4013      	ands	r3, r2
 80065ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	18d3      	adds	r3, r2, r3
 80065da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065dc:	496c      	ldr	r1, [pc, #432]	; (8006790 <USB_ActivateEndpoint+0x678>)
 80065de:	430a      	orrs	r2, r1
 80065e0:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	18d3      	adds	r3, r2, r3
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80065f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f2:	2240      	movs	r2, #64	; 0x40
 80065f4:	4013      	ands	r3, r2
 80065f6:	d011      	beq.n	800661c <USB_ActivateEndpoint+0x504>
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	18d3      	adds	r3, r2, r3
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a5d      	ldr	r2, [pc, #372]	; (800677c <USB_ActivateEndpoint+0x664>)
 8006606:	4013      	ands	r3, r2
 8006608:	637b      	str	r3, [r7, #52]	; 0x34
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	18d3      	adds	r3, r2, r3
 8006614:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006616:	495f      	ldr	r1, [pc, #380]	; (8006794 <USB_ActivateEndpoint+0x67c>)
 8006618:	430a      	orrs	r2, r1
 800661a:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	18d3      	adds	r3, r2, r3
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a5b      	ldr	r2, [pc, #364]	; (8006798 <USB_ActivateEndpoint+0x680>)
 800662a:	4013      	ands	r3, r2
 800662c:	633b      	str	r3, [r7, #48]	; 0x30
 800662e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006630:	2280      	movs	r2, #128	; 0x80
 8006632:	0152      	lsls	r2, r2, #5
 8006634:	4053      	eors	r3, r2
 8006636:	633b      	str	r3, [r7, #48]	; 0x30
 8006638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663a:	2280      	movs	r2, #128	; 0x80
 800663c:	0192      	lsls	r2, r2, #6
 800663e:	4053      	eors	r3, r2
 8006640:	633b      	str	r3, [r7, #48]	; 0x30
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	18d3      	adds	r3, r2, r3
 800664c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800664e:	494e      	ldr	r1, [pc, #312]	; (8006788 <USB_ActivateEndpoint+0x670>)
 8006650:	430a      	orrs	r2, r1
 8006652:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	18d3      	adds	r3, r2, r3
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a4e      	ldr	r2, [pc, #312]	; (800679c <USB_ActivateEndpoint+0x684>)
 8006662:	4013      	ands	r3, r2
 8006664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	18d3      	adds	r3, r2, r3
 8006670:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006672:	4945      	ldr	r1, [pc, #276]	; (8006788 <USB_ActivateEndpoint+0x670>)
 8006674:	430a      	orrs	r2, r1
 8006676:	601a      	str	r2, [r3, #0]
 8006678:	e079      	b.n	800676e <USB_ActivateEndpoint+0x656>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	18d3      	adds	r3, r2, r3
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006688:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800668a:	2380      	movs	r3, #128	; 0x80
 800668c:	01db      	lsls	r3, r3, #7
 800668e:	4013      	ands	r3, r2
 8006690:	d011      	beq.n	80066b6 <USB_ActivateEndpoint+0x59e>
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	18d3      	adds	r3, r2, r3
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a37      	ldr	r2, [pc, #220]	; (800677c <USB_ActivateEndpoint+0x664>)
 80066a0:	4013      	ands	r3, r2
 80066a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	18d3      	adds	r3, r2, r3
 80066ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066b0:	4937      	ldr	r1, [pc, #220]	; (8006790 <USB_ActivateEndpoint+0x678>)
 80066b2:	430a      	orrs	r2, r1
 80066b4:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	18d3      	adds	r3, r2, r3
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	657b      	str	r3, [r7, #84]	; 0x54
 80066c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066c6:	2240      	movs	r2, #64	; 0x40
 80066c8:	4013      	ands	r3, r2
 80066ca:	d011      	beq.n	80066f0 <USB_ActivateEndpoint+0x5d8>
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	18d3      	adds	r3, r2, r3
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a28      	ldr	r2, [pc, #160]	; (800677c <USB_ActivateEndpoint+0x664>)
 80066da:	4013      	ands	r3, r2
 80066dc:	653b      	str	r3, [r7, #80]	; 0x50
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	18d3      	adds	r3, r2, r3
 80066e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80066ea:	492a      	ldr	r1, [pc, #168]	; (8006794 <USB_ActivateEndpoint+0x67c>)
 80066ec:	430a      	orrs	r2, r1
 80066ee:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	78db      	ldrb	r3, [r3, #3]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d016      	beq.n	8006726 <USB_ActivateEndpoint+0x60e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	18d3      	adds	r3, r2, r3
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a25      	ldr	r2, [pc, #148]	; (800679c <USB_ActivateEndpoint+0x684>)
 8006706:	4013      	ands	r3, r2
 8006708:	64bb      	str	r3, [r7, #72]	; 0x48
 800670a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800670c:	2220      	movs	r2, #32
 800670e:	4053      	eors	r3, r2
 8006710:	64bb      	str	r3, [r7, #72]	; 0x48
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	18d3      	adds	r3, r2, r3
 800671c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800671e:	491a      	ldr	r1, [pc, #104]	; (8006788 <USB_ActivateEndpoint+0x670>)
 8006720:	430a      	orrs	r2, r1
 8006722:	601a      	str	r2, [r3, #0]
 8006724:	e011      	b.n	800674a <USB_ActivateEndpoint+0x632>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	18d3      	adds	r3, r2, r3
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a1a      	ldr	r2, [pc, #104]	; (800679c <USB_ActivateEndpoint+0x684>)
 8006734:	4013      	ands	r3, r2
 8006736:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	18d3      	adds	r3, r2, r3
 8006742:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006744:	4910      	ldr	r1, [pc, #64]	; (8006788 <USB_ActivateEndpoint+0x670>)
 8006746:	430a      	orrs	r2, r1
 8006748:	601a      	str	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	18d3      	adds	r3, r2, r3
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a10      	ldr	r2, [pc, #64]	; (8006798 <USB_ActivateEndpoint+0x680>)
 8006758:	4013      	ands	r3, r2
 800675a:	647b      	str	r3, [r7, #68]	; 0x44
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	18d3      	adds	r3, r2, r3
 8006766:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006768:	4907      	ldr	r1, [pc, #28]	; (8006788 <USB_ActivateEndpoint+0x670>)
 800676a:	430a      	orrs	r2, r1
 800676c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800676e:	2377      	movs	r3, #119	; 0x77
 8006770:	18fb      	adds	r3, r7, r3
 8006772:	781b      	ldrb	r3, [r3, #0]
}
 8006774:	0018      	movs	r0, r3
 8006776:	46bd      	mov	sp, r7
 8006778:	b01e      	add	sp, #120	; 0x78
 800677a:	bd80      	pop	{r7, pc}
 800677c:	07ff8f8f 	.word	0x07ff8f8f
 8006780:	00008180 	.word	0x00008180
 8006784:	07ff8e8f 	.word	0x07ff8e8f
 8006788:	00008080 	.word	0x00008080
 800678c:	40009800 	.word	0x40009800
 8006790:	0000c080 	.word	0x0000c080
 8006794:	000080c0 	.word	0x000080c0
 8006798:	07ffbf8f 	.word	0x07ffbf8f
 800679c:	07ff8fbf 	.word	0x07ff8fbf

080067a0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b096      	sub	sp, #88	; 0x58
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	7a9b      	ldrb	r3, [r3, #10]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d164      	bne.n	800687c <USB_DeactivateEndpoint+0xdc>
  {
    if (ep->is_in != 0U)
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	785b      	ldrb	r3, [r3, #1]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d02f      	beq.n	800681a <USB_DeactivateEndpoint+0x7a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	18d3      	adds	r3, r2, r3
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	613b      	str	r3, [r7, #16]
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	2240      	movs	r2, #64	; 0x40
 80067cc:	4013      	ands	r3, r2
 80067ce:	d011      	beq.n	80067f4 <USB_DeactivateEndpoint+0x54>
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	18d3      	adds	r3, r2, r3
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a9d      	ldr	r2, [pc, #628]	; (8006a54 <USB_DeactivateEndpoint+0x2b4>)
 80067de:	4013      	ands	r3, r2
 80067e0:	60fb      	str	r3, [r7, #12]
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	18d3      	adds	r3, r2, r3
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	499a      	ldr	r1, [pc, #616]	; (8006a58 <USB_DeactivateEndpoint+0x2b8>)
 80067f0:	430a      	orrs	r2, r1
 80067f2:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	18d3      	adds	r3, r2, r3
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a96      	ldr	r2, [pc, #600]	; (8006a5c <USB_DeactivateEndpoint+0x2bc>)
 8006802:	4013      	ands	r3, r2
 8006804:	60bb      	str	r3, [r7, #8]
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	18d3      	adds	r3, r2, r3
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	4993      	ldr	r1, [pc, #588]	; (8006a60 <USB_DeactivateEndpoint+0x2c0>)
 8006814:	430a      	orrs	r2, r1
 8006816:	601a      	str	r2, [r3, #0]
 8006818:	e117      	b.n	8006a4a <USB_DeactivateEndpoint+0x2aa>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	18d3      	adds	r3, r2, r3
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	61fb      	str	r3, [r7, #28]
 8006828:	69fa      	ldr	r2, [r7, #28]
 800682a:	2380      	movs	r3, #128	; 0x80
 800682c:	01db      	lsls	r3, r3, #7
 800682e:	4013      	ands	r3, r2
 8006830:	d011      	beq.n	8006856 <USB_DeactivateEndpoint+0xb6>
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	18d3      	adds	r3, r2, r3
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a85      	ldr	r2, [pc, #532]	; (8006a54 <USB_DeactivateEndpoint+0x2b4>)
 8006840:	4013      	ands	r3, r2
 8006842:	61bb      	str	r3, [r7, #24]
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	18d3      	adds	r3, r2, r3
 800684e:	69ba      	ldr	r2, [r7, #24]
 8006850:	4984      	ldr	r1, [pc, #528]	; (8006a64 <USB_DeactivateEndpoint+0x2c4>)
 8006852:	430a      	orrs	r2, r1
 8006854:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	18d3      	adds	r3, r2, r3
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a81      	ldr	r2, [pc, #516]	; (8006a68 <USB_DeactivateEndpoint+0x2c8>)
 8006864:	4013      	ands	r3, r2
 8006866:	617b      	str	r3, [r7, #20]
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	18d3      	adds	r3, r2, r3
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	497a      	ldr	r1, [pc, #488]	; (8006a60 <USB_DeactivateEndpoint+0x2c0>)
 8006876:	430a      	orrs	r2, r1
 8006878:	601a      	str	r2, [r3, #0]
 800687a:	e0e6      	b.n	8006a4a <USB_DeactivateEndpoint+0x2aa>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	785b      	ldrb	r3, [r3, #1]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d171      	bne.n	8006968 <USB_DeactivateEndpoint+0x1c8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	18d3      	adds	r3, r2, r3
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	63bb      	str	r3, [r7, #56]	; 0x38
 8006892:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006894:	2380      	movs	r3, #128	; 0x80
 8006896:	01db      	lsls	r3, r3, #7
 8006898:	4013      	ands	r3, r2
 800689a:	d011      	beq.n	80068c0 <USB_DeactivateEndpoint+0x120>
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	18d3      	adds	r3, r2, r3
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a6a      	ldr	r2, [pc, #424]	; (8006a54 <USB_DeactivateEndpoint+0x2b4>)
 80068aa:	4013      	ands	r3, r2
 80068ac:	637b      	str	r3, [r7, #52]	; 0x34
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	18d3      	adds	r3, r2, r3
 80068b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068ba:	496a      	ldr	r1, [pc, #424]	; (8006a64 <USB_DeactivateEndpoint+0x2c4>)
 80068bc:	430a      	orrs	r2, r1
 80068be:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	18d3      	adds	r3, r2, r3
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	633b      	str	r3, [r7, #48]	; 0x30
 80068ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d0:	2240      	movs	r2, #64	; 0x40
 80068d2:	4013      	ands	r3, r2
 80068d4:	d011      	beq.n	80068fa <USB_DeactivateEndpoint+0x15a>
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	18d3      	adds	r3, r2, r3
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a5c      	ldr	r2, [pc, #368]	; (8006a54 <USB_DeactivateEndpoint+0x2b4>)
 80068e4:	4013      	ands	r3, r2
 80068e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	18d3      	adds	r3, r2, r3
 80068f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068f4:	4958      	ldr	r1, [pc, #352]	; (8006a58 <USB_DeactivateEndpoint+0x2b8>)
 80068f6:	430a      	orrs	r2, r1
 80068f8:	601a      	str	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	18d3      	adds	r3, r2, r3
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a53      	ldr	r2, [pc, #332]	; (8006a54 <USB_DeactivateEndpoint+0x2b4>)
 8006908:	4013      	ands	r3, r2
 800690a:	62bb      	str	r3, [r7, #40]	; 0x28
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	18d3      	adds	r3, r2, r3
 8006916:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006918:	494f      	ldr	r1, [pc, #316]	; (8006a58 <USB_DeactivateEndpoint+0x2b8>)
 800691a:	430a      	orrs	r2, r1
 800691c:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	18d3      	adds	r3, r2, r3
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a4f      	ldr	r2, [pc, #316]	; (8006a68 <USB_DeactivateEndpoint+0x2c8>)
 800692c:	4013      	ands	r3, r2
 800692e:	627b      	str	r3, [r7, #36]	; 0x24
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	18d3      	adds	r3, r2, r3
 800693a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800693c:	4948      	ldr	r1, [pc, #288]	; (8006a60 <USB_DeactivateEndpoint+0x2c0>)
 800693e:	430a      	orrs	r2, r1
 8006940:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	18d3      	adds	r3, r2, r3
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a43      	ldr	r2, [pc, #268]	; (8006a5c <USB_DeactivateEndpoint+0x2bc>)
 8006950:	4013      	ands	r3, r2
 8006952:	623b      	str	r3, [r7, #32]
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	18d3      	adds	r3, r2, r3
 800695e:	6a3a      	ldr	r2, [r7, #32]
 8006960:	493f      	ldr	r1, [pc, #252]	; (8006a60 <USB_DeactivateEndpoint+0x2c0>)
 8006962:	430a      	orrs	r2, r1
 8006964:	601a      	str	r2, [r3, #0]
 8006966:	e070      	b.n	8006a4a <USB_DeactivateEndpoint+0x2aa>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	18d3      	adds	r3, r2, r3
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	657b      	str	r3, [r7, #84]	; 0x54
 8006976:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006978:	2380      	movs	r3, #128	; 0x80
 800697a:	01db      	lsls	r3, r3, #7
 800697c:	4013      	ands	r3, r2
 800697e:	d011      	beq.n	80069a4 <USB_DeactivateEndpoint+0x204>
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	18d3      	adds	r3, r2, r3
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a31      	ldr	r2, [pc, #196]	; (8006a54 <USB_DeactivateEndpoint+0x2b4>)
 800698e:	4013      	ands	r3, r2
 8006990:	653b      	str	r3, [r7, #80]	; 0x50
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	18d3      	adds	r3, r2, r3
 800699c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800699e:	4931      	ldr	r1, [pc, #196]	; (8006a64 <USB_DeactivateEndpoint+0x2c4>)
 80069a0:	430a      	orrs	r2, r1
 80069a2:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	18d3      	adds	r3, r2, r3
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069b4:	2240      	movs	r2, #64	; 0x40
 80069b6:	4013      	ands	r3, r2
 80069b8:	d011      	beq.n	80069de <USB_DeactivateEndpoint+0x23e>
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	18d3      	adds	r3, r2, r3
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a23      	ldr	r2, [pc, #140]	; (8006a54 <USB_DeactivateEndpoint+0x2b4>)
 80069c8:	4013      	ands	r3, r2
 80069ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	18d3      	adds	r3, r2, r3
 80069d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069d8:	491f      	ldr	r1, [pc, #124]	; (8006a58 <USB_DeactivateEndpoint+0x2b8>)
 80069da:	430a      	orrs	r2, r1
 80069dc:	601a      	str	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	18d3      	adds	r3, r2, r3
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a1a      	ldr	r2, [pc, #104]	; (8006a54 <USB_DeactivateEndpoint+0x2b4>)
 80069ec:	4013      	ands	r3, r2
 80069ee:	647b      	str	r3, [r7, #68]	; 0x44
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	18d3      	adds	r3, r2, r3
 80069fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069fc:	4919      	ldr	r1, [pc, #100]	; (8006a64 <USB_DeactivateEndpoint+0x2c4>)
 80069fe:	430a      	orrs	r2, r1
 8006a00:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	18d3      	adds	r3, r2, r3
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a13      	ldr	r2, [pc, #76]	; (8006a5c <USB_DeactivateEndpoint+0x2bc>)
 8006a10:	4013      	ands	r3, r2
 8006a12:	643b      	str	r3, [r7, #64]	; 0x40
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	18d3      	adds	r3, r2, r3
 8006a1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a20:	490f      	ldr	r1, [pc, #60]	; (8006a60 <USB_DeactivateEndpoint+0x2c0>)
 8006a22:	430a      	orrs	r2, r1
 8006a24:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	18d3      	adds	r3, r2, r3
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a0d      	ldr	r2, [pc, #52]	; (8006a68 <USB_DeactivateEndpoint+0x2c8>)
 8006a34:	4013      	ands	r3, r2
 8006a36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	18d3      	adds	r3, r2, r3
 8006a42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a44:	4906      	ldr	r1, [pc, #24]	; (8006a60 <USB_DeactivateEndpoint+0x2c0>)
 8006a46:	430a      	orrs	r2, r1
 8006a48:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	0018      	movs	r0, r3
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	b016      	add	sp, #88	; 0x58
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	07ff8f8f 	.word	0x07ff8f8f
 8006a58:	000080c0 	.word	0x000080c0
 8006a5c:	07ff8fbf 	.word	0x07ff8fbf
 8006a60:	00008080 	.word	0x00008080
 8006a64:	0000c080 	.word	0x0000c080
 8006a68:	07ffbf8f 	.word	0x07ffbf8f

08006a6c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8006a6c:	b590      	push	{r4, r7, lr}
 8006a6e:	b097      	sub	sp, #92	; 0x5c
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	785b      	ldrb	r3, [r3, #1]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d001      	beq.n	8006a82 <USB_EPStartXfer+0x16>
 8006a7e:	f000 fd24 	bl	80074ca <USB_EPStartXfer+0xa5e>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	699a      	ldr	r2, [r3, #24]
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d903      	bls.n	8006a96 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	657b      	str	r3, [r7, #84]	; 0x54
 8006a94:	e002      	b.n	8006a9c <USB_EPStartXfer+0x30>
    }
    else
    {
      len = ep->xfer_len;
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	657b      	str	r3, [r7, #84]	; 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	7a9b      	ldrb	r3, [r3, #10]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d12b      	bne.n	8006afc <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	6959      	ldr	r1, [r3, #20]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	889a      	ldrh	r2, [r3, #4]
 8006aac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f001 f9b3 	bl	8007e1c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	00db      	lsls	r3, r3, #3
 8006abc:	4ade      	ldr	r2, [pc, #888]	; (8006e38 <USB_EPStartXfer+0x3cc>)
 8006abe:	4694      	mov	ip, r2
 8006ac0:	4463      	add	r3, ip
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	00db      	lsls	r3, r3, #3
 8006aca:	49db      	ldr	r1, [pc, #876]	; (8006e38 <USB_EPStartXfer+0x3cc>)
 8006acc:	468c      	mov	ip, r1
 8006ace:	4463      	add	r3, ip
 8006ad0:	0412      	lsls	r2, r2, #16
 8006ad2:	0c12      	lsrs	r2, r2, #16
 8006ad4:	601a      	str	r2, [r3, #0]
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	00db      	lsls	r3, r3, #3
 8006adc:	4ad6      	ldr	r2, [pc, #856]	; (8006e38 <USB_EPStartXfer+0x3cc>)
 8006ade:	4694      	mov	ip, r2
 8006ae0:	4463      	add	r3, ip
 8006ae2:	6819      	ldr	r1, [r3, #0]
 8006ae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ae6:	041a      	lsls	r2, r3, #16
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	00db      	lsls	r3, r3, #3
 8006aee:	48d2      	ldr	r0, [pc, #840]	; (8006e38 <USB_EPStartXfer+0x3cc>)
 8006af0:	4684      	mov	ip, r0
 8006af2:	4463      	add	r3, ip
 8006af4:	430a      	orrs	r2, r1
 8006af6:	601a      	str	r2, [r3, #0]
 8006af8:	f000 fccb 	bl	8007492 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	78db      	ldrb	r3, [r3, #3]
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d000      	beq.n	8006b06 <USB_EPStartXfer+0x9a>
 8006b04:	e35e      	b.n	80071c4 <USB_EPStartXfer+0x758>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	6a1a      	ldr	r2, [r3, #32]
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d800      	bhi.n	8006b14 <USB_EPStartXfer+0xa8>
 8006b12:	e309      	b.n	8007128 <USB_EPStartXfer+0x6bc>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	18d3      	adds	r3, r2, r3
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4ac6      	ldr	r2, [pc, #792]	; (8006e3c <USB_EPStartXfer+0x3d0>)
 8006b22:	4013      	ands	r3, r2
 8006b24:	613b      	str	r3, [r7, #16]
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	18d3      	adds	r3, r2, r3
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	49c3      	ldr	r1, [pc, #780]	; (8006e40 <USB_EPStartXfer+0x3d4>)
 8006b34:	430a      	orrs	r2, r1
 8006b36:	601a      	str	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	6a1a      	ldr	r2, [r3, #32]
 8006b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b3e:	1ad2      	subs	r2, r2, r3
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	18d3      	adds	r3, r2, r3
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2240      	movs	r2, #64	; 0x40
 8006b52:	4013      	ands	r3, r2
 8006b54:	d100      	bne.n	8006b58 <USB_EPStartXfer+0xec>
 8006b56:	e177      	b.n	8006e48 <USB_EPStartXfer+0x3dc>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	785b      	ldrb	r3, [r3, #1]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d172      	bne.n	8006c46 <USB_EPStartXfer+0x1da>
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	00db      	lsls	r3, r3, #3
 8006b66:	4ab4      	ldr	r2, [pc, #720]	; (8006e38 <USB_EPStartXfer+0x3cc>)
 8006b68:	4694      	mov	ip, r2
 8006b6a:	4463      	add	r3, ip
 8006b6c:	685a      	ldr	r2, [r3, #4]
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	00db      	lsls	r3, r3, #3
 8006b74:	49b0      	ldr	r1, [pc, #704]	; (8006e38 <USB_EPStartXfer+0x3cc>)
 8006b76:	468c      	mov	ip, r1
 8006b78:	4463      	add	r3, ip
 8006b7a:	0412      	lsls	r2, r2, #16
 8006b7c:	0c12      	lsrs	r2, r2, #16
 8006b7e:	605a      	str	r2, [r3, #4]
 8006b80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b82:	2b3e      	cmp	r3, #62	; 0x3e
 8006b84:	d91e      	bls.n	8006bc4 <USB_EPStartXfer+0x158>
 8006b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b88:	095b      	lsrs	r3, r3, #5
 8006b8a:	653b      	str	r3, [r7, #80]	; 0x50
 8006b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b8e:	221f      	movs	r2, #31
 8006b90:	4013      	ands	r3, r2
 8006b92:	d102      	bne.n	8006b9a <USB_EPStartXfer+0x12e>
 8006b94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b96:	3b01      	subs	r3, #1
 8006b98:	653b      	str	r3, [r7, #80]	; 0x50
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	00db      	lsls	r3, r3, #3
 8006ba0:	4aa5      	ldr	r2, [pc, #660]	; (8006e38 <USB_EPStartXfer+0x3cc>)
 8006ba2:	4694      	mov	ip, r2
 8006ba4:	4463      	add	r3, ip
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006baa:	069b      	lsls	r3, r3, #26
 8006bac:	431a      	orrs	r2, r3
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	00db      	lsls	r3, r3, #3
 8006bb4:	49a0      	ldr	r1, [pc, #640]	; (8006e38 <USB_EPStartXfer+0x3cc>)
 8006bb6:	468c      	mov	ip, r1
 8006bb8:	4463      	add	r3, ip
 8006bba:	2180      	movs	r1, #128	; 0x80
 8006bbc:	0609      	lsls	r1, r1, #24
 8006bbe:	430a      	orrs	r2, r1
 8006bc0:	605a      	str	r2, [r3, #4]
 8006bc2:	e065      	b.n	8006c90 <USB_EPStartXfer+0x224>
 8006bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d121      	bne.n	8006c0e <USB_EPStartXfer+0x1a2>
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	00db      	lsls	r3, r3, #3
 8006bd0:	4a99      	ldr	r2, [pc, #612]	; (8006e38 <USB_EPStartXfer+0x3cc>)
 8006bd2:	4694      	mov	ip, r2
 8006bd4:	4463      	add	r3, ip
 8006bd6:	685a      	ldr	r2, [r3, #4]
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	00db      	lsls	r3, r3, #3
 8006bde:	4996      	ldr	r1, [pc, #600]	; (8006e38 <USB_EPStartXfer+0x3cc>)
 8006be0:	468c      	mov	ip, r1
 8006be2:	4463      	add	r3, ip
 8006be4:	4997      	ldr	r1, [pc, #604]	; (8006e44 <USB_EPStartXfer+0x3d8>)
 8006be6:	400a      	ands	r2, r1
 8006be8:	605a      	str	r2, [r3, #4]
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	00db      	lsls	r3, r3, #3
 8006bf0:	4a91      	ldr	r2, [pc, #580]	; (8006e38 <USB_EPStartXfer+0x3cc>)
 8006bf2:	4694      	mov	ip, r2
 8006bf4:	4463      	add	r3, ip
 8006bf6:	685a      	ldr	r2, [r3, #4]
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	00db      	lsls	r3, r3, #3
 8006bfe:	498e      	ldr	r1, [pc, #568]	; (8006e38 <USB_EPStartXfer+0x3cc>)
 8006c00:	468c      	mov	ip, r1
 8006c02:	4463      	add	r3, ip
 8006c04:	2180      	movs	r1, #128	; 0x80
 8006c06:	0609      	lsls	r1, r1, #24
 8006c08:	430a      	orrs	r2, r1
 8006c0a:	605a      	str	r2, [r3, #4]
 8006c0c:	e040      	b.n	8006c90 <USB_EPStartXfer+0x224>
 8006c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c10:	085b      	lsrs	r3, r3, #1
 8006c12:	653b      	str	r3, [r7, #80]	; 0x50
 8006c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c16:	2201      	movs	r2, #1
 8006c18:	4013      	ands	r3, r2
 8006c1a:	d002      	beq.n	8006c22 <USB_EPStartXfer+0x1b6>
 8006c1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c1e:	3301      	adds	r3, #1
 8006c20:	653b      	str	r3, [r7, #80]	; 0x50
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	00db      	lsls	r3, r3, #3
 8006c28:	4a83      	ldr	r2, [pc, #524]	; (8006e38 <USB_EPStartXfer+0x3cc>)
 8006c2a:	4694      	mov	ip, r2
 8006c2c:	4463      	add	r3, ip
 8006c2e:	6859      	ldr	r1, [r3, #4]
 8006c30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c32:	069a      	lsls	r2, r3, #26
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	00db      	lsls	r3, r3, #3
 8006c3a:	487f      	ldr	r0, [pc, #508]	; (8006e38 <USB_EPStartXfer+0x3cc>)
 8006c3c:	4684      	mov	ip, r0
 8006c3e:	4463      	add	r3, ip
 8006c40:	430a      	orrs	r2, r1
 8006c42:	605a      	str	r2, [r3, #4]
 8006c44:	e024      	b.n	8006c90 <USB_EPStartXfer+0x224>
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	785b      	ldrb	r3, [r3, #1]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d120      	bne.n	8006c90 <USB_EPStartXfer+0x224>
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	00db      	lsls	r3, r3, #3
 8006c54:	4a78      	ldr	r2, [pc, #480]	; (8006e38 <USB_EPStartXfer+0x3cc>)
 8006c56:	4694      	mov	ip, r2
 8006c58:	4463      	add	r3, ip
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	00db      	lsls	r3, r3, #3
 8006c62:	4975      	ldr	r1, [pc, #468]	; (8006e38 <USB_EPStartXfer+0x3cc>)
 8006c64:	468c      	mov	ip, r1
 8006c66:	4463      	add	r3, ip
 8006c68:	0412      	lsls	r2, r2, #16
 8006c6a:	0c12      	lsrs	r2, r2, #16
 8006c6c:	605a      	str	r2, [r3, #4]
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	00db      	lsls	r3, r3, #3
 8006c74:	4a70      	ldr	r2, [pc, #448]	; (8006e38 <USB_EPStartXfer+0x3cc>)
 8006c76:	4694      	mov	ip, r2
 8006c78:	4463      	add	r3, ip
 8006c7a:	6859      	ldr	r1, [r3, #4]
 8006c7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c7e:	041a      	lsls	r2, r3, #16
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	00db      	lsls	r3, r3, #3
 8006c86:	486c      	ldr	r0, [pc, #432]	; (8006e38 <USB_EPStartXfer+0x3cc>)
 8006c88:	4684      	mov	ip, r0
 8006c8a:	4463      	add	r3, ip
 8006c8c:	430a      	orrs	r2, r1
 8006c8e:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 8006c90:	201a      	movs	r0, #26
 8006c92:	183b      	adds	r3, r7, r0
 8006c94:	683a      	ldr	r2, [r7, #0]
 8006c96:	8912      	ldrh	r2, [r2, #8]
 8006c98:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	6959      	ldr	r1, [r3, #20]
 8006c9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ca0:	b29c      	uxth	r4, r3
 8006ca2:	183b      	adds	r3, r7, r0
 8006ca4:	881a      	ldrh	r2, [r3, #0]
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	0023      	movs	r3, r4
 8006caa:	f001 f8b7 	bl	8007e1c <USB_WritePMA>
            ep->xfer_buff += len;
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	695a      	ldr	r2, [r3, #20]
 8006cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cb4:	18d2      	adds	r2, r2, r3
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	6a1a      	ldr	r2, [r3, #32]
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d906      	bls.n	8006cd4 <USB_EPStartXfer+0x268>
            {
              ep->xfer_len_db -= len;
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	6a1a      	ldr	r2, [r3, #32]
 8006cca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ccc:	1ad2      	subs	r2, r2, r3
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	621a      	str	r2, [r3, #32]
 8006cd2:	e005      	b.n	8006ce0 <USB_EPStartXfer+0x274>
            }
            else
            {
              len = ep->xfer_len_db;
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	6a1b      	ldr	r3, [r3, #32]
 8006cd8:	657b      	str	r3, [r7, #84]	; 0x54
              ep->xfer_len_db = 0U;
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	785b      	ldrb	r3, [r3, #1]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d172      	bne.n	8006dce <USB_EPStartXfer+0x362>
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	00db      	lsls	r3, r3, #3
 8006cee:	4a52      	ldr	r2, [pc, #328]	; (8006e38 <USB_EPStartXfer+0x3cc>)
 8006cf0:	4694      	mov	ip, r2
 8006cf2:	4463      	add	r3, ip
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	00db      	lsls	r3, r3, #3
 8006cfc:	494e      	ldr	r1, [pc, #312]	; (8006e38 <USB_EPStartXfer+0x3cc>)
 8006cfe:	468c      	mov	ip, r1
 8006d00:	4463      	add	r3, ip
 8006d02:	0412      	lsls	r2, r2, #16
 8006d04:	0c12      	lsrs	r2, r2, #16
 8006d06:	601a      	str	r2, [r3, #0]
 8006d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d0a:	2b3e      	cmp	r3, #62	; 0x3e
 8006d0c:	d91e      	bls.n	8006d4c <USB_EPStartXfer+0x2e0>
 8006d0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d10:	095b      	lsrs	r3, r3, #5
 8006d12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d16:	221f      	movs	r2, #31
 8006d18:	4013      	ands	r3, r2
 8006d1a:	d102      	bne.n	8006d22 <USB_EPStartXfer+0x2b6>
 8006d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	00db      	lsls	r3, r3, #3
 8006d28:	4a43      	ldr	r2, [pc, #268]	; (8006e38 <USB_EPStartXfer+0x3cc>)
 8006d2a:	4694      	mov	ip, r2
 8006d2c:	4463      	add	r3, ip
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d32:	069b      	lsls	r3, r3, #26
 8006d34:	431a      	orrs	r2, r3
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	00db      	lsls	r3, r3, #3
 8006d3c:	493e      	ldr	r1, [pc, #248]	; (8006e38 <USB_EPStartXfer+0x3cc>)
 8006d3e:	468c      	mov	ip, r1
 8006d40:	4463      	add	r3, ip
 8006d42:	2180      	movs	r1, #128	; 0x80
 8006d44:	0609      	lsls	r1, r1, #24
 8006d46:	430a      	orrs	r2, r1
 8006d48:	601a      	str	r2, [r3, #0]
 8006d4a:	e065      	b.n	8006e18 <USB_EPStartXfer+0x3ac>
 8006d4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d121      	bne.n	8006d96 <USB_EPStartXfer+0x32a>
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	00db      	lsls	r3, r3, #3
 8006d58:	4a37      	ldr	r2, [pc, #220]	; (8006e38 <USB_EPStartXfer+0x3cc>)
 8006d5a:	4694      	mov	ip, r2
 8006d5c:	4463      	add	r3, ip
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	00db      	lsls	r3, r3, #3
 8006d66:	4934      	ldr	r1, [pc, #208]	; (8006e38 <USB_EPStartXfer+0x3cc>)
 8006d68:	468c      	mov	ip, r1
 8006d6a:	4463      	add	r3, ip
 8006d6c:	4935      	ldr	r1, [pc, #212]	; (8006e44 <USB_EPStartXfer+0x3d8>)
 8006d6e:	400a      	ands	r2, r1
 8006d70:	601a      	str	r2, [r3, #0]
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	00db      	lsls	r3, r3, #3
 8006d78:	4a2f      	ldr	r2, [pc, #188]	; (8006e38 <USB_EPStartXfer+0x3cc>)
 8006d7a:	4694      	mov	ip, r2
 8006d7c:	4463      	add	r3, ip
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	00db      	lsls	r3, r3, #3
 8006d86:	492c      	ldr	r1, [pc, #176]	; (8006e38 <USB_EPStartXfer+0x3cc>)
 8006d88:	468c      	mov	ip, r1
 8006d8a:	4463      	add	r3, ip
 8006d8c:	2180      	movs	r1, #128	; 0x80
 8006d8e:	0609      	lsls	r1, r1, #24
 8006d90:	430a      	orrs	r2, r1
 8006d92:	601a      	str	r2, [r3, #0]
 8006d94:	e040      	b.n	8006e18 <USB_EPStartXfer+0x3ac>
 8006d96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d98:	085b      	lsrs	r3, r3, #1
 8006d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d9e:	2201      	movs	r2, #1
 8006da0:	4013      	ands	r3, r2
 8006da2:	d002      	beq.n	8006daa <USB_EPStartXfer+0x33e>
 8006da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006da6:	3301      	adds	r3, #1
 8006da8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	00db      	lsls	r3, r3, #3
 8006db0:	4a21      	ldr	r2, [pc, #132]	; (8006e38 <USB_EPStartXfer+0x3cc>)
 8006db2:	4694      	mov	ip, r2
 8006db4:	4463      	add	r3, ip
 8006db6:	6819      	ldr	r1, [r3, #0]
 8006db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dba:	069a      	lsls	r2, r3, #26
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	00db      	lsls	r3, r3, #3
 8006dc2:	481d      	ldr	r0, [pc, #116]	; (8006e38 <USB_EPStartXfer+0x3cc>)
 8006dc4:	4684      	mov	ip, r0
 8006dc6:	4463      	add	r3, ip
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	601a      	str	r2, [r3, #0]
 8006dcc:	e024      	b.n	8006e18 <USB_EPStartXfer+0x3ac>
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	785b      	ldrb	r3, [r3, #1]
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d120      	bne.n	8006e18 <USB_EPStartXfer+0x3ac>
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	00db      	lsls	r3, r3, #3
 8006ddc:	4a16      	ldr	r2, [pc, #88]	; (8006e38 <USB_EPStartXfer+0x3cc>)
 8006dde:	4694      	mov	ip, r2
 8006de0:	4463      	add	r3, ip
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	00db      	lsls	r3, r3, #3
 8006dea:	4913      	ldr	r1, [pc, #76]	; (8006e38 <USB_EPStartXfer+0x3cc>)
 8006dec:	468c      	mov	ip, r1
 8006dee:	4463      	add	r3, ip
 8006df0:	0412      	lsls	r2, r2, #16
 8006df2:	0c12      	lsrs	r2, r2, #16
 8006df4:	601a      	str	r2, [r3, #0]
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	00db      	lsls	r3, r3, #3
 8006dfc:	4a0e      	ldr	r2, [pc, #56]	; (8006e38 <USB_EPStartXfer+0x3cc>)
 8006dfe:	4694      	mov	ip, r2
 8006e00:	4463      	add	r3, ip
 8006e02:	6819      	ldr	r1, [r3, #0]
 8006e04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e06:	041a      	lsls	r2, r3, #16
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	00db      	lsls	r3, r3, #3
 8006e0e:	480a      	ldr	r0, [pc, #40]	; (8006e38 <USB_EPStartXfer+0x3cc>)
 8006e10:	4684      	mov	ip, r0
 8006e12:	4463      	add	r3, ip
 8006e14:	430a      	orrs	r2, r1
 8006e16:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006e18:	201a      	movs	r0, #26
 8006e1a:	183b      	adds	r3, r7, r0
 8006e1c:	683a      	ldr	r2, [r7, #0]
 8006e1e:	88d2      	ldrh	r2, [r2, #6]
 8006e20:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	6959      	ldr	r1, [r3, #20]
 8006e26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e28:	b29c      	uxth	r4, r3
 8006e2a:	183b      	adds	r3, r7, r0
 8006e2c:	881a      	ldrh	r2, [r3, #0]
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	0023      	movs	r3, r4
 8006e32:	f000 fff3 	bl	8007e1c <USB_WritePMA>
 8006e36:	e32c      	b.n	8007492 <USB_EPStartXfer+0xa26>
 8006e38:	40009800 	.word	0x40009800
 8006e3c:	07ff8f8f 	.word	0x07ff8f8f
 8006e40:	00008180 	.word	0x00008180
 8006e44:	83ffffff 	.word	0x83ffffff
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	785b      	ldrb	r3, [r3, #1]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d172      	bne.n	8006f36 <USB_EPStartXfer+0x4ca>
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	00db      	lsls	r3, r3, #3
 8006e56:	4ad7      	ldr	r2, [pc, #860]	; (80071b4 <USB_EPStartXfer+0x748>)
 8006e58:	4694      	mov	ip, r2
 8006e5a:	4463      	add	r3, ip
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	00db      	lsls	r3, r3, #3
 8006e64:	49d3      	ldr	r1, [pc, #844]	; (80071b4 <USB_EPStartXfer+0x748>)
 8006e66:	468c      	mov	ip, r1
 8006e68:	4463      	add	r3, ip
 8006e6a:	0412      	lsls	r2, r2, #16
 8006e6c:	0c12      	lsrs	r2, r2, #16
 8006e6e:	601a      	str	r2, [r3, #0]
 8006e70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e72:	2b3e      	cmp	r3, #62	; 0x3e
 8006e74:	d91e      	bls.n	8006eb4 <USB_EPStartXfer+0x448>
 8006e76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e78:	095b      	lsrs	r3, r3, #5
 8006e7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e7e:	221f      	movs	r2, #31
 8006e80:	4013      	ands	r3, r2
 8006e82:	d102      	bne.n	8006e8a <USB_EPStartXfer+0x41e>
 8006e84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e86:	3b01      	subs	r3, #1
 8006e88:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	00db      	lsls	r3, r3, #3
 8006e90:	4ac8      	ldr	r2, [pc, #800]	; (80071b4 <USB_EPStartXfer+0x748>)
 8006e92:	4694      	mov	ip, r2
 8006e94:	4463      	add	r3, ip
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e9a:	069b      	lsls	r3, r3, #26
 8006e9c:	431a      	orrs	r2, r3
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	00db      	lsls	r3, r3, #3
 8006ea4:	49c3      	ldr	r1, [pc, #780]	; (80071b4 <USB_EPStartXfer+0x748>)
 8006ea6:	468c      	mov	ip, r1
 8006ea8:	4463      	add	r3, ip
 8006eaa:	2180      	movs	r1, #128	; 0x80
 8006eac:	0609      	lsls	r1, r1, #24
 8006eae:	430a      	orrs	r2, r1
 8006eb0:	601a      	str	r2, [r3, #0]
 8006eb2:	e065      	b.n	8006f80 <USB_EPStartXfer+0x514>
 8006eb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d121      	bne.n	8006efe <USB_EPStartXfer+0x492>
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	00db      	lsls	r3, r3, #3
 8006ec0:	4abc      	ldr	r2, [pc, #752]	; (80071b4 <USB_EPStartXfer+0x748>)
 8006ec2:	4694      	mov	ip, r2
 8006ec4:	4463      	add	r3, ip
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	00db      	lsls	r3, r3, #3
 8006ece:	49b9      	ldr	r1, [pc, #740]	; (80071b4 <USB_EPStartXfer+0x748>)
 8006ed0:	468c      	mov	ip, r1
 8006ed2:	4463      	add	r3, ip
 8006ed4:	49b8      	ldr	r1, [pc, #736]	; (80071b8 <USB_EPStartXfer+0x74c>)
 8006ed6:	400a      	ands	r2, r1
 8006ed8:	601a      	str	r2, [r3, #0]
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	00db      	lsls	r3, r3, #3
 8006ee0:	4ab4      	ldr	r2, [pc, #720]	; (80071b4 <USB_EPStartXfer+0x748>)
 8006ee2:	4694      	mov	ip, r2
 8006ee4:	4463      	add	r3, ip
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	00db      	lsls	r3, r3, #3
 8006eee:	49b1      	ldr	r1, [pc, #708]	; (80071b4 <USB_EPStartXfer+0x748>)
 8006ef0:	468c      	mov	ip, r1
 8006ef2:	4463      	add	r3, ip
 8006ef4:	2180      	movs	r1, #128	; 0x80
 8006ef6:	0609      	lsls	r1, r1, #24
 8006ef8:	430a      	orrs	r2, r1
 8006efa:	601a      	str	r2, [r3, #0]
 8006efc:	e040      	b.n	8006f80 <USB_EPStartXfer+0x514>
 8006efe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f00:	085b      	lsrs	r3, r3, #1
 8006f02:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f06:	2201      	movs	r2, #1
 8006f08:	4013      	ands	r3, r2
 8006f0a:	d002      	beq.n	8006f12 <USB_EPStartXfer+0x4a6>
 8006f0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f0e:	3301      	adds	r3, #1
 8006f10:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	00db      	lsls	r3, r3, #3
 8006f18:	4aa6      	ldr	r2, [pc, #664]	; (80071b4 <USB_EPStartXfer+0x748>)
 8006f1a:	4694      	mov	ip, r2
 8006f1c:	4463      	add	r3, ip
 8006f1e:	6819      	ldr	r1, [r3, #0]
 8006f20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f22:	069a      	lsls	r2, r3, #26
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	00db      	lsls	r3, r3, #3
 8006f2a:	48a2      	ldr	r0, [pc, #648]	; (80071b4 <USB_EPStartXfer+0x748>)
 8006f2c:	4684      	mov	ip, r0
 8006f2e:	4463      	add	r3, ip
 8006f30:	430a      	orrs	r2, r1
 8006f32:	601a      	str	r2, [r3, #0]
 8006f34:	e024      	b.n	8006f80 <USB_EPStartXfer+0x514>
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	785b      	ldrb	r3, [r3, #1]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d120      	bne.n	8006f80 <USB_EPStartXfer+0x514>
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	00db      	lsls	r3, r3, #3
 8006f44:	4a9b      	ldr	r2, [pc, #620]	; (80071b4 <USB_EPStartXfer+0x748>)
 8006f46:	4694      	mov	ip, r2
 8006f48:	4463      	add	r3, ip
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	00db      	lsls	r3, r3, #3
 8006f52:	4998      	ldr	r1, [pc, #608]	; (80071b4 <USB_EPStartXfer+0x748>)
 8006f54:	468c      	mov	ip, r1
 8006f56:	4463      	add	r3, ip
 8006f58:	0412      	lsls	r2, r2, #16
 8006f5a:	0c12      	lsrs	r2, r2, #16
 8006f5c:	601a      	str	r2, [r3, #0]
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	00db      	lsls	r3, r3, #3
 8006f64:	4a93      	ldr	r2, [pc, #588]	; (80071b4 <USB_EPStartXfer+0x748>)
 8006f66:	4694      	mov	ip, r2
 8006f68:	4463      	add	r3, ip
 8006f6a:	6819      	ldr	r1, [r3, #0]
 8006f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f6e:	041a      	lsls	r2, r3, #16
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	00db      	lsls	r3, r3, #3
 8006f76:	488f      	ldr	r0, [pc, #572]	; (80071b4 <USB_EPStartXfer+0x748>)
 8006f78:	4684      	mov	ip, r0
 8006f7a:	4463      	add	r3, ip
 8006f7c:	430a      	orrs	r2, r1
 8006f7e:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006f80:	201a      	movs	r0, #26
 8006f82:	183b      	adds	r3, r7, r0
 8006f84:	683a      	ldr	r2, [r7, #0]
 8006f86:	88d2      	ldrh	r2, [r2, #6]
 8006f88:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	6959      	ldr	r1, [r3, #20]
 8006f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f90:	b29c      	uxth	r4, r3
 8006f92:	183b      	adds	r3, r7, r0
 8006f94:	881a      	ldrh	r2, [r3, #0]
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	0023      	movs	r3, r4
 8006f9a:	f000 ff3f 	bl	8007e1c <USB_WritePMA>
            ep->xfer_buff += len;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	695a      	ldr	r2, [r3, #20]
 8006fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fa4:	18d2      	adds	r2, r2, r3
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	6a1a      	ldr	r2, [r3, #32]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d906      	bls.n	8006fc4 <USB_EPStartXfer+0x558>
            {
              ep->xfer_len_db -= len;
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	6a1a      	ldr	r2, [r3, #32]
 8006fba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fbc:	1ad2      	subs	r2, r2, r3
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	621a      	str	r2, [r3, #32]
 8006fc2:	e005      	b.n	8006fd0 <USB_EPStartXfer+0x564>
            }
            else
            {
              len = ep->xfer_len_db;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	6a1b      	ldr	r3, [r3, #32]
 8006fc8:	657b      	str	r3, [r7, #84]	; 0x54
              ep->xfer_len_db = 0U;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	785b      	ldrb	r3, [r3, #1]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d172      	bne.n	80070be <USB_EPStartXfer+0x652>
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	00db      	lsls	r3, r3, #3
 8006fde:	4a75      	ldr	r2, [pc, #468]	; (80071b4 <USB_EPStartXfer+0x748>)
 8006fe0:	4694      	mov	ip, r2
 8006fe2:	4463      	add	r3, ip
 8006fe4:	685a      	ldr	r2, [r3, #4]
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	00db      	lsls	r3, r3, #3
 8006fec:	4971      	ldr	r1, [pc, #452]	; (80071b4 <USB_EPStartXfer+0x748>)
 8006fee:	468c      	mov	ip, r1
 8006ff0:	4463      	add	r3, ip
 8006ff2:	0412      	lsls	r2, r2, #16
 8006ff4:	0c12      	lsrs	r2, r2, #16
 8006ff6:	605a      	str	r2, [r3, #4]
 8006ff8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ffa:	2b3e      	cmp	r3, #62	; 0x3e
 8006ffc:	d91e      	bls.n	800703c <USB_EPStartXfer+0x5d0>
 8006ffe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007000:	095b      	lsrs	r3, r3, #5
 8007002:	647b      	str	r3, [r7, #68]	; 0x44
 8007004:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007006:	221f      	movs	r2, #31
 8007008:	4013      	ands	r3, r2
 800700a:	d102      	bne.n	8007012 <USB_EPStartXfer+0x5a6>
 800700c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800700e:	3b01      	subs	r3, #1
 8007010:	647b      	str	r3, [r7, #68]	; 0x44
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	00db      	lsls	r3, r3, #3
 8007018:	4a66      	ldr	r2, [pc, #408]	; (80071b4 <USB_EPStartXfer+0x748>)
 800701a:	4694      	mov	ip, r2
 800701c:	4463      	add	r3, ip
 800701e:	685a      	ldr	r2, [r3, #4]
 8007020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007022:	069b      	lsls	r3, r3, #26
 8007024:	431a      	orrs	r2, r3
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	00db      	lsls	r3, r3, #3
 800702c:	4961      	ldr	r1, [pc, #388]	; (80071b4 <USB_EPStartXfer+0x748>)
 800702e:	468c      	mov	ip, r1
 8007030:	4463      	add	r3, ip
 8007032:	2180      	movs	r1, #128	; 0x80
 8007034:	0609      	lsls	r1, r1, #24
 8007036:	430a      	orrs	r2, r1
 8007038:	605a      	str	r2, [r3, #4]
 800703a:	e065      	b.n	8007108 <USB_EPStartXfer+0x69c>
 800703c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800703e:	2b00      	cmp	r3, #0
 8007040:	d121      	bne.n	8007086 <USB_EPStartXfer+0x61a>
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	00db      	lsls	r3, r3, #3
 8007048:	4a5a      	ldr	r2, [pc, #360]	; (80071b4 <USB_EPStartXfer+0x748>)
 800704a:	4694      	mov	ip, r2
 800704c:	4463      	add	r3, ip
 800704e:	685a      	ldr	r2, [r3, #4]
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	00db      	lsls	r3, r3, #3
 8007056:	4957      	ldr	r1, [pc, #348]	; (80071b4 <USB_EPStartXfer+0x748>)
 8007058:	468c      	mov	ip, r1
 800705a:	4463      	add	r3, ip
 800705c:	4956      	ldr	r1, [pc, #344]	; (80071b8 <USB_EPStartXfer+0x74c>)
 800705e:	400a      	ands	r2, r1
 8007060:	605a      	str	r2, [r3, #4]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	00db      	lsls	r3, r3, #3
 8007068:	4a52      	ldr	r2, [pc, #328]	; (80071b4 <USB_EPStartXfer+0x748>)
 800706a:	4694      	mov	ip, r2
 800706c:	4463      	add	r3, ip
 800706e:	685a      	ldr	r2, [r3, #4]
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	00db      	lsls	r3, r3, #3
 8007076:	494f      	ldr	r1, [pc, #316]	; (80071b4 <USB_EPStartXfer+0x748>)
 8007078:	468c      	mov	ip, r1
 800707a:	4463      	add	r3, ip
 800707c:	2180      	movs	r1, #128	; 0x80
 800707e:	0609      	lsls	r1, r1, #24
 8007080:	430a      	orrs	r2, r1
 8007082:	605a      	str	r2, [r3, #4]
 8007084:	e040      	b.n	8007108 <USB_EPStartXfer+0x69c>
 8007086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007088:	085b      	lsrs	r3, r3, #1
 800708a:	647b      	str	r3, [r7, #68]	; 0x44
 800708c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800708e:	2201      	movs	r2, #1
 8007090:	4013      	ands	r3, r2
 8007092:	d002      	beq.n	800709a <USB_EPStartXfer+0x62e>
 8007094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007096:	3301      	adds	r3, #1
 8007098:	647b      	str	r3, [r7, #68]	; 0x44
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	00db      	lsls	r3, r3, #3
 80070a0:	4a44      	ldr	r2, [pc, #272]	; (80071b4 <USB_EPStartXfer+0x748>)
 80070a2:	4694      	mov	ip, r2
 80070a4:	4463      	add	r3, ip
 80070a6:	6859      	ldr	r1, [r3, #4]
 80070a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070aa:	069a      	lsls	r2, r3, #26
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	00db      	lsls	r3, r3, #3
 80070b2:	4840      	ldr	r0, [pc, #256]	; (80071b4 <USB_EPStartXfer+0x748>)
 80070b4:	4684      	mov	ip, r0
 80070b6:	4463      	add	r3, ip
 80070b8:	430a      	orrs	r2, r1
 80070ba:	605a      	str	r2, [r3, #4]
 80070bc:	e024      	b.n	8007108 <USB_EPStartXfer+0x69c>
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	785b      	ldrb	r3, [r3, #1]
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d120      	bne.n	8007108 <USB_EPStartXfer+0x69c>
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	00db      	lsls	r3, r3, #3
 80070cc:	4a39      	ldr	r2, [pc, #228]	; (80071b4 <USB_EPStartXfer+0x748>)
 80070ce:	4694      	mov	ip, r2
 80070d0:	4463      	add	r3, ip
 80070d2:	685a      	ldr	r2, [r3, #4]
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	00db      	lsls	r3, r3, #3
 80070da:	4936      	ldr	r1, [pc, #216]	; (80071b4 <USB_EPStartXfer+0x748>)
 80070dc:	468c      	mov	ip, r1
 80070de:	4463      	add	r3, ip
 80070e0:	0412      	lsls	r2, r2, #16
 80070e2:	0c12      	lsrs	r2, r2, #16
 80070e4:	605a      	str	r2, [r3, #4]
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	00db      	lsls	r3, r3, #3
 80070ec:	4a31      	ldr	r2, [pc, #196]	; (80071b4 <USB_EPStartXfer+0x748>)
 80070ee:	4694      	mov	ip, r2
 80070f0:	4463      	add	r3, ip
 80070f2:	6859      	ldr	r1, [r3, #4]
 80070f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070f6:	041a      	lsls	r2, r3, #16
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	00db      	lsls	r3, r3, #3
 80070fe:	482d      	ldr	r0, [pc, #180]	; (80071b4 <USB_EPStartXfer+0x748>)
 8007100:	4684      	mov	ip, r0
 8007102:	4463      	add	r3, ip
 8007104:	430a      	orrs	r2, r1
 8007106:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 8007108:	201a      	movs	r0, #26
 800710a:	183b      	adds	r3, r7, r0
 800710c:	683a      	ldr	r2, [r7, #0]
 800710e:	8912      	ldrh	r2, [r2, #8]
 8007110:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	6959      	ldr	r1, [r3, #20]
 8007116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007118:	b29c      	uxth	r4, r3
 800711a:	183b      	adds	r3, r7, r0
 800711c:	881a      	ldrh	r2, [r3, #0]
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	0023      	movs	r3, r4
 8007122:	f000 fe7b 	bl	8007e1c <USB_WritePMA>
 8007126:	e1b4      	b.n	8007492 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	6a1b      	ldr	r3, [r3, #32]
 800712c:	657b      	str	r3, [r7, #84]	; 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	18d3      	adds	r3, r2, r3
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a20      	ldr	r2, [pc, #128]	; (80071bc <USB_EPStartXfer+0x750>)
 800713c:	4013      	ands	r3, r2
 800713e:	617b      	str	r3, [r7, #20]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	18d3      	adds	r3, r2, r3
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	491c      	ldr	r1, [pc, #112]	; (80071c0 <USB_EPStartXfer+0x754>)
 800714e:	430a      	orrs	r2, r1
 8007150:	601a      	str	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	00db      	lsls	r3, r3, #3
 8007158:	4a16      	ldr	r2, [pc, #88]	; (80071b4 <USB_EPStartXfer+0x748>)
 800715a:	4694      	mov	ip, r2
 800715c:	4463      	add	r3, ip
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	00db      	lsls	r3, r3, #3
 8007166:	4913      	ldr	r1, [pc, #76]	; (80071b4 <USB_EPStartXfer+0x748>)
 8007168:	468c      	mov	ip, r1
 800716a:	4463      	add	r3, ip
 800716c:	0412      	lsls	r2, r2, #16
 800716e:	0c12      	lsrs	r2, r2, #16
 8007170:	601a      	str	r2, [r3, #0]
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	00db      	lsls	r3, r3, #3
 8007178:	4a0e      	ldr	r2, [pc, #56]	; (80071b4 <USB_EPStartXfer+0x748>)
 800717a:	4694      	mov	ip, r2
 800717c:	4463      	add	r3, ip
 800717e:	6819      	ldr	r1, [r3, #0]
 8007180:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007182:	041a      	lsls	r2, r3, #16
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	00db      	lsls	r3, r3, #3
 800718a:	480a      	ldr	r0, [pc, #40]	; (80071b4 <USB_EPStartXfer+0x748>)
 800718c:	4684      	mov	ip, r0
 800718e:	4463      	add	r3, ip
 8007190:	430a      	orrs	r2, r1
 8007192:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007194:	201a      	movs	r0, #26
 8007196:	183b      	adds	r3, r7, r0
 8007198:	683a      	ldr	r2, [r7, #0]
 800719a:	88d2      	ldrh	r2, [r2, #6]
 800719c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	6959      	ldr	r1, [r3, #20]
 80071a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071a4:	b29c      	uxth	r4, r3
 80071a6:	183b      	adds	r3, r7, r0
 80071a8:	881a      	ldrh	r2, [r3, #0]
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	0023      	movs	r3, r4
 80071ae:	f000 fe35 	bl	8007e1c <USB_WritePMA>
 80071b2:	e16e      	b.n	8007492 <USB_EPStartXfer+0xa26>
 80071b4:	40009800 	.word	0x40009800
 80071b8:	83ffffff 	.word	0x83ffffff
 80071bc:	07ff8e8f 	.word	0x07ff8e8f
 80071c0:	00008080 	.word	0x00008080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	6a1a      	ldr	r2, [r3, #32]
 80071c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071ca:	1ad2      	subs	r2, r2, r3
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	18d3      	adds	r3, r2, r3
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2240      	movs	r2, #64	; 0x40
 80071de:	4013      	ands	r3, r2
 80071e0:	d100      	bne.n	80071e4 <USB_EPStartXfer+0x778>
 80071e2:	e0ab      	b.n	800733c <USB_EPStartXfer+0x8d0>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	785b      	ldrb	r3, [r3, #1]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d172      	bne.n	80072d2 <USB_EPStartXfer+0x866>
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	00db      	lsls	r3, r3, #3
 80071f2:	4adc      	ldr	r2, [pc, #880]	; (8007564 <USB_EPStartXfer+0xaf8>)
 80071f4:	4694      	mov	ip, r2
 80071f6:	4463      	add	r3, ip
 80071f8:	685a      	ldr	r2, [r3, #4]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	00db      	lsls	r3, r3, #3
 8007200:	49d8      	ldr	r1, [pc, #864]	; (8007564 <USB_EPStartXfer+0xaf8>)
 8007202:	468c      	mov	ip, r1
 8007204:	4463      	add	r3, ip
 8007206:	0412      	lsls	r2, r2, #16
 8007208:	0c12      	lsrs	r2, r2, #16
 800720a:	605a      	str	r2, [r3, #4]
 800720c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800720e:	2b3e      	cmp	r3, #62	; 0x3e
 8007210:	d91e      	bls.n	8007250 <USB_EPStartXfer+0x7e4>
 8007212:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007214:	095b      	lsrs	r3, r3, #5
 8007216:	643b      	str	r3, [r7, #64]	; 0x40
 8007218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800721a:	221f      	movs	r2, #31
 800721c:	4013      	ands	r3, r2
 800721e:	d102      	bne.n	8007226 <USB_EPStartXfer+0x7ba>
 8007220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007222:	3b01      	subs	r3, #1
 8007224:	643b      	str	r3, [r7, #64]	; 0x40
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	00db      	lsls	r3, r3, #3
 800722c:	4acd      	ldr	r2, [pc, #820]	; (8007564 <USB_EPStartXfer+0xaf8>)
 800722e:	4694      	mov	ip, r2
 8007230:	4463      	add	r3, ip
 8007232:	685a      	ldr	r2, [r3, #4]
 8007234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007236:	069b      	lsls	r3, r3, #26
 8007238:	431a      	orrs	r2, r3
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	00db      	lsls	r3, r3, #3
 8007240:	49c8      	ldr	r1, [pc, #800]	; (8007564 <USB_EPStartXfer+0xaf8>)
 8007242:	468c      	mov	ip, r1
 8007244:	4463      	add	r3, ip
 8007246:	2180      	movs	r1, #128	; 0x80
 8007248:	0609      	lsls	r1, r1, #24
 800724a:	430a      	orrs	r2, r1
 800724c:	605a      	str	r2, [r3, #4]
 800724e:	e065      	b.n	800731c <USB_EPStartXfer+0x8b0>
 8007250:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007252:	2b00      	cmp	r3, #0
 8007254:	d121      	bne.n	800729a <USB_EPStartXfer+0x82e>
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	00db      	lsls	r3, r3, #3
 800725c:	4ac1      	ldr	r2, [pc, #772]	; (8007564 <USB_EPStartXfer+0xaf8>)
 800725e:	4694      	mov	ip, r2
 8007260:	4463      	add	r3, ip
 8007262:	685a      	ldr	r2, [r3, #4]
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	00db      	lsls	r3, r3, #3
 800726a:	49be      	ldr	r1, [pc, #760]	; (8007564 <USB_EPStartXfer+0xaf8>)
 800726c:	468c      	mov	ip, r1
 800726e:	4463      	add	r3, ip
 8007270:	49bd      	ldr	r1, [pc, #756]	; (8007568 <USB_EPStartXfer+0xafc>)
 8007272:	400a      	ands	r2, r1
 8007274:	605a      	str	r2, [r3, #4]
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	00db      	lsls	r3, r3, #3
 800727c:	4ab9      	ldr	r2, [pc, #740]	; (8007564 <USB_EPStartXfer+0xaf8>)
 800727e:	4694      	mov	ip, r2
 8007280:	4463      	add	r3, ip
 8007282:	685a      	ldr	r2, [r3, #4]
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	00db      	lsls	r3, r3, #3
 800728a:	49b6      	ldr	r1, [pc, #728]	; (8007564 <USB_EPStartXfer+0xaf8>)
 800728c:	468c      	mov	ip, r1
 800728e:	4463      	add	r3, ip
 8007290:	2180      	movs	r1, #128	; 0x80
 8007292:	0609      	lsls	r1, r1, #24
 8007294:	430a      	orrs	r2, r1
 8007296:	605a      	str	r2, [r3, #4]
 8007298:	e040      	b.n	800731c <USB_EPStartXfer+0x8b0>
 800729a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800729c:	085b      	lsrs	r3, r3, #1
 800729e:	643b      	str	r3, [r7, #64]	; 0x40
 80072a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072a2:	2201      	movs	r2, #1
 80072a4:	4013      	ands	r3, r2
 80072a6:	d002      	beq.n	80072ae <USB_EPStartXfer+0x842>
 80072a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072aa:	3301      	adds	r3, #1
 80072ac:	643b      	str	r3, [r7, #64]	; 0x40
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	00db      	lsls	r3, r3, #3
 80072b4:	4aab      	ldr	r2, [pc, #684]	; (8007564 <USB_EPStartXfer+0xaf8>)
 80072b6:	4694      	mov	ip, r2
 80072b8:	4463      	add	r3, ip
 80072ba:	6859      	ldr	r1, [r3, #4]
 80072bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072be:	069a      	lsls	r2, r3, #26
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	00db      	lsls	r3, r3, #3
 80072c6:	48a7      	ldr	r0, [pc, #668]	; (8007564 <USB_EPStartXfer+0xaf8>)
 80072c8:	4684      	mov	ip, r0
 80072ca:	4463      	add	r3, ip
 80072cc:	430a      	orrs	r2, r1
 80072ce:	605a      	str	r2, [r3, #4]
 80072d0:	e024      	b.n	800731c <USB_EPStartXfer+0x8b0>
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	785b      	ldrb	r3, [r3, #1]
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d120      	bne.n	800731c <USB_EPStartXfer+0x8b0>
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	00db      	lsls	r3, r3, #3
 80072e0:	4aa0      	ldr	r2, [pc, #640]	; (8007564 <USB_EPStartXfer+0xaf8>)
 80072e2:	4694      	mov	ip, r2
 80072e4:	4463      	add	r3, ip
 80072e6:	685a      	ldr	r2, [r3, #4]
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	00db      	lsls	r3, r3, #3
 80072ee:	499d      	ldr	r1, [pc, #628]	; (8007564 <USB_EPStartXfer+0xaf8>)
 80072f0:	468c      	mov	ip, r1
 80072f2:	4463      	add	r3, ip
 80072f4:	0412      	lsls	r2, r2, #16
 80072f6:	0c12      	lsrs	r2, r2, #16
 80072f8:	605a      	str	r2, [r3, #4]
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	00db      	lsls	r3, r3, #3
 8007300:	4a98      	ldr	r2, [pc, #608]	; (8007564 <USB_EPStartXfer+0xaf8>)
 8007302:	4694      	mov	ip, r2
 8007304:	4463      	add	r3, ip
 8007306:	6859      	ldr	r1, [r3, #4]
 8007308:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800730a:	041a      	lsls	r2, r3, #16
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	00db      	lsls	r3, r3, #3
 8007312:	4894      	ldr	r0, [pc, #592]	; (8007564 <USB_EPStartXfer+0xaf8>)
 8007314:	4684      	mov	ip, r0
 8007316:	4463      	add	r3, ip
 8007318:	430a      	orrs	r2, r1
 800731a:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800731c:	201a      	movs	r0, #26
 800731e:	183b      	adds	r3, r7, r0
 8007320:	683a      	ldr	r2, [r7, #0]
 8007322:	8912      	ldrh	r2, [r2, #8]
 8007324:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	6959      	ldr	r1, [r3, #20]
 800732a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800732c:	b29c      	uxth	r4, r3
 800732e:	183b      	adds	r3, r7, r0
 8007330:	881a      	ldrh	r2, [r3, #0]
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	0023      	movs	r3, r4
 8007336:	f000 fd71 	bl	8007e1c <USB_WritePMA>
 800733a:	e0aa      	b.n	8007492 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	785b      	ldrb	r3, [r3, #1]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d172      	bne.n	800742a <USB_EPStartXfer+0x9be>
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	00db      	lsls	r3, r3, #3
 800734a:	4a86      	ldr	r2, [pc, #536]	; (8007564 <USB_EPStartXfer+0xaf8>)
 800734c:	4694      	mov	ip, r2
 800734e:	4463      	add	r3, ip
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	00db      	lsls	r3, r3, #3
 8007358:	4982      	ldr	r1, [pc, #520]	; (8007564 <USB_EPStartXfer+0xaf8>)
 800735a:	468c      	mov	ip, r1
 800735c:	4463      	add	r3, ip
 800735e:	0412      	lsls	r2, r2, #16
 8007360:	0c12      	lsrs	r2, r2, #16
 8007362:	601a      	str	r2, [r3, #0]
 8007364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007366:	2b3e      	cmp	r3, #62	; 0x3e
 8007368:	d91e      	bls.n	80073a8 <USB_EPStartXfer+0x93c>
 800736a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800736c:	095b      	lsrs	r3, r3, #5
 800736e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007370:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007372:	221f      	movs	r2, #31
 8007374:	4013      	ands	r3, r2
 8007376:	d102      	bne.n	800737e <USB_EPStartXfer+0x912>
 8007378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800737a:	3b01      	subs	r3, #1
 800737c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	00db      	lsls	r3, r3, #3
 8007384:	4a77      	ldr	r2, [pc, #476]	; (8007564 <USB_EPStartXfer+0xaf8>)
 8007386:	4694      	mov	ip, r2
 8007388:	4463      	add	r3, ip
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800738e:	069b      	lsls	r3, r3, #26
 8007390:	431a      	orrs	r2, r3
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	00db      	lsls	r3, r3, #3
 8007398:	4972      	ldr	r1, [pc, #456]	; (8007564 <USB_EPStartXfer+0xaf8>)
 800739a:	468c      	mov	ip, r1
 800739c:	4463      	add	r3, ip
 800739e:	2180      	movs	r1, #128	; 0x80
 80073a0:	0609      	lsls	r1, r1, #24
 80073a2:	430a      	orrs	r2, r1
 80073a4:	601a      	str	r2, [r3, #0]
 80073a6:	e065      	b.n	8007474 <USB_EPStartXfer+0xa08>
 80073a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d121      	bne.n	80073f2 <USB_EPStartXfer+0x986>
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	00db      	lsls	r3, r3, #3
 80073b4:	4a6b      	ldr	r2, [pc, #428]	; (8007564 <USB_EPStartXfer+0xaf8>)
 80073b6:	4694      	mov	ip, r2
 80073b8:	4463      	add	r3, ip
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	00db      	lsls	r3, r3, #3
 80073c2:	4968      	ldr	r1, [pc, #416]	; (8007564 <USB_EPStartXfer+0xaf8>)
 80073c4:	468c      	mov	ip, r1
 80073c6:	4463      	add	r3, ip
 80073c8:	4967      	ldr	r1, [pc, #412]	; (8007568 <USB_EPStartXfer+0xafc>)
 80073ca:	400a      	ands	r2, r1
 80073cc:	601a      	str	r2, [r3, #0]
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	00db      	lsls	r3, r3, #3
 80073d4:	4a63      	ldr	r2, [pc, #396]	; (8007564 <USB_EPStartXfer+0xaf8>)
 80073d6:	4694      	mov	ip, r2
 80073d8:	4463      	add	r3, ip
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	00db      	lsls	r3, r3, #3
 80073e2:	4960      	ldr	r1, [pc, #384]	; (8007564 <USB_EPStartXfer+0xaf8>)
 80073e4:	468c      	mov	ip, r1
 80073e6:	4463      	add	r3, ip
 80073e8:	2180      	movs	r1, #128	; 0x80
 80073ea:	0609      	lsls	r1, r1, #24
 80073ec:	430a      	orrs	r2, r1
 80073ee:	601a      	str	r2, [r3, #0]
 80073f0:	e040      	b.n	8007474 <USB_EPStartXfer+0xa08>
 80073f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073f4:	085b      	lsrs	r3, r3, #1
 80073f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073fa:	2201      	movs	r2, #1
 80073fc:	4013      	ands	r3, r2
 80073fe:	d002      	beq.n	8007406 <USB_EPStartXfer+0x99a>
 8007400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007402:	3301      	adds	r3, #1
 8007404:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	00db      	lsls	r3, r3, #3
 800740c:	4a55      	ldr	r2, [pc, #340]	; (8007564 <USB_EPStartXfer+0xaf8>)
 800740e:	4694      	mov	ip, r2
 8007410:	4463      	add	r3, ip
 8007412:	6819      	ldr	r1, [r3, #0]
 8007414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007416:	069a      	lsls	r2, r3, #26
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	00db      	lsls	r3, r3, #3
 800741e:	4851      	ldr	r0, [pc, #324]	; (8007564 <USB_EPStartXfer+0xaf8>)
 8007420:	4684      	mov	ip, r0
 8007422:	4463      	add	r3, ip
 8007424:	430a      	orrs	r2, r1
 8007426:	601a      	str	r2, [r3, #0]
 8007428:	e024      	b.n	8007474 <USB_EPStartXfer+0xa08>
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	785b      	ldrb	r3, [r3, #1]
 800742e:	2b01      	cmp	r3, #1
 8007430:	d120      	bne.n	8007474 <USB_EPStartXfer+0xa08>
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	00db      	lsls	r3, r3, #3
 8007438:	4a4a      	ldr	r2, [pc, #296]	; (8007564 <USB_EPStartXfer+0xaf8>)
 800743a:	4694      	mov	ip, r2
 800743c:	4463      	add	r3, ip
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	00db      	lsls	r3, r3, #3
 8007446:	4947      	ldr	r1, [pc, #284]	; (8007564 <USB_EPStartXfer+0xaf8>)
 8007448:	468c      	mov	ip, r1
 800744a:	4463      	add	r3, ip
 800744c:	0412      	lsls	r2, r2, #16
 800744e:	0c12      	lsrs	r2, r2, #16
 8007450:	601a      	str	r2, [r3, #0]
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	00db      	lsls	r3, r3, #3
 8007458:	4a42      	ldr	r2, [pc, #264]	; (8007564 <USB_EPStartXfer+0xaf8>)
 800745a:	4694      	mov	ip, r2
 800745c:	4463      	add	r3, ip
 800745e:	6819      	ldr	r1, [r3, #0]
 8007460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007462:	041a      	lsls	r2, r3, #16
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	00db      	lsls	r3, r3, #3
 800746a:	483e      	ldr	r0, [pc, #248]	; (8007564 <USB_EPStartXfer+0xaf8>)
 800746c:	4684      	mov	ip, r0
 800746e:	4463      	add	r3, ip
 8007470:	430a      	orrs	r2, r1
 8007472:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007474:	201a      	movs	r0, #26
 8007476:	183b      	adds	r3, r7, r0
 8007478:	683a      	ldr	r2, [r7, #0]
 800747a:	88d2      	ldrh	r2, [r2, #6]
 800747c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	6959      	ldr	r1, [r3, #20]
 8007482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007484:	b29c      	uxth	r4, r3
 8007486:	183b      	adds	r3, r7, r0
 8007488:	881a      	ldrh	r2, [r3, #0]
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	0023      	movs	r3, r4
 800748e:	f000 fcc5 	bl	8007e1c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	18d3      	adds	r3, r2, r3
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a33      	ldr	r2, [pc, #204]	; (800756c <USB_EPStartXfer+0xb00>)
 80074a0:	4013      	ands	r3, r2
 80074a2:	60fb      	str	r3, [r7, #12]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2210      	movs	r2, #16
 80074a8:	4053      	eors	r3, r2
 80074aa:	60fb      	str	r3, [r7, #12]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2220      	movs	r2, #32
 80074b0:	4053      	eors	r3, r2
 80074b2:	60fb      	str	r3, [r7, #12]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	18d3      	adds	r3, r2, r3
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	492b      	ldr	r1, [pc, #172]	; (8007570 <USB_EPStartXfer+0xb04>)
 80074c2:	430a      	orrs	r2, r1
 80074c4:	601a      	str	r2, [r3, #0]
 80074c6:	f000 fb97 	bl	8007bf8 <USB_EPStartXfer+0x118c>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	7a9b      	ldrb	r3, [r3, #10]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d000      	beq.n	80074d4 <USB_EPStartXfer+0xa68>
 80074d2:	e090      	b.n	80075f6 <USB_EPStartXfer+0xb8a>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	699a      	ldr	r2, [r3, #24]
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d909      	bls.n	80074f4 <USB_EPStartXfer+0xa88>
      {
        len = ep->maxpacket;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	657b      	str	r3, [r7, #84]	; 0x54
        ep->xfer_len -= len;
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	699a      	ldr	r2, [r3, #24]
 80074ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074ec:	1ad2      	subs	r2, r2, r3
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	619a      	str	r2, [r3, #24]
 80074f2:	e005      	b.n	8007500 <USB_EPStartXfer+0xa94>
      }
      else
      {
        len = ep->xfer_len;
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	699b      	ldr	r3, [r3, #24]
 80074f8:	657b      	str	r3, [r7, #84]	; 0x54
        ep->xfer_len = 0U;
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	2200      	movs	r2, #0
 80074fe:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	00db      	lsls	r3, r3, #3
 8007506:	4a17      	ldr	r2, [pc, #92]	; (8007564 <USB_EPStartXfer+0xaf8>)
 8007508:	4694      	mov	ip, r2
 800750a:	4463      	add	r3, ip
 800750c:	685a      	ldr	r2, [r3, #4]
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	00db      	lsls	r3, r3, #3
 8007514:	4913      	ldr	r1, [pc, #76]	; (8007564 <USB_EPStartXfer+0xaf8>)
 8007516:	468c      	mov	ip, r1
 8007518:	4463      	add	r3, ip
 800751a:	0412      	lsls	r2, r2, #16
 800751c:	0c12      	lsrs	r2, r2, #16
 800751e:	605a      	str	r2, [r3, #4]
 8007520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007522:	2b3e      	cmp	r3, #62	; 0x3e
 8007524:	d926      	bls.n	8007574 <USB_EPStartXfer+0xb08>
 8007526:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007528:	095b      	lsrs	r3, r3, #5
 800752a:	63bb      	str	r3, [r7, #56]	; 0x38
 800752c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800752e:	221f      	movs	r2, #31
 8007530:	4013      	ands	r3, r2
 8007532:	d102      	bne.n	800753a <USB_EPStartXfer+0xace>
 8007534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007536:	3b01      	subs	r3, #1
 8007538:	63bb      	str	r3, [r7, #56]	; 0x38
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	00db      	lsls	r3, r3, #3
 8007540:	4a08      	ldr	r2, [pc, #32]	; (8007564 <USB_EPStartXfer+0xaf8>)
 8007542:	4694      	mov	ip, r2
 8007544:	4463      	add	r3, ip
 8007546:	685a      	ldr	r2, [r3, #4]
 8007548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754a:	069b      	lsls	r3, r3, #26
 800754c:	431a      	orrs	r2, r3
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	00db      	lsls	r3, r3, #3
 8007554:	4903      	ldr	r1, [pc, #12]	; (8007564 <USB_EPStartXfer+0xaf8>)
 8007556:	468c      	mov	ip, r1
 8007558:	4463      	add	r3, ip
 800755a:	2180      	movs	r1, #128	; 0x80
 800755c:	0609      	lsls	r1, r1, #24
 800755e:	430a      	orrs	r2, r1
 8007560:	605a      	str	r2, [r3, #4]
 8007562:	e32d      	b.n	8007bc0 <USB_EPStartXfer+0x1154>
 8007564:	40009800 	.word	0x40009800
 8007568:	83ffffff 	.word	0x83ffffff
 800756c:	07ff8fbf 	.word	0x07ff8fbf
 8007570:	00008080 	.word	0x00008080
 8007574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007576:	2b00      	cmp	r3, #0
 8007578:	d121      	bne.n	80075be <USB_EPStartXfer+0xb52>
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	00db      	lsls	r3, r3, #3
 8007580:	4ae0      	ldr	r2, [pc, #896]	; (8007904 <USB_EPStartXfer+0xe98>)
 8007582:	4694      	mov	ip, r2
 8007584:	4463      	add	r3, ip
 8007586:	685a      	ldr	r2, [r3, #4]
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	00db      	lsls	r3, r3, #3
 800758e:	49dd      	ldr	r1, [pc, #884]	; (8007904 <USB_EPStartXfer+0xe98>)
 8007590:	468c      	mov	ip, r1
 8007592:	4463      	add	r3, ip
 8007594:	49dc      	ldr	r1, [pc, #880]	; (8007908 <USB_EPStartXfer+0xe9c>)
 8007596:	400a      	ands	r2, r1
 8007598:	605a      	str	r2, [r3, #4]
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	00db      	lsls	r3, r3, #3
 80075a0:	4ad8      	ldr	r2, [pc, #864]	; (8007904 <USB_EPStartXfer+0xe98>)
 80075a2:	4694      	mov	ip, r2
 80075a4:	4463      	add	r3, ip
 80075a6:	685a      	ldr	r2, [r3, #4]
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	00db      	lsls	r3, r3, #3
 80075ae:	49d5      	ldr	r1, [pc, #852]	; (8007904 <USB_EPStartXfer+0xe98>)
 80075b0:	468c      	mov	ip, r1
 80075b2:	4463      	add	r3, ip
 80075b4:	2180      	movs	r1, #128	; 0x80
 80075b6:	0609      	lsls	r1, r1, #24
 80075b8:	430a      	orrs	r2, r1
 80075ba:	605a      	str	r2, [r3, #4]
 80075bc:	e300      	b.n	8007bc0 <USB_EPStartXfer+0x1154>
 80075be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075c0:	085b      	lsrs	r3, r3, #1
 80075c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80075c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075c6:	2201      	movs	r2, #1
 80075c8:	4013      	ands	r3, r2
 80075ca:	d002      	beq.n	80075d2 <USB_EPStartXfer+0xb66>
 80075cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ce:	3301      	adds	r3, #1
 80075d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	00db      	lsls	r3, r3, #3
 80075d8:	4aca      	ldr	r2, [pc, #808]	; (8007904 <USB_EPStartXfer+0xe98>)
 80075da:	4694      	mov	ip, r2
 80075dc:	4463      	add	r3, ip
 80075de:	6859      	ldr	r1, [r3, #4]
 80075e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e2:	069a      	lsls	r2, r3, #26
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	00db      	lsls	r3, r3, #3
 80075ea:	48c6      	ldr	r0, [pc, #792]	; (8007904 <USB_EPStartXfer+0xe98>)
 80075ec:	4684      	mov	ip, r0
 80075ee:	4463      	add	r3, ip
 80075f0:	430a      	orrs	r2, r1
 80075f2:	605a      	str	r2, [r3, #4]
 80075f4:	e2e4      	b.n	8007bc0 <USB_EPStartXfer+0x1154>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	78db      	ldrb	r3, [r3, #3]
 80075fa:	2b02      	cmp	r3, #2
 80075fc:	d000      	beq.n	8007600 <USB_EPStartXfer+0xb94>
 80075fe:	e189      	b.n	8007914 <USB_EPStartXfer+0xea8>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	785b      	ldrb	r3, [r3, #1]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d000      	beq.n	800760a <USB_EPStartXfer+0xb9e>
 8007608:	e078      	b.n	80076fc <USB_EPStartXfer+0xc90>
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	00db      	lsls	r3, r3, #3
 8007610:	4abc      	ldr	r2, [pc, #752]	; (8007904 <USB_EPStartXfer+0xe98>)
 8007612:	4694      	mov	ip, r2
 8007614:	4463      	add	r3, ip
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	00db      	lsls	r3, r3, #3
 800761e:	49b9      	ldr	r1, [pc, #740]	; (8007904 <USB_EPStartXfer+0xe98>)
 8007620:	468c      	mov	ip, r1
 8007622:	4463      	add	r3, ip
 8007624:	0412      	lsls	r2, r2, #16
 8007626:	0c12      	lsrs	r2, r2, #16
 8007628:	601a      	str	r2, [r3, #0]
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	2b3e      	cmp	r3, #62	; 0x3e
 8007630:	d920      	bls.n	8007674 <USB_EPStartXfer+0xc08>
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	095b      	lsrs	r3, r3, #5
 8007638:	637b      	str	r3, [r7, #52]	; 0x34
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	221f      	movs	r2, #31
 8007640:	4013      	ands	r3, r2
 8007642:	d102      	bne.n	800764a <USB_EPStartXfer+0xbde>
 8007644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007646:	3b01      	subs	r3, #1
 8007648:	637b      	str	r3, [r7, #52]	; 0x34
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	00db      	lsls	r3, r3, #3
 8007650:	4aac      	ldr	r2, [pc, #688]	; (8007904 <USB_EPStartXfer+0xe98>)
 8007652:	4694      	mov	ip, r2
 8007654:	4463      	add	r3, ip
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800765a:	069b      	lsls	r3, r3, #26
 800765c:	431a      	orrs	r2, r3
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	00db      	lsls	r3, r3, #3
 8007664:	49a7      	ldr	r1, [pc, #668]	; (8007904 <USB_EPStartXfer+0xe98>)
 8007666:	468c      	mov	ip, r1
 8007668:	4463      	add	r3, ip
 800766a:	2180      	movs	r1, #128	; 0x80
 800766c:	0609      	lsls	r1, r1, #24
 800766e:	430a      	orrs	r2, r1
 8007670:	601a      	str	r2, [r3, #0]
 8007672:	e069      	b.n	8007748 <USB_EPStartXfer+0xcdc>
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d121      	bne.n	80076c0 <USB_EPStartXfer+0xc54>
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	00db      	lsls	r3, r3, #3
 8007682:	4aa0      	ldr	r2, [pc, #640]	; (8007904 <USB_EPStartXfer+0xe98>)
 8007684:	4694      	mov	ip, r2
 8007686:	4463      	add	r3, ip
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	00db      	lsls	r3, r3, #3
 8007690:	499c      	ldr	r1, [pc, #624]	; (8007904 <USB_EPStartXfer+0xe98>)
 8007692:	468c      	mov	ip, r1
 8007694:	4463      	add	r3, ip
 8007696:	499c      	ldr	r1, [pc, #624]	; (8007908 <USB_EPStartXfer+0xe9c>)
 8007698:	400a      	ands	r2, r1
 800769a:	601a      	str	r2, [r3, #0]
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	00db      	lsls	r3, r3, #3
 80076a2:	4a98      	ldr	r2, [pc, #608]	; (8007904 <USB_EPStartXfer+0xe98>)
 80076a4:	4694      	mov	ip, r2
 80076a6:	4463      	add	r3, ip
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	00db      	lsls	r3, r3, #3
 80076b0:	4994      	ldr	r1, [pc, #592]	; (8007904 <USB_EPStartXfer+0xe98>)
 80076b2:	468c      	mov	ip, r1
 80076b4:	4463      	add	r3, ip
 80076b6:	2180      	movs	r1, #128	; 0x80
 80076b8:	0609      	lsls	r1, r1, #24
 80076ba:	430a      	orrs	r2, r1
 80076bc:	601a      	str	r2, [r3, #0]
 80076be:	e043      	b.n	8007748 <USB_EPStartXfer+0xcdc>
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	085b      	lsrs	r3, r3, #1
 80076c6:	637b      	str	r3, [r7, #52]	; 0x34
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	2201      	movs	r2, #1
 80076ce:	4013      	ands	r3, r2
 80076d0:	d002      	beq.n	80076d8 <USB_EPStartXfer+0xc6c>
 80076d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076d4:	3301      	adds	r3, #1
 80076d6:	637b      	str	r3, [r7, #52]	; 0x34
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	00db      	lsls	r3, r3, #3
 80076de:	4a89      	ldr	r2, [pc, #548]	; (8007904 <USB_EPStartXfer+0xe98>)
 80076e0:	4694      	mov	ip, r2
 80076e2:	4463      	add	r3, ip
 80076e4:	6819      	ldr	r1, [r3, #0]
 80076e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076e8:	069a      	lsls	r2, r3, #26
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	00db      	lsls	r3, r3, #3
 80076f0:	4884      	ldr	r0, [pc, #528]	; (8007904 <USB_EPStartXfer+0xe98>)
 80076f2:	4684      	mov	ip, r0
 80076f4:	4463      	add	r3, ip
 80076f6:	430a      	orrs	r2, r1
 80076f8:	601a      	str	r2, [r3, #0]
 80076fa:	e025      	b.n	8007748 <USB_EPStartXfer+0xcdc>
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	785b      	ldrb	r3, [r3, #1]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d121      	bne.n	8007748 <USB_EPStartXfer+0xcdc>
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	00db      	lsls	r3, r3, #3
 800770a:	4a7e      	ldr	r2, [pc, #504]	; (8007904 <USB_EPStartXfer+0xe98>)
 800770c:	4694      	mov	ip, r2
 800770e:	4463      	add	r3, ip
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	00db      	lsls	r3, r3, #3
 8007718:	497a      	ldr	r1, [pc, #488]	; (8007904 <USB_EPStartXfer+0xe98>)
 800771a:	468c      	mov	ip, r1
 800771c:	4463      	add	r3, ip
 800771e:	0412      	lsls	r2, r2, #16
 8007720:	0c12      	lsrs	r2, r2, #16
 8007722:	601a      	str	r2, [r3, #0]
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	00db      	lsls	r3, r3, #3
 800772a:	4a76      	ldr	r2, [pc, #472]	; (8007904 <USB_EPStartXfer+0xe98>)
 800772c:	4694      	mov	ip, r2
 800772e:	4463      	add	r3, ip
 8007730:	6819      	ldr	r1, [r3, #0]
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	041a      	lsls	r2, r3, #16
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	00db      	lsls	r3, r3, #3
 800773e:	4871      	ldr	r0, [pc, #452]	; (8007904 <USB_EPStartXfer+0xe98>)
 8007740:	4684      	mov	ip, r0
 8007742:	4463      	add	r3, ip
 8007744:	430a      	orrs	r2, r1
 8007746:	601a      	str	r2, [r3, #0]
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	785b      	ldrb	r3, [r3, #1]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d000      	beq.n	8007752 <USB_EPStartXfer+0xce6>
 8007750:	e078      	b.n	8007844 <USB_EPStartXfer+0xdd8>
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	00db      	lsls	r3, r3, #3
 8007758:	4a6a      	ldr	r2, [pc, #424]	; (8007904 <USB_EPStartXfer+0xe98>)
 800775a:	4694      	mov	ip, r2
 800775c:	4463      	add	r3, ip
 800775e:	685a      	ldr	r2, [r3, #4]
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	00db      	lsls	r3, r3, #3
 8007766:	4967      	ldr	r1, [pc, #412]	; (8007904 <USB_EPStartXfer+0xe98>)
 8007768:	468c      	mov	ip, r1
 800776a:	4463      	add	r3, ip
 800776c:	0412      	lsls	r2, r2, #16
 800776e:	0c12      	lsrs	r2, r2, #16
 8007770:	605a      	str	r2, [r3, #4]
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	2b3e      	cmp	r3, #62	; 0x3e
 8007778:	d920      	bls.n	80077bc <USB_EPStartXfer+0xd50>
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	095b      	lsrs	r3, r3, #5
 8007780:	633b      	str	r3, [r7, #48]	; 0x30
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	221f      	movs	r2, #31
 8007788:	4013      	ands	r3, r2
 800778a:	d102      	bne.n	8007792 <USB_EPStartXfer+0xd26>
 800778c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778e:	3b01      	subs	r3, #1
 8007790:	633b      	str	r3, [r7, #48]	; 0x30
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	00db      	lsls	r3, r3, #3
 8007798:	4a5a      	ldr	r2, [pc, #360]	; (8007904 <USB_EPStartXfer+0xe98>)
 800779a:	4694      	mov	ip, r2
 800779c:	4463      	add	r3, ip
 800779e:	685a      	ldr	r2, [r3, #4]
 80077a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a2:	069b      	lsls	r3, r3, #26
 80077a4:	431a      	orrs	r2, r3
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	00db      	lsls	r3, r3, #3
 80077ac:	4955      	ldr	r1, [pc, #340]	; (8007904 <USB_EPStartXfer+0xe98>)
 80077ae:	468c      	mov	ip, r1
 80077b0:	4463      	add	r3, ip
 80077b2:	2180      	movs	r1, #128	; 0x80
 80077b4:	0609      	lsls	r1, r1, #24
 80077b6:	430a      	orrs	r2, r1
 80077b8:	605a      	str	r2, [r3, #4]
 80077ba:	e069      	b.n	8007890 <USB_EPStartXfer+0xe24>
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	691b      	ldr	r3, [r3, #16]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d121      	bne.n	8007808 <USB_EPStartXfer+0xd9c>
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	00db      	lsls	r3, r3, #3
 80077ca:	4a4e      	ldr	r2, [pc, #312]	; (8007904 <USB_EPStartXfer+0xe98>)
 80077cc:	4694      	mov	ip, r2
 80077ce:	4463      	add	r3, ip
 80077d0:	685a      	ldr	r2, [r3, #4]
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	00db      	lsls	r3, r3, #3
 80077d8:	494a      	ldr	r1, [pc, #296]	; (8007904 <USB_EPStartXfer+0xe98>)
 80077da:	468c      	mov	ip, r1
 80077dc:	4463      	add	r3, ip
 80077de:	494a      	ldr	r1, [pc, #296]	; (8007908 <USB_EPStartXfer+0xe9c>)
 80077e0:	400a      	ands	r2, r1
 80077e2:	605a      	str	r2, [r3, #4]
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	00db      	lsls	r3, r3, #3
 80077ea:	4a46      	ldr	r2, [pc, #280]	; (8007904 <USB_EPStartXfer+0xe98>)
 80077ec:	4694      	mov	ip, r2
 80077ee:	4463      	add	r3, ip
 80077f0:	685a      	ldr	r2, [r3, #4]
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	00db      	lsls	r3, r3, #3
 80077f8:	4942      	ldr	r1, [pc, #264]	; (8007904 <USB_EPStartXfer+0xe98>)
 80077fa:	468c      	mov	ip, r1
 80077fc:	4463      	add	r3, ip
 80077fe:	2180      	movs	r1, #128	; 0x80
 8007800:	0609      	lsls	r1, r1, #24
 8007802:	430a      	orrs	r2, r1
 8007804:	605a      	str	r2, [r3, #4]
 8007806:	e043      	b.n	8007890 <USB_EPStartXfer+0xe24>
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	085b      	lsrs	r3, r3, #1
 800780e:	633b      	str	r3, [r7, #48]	; 0x30
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	691b      	ldr	r3, [r3, #16]
 8007814:	2201      	movs	r2, #1
 8007816:	4013      	ands	r3, r2
 8007818:	d002      	beq.n	8007820 <USB_EPStartXfer+0xdb4>
 800781a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781c:	3301      	adds	r3, #1
 800781e:	633b      	str	r3, [r7, #48]	; 0x30
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	00db      	lsls	r3, r3, #3
 8007826:	4a37      	ldr	r2, [pc, #220]	; (8007904 <USB_EPStartXfer+0xe98>)
 8007828:	4694      	mov	ip, r2
 800782a:	4463      	add	r3, ip
 800782c:	6859      	ldr	r1, [r3, #4]
 800782e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007830:	069a      	lsls	r2, r3, #26
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	00db      	lsls	r3, r3, #3
 8007838:	4832      	ldr	r0, [pc, #200]	; (8007904 <USB_EPStartXfer+0xe98>)
 800783a:	4684      	mov	ip, r0
 800783c:	4463      	add	r3, ip
 800783e:	430a      	orrs	r2, r1
 8007840:	605a      	str	r2, [r3, #4]
 8007842:	e025      	b.n	8007890 <USB_EPStartXfer+0xe24>
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	785b      	ldrb	r3, [r3, #1]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d121      	bne.n	8007890 <USB_EPStartXfer+0xe24>
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	00db      	lsls	r3, r3, #3
 8007852:	4a2c      	ldr	r2, [pc, #176]	; (8007904 <USB_EPStartXfer+0xe98>)
 8007854:	4694      	mov	ip, r2
 8007856:	4463      	add	r3, ip
 8007858:	685a      	ldr	r2, [r3, #4]
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	00db      	lsls	r3, r3, #3
 8007860:	4928      	ldr	r1, [pc, #160]	; (8007904 <USB_EPStartXfer+0xe98>)
 8007862:	468c      	mov	ip, r1
 8007864:	4463      	add	r3, ip
 8007866:	0412      	lsls	r2, r2, #16
 8007868:	0c12      	lsrs	r2, r2, #16
 800786a:	605a      	str	r2, [r3, #4]
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	00db      	lsls	r3, r3, #3
 8007872:	4a24      	ldr	r2, [pc, #144]	; (8007904 <USB_EPStartXfer+0xe98>)
 8007874:	4694      	mov	ip, r2
 8007876:	4463      	add	r3, ip
 8007878:	6859      	ldr	r1, [r3, #4]
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	041a      	lsls	r2, r3, #16
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	00db      	lsls	r3, r3, #3
 8007886:	481f      	ldr	r0, [pc, #124]	; (8007904 <USB_EPStartXfer+0xe98>)
 8007888:	4684      	mov	ip, r0
 800788a:	4463      	add	r3, ip
 800788c:	430a      	orrs	r2, r1
 800788e:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	69db      	ldr	r3, [r3, #28]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d100      	bne.n	800789a <USB_EPStartXfer+0xe2e>
 8007898:	e192      	b.n	8007bc0 <USB_EPStartXfer+0x1154>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	18d3      	adds	r3, r2, r3
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	2126      	movs	r1, #38	; 0x26
 80078a8:	187b      	adds	r3, r7, r1
 80078aa:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80078ac:	187b      	adds	r3, r7, r1
 80078ae:	881a      	ldrh	r2, [r3, #0]
 80078b0:	2380      	movs	r3, #128	; 0x80
 80078b2:	01db      	lsls	r3, r3, #7
 80078b4:	4013      	ands	r3, r2
 80078b6:	d004      	beq.n	80078c2 <USB_EPStartXfer+0xe56>
 80078b8:	187b      	adds	r3, r7, r1
 80078ba:	881b      	ldrh	r3, [r3, #0]
 80078bc:	2240      	movs	r2, #64	; 0x40
 80078be:	4013      	ands	r3, r2
 80078c0:	d10d      	bne.n	80078de <USB_EPStartXfer+0xe72>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80078c2:	2126      	movs	r1, #38	; 0x26
 80078c4:	187b      	adds	r3, r7, r1
 80078c6:	881a      	ldrh	r2, [r3, #0]
 80078c8:	2380      	movs	r3, #128	; 0x80
 80078ca:	01db      	lsls	r3, r3, #7
 80078cc:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80078ce:	d000      	beq.n	80078d2 <USB_EPStartXfer+0xe66>
 80078d0:	e176      	b.n	8007bc0 <USB_EPStartXfer+0x1154>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80078d2:	187b      	adds	r3, r7, r1
 80078d4:	881b      	ldrh	r3, [r3, #0]
 80078d6:	2240      	movs	r2, #64	; 0x40
 80078d8:	4013      	ands	r3, r2
 80078da:	d000      	beq.n	80078de <USB_EPStartXfer+0xe72>
 80078dc:	e170      	b.n	8007bc0 <USB_EPStartXfer+0x1154>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	18d3      	adds	r3, r2, r3
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a08      	ldr	r2, [pc, #32]	; (800790c <USB_EPStartXfer+0xea0>)
 80078ec:	4013      	ands	r3, r2
 80078ee:	623b      	str	r3, [r7, #32]
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	18d3      	adds	r3, r2, r3
 80078fa:	6a3a      	ldr	r2, [r7, #32]
 80078fc:	4904      	ldr	r1, [pc, #16]	; (8007910 <USB_EPStartXfer+0xea4>)
 80078fe:	430a      	orrs	r2, r1
 8007900:	601a      	str	r2, [r3, #0]
 8007902:	e15d      	b.n	8007bc0 <USB_EPStartXfer+0x1154>
 8007904:	40009800 	.word	0x40009800
 8007908:	83ffffff 	.word	0x83ffffff
 800790c:	07ff8f8f 	.word	0x07ff8f8f
 8007910:	000080c0 	.word	0x000080c0
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	78db      	ldrb	r3, [r3, #3]
 8007918:	2b01      	cmp	r3, #1
 800791a:	d000      	beq.n	800791e <USB_EPStartXfer+0xeb2>
 800791c:	e14e      	b.n	8007bbc <USB_EPStartXfer+0x1150>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	699a      	ldr	r2, [r3, #24]
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	429a      	cmp	r2, r3
 8007928:	d909      	bls.n	800793e <USB_EPStartXfer+0xed2>
        {
          len = ep->maxpacket;
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	657b      	str	r3, [r7, #84]	; 0x54
          ep->xfer_len -= len;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	699a      	ldr	r2, [r3, #24]
 8007934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007936:	1ad2      	subs	r2, r2, r3
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	619a      	str	r2, [r3, #24]
 800793c:	e005      	b.n	800794a <USB_EPStartXfer+0xede>
        }
        else
        {
          len = ep->xfer_len;
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	699b      	ldr	r3, [r3, #24]
 8007942:	657b      	str	r3, [r7, #84]	; 0x54
          ep->xfer_len = 0U;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	2200      	movs	r2, #0
 8007948:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	785b      	ldrb	r3, [r3, #1]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d172      	bne.n	8007a38 <USB_EPStartXfer+0xfcc>
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	00db      	lsls	r3, r3, #3
 8007958:	4aaa      	ldr	r2, [pc, #680]	; (8007c04 <USB_EPStartXfer+0x1198>)
 800795a:	4694      	mov	ip, r2
 800795c:	4463      	add	r3, ip
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	00db      	lsls	r3, r3, #3
 8007966:	49a7      	ldr	r1, [pc, #668]	; (8007c04 <USB_EPStartXfer+0x1198>)
 8007968:	468c      	mov	ip, r1
 800796a:	4463      	add	r3, ip
 800796c:	0412      	lsls	r2, r2, #16
 800796e:	0c12      	lsrs	r2, r2, #16
 8007970:	601a      	str	r2, [r3, #0]
 8007972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007974:	2b3e      	cmp	r3, #62	; 0x3e
 8007976:	d91e      	bls.n	80079b6 <USB_EPStartXfer+0xf4a>
 8007978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800797a:	095b      	lsrs	r3, r3, #5
 800797c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800797e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007980:	221f      	movs	r2, #31
 8007982:	4013      	ands	r3, r2
 8007984:	d102      	bne.n	800798c <USB_EPStartXfer+0xf20>
 8007986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007988:	3b01      	subs	r3, #1
 800798a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	00db      	lsls	r3, r3, #3
 8007992:	4a9c      	ldr	r2, [pc, #624]	; (8007c04 <USB_EPStartXfer+0x1198>)
 8007994:	4694      	mov	ip, r2
 8007996:	4463      	add	r3, ip
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799c:	069b      	lsls	r3, r3, #26
 800799e:	431a      	orrs	r2, r3
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	00db      	lsls	r3, r3, #3
 80079a6:	4997      	ldr	r1, [pc, #604]	; (8007c04 <USB_EPStartXfer+0x1198>)
 80079a8:	468c      	mov	ip, r1
 80079aa:	4463      	add	r3, ip
 80079ac:	2180      	movs	r1, #128	; 0x80
 80079ae:	0609      	lsls	r1, r1, #24
 80079b0:	430a      	orrs	r2, r1
 80079b2:	601a      	str	r2, [r3, #0]
 80079b4:	e065      	b.n	8007a82 <USB_EPStartXfer+0x1016>
 80079b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d121      	bne.n	8007a00 <USB_EPStartXfer+0xf94>
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	00db      	lsls	r3, r3, #3
 80079c2:	4a90      	ldr	r2, [pc, #576]	; (8007c04 <USB_EPStartXfer+0x1198>)
 80079c4:	4694      	mov	ip, r2
 80079c6:	4463      	add	r3, ip
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	00db      	lsls	r3, r3, #3
 80079d0:	498c      	ldr	r1, [pc, #560]	; (8007c04 <USB_EPStartXfer+0x1198>)
 80079d2:	468c      	mov	ip, r1
 80079d4:	4463      	add	r3, ip
 80079d6:	498c      	ldr	r1, [pc, #560]	; (8007c08 <USB_EPStartXfer+0x119c>)
 80079d8:	400a      	ands	r2, r1
 80079da:	601a      	str	r2, [r3, #0]
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	00db      	lsls	r3, r3, #3
 80079e2:	4a88      	ldr	r2, [pc, #544]	; (8007c04 <USB_EPStartXfer+0x1198>)
 80079e4:	4694      	mov	ip, r2
 80079e6:	4463      	add	r3, ip
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	00db      	lsls	r3, r3, #3
 80079f0:	4984      	ldr	r1, [pc, #528]	; (8007c04 <USB_EPStartXfer+0x1198>)
 80079f2:	468c      	mov	ip, r1
 80079f4:	4463      	add	r3, ip
 80079f6:	2180      	movs	r1, #128	; 0x80
 80079f8:	0609      	lsls	r1, r1, #24
 80079fa:	430a      	orrs	r2, r1
 80079fc:	601a      	str	r2, [r3, #0]
 80079fe:	e040      	b.n	8007a82 <USB_EPStartXfer+0x1016>
 8007a00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a02:	085b      	lsrs	r3, r3, #1
 8007a04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a08:	2201      	movs	r2, #1
 8007a0a:	4013      	ands	r3, r2
 8007a0c:	d002      	beq.n	8007a14 <USB_EPStartXfer+0xfa8>
 8007a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a10:	3301      	adds	r3, #1
 8007a12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	00db      	lsls	r3, r3, #3
 8007a1a:	4a7a      	ldr	r2, [pc, #488]	; (8007c04 <USB_EPStartXfer+0x1198>)
 8007a1c:	4694      	mov	ip, r2
 8007a1e:	4463      	add	r3, ip
 8007a20:	6819      	ldr	r1, [r3, #0]
 8007a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a24:	069a      	lsls	r2, r3, #26
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	00db      	lsls	r3, r3, #3
 8007a2c:	4875      	ldr	r0, [pc, #468]	; (8007c04 <USB_EPStartXfer+0x1198>)
 8007a2e:	4684      	mov	ip, r0
 8007a30:	4463      	add	r3, ip
 8007a32:	430a      	orrs	r2, r1
 8007a34:	601a      	str	r2, [r3, #0]
 8007a36:	e024      	b.n	8007a82 <USB_EPStartXfer+0x1016>
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	785b      	ldrb	r3, [r3, #1]
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d120      	bne.n	8007a82 <USB_EPStartXfer+0x1016>
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	00db      	lsls	r3, r3, #3
 8007a46:	4a6f      	ldr	r2, [pc, #444]	; (8007c04 <USB_EPStartXfer+0x1198>)
 8007a48:	4694      	mov	ip, r2
 8007a4a:	4463      	add	r3, ip
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	00db      	lsls	r3, r3, #3
 8007a54:	496b      	ldr	r1, [pc, #428]	; (8007c04 <USB_EPStartXfer+0x1198>)
 8007a56:	468c      	mov	ip, r1
 8007a58:	4463      	add	r3, ip
 8007a5a:	0412      	lsls	r2, r2, #16
 8007a5c:	0c12      	lsrs	r2, r2, #16
 8007a5e:	601a      	str	r2, [r3, #0]
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	00db      	lsls	r3, r3, #3
 8007a66:	4a67      	ldr	r2, [pc, #412]	; (8007c04 <USB_EPStartXfer+0x1198>)
 8007a68:	4694      	mov	ip, r2
 8007a6a:	4463      	add	r3, ip
 8007a6c:	6819      	ldr	r1, [r3, #0]
 8007a6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a70:	041a      	lsls	r2, r3, #16
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	00db      	lsls	r3, r3, #3
 8007a78:	4862      	ldr	r0, [pc, #392]	; (8007c04 <USB_EPStartXfer+0x1198>)
 8007a7a:	4684      	mov	ip, r0
 8007a7c:	4463      	add	r3, ip
 8007a7e:	430a      	orrs	r2, r1
 8007a80:	601a      	str	r2, [r3, #0]
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	785b      	ldrb	r3, [r3, #1]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d172      	bne.n	8007b70 <USB_EPStartXfer+0x1104>
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	00db      	lsls	r3, r3, #3
 8007a90:	4a5c      	ldr	r2, [pc, #368]	; (8007c04 <USB_EPStartXfer+0x1198>)
 8007a92:	4694      	mov	ip, r2
 8007a94:	4463      	add	r3, ip
 8007a96:	685a      	ldr	r2, [r3, #4]
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	00db      	lsls	r3, r3, #3
 8007a9e:	4959      	ldr	r1, [pc, #356]	; (8007c04 <USB_EPStartXfer+0x1198>)
 8007aa0:	468c      	mov	ip, r1
 8007aa2:	4463      	add	r3, ip
 8007aa4:	0412      	lsls	r2, r2, #16
 8007aa6:	0c12      	lsrs	r2, r2, #16
 8007aa8:	605a      	str	r2, [r3, #4]
 8007aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007aac:	2b3e      	cmp	r3, #62	; 0x3e
 8007aae:	d91e      	bls.n	8007aee <USB_EPStartXfer+0x1082>
 8007ab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ab2:	095b      	lsrs	r3, r3, #5
 8007ab4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ab8:	221f      	movs	r2, #31
 8007aba:	4013      	ands	r3, r2
 8007abc:	d102      	bne.n	8007ac4 <USB_EPStartXfer+0x1058>
 8007abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac0:	3b01      	subs	r3, #1
 8007ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	00db      	lsls	r3, r3, #3
 8007aca:	4a4e      	ldr	r2, [pc, #312]	; (8007c04 <USB_EPStartXfer+0x1198>)
 8007acc:	4694      	mov	ip, r2
 8007ace:	4463      	add	r3, ip
 8007ad0:	685a      	ldr	r2, [r3, #4]
 8007ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad4:	069b      	lsls	r3, r3, #26
 8007ad6:	431a      	orrs	r2, r3
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	00db      	lsls	r3, r3, #3
 8007ade:	4949      	ldr	r1, [pc, #292]	; (8007c04 <USB_EPStartXfer+0x1198>)
 8007ae0:	468c      	mov	ip, r1
 8007ae2:	4463      	add	r3, ip
 8007ae4:	2180      	movs	r1, #128	; 0x80
 8007ae6:	0609      	lsls	r1, r1, #24
 8007ae8:	430a      	orrs	r2, r1
 8007aea:	605a      	str	r2, [r3, #4]
 8007aec:	e068      	b.n	8007bc0 <USB_EPStartXfer+0x1154>
 8007aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d121      	bne.n	8007b38 <USB_EPStartXfer+0x10cc>
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	00db      	lsls	r3, r3, #3
 8007afa:	4a42      	ldr	r2, [pc, #264]	; (8007c04 <USB_EPStartXfer+0x1198>)
 8007afc:	4694      	mov	ip, r2
 8007afe:	4463      	add	r3, ip
 8007b00:	685a      	ldr	r2, [r3, #4]
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	00db      	lsls	r3, r3, #3
 8007b08:	493e      	ldr	r1, [pc, #248]	; (8007c04 <USB_EPStartXfer+0x1198>)
 8007b0a:	468c      	mov	ip, r1
 8007b0c:	4463      	add	r3, ip
 8007b0e:	493e      	ldr	r1, [pc, #248]	; (8007c08 <USB_EPStartXfer+0x119c>)
 8007b10:	400a      	ands	r2, r1
 8007b12:	605a      	str	r2, [r3, #4]
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	00db      	lsls	r3, r3, #3
 8007b1a:	4a3a      	ldr	r2, [pc, #232]	; (8007c04 <USB_EPStartXfer+0x1198>)
 8007b1c:	4694      	mov	ip, r2
 8007b1e:	4463      	add	r3, ip
 8007b20:	685a      	ldr	r2, [r3, #4]
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	00db      	lsls	r3, r3, #3
 8007b28:	4936      	ldr	r1, [pc, #216]	; (8007c04 <USB_EPStartXfer+0x1198>)
 8007b2a:	468c      	mov	ip, r1
 8007b2c:	4463      	add	r3, ip
 8007b2e:	2180      	movs	r1, #128	; 0x80
 8007b30:	0609      	lsls	r1, r1, #24
 8007b32:	430a      	orrs	r2, r1
 8007b34:	605a      	str	r2, [r3, #4]
 8007b36:	e043      	b.n	8007bc0 <USB_EPStartXfer+0x1154>
 8007b38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b3a:	085b      	lsrs	r3, r3, #1
 8007b3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b40:	2201      	movs	r2, #1
 8007b42:	4013      	ands	r3, r2
 8007b44:	d002      	beq.n	8007b4c <USB_EPStartXfer+0x10e0>
 8007b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b48:	3301      	adds	r3, #1
 8007b4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	00db      	lsls	r3, r3, #3
 8007b52:	4a2c      	ldr	r2, [pc, #176]	; (8007c04 <USB_EPStartXfer+0x1198>)
 8007b54:	4694      	mov	ip, r2
 8007b56:	4463      	add	r3, ip
 8007b58:	6859      	ldr	r1, [r3, #4]
 8007b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5c:	069a      	lsls	r2, r3, #26
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	00db      	lsls	r3, r3, #3
 8007b64:	4827      	ldr	r0, [pc, #156]	; (8007c04 <USB_EPStartXfer+0x1198>)
 8007b66:	4684      	mov	ip, r0
 8007b68:	4463      	add	r3, ip
 8007b6a:	430a      	orrs	r2, r1
 8007b6c:	605a      	str	r2, [r3, #4]
 8007b6e:	e027      	b.n	8007bc0 <USB_EPStartXfer+0x1154>
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	785b      	ldrb	r3, [r3, #1]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d123      	bne.n	8007bc0 <USB_EPStartXfer+0x1154>
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	00db      	lsls	r3, r3, #3
 8007b7e:	4a21      	ldr	r2, [pc, #132]	; (8007c04 <USB_EPStartXfer+0x1198>)
 8007b80:	4694      	mov	ip, r2
 8007b82:	4463      	add	r3, ip
 8007b84:	685a      	ldr	r2, [r3, #4]
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	00db      	lsls	r3, r3, #3
 8007b8c:	491d      	ldr	r1, [pc, #116]	; (8007c04 <USB_EPStartXfer+0x1198>)
 8007b8e:	468c      	mov	ip, r1
 8007b90:	4463      	add	r3, ip
 8007b92:	0412      	lsls	r2, r2, #16
 8007b94:	0c12      	lsrs	r2, r2, #16
 8007b96:	605a      	str	r2, [r3, #4]
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	00db      	lsls	r3, r3, #3
 8007b9e:	4a19      	ldr	r2, [pc, #100]	; (8007c04 <USB_EPStartXfer+0x1198>)
 8007ba0:	4694      	mov	ip, r2
 8007ba2:	4463      	add	r3, ip
 8007ba4:	6859      	ldr	r1, [r3, #4]
 8007ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ba8:	041a      	lsls	r2, r3, #16
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	00db      	lsls	r3, r3, #3
 8007bb0:	4814      	ldr	r0, [pc, #80]	; (8007c04 <USB_EPStartXfer+0x1198>)
 8007bb2:	4684      	mov	ip, r0
 8007bb4:	4463      	add	r3, ip
 8007bb6:	430a      	orrs	r2, r1
 8007bb8:	605a      	str	r2, [r3, #4]
 8007bba:	e001      	b.n	8007bc0 <USB_EPStartXfer+0x1154>
      }
      else
      {
        return HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e01c      	b.n	8007bfa <USB_EPStartXfer+0x118e>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	18d3      	adds	r3, r2, r3
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a0f      	ldr	r2, [pc, #60]	; (8007c0c <USB_EPStartXfer+0x11a0>)
 8007bce:	4013      	ands	r3, r2
 8007bd0:	61fb      	str	r3, [r7, #28]
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	2280      	movs	r2, #128	; 0x80
 8007bd6:	0152      	lsls	r2, r2, #5
 8007bd8:	4053      	eors	r3, r2
 8007bda:	61fb      	str	r3, [r7, #28]
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	2280      	movs	r2, #128	; 0x80
 8007be0:	0192      	lsls	r2, r2, #6
 8007be2:	4053      	eors	r3, r2
 8007be4:	61fb      	str	r3, [r7, #28]
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	18d3      	adds	r3, r2, r3
 8007bf0:	69fa      	ldr	r2, [r7, #28]
 8007bf2:	4907      	ldr	r1, [pc, #28]	; (8007c10 <USB_EPStartXfer+0x11a4>)
 8007bf4:	430a      	orrs	r2, r1
 8007bf6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	0018      	movs	r0, r3
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	b017      	add	sp, #92	; 0x5c
 8007c00:	bd90      	pop	{r4, r7, pc}
 8007c02:	46c0      	nop			; (mov r8, r8)
 8007c04:	40009800 	.word	0x40009800
 8007c08:	83ffffff 	.word	0x83ffffff
 8007c0c:	07ffbf8f 	.word	0x07ffbf8f
 8007c10:	00008080 	.word	0x00008080

08007c14 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	785b      	ldrb	r3, [r3, #1]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d016      	beq.n	8007c54 <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	18d3      	adds	r3, r2, r3
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a16      	ldr	r2, [pc, #88]	; (8007c8c <USB_EPSetStall+0x78>)
 8007c34:	4013      	ands	r3, r2
 8007c36:	60bb      	str	r3, [r7, #8]
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	2210      	movs	r2, #16
 8007c3c:	4053      	eors	r3, r2
 8007c3e:	60bb      	str	r3, [r7, #8]
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	18d3      	adds	r3, r2, r3
 8007c4a:	68ba      	ldr	r2, [r7, #8]
 8007c4c:	4910      	ldr	r1, [pc, #64]	; (8007c90 <USB_EPSetStall+0x7c>)
 8007c4e:	430a      	orrs	r2, r1
 8007c50:	601a      	str	r2, [r3, #0]
 8007c52:	e016      	b.n	8007c82 <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	18d3      	adds	r3, r2, r3
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a0c      	ldr	r2, [pc, #48]	; (8007c94 <USB_EPSetStall+0x80>)
 8007c62:	4013      	ands	r3, r2
 8007c64:	60fb      	str	r3, [r7, #12]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2280      	movs	r2, #128	; 0x80
 8007c6a:	0152      	lsls	r2, r2, #5
 8007c6c:	4053      	eors	r3, r2
 8007c6e:	60fb      	str	r3, [r7, #12]
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	18d3      	adds	r3, r2, r3
 8007c7a:	68fa      	ldr	r2, [r7, #12]
 8007c7c:	4904      	ldr	r1, [pc, #16]	; (8007c90 <USB_EPSetStall+0x7c>)
 8007c7e:	430a      	orrs	r2, r1
 8007c80:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007c82:	2300      	movs	r3, #0
}
 8007c84:	0018      	movs	r0, r3
 8007c86:	46bd      	mov	sp, r7
 8007c88:	b004      	add	sp, #16
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	07ff8fbf 	.word	0x07ff8fbf
 8007c90:	00008080 	.word	0x00008080
 8007c94:	07ffbf8f 	.word	0x07ffbf8f

08007c98 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b088      	sub	sp, #32
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	7a9b      	ldrb	r3, [r3, #10]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d000      	beq.n	8007cac <USB_EPClearStall+0x14>
 8007caa:	e075      	b.n	8007d98 <USB_EPClearStall+0x100>
  {
    if (ep->is_in != 0U)
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	785b      	ldrb	r3, [r3, #1]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d037      	beq.n	8007d24 <USB_EPClearStall+0x8c>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	18d3      	adds	r3, r2, r3
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	613b      	str	r3, [r7, #16]
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	2240      	movs	r2, #64	; 0x40
 8007cc6:	4013      	ands	r3, r2
 8007cc8:	d011      	beq.n	8007cee <USB_EPClearStall+0x56>
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	18d3      	adds	r3, r2, r3
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a33      	ldr	r2, [pc, #204]	; (8007da4 <USB_EPClearStall+0x10c>)
 8007cd8:	4013      	ands	r3, r2
 8007cda:	60fb      	str	r3, [r7, #12]
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	18d3      	adds	r3, r2, r3
 8007ce6:	68fa      	ldr	r2, [r7, #12]
 8007ce8:	492f      	ldr	r1, [pc, #188]	; (8007da8 <USB_EPClearStall+0x110>)
 8007cea:	430a      	orrs	r2, r1
 8007cec:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	78db      	ldrb	r3, [r3, #3]
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d050      	beq.n	8007d98 <USB_EPClearStall+0x100>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	18d3      	adds	r3, r2, r3
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a2a      	ldr	r2, [pc, #168]	; (8007dac <USB_EPClearStall+0x114>)
 8007d04:	4013      	ands	r3, r2
 8007d06:	60bb      	str	r3, [r7, #8]
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	2220      	movs	r2, #32
 8007d0c:	4053      	eors	r3, r2
 8007d0e:	60bb      	str	r3, [r7, #8]
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	18d3      	adds	r3, r2, r3
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	4924      	ldr	r1, [pc, #144]	; (8007db0 <USB_EPClearStall+0x118>)
 8007d1e:	430a      	orrs	r2, r1
 8007d20:	601a      	str	r2, [r3, #0]
 8007d22:	e039      	b.n	8007d98 <USB_EPClearStall+0x100>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	18d3      	adds	r3, r2, r3
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	61fb      	str	r3, [r7, #28]
 8007d32:	69fa      	ldr	r2, [r7, #28]
 8007d34:	2380      	movs	r3, #128	; 0x80
 8007d36:	01db      	lsls	r3, r3, #7
 8007d38:	4013      	ands	r3, r2
 8007d3a:	d011      	beq.n	8007d60 <USB_EPClearStall+0xc8>
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	18d3      	adds	r3, r2, r3
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a16      	ldr	r2, [pc, #88]	; (8007da4 <USB_EPClearStall+0x10c>)
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	61bb      	str	r3, [r7, #24]
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	18d3      	adds	r3, r2, r3
 8007d58:	69ba      	ldr	r2, [r7, #24]
 8007d5a:	4916      	ldr	r1, [pc, #88]	; (8007db4 <USB_EPClearStall+0x11c>)
 8007d5c:	430a      	orrs	r2, r1
 8007d5e:	601a      	str	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	18d3      	adds	r3, r2, r3
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a12      	ldr	r2, [pc, #72]	; (8007db8 <USB_EPClearStall+0x120>)
 8007d6e:	4013      	ands	r3, r2
 8007d70:	617b      	str	r3, [r7, #20]
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	2280      	movs	r2, #128	; 0x80
 8007d76:	0152      	lsls	r2, r2, #5
 8007d78:	4053      	eors	r3, r2
 8007d7a:	617b      	str	r3, [r7, #20]
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	2280      	movs	r2, #128	; 0x80
 8007d80:	0192      	lsls	r2, r2, #6
 8007d82:	4053      	eors	r3, r2
 8007d84:	617b      	str	r3, [r7, #20]
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	18d3      	adds	r3, r2, r3
 8007d90:	697a      	ldr	r2, [r7, #20]
 8007d92:	4907      	ldr	r1, [pc, #28]	; (8007db0 <USB_EPClearStall+0x118>)
 8007d94:	430a      	orrs	r2, r1
 8007d96:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	0018      	movs	r0, r3
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	b008      	add	sp, #32
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	46c0      	nop			; (mov r8, r8)
 8007da4:	07ff8f8f 	.word	0x07ff8f8f
 8007da8:	000080c0 	.word	0x000080c0
 8007dac:	07ff8fbf 	.word	0x07ff8fbf
 8007db0:	00008080 	.word	0x00008080
 8007db4:	0000c080 	.word	0x0000c080
 8007db8:	07ffbf8f 	.word	0x07ffbf8f

08007dbc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	000a      	movs	r2, r1
 8007dc6:	1cfb      	adds	r3, r7, #3
 8007dc8:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8007dca:	1cfb      	adds	r3, r7, #3
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d102      	bne.n	8007dd8 <USB_SetDevAddress+0x1c>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2280      	movs	r2, #128	; 0x80
 8007dd6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	0018      	movs	r0, r3
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	b002      	add	sp, #8
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b082      	sub	sp, #8
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dee:	2280      	movs	r2, #128	; 0x80
 8007df0:	0212      	lsls	r2, r2, #8
 8007df2:	431a      	orrs	r2, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	0018      	movs	r0, r3
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	b002      	add	sp, #8
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef *USBx)
{
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b084      	sub	sp, #16
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e0e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007e10:	68fb      	ldr	r3, [r7, #12]
}
 8007e12:	0018      	movs	r0, r3
 8007e14:	46bd      	mov	sp, r7
 8007e16:	b004      	add	sp, #16
 8007e18:	bd80      	pop	{r7, pc}
	...

08007e1c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b08a      	sub	sp, #40	; 0x28
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	0019      	movs	r1, r3
 8007e28:	1dbb      	adds	r3, r7, #6
 8007e2a:	801a      	strh	r2, [r3, #0]
 8007e2c:	1d3b      	adds	r3, r7, #4
 8007e2e:	1c0a      	adds	r2, r1, #0
 8007e30:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8007e32:	1d3b      	adds	r3, r7, #4
 8007e34:	881b      	ldrh	r3, [r3, #0]
 8007e36:	3303      	adds	r3, #3
 8007e38:	089b      	lsrs	r3, r3, #2
 8007e3a:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8007e3c:	2016      	movs	r0, #22
 8007e3e:	183b      	adds	r3, r7, r0
 8007e40:	1d3a      	adds	r2, r7, #4
 8007e42:	8812      	ldrh	r2, [r2, #0]
 8007e44:	2103      	movs	r1, #3
 8007e46:	400a      	ands	r2, r1
 8007e48:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 8007e4e:	183b      	adds	r3, r7, r0
 8007e50:	881b      	ldrh	r3, [r3, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d002      	beq.n	8007e5c <USB_WritePMA+0x40>
  {
    NbWords--;
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8007e5c:	1dbb      	adds	r3, r7, #6
 8007e5e:	881b      	ldrh	r3, [r3, #0]
 8007e60:	4a28      	ldr	r2, [pc, #160]	; (8007f04 <USB_WritePMA+0xe8>)
 8007e62:	4694      	mov	ip, r2
 8007e64:	4463      	add	r3, ip
 8007e66:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	623b      	str	r3, [r7, #32]
 8007e6c:	e01f      	b.n	8007eae <USB_WritePMA+0x92>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	781a      	ldrb	r2, [r3, #0]
 8007e72:	7859      	ldrb	r1, [r3, #1]
 8007e74:	0209      	lsls	r1, r1, #8
 8007e76:	430a      	orrs	r2, r1
 8007e78:	7899      	ldrb	r1, [r3, #2]
 8007e7a:	0409      	lsls	r1, r1, #16
 8007e7c:	430a      	orrs	r2, r1
 8007e7e:	78db      	ldrb	r3, [r3, #3]
 8007e80:	061b      	lsls	r3, r3, #24
 8007e82:	4313      	orrs	r3, r2
 8007e84:	001a      	movs	r2, r3
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	601a      	str	r2, [r3, #0]
    pdwVal++;
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	3304      	adds	r3, #4
 8007e8e:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	3301      	adds	r3, #1
 8007e94:	613b      	str	r3, [r7, #16]
    pBuf++;
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	613b      	str	r3, [r7, #16]
    pBuf++;
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	613b      	str	r3, [r7, #16]
    pBuf++;
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 8007ea8:	6a3b      	ldr	r3, [r7, #32]
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	623b      	str	r3, [r7, #32]
 8007eae:	6a3b      	ldr	r3, [r7, #32]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d1dc      	bne.n	8007e6e <USB_WritePMA+0x52>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 8007eb4:	2316      	movs	r3, #22
 8007eb6:	18fb      	adds	r3, r7, r3
 8007eb8:	881b      	ldrh	r3, [r3, #0]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d01e      	beq.n	8007efc <USB_WritePMA+0xe0>
  {
    WrVal = 0U;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	627b      	str	r3, [r7, #36]	; 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	001a      	movs	r2, r3
 8007ec8:	6a3b      	ldr	r3, [r7, #32]
 8007eca:	00db      	lsls	r3, r3, #3
 8007ecc:	409a      	lsls	r2, r3
 8007ece:	0013      	movs	r3, r2
 8007ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	627b      	str	r3, [r7, #36]	; 0x24
      count++;
 8007ed6:	6a3b      	ldr	r3, [r7, #32]
 8007ed8:	3301      	adds	r3, #1
 8007eda:	623b      	str	r3, [r7, #32]
      pBuf++;
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	3301      	adds	r3, #1
 8007ee0:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 8007ee2:	2116      	movs	r1, #22
 8007ee4:	187b      	adds	r3, r7, r1
 8007ee6:	881a      	ldrh	r2, [r3, #0]
 8007ee8:	187b      	adds	r3, r7, r1
 8007eea:	3a01      	subs	r2, #1
 8007eec:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 8007eee:	187b      	adds	r3, r7, r1
 8007ef0:	881b      	ldrh	r3, [r3, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d1e5      	bne.n	8007ec2 <USB_WritePMA+0xa6>

    *pdwVal = WrVal;
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007efa:	601a      	str	r2, [r3, #0]
  }
}
 8007efc:	46c0      	nop			; (mov r8, r8)
 8007efe:	46bd      	mov	sp, r7
 8007f00:	b00a      	add	sp, #40	; 0x28
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	40009800 	.word	0x40009800

08007f08 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007f08:	b590      	push	{r4, r7, lr}
 8007f0a:	b08b      	sub	sp, #44	; 0x2c
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	0019      	movs	r1, r3
 8007f14:	1dbb      	adds	r3, r7, #6
 8007f16:	801a      	strh	r2, [r3, #0]
 8007f18:	1d3b      	adds	r3, r7, #4
 8007f1a:	1c0a      	adds	r2, r1, #0
 8007f1c:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8007f1e:	1d3b      	adds	r3, r7, #4
 8007f20:	881b      	ldrh	r3, [r3, #0]
 8007f22:	3303      	adds	r3, #3
 8007f24:	089b      	lsrs	r3, r3, #2
 8007f26:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8007f28:	201a      	movs	r0, #26
 8007f2a:	183b      	adds	r3, r7, r0
 8007f2c:	1d3a      	adds	r2, r7, #4
 8007f2e:	8812      	ldrh	r2, [r2, #0]
 8007f30:	2103      	movs	r1, #3
 8007f32:	400a      	ands	r2, r1
 8007f34:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8007f3a:	1dbb      	adds	r3, r7, #6
 8007f3c:	881b      	ldrh	r3, [r3, #0]
 8007f3e:	4a39      	ldr	r2, [pc, #228]	; (8008024 <USB_ReadPMA+0x11c>)
 8007f40:	4694      	mov	ip, r2
 8007f42:	4463      	add	r3, ip
 8007f44:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 8007f46:	183b      	adds	r3, r7, r0
 8007f48:	881b      	ldrh	r3, [r3, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d002      	beq.n	8007f54 <USB_ReadPMA+0x4c>
  {
    NbWords--;
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	3b01      	subs	r3, #1
 8007f52:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	627b      	str	r3, [r7, #36]	; 0x24
 8007f58:	e03c      	b.n	8007fd4 <USB_ReadPMA+0xcc>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 8007f5a:	6a3b      	ldr	r3, [r7, #32]
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	21ff      	movs	r1, #255	; 0xff
 8007f62:	4011      	ands	r1, r2
 8007f64:	000c      	movs	r4, r1
 8007f66:	7819      	ldrb	r1, [r3, #0]
 8007f68:	2000      	movs	r0, #0
 8007f6a:	4001      	ands	r1, r0
 8007f6c:	1c08      	adds	r0, r1, #0
 8007f6e:	1c21      	adds	r1, r4, #0
 8007f70:	4301      	orrs	r1, r0
 8007f72:	7019      	strb	r1, [r3, #0]
 8007f74:	0a11      	lsrs	r1, r2, #8
 8007f76:	20ff      	movs	r0, #255	; 0xff
 8007f78:	4001      	ands	r1, r0
 8007f7a:	000c      	movs	r4, r1
 8007f7c:	7859      	ldrb	r1, [r3, #1]
 8007f7e:	2000      	movs	r0, #0
 8007f80:	4001      	ands	r1, r0
 8007f82:	1c08      	adds	r0, r1, #0
 8007f84:	1c21      	adds	r1, r4, #0
 8007f86:	4301      	orrs	r1, r0
 8007f88:	7059      	strb	r1, [r3, #1]
 8007f8a:	0c11      	lsrs	r1, r2, #16
 8007f8c:	20ff      	movs	r0, #255	; 0xff
 8007f8e:	4001      	ands	r1, r0
 8007f90:	000c      	movs	r4, r1
 8007f92:	7899      	ldrb	r1, [r3, #2]
 8007f94:	2000      	movs	r0, #0
 8007f96:	4001      	ands	r1, r0
 8007f98:	1c08      	adds	r0, r1, #0
 8007f9a:	1c21      	adds	r1, r4, #0
 8007f9c:	4301      	orrs	r1, r0
 8007f9e:	7099      	strb	r1, [r3, #2]
 8007fa0:	0e10      	lsrs	r0, r2, #24
 8007fa2:	78da      	ldrb	r2, [r3, #3]
 8007fa4:	2100      	movs	r1, #0
 8007fa6:	400a      	ands	r2, r1
 8007fa8:	1c11      	adds	r1, r2, #0
 8007faa:	1c02      	adds	r2, r0, #0
 8007fac:	430a      	orrs	r2, r1
 8007fae:	70da      	strb	r2, [r3, #3]

    pdwVal++;
 8007fb0:	6a3b      	ldr	r3, [r7, #32]
 8007fb2:	3304      	adds	r3, #4
 8007fb4:	623b      	str	r3, [r7, #32]
    pBuf++;
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	617b      	str	r3, [r7, #20]
    pBuf++;
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	617b      	str	r3, [r7, #20]
    pBuf++;
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	617b      	str	r3, [r7, #20]
    pBuf++;
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	3301      	adds	r3, #1
 8007fcc:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 8007fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd0:	3b01      	subs	r3, #1
 8007fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d1bf      	bne.n	8007f5a <USB_ReadPMA+0x52>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 8007fda:	231a      	movs	r3, #26
 8007fdc:	18fb      	adds	r3, r7, r3
 8007fde:	881b      	ldrh	r3, [r3, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d01b      	beq.n	800801c <USB_ReadPMA+0x114>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 8007fe4:	6a3b      	ldr	r3, [r7, #32]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 8007fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	00db      	lsls	r3, r3, #3
 8007ff0:	693a      	ldr	r2, [r7, #16]
 8007ff2:	40da      	lsrs	r2, r3
 8007ff4:	0013      	movs	r3, r2
 8007ff6:	b2da      	uxtb	r2, r3
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	701a      	strb	r2, [r3, #0]
      count++;
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffe:	3301      	adds	r3, #1
 8008000:	627b      	str	r3, [r7, #36]	; 0x24
      pBuf++;
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	3301      	adds	r3, #1
 8008006:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 8008008:	211a      	movs	r1, #26
 800800a:	187b      	adds	r3, r7, r1
 800800c:	881a      	ldrh	r2, [r3, #0]
 800800e:	187b      	adds	r3, r7, r1
 8008010:	3a01      	subs	r2, #1
 8008012:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 8008014:	187b      	adds	r3, r7, r1
 8008016:	881b      	ldrh	r3, [r3, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d1e6      	bne.n	8007fea <USB_ReadPMA+0xe2>
  }
}
 800801c:	46c0      	nop			; (mov r8, r8)
 800801e:	46bd      	mov	sp, r7
 8008020:	b00b      	add	sp, #44	; 0x2c
 8008022:	bd90      	pop	{r4, r7, pc}
 8008024:	40009800 	.word	0x40009800

08008028 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	000a      	movs	r2, r1
 8008032:	1cfb      	adds	r3, r7, #3
 8008034:	701a      	strb	r2, [r3, #0]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008036:	2387      	movs	r3, #135	; 0x87
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	0018      	movs	r0, r3
 800803c:	f002 ff0e 	bl	800ae5c <USBD_static_malloc>
 8008040:	0003      	movs	r3, r0
 8008042:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d10a      	bne.n	8008060 <USBD_CDC_Init+0x38>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	23b5      	movs	r3, #181	; 0xb5
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	58d2      	ldr	r2, [r2, r3]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	32b0      	adds	r2, #176	; 0xb0
 8008056:	0092      	lsls	r2, r2, #2
 8008058:	2100      	movs	r1, #0
 800805a:	50d1      	str	r1, [r2, r3]
    return (uint8_t)USBD_EMEM;
 800805c:	2302      	movs	r3, #2
 800805e:	e0e9      	b.n	8008234 <USBD_CDC_Init+0x20c>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008060:	2387      	movs	r3, #135	; 0x87
 8008062:	009a      	lsls	r2, r3, #2
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2100      	movs	r1, #0
 8008068:	0018      	movs	r0, r3
 800806a:	f002 ff69 	bl	800af40 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	23b5      	movs	r3, #181	; 0xb5
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	58d2      	ldr	r2, [r2, r3]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	32b0      	adds	r2, #176	; 0xb0
 800807a:	0092      	lsls	r2, r2, #2
 800807c:	68f9      	ldr	r1, [r7, #12]
 800807e:	50d1      	str	r1, [r2, r3]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	23b5      	movs	r3, #181	; 0xb5
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	58d2      	ldr	r2, [r2, r3]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	32b0      	adds	r2, #176	; 0xb0
 800808c:	0092      	lsls	r2, r2, #2
 800808e:	58d1      	ldr	r1, [r2, r3]
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	23af      	movs	r3, #175	; 0xaf
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	50d1      	str	r1, [r2, r3]
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	7c1b      	ldrb	r3, [r3, #16]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d13c      	bne.n	800811a <USBD_CDC_Init+0xf2>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80080a0:	4b66      	ldr	r3, [pc, #408]	; (800823c <USBD_CDC_Init+0x214>)
 80080a2:	7819      	ldrb	r1, [r3, #0]
 80080a4:	2380      	movs	r3, #128	; 0x80
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	2202      	movs	r2, #2
 80080ac:	f002 fd4b 	bl	800ab46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80080b0:	4b62      	ldr	r3, [pc, #392]	; (800823c <USBD_CDC_Init+0x214>)
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	001a      	movs	r2, r3
 80080b6:	230f      	movs	r3, #15
 80080b8:	401a      	ands	r2, r3
 80080ba:	6879      	ldr	r1, [r7, #4]
 80080bc:	0013      	movs	r3, r2
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	189b      	adds	r3, r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	18cb      	adds	r3, r1, r3
 80080c6:	3324      	adds	r3, #36	; 0x24
 80080c8:	2201      	movs	r2, #1
 80080ca:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80080cc:	4b5c      	ldr	r3, [pc, #368]	; (8008240 <USBD_CDC_Init+0x218>)
 80080ce:	7819      	ldrb	r1, [r3, #0]
 80080d0:	2380      	movs	r3, #128	; 0x80
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	2202      	movs	r2, #2
 80080d8:	f002 fd35 	bl	800ab46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80080dc:	4b58      	ldr	r3, [pc, #352]	; (8008240 <USBD_CDC_Init+0x218>)
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	001a      	movs	r2, r3
 80080e2:	230f      	movs	r3, #15
 80080e4:	401a      	ands	r2, r3
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	23b2      	movs	r3, #178	; 0xb2
 80080ea:	0059      	lsls	r1, r3, #1
 80080ec:	0013      	movs	r3, r2
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	189b      	adds	r3, r3, r2
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	18c3      	adds	r3, r0, r3
 80080f6:	185b      	adds	r3, r3, r1
 80080f8:	2201      	movs	r2, #1
 80080fa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80080fc:	4b51      	ldr	r3, [pc, #324]	; (8008244 <USBD_CDC_Init+0x21c>)
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	001a      	movs	r2, r3
 8008102:	230f      	movs	r3, #15
 8008104:	401a      	ands	r2, r3
 8008106:	6879      	ldr	r1, [r7, #4]
 8008108:	0013      	movs	r3, r2
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	189b      	adds	r3, r3, r2
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	18cb      	adds	r3, r1, r3
 8008112:	3326      	adds	r3, #38	; 0x26
 8008114:	2210      	movs	r2, #16
 8008116:	801a      	strh	r2, [r3, #0]
 8008118:	e039      	b.n	800818e <USBD_CDC_Init+0x166>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800811a:	4b48      	ldr	r3, [pc, #288]	; (800823c <USBD_CDC_Init+0x214>)
 800811c:	7819      	ldrb	r1, [r3, #0]
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	2340      	movs	r3, #64	; 0x40
 8008122:	2202      	movs	r2, #2
 8008124:	f002 fd0f 	bl	800ab46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008128:	4b44      	ldr	r3, [pc, #272]	; (800823c <USBD_CDC_Init+0x214>)
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	001a      	movs	r2, r3
 800812e:	230f      	movs	r3, #15
 8008130:	401a      	ands	r2, r3
 8008132:	6879      	ldr	r1, [r7, #4]
 8008134:	0013      	movs	r3, r2
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	189b      	adds	r3, r3, r2
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	18cb      	adds	r3, r1, r3
 800813e:	3324      	adds	r3, #36	; 0x24
 8008140:	2201      	movs	r2, #1
 8008142:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008144:	4b3e      	ldr	r3, [pc, #248]	; (8008240 <USBD_CDC_Init+0x218>)
 8008146:	7819      	ldrb	r1, [r3, #0]
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	2340      	movs	r3, #64	; 0x40
 800814c:	2202      	movs	r2, #2
 800814e:	f002 fcfa 	bl	800ab46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008152:	4b3b      	ldr	r3, [pc, #236]	; (8008240 <USBD_CDC_Init+0x218>)
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	001a      	movs	r2, r3
 8008158:	230f      	movs	r3, #15
 800815a:	401a      	ands	r2, r3
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	23b2      	movs	r3, #178	; 0xb2
 8008160:	0059      	lsls	r1, r3, #1
 8008162:	0013      	movs	r3, r2
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	189b      	adds	r3, r3, r2
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	18c3      	adds	r3, r0, r3
 800816c:	185b      	adds	r3, r3, r1
 800816e:	2201      	movs	r2, #1
 8008170:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008172:	4b34      	ldr	r3, [pc, #208]	; (8008244 <USBD_CDC_Init+0x21c>)
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	001a      	movs	r2, r3
 8008178:	230f      	movs	r3, #15
 800817a:	401a      	ands	r2, r3
 800817c:	6879      	ldr	r1, [r7, #4]
 800817e:	0013      	movs	r3, r2
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	189b      	adds	r3, r3, r2
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	18cb      	adds	r3, r1, r3
 8008188:	3326      	adds	r3, #38	; 0x26
 800818a:	2210      	movs	r2, #16
 800818c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800818e:	4b2d      	ldr	r3, [pc, #180]	; (8008244 <USBD_CDC_Init+0x21c>)
 8008190:	7819      	ldrb	r1, [r3, #0]
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	2308      	movs	r3, #8
 8008196:	2203      	movs	r2, #3
 8008198:	f002 fcd5 	bl	800ab46 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800819c:	4b29      	ldr	r3, [pc, #164]	; (8008244 <USBD_CDC_Init+0x21c>)
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	001a      	movs	r2, r3
 80081a2:	230f      	movs	r3, #15
 80081a4:	401a      	ands	r2, r3
 80081a6:	6879      	ldr	r1, [r7, #4]
 80081a8:	0013      	movs	r3, r2
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	189b      	adds	r3, r3, r2
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	18cb      	adds	r3, r1, r3
 80081b2:	3324      	adds	r3, #36	; 0x24
 80081b4:	2201      	movs	r2, #1
 80081b6:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	2381      	movs	r3, #129	; 0x81
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	2100      	movs	r1, #0
 80081c0:	50d1      	str	r1, [r2, r3]

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	23b5      	movs	r3, #181	; 0xb5
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	58d3      	ldr	r3, [r2, r3]
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	33b0      	adds	r3, #176	; 0xb0
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	18d3      	adds	r3, r2, r3
 80081d2:	3304      	adds	r3, #4
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	2385      	movs	r3, #133	; 0x85
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	2100      	movs	r1, #0
 80081e2:	50d1      	str	r1, [r2, r3]
  hcdc->RxState = 0U;
 80081e4:	68fa      	ldr	r2, [r7, #12]
 80081e6:	2386      	movs	r3, #134	; 0x86
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	2100      	movs	r1, #0
 80081ec:	50d1      	str	r1, [r2, r3]

  if (hcdc->RxBuffer == NULL)
 80081ee:	68fa      	ldr	r2, [r7, #12]
 80081f0:	2381      	movs	r3, #129	; 0x81
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	58d3      	ldr	r3, [r2, r3]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d101      	bne.n	80081fe <USBD_CDC_Init+0x1d6>
  {
    return (uint8_t)USBD_EMEM;
 80081fa:	2302      	movs	r3, #2
 80081fc:	e01a      	b.n	8008234 <USBD_CDC_Init+0x20c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	7c1b      	ldrb	r3, [r3, #16]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d10b      	bne.n	800821e <USBD_CDC_Init+0x1f6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008206:	4b0e      	ldr	r3, [pc, #56]	; (8008240 <USBD_CDC_Init+0x218>)
 8008208:	7819      	ldrb	r1, [r3, #0]
 800820a:	68fa      	ldr	r2, [r7, #12]
 800820c:	2381      	movs	r3, #129	; 0x81
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	58d2      	ldr	r2, [r2, r3]
 8008212:	2380      	movs	r3, #128	; 0x80
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f002 fdd9 	bl	800adce <USBD_LL_PrepareReceive>
 800821c:	e009      	b.n	8008232 <USBD_CDC_Init+0x20a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800821e:	4b08      	ldr	r3, [pc, #32]	; (8008240 <USBD_CDC_Init+0x218>)
 8008220:	7819      	ldrb	r1, [r3, #0]
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	2381      	movs	r3, #129	; 0x81
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	58d2      	ldr	r2, [r2, r3]
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	2340      	movs	r3, #64	; 0x40
 800822e:	f002 fdce 	bl	800adce <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008232:	2300      	movs	r3, #0
}
 8008234:	0018      	movs	r0, r3
 8008236:	46bd      	mov	sp, r7
 8008238:	b004      	add	sp, #16
 800823a:	bd80      	pop	{r7, pc}
 800823c:	200000c3 	.word	0x200000c3
 8008240:	200000c4 	.word	0x200000c4
 8008244:	200000c5 	.word	0x200000c5

08008248 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	000a      	movs	r2, r1
 8008252:	1cfb      	adds	r3, r7, #3
 8008254:	701a      	strb	r2, [r3, #0]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008256:	4b41      	ldr	r3, [pc, #260]	; (800835c <USBD_CDC_DeInit+0x114>)
 8008258:	781a      	ldrb	r2, [r3, #0]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	0011      	movs	r1, r2
 800825e:	0018      	movs	r0, r3
 8008260:	f002 fca8 	bl	800abb4 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008264:	4b3d      	ldr	r3, [pc, #244]	; (800835c <USBD_CDC_DeInit+0x114>)
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	001a      	movs	r2, r3
 800826a:	230f      	movs	r3, #15
 800826c:	401a      	ands	r2, r3
 800826e:	6879      	ldr	r1, [r7, #4]
 8008270:	0013      	movs	r3, r2
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	189b      	adds	r3, r3, r2
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	18cb      	adds	r3, r1, r3
 800827a:	3324      	adds	r3, #36	; 0x24
 800827c:	2200      	movs	r2, #0
 800827e:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008280:	4b37      	ldr	r3, [pc, #220]	; (8008360 <USBD_CDC_DeInit+0x118>)
 8008282:	781a      	ldrb	r2, [r3, #0]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	0011      	movs	r1, r2
 8008288:	0018      	movs	r0, r3
 800828a:	f002 fc93 	bl	800abb4 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800828e:	4b34      	ldr	r3, [pc, #208]	; (8008360 <USBD_CDC_DeInit+0x118>)
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	001a      	movs	r2, r3
 8008294:	230f      	movs	r3, #15
 8008296:	401a      	ands	r2, r3
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	23b2      	movs	r3, #178	; 0xb2
 800829c:	0059      	lsls	r1, r3, #1
 800829e:	0013      	movs	r3, r2
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	189b      	adds	r3, r3, r2
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	18c3      	adds	r3, r0, r3
 80082a8:	185b      	adds	r3, r3, r1
 80082aa:	2200      	movs	r2, #0
 80082ac:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80082ae:	4b2d      	ldr	r3, [pc, #180]	; (8008364 <USBD_CDC_DeInit+0x11c>)
 80082b0:	781a      	ldrb	r2, [r3, #0]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	0011      	movs	r1, r2
 80082b6:	0018      	movs	r0, r3
 80082b8:	f002 fc7c 	bl	800abb4 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80082bc:	4b29      	ldr	r3, [pc, #164]	; (8008364 <USBD_CDC_DeInit+0x11c>)
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	001a      	movs	r2, r3
 80082c2:	230f      	movs	r3, #15
 80082c4:	401a      	ands	r2, r3
 80082c6:	6879      	ldr	r1, [r7, #4]
 80082c8:	0013      	movs	r3, r2
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	189b      	adds	r3, r3, r2
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	18cb      	adds	r3, r1, r3
 80082d2:	3324      	adds	r3, #36	; 0x24
 80082d4:	2200      	movs	r2, #0
 80082d6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80082d8:	4b22      	ldr	r3, [pc, #136]	; (8008364 <USBD_CDC_DeInit+0x11c>)
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	001a      	movs	r2, r3
 80082de:	230f      	movs	r3, #15
 80082e0:	401a      	ands	r2, r3
 80082e2:	6879      	ldr	r1, [r7, #4]
 80082e4:	0013      	movs	r3, r2
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	189b      	adds	r3, r3, r2
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	18cb      	adds	r3, r1, r3
 80082ee:	3326      	adds	r3, #38	; 0x26
 80082f0:	2200      	movs	r2, #0
 80082f2:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	23b5      	movs	r3, #181	; 0xb5
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	58d2      	ldr	r2, [r2, r3]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	32b0      	adds	r2, #176	; 0xb0
 8008300:	0092      	lsls	r2, r2, #2
 8008302:	58d3      	ldr	r3, [r2, r3]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d024      	beq.n	8008352 <USBD_CDC_DeInit+0x10a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	23b5      	movs	r3, #181	; 0xb5
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	58d3      	ldr	r3, [r2, r3]
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	33b0      	adds	r3, #176	; 0xb0
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	18d3      	adds	r3, r2, r3
 8008318:	3304      	adds	r3, #4
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	23b5      	movs	r3, #181	; 0xb5
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	58d2      	ldr	r2, [r2, r3]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	32b0      	adds	r2, #176	; 0xb0
 800832c:	0092      	lsls	r2, r2, #2
 800832e:	58d3      	ldr	r3, [r2, r3]
 8008330:	0018      	movs	r0, r3
 8008332:	f002 fd9f 	bl	800ae74 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	23b5      	movs	r3, #181	; 0xb5
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	58d2      	ldr	r2, [r2, r3]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	32b0      	adds	r2, #176	; 0xb0
 8008342:	0092      	lsls	r2, r2, #2
 8008344:	2100      	movs	r1, #0
 8008346:	50d1      	str	r1, [r2, r3]
    pdev->pClassData = NULL;
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	23af      	movs	r3, #175	; 0xaf
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	2100      	movs	r1, #0
 8008350:	50d1      	str	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 8008352:	2300      	movs	r3, #0
}
 8008354:	0018      	movs	r0, r3
 8008356:	46bd      	mov	sp, r7
 8008358:	b002      	add	sp, #8
 800835a:	bd80      	pop	{r7, pc}
 800835c:	200000c3 	.word	0x200000c3
 8008360:	200000c4 	.word	0x200000c4
 8008364:	200000c5 	.word	0x200000c5

08008368 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b086      	sub	sp, #24
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	23b5      	movs	r3, #181	; 0xb5
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	58d2      	ldr	r2, [r2, r3]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	32b0      	adds	r2, #176	; 0xb0
 800837e:	0092      	lsls	r2, r2, #2
 8008380:	58d3      	ldr	r3, [r2, r3]
 8008382:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008384:	230d      	movs	r3, #13
 8008386:	18fb      	adds	r3, r7, r3
 8008388:	2200      	movs	r2, #0
 800838a:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800838c:	230a      	movs	r3, #10
 800838e:	18fb      	adds	r3, r7, r3
 8008390:	2200      	movs	r2, #0
 8008392:	801a      	strh	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008394:	2317      	movs	r3, #23
 8008396:	18fb      	adds	r3, r7, r3
 8008398:	2200      	movs	r2, #0
 800839a:	701a      	strb	r2, [r3, #0]

  if (hcdc == NULL)
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d101      	bne.n	80083a6 <USBD_CDC_Setup+0x3e>
  {
    return (uint8_t)USBD_FAIL;
 80083a2:	2303      	movs	r3, #3
 80083a4:	e0d1      	b.n	800854a <USBD_CDC_Setup+0x1e2>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	001a      	movs	r2, r3
 80083ac:	2360      	movs	r3, #96	; 0x60
 80083ae:	4013      	ands	r3, r2
 80083b0:	d05b      	beq.n	800846a <USBD_CDC_Setup+0x102>
 80083b2:	2b20      	cmp	r3, #32
 80083b4:	d000      	beq.n	80083b8 <USBD_CDC_Setup+0x50>
 80083b6:	e0ba      	b.n	800852e <USBD_CDC_Setup+0x1c6>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	88db      	ldrh	r3, [r3, #6]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d043      	beq.n	8008448 <USBD_CDC_Setup+0xe0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	b25b      	sxtb	r3, r3
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	da22      	bge.n	8008410 <USBD_CDC_Setup+0xa8>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	23b5      	movs	r3, #181	; 0xb5
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	58d3      	ldr	r3, [r2, r3]
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	33b0      	adds	r3, #176	; 0xb0
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	18d3      	adds	r3, r2, r3
 80083da:	3304      	adds	r3, #4
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	683a      	ldr	r2, [r7, #0]
 80083e2:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80083e4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80083e6:	683a      	ldr	r2, [r7, #0]
 80083e8:	88d2      	ldrh	r2, [r2, #6]
 80083ea:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	88db      	ldrh	r3, [r3, #6]
 80083f0:	220e      	movs	r2, #14
 80083f2:	18ba      	adds	r2, r7, r2
 80083f4:	b299      	uxth	r1, r3
 80083f6:	2907      	cmp	r1, #7
 80083f8:	d900      	bls.n	80083fc <USBD_CDC_Setup+0x94>
 80083fa:	2307      	movs	r3, #7
 80083fc:	8013      	strh	r3, [r2, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80083fe:	6939      	ldr	r1, [r7, #16]
 8008400:	230e      	movs	r3, #14
 8008402:	18fb      	adds	r3, r7, r3
 8008404:	881a      	ldrh	r2, [r3, #0]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	0018      	movs	r0, r3
 800840a:	f001 ff69 	bl	800a2e0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800840e:	e099      	b.n	8008544 <USBD_CDC_Setup+0x1dc>
          hcdc->CmdOpCode = req->bRequest;
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	7859      	ldrb	r1, [r3, #1]
 8008414:	693a      	ldr	r2, [r7, #16]
 8008416:	2380      	movs	r3, #128	; 0x80
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	88db      	ldrh	r3, [r3, #6]
 8008420:	2b3f      	cmp	r3, #63	; 0x3f
 8008422:	d803      	bhi.n	800842c <USBD_CDC_Setup+0xc4>
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	88db      	ldrh	r3, [r3, #6]
 8008428:	b2da      	uxtb	r2, r3
 800842a:	e000      	b.n	800842e <USBD_CDC_Setup+0xc6>
 800842c:	2240      	movs	r2, #64	; 0x40
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	4948      	ldr	r1, [pc, #288]	; (8008554 <USBD_CDC_Setup+0x1ec>)
 8008432:	545a      	strb	r2, [r3, r1]
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008434:	6939      	ldr	r1, [r7, #16]
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	4a46      	ldr	r2, [pc, #280]	; (8008554 <USBD_CDC_Setup+0x1ec>)
 800843a:	5c9b      	ldrb	r3, [r3, r2]
 800843c:	001a      	movs	r2, r3
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	0018      	movs	r0, r3
 8008442:	f001 ff7a 	bl	800a33a <USBD_CtlPrepareRx>
      break;
 8008446:	e07d      	b.n	8008544 <USBD_CDC_Setup+0x1dc>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	23b5      	movs	r3, #181	; 0xb5
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	58d3      	ldr	r3, [r2, r3]
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	33b0      	adds	r3, #176	; 0xb0
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	18d3      	adds	r3, r2, r3
 8008458:	3304      	adds	r3, #4
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	683a      	ldr	r2, [r7, #0]
 8008460:	7850      	ldrb	r0, [r2, #1]
 8008462:	6839      	ldr	r1, [r7, #0]
 8008464:	2200      	movs	r2, #0
 8008466:	4798      	blx	r3
      break;
 8008468:	e06c      	b.n	8008544 <USBD_CDC_Setup+0x1dc>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	785b      	ldrb	r3, [r3, #1]
 800846e:	2b0b      	cmp	r3, #11
 8008470:	d03c      	beq.n	80084ec <USBD_CDC_Setup+0x184>
 8008472:	dc4d      	bgt.n	8008510 <USBD_CDC_Setup+0x1a8>
 8008474:	2b0a      	cmp	r3, #10
 8008476:	d01f      	beq.n	80084b8 <USBD_CDC_Setup+0x150>
 8008478:	dc4a      	bgt.n	8008510 <USBD_CDC_Setup+0x1a8>
 800847a:	2b00      	cmp	r3, #0
 800847c:	d002      	beq.n	8008484 <USBD_CDC_Setup+0x11c>
 800847e:	2b01      	cmp	r3, #1
 8008480:	d051      	beq.n	8008526 <USBD_CDC_Setup+0x1be>
 8008482:	e045      	b.n	8008510 <USBD_CDC_Setup+0x1a8>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	23a7      	movs	r3, #167	; 0xa7
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	5cd3      	ldrb	r3, [r2, r3]
 800848c:	b2db      	uxtb	r3, r3
 800848e:	2b03      	cmp	r3, #3
 8008490:	d107      	bne.n	80084a2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008492:	230a      	movs	r3, #10
 8008494:	18f9      	adds	r1, r7, r3
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2202      	movs	r2, #2
 800849a:	0018      	movs	r0, r3
 800849c:	f001 ff20 	bl	800a2e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80084a0:	e044      	b.n	800852c <USBD_CDC_Setup+0x1c4>
            USBD_CtlError(pdev, req);
 80084a2:	683a      	ldr	r2, [r7, #0]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	0011      	movs	r1, r2
 80084a8:	0018      	movs	r0, r3
 80084aa:	f001 fe91 	bl	800a1d0 <USBD_CtlError>
            ret = USBD_FAIL;
 80084ae:	2317      	movs	r3, #23
 80084b0:	18fb      	adds	r3, r7, r3
 80084b2:	2203      	movs	r2, #3
 80084b4:	701a      	strb	r2, [r3, #0]
          break;
 80084b6:	e039      	b.n	800852c <USBD_CDC_Setup+0x1c4>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	23a7      	movs	r3, #167	; 0xa7
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	5cd3      	ldrb	r3, [r2, r3]
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	2b03      	cmp	r3, #3
 80084c4:	d107      	bne.n	80084d6 <USBD_CDC_Setup+0x16e>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80084c6:	230d      	movs	r3, #13
 80084c8:	18f9      	adds	r1, r7, r3
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2201      	movs	r2, #1
 80084ce:	0018      	movs	r0, r3
 80084d0:	f001 ff06 	bl	800a2e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80084d4:	e02a      	b.n	800852c <USBD_CDC_Setup+0x1c4>
            USBD_CtlError(pdev, req);
 80084d6:	683a      	ldr	r2, [r7, #0]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	0011      	movs	r1, r2
 80084dc:	0018      	movs	r0, r3
 80084de:	f001 fe77 	bl	800a1d0 <USBD_CtlError>
            ret = USBD_FAIL;
 80084e2:	2317      	movs	r3, #23
 80084e4:	18fb      	adds	r3, r7, r3
 80084e6:	2203      	movs	r2, #3
 80084e8:	701a      	strb	r2, [r3, #0]
          break;
 80084ea:	e01f      	b.n	800852c <USBD_CDC_Setup+0x1c4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	23a7      	movs	r3, #167	; 0xa7
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	5cd3      	ldrb	r3, [r2, r3]
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	2b03      	cmp	r3, #3
 80084f8:	d017      	beq.n	800852a <USBD_CDC_Setup+0x1c2>
          {
            USBD_CtlError(pdev, req);
 80084fa:	683a      	ldr	r2, [r7, #0]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	0011      	movs	r1, r2
 8008500:	0018      	movs	r0, r3
 8008502:	f001 fe65 	bl	800a1d0 <USBD_CtlError>
            ret = USBD_FAIL;
 8008506:	2317      	movs	r3, #23
 8008508:	18fb      	adds	r3, r7, r3
 800850a:	2203      	movs	r2, #3
 800850c:	701a      	strb	r2, [r3, #0]
          }
          break;
 800850e:	e00c      	b.n	800852a <USBD_CDC_Setup+0x1c2>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008510:	683a      	ldr	r2, [r7, #0]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	0011      	movs	r1, r2
 8008516:	0018      	movs	r0, r3
 8008518:	f001 fe5a 	bl	800a1d0 <USBD_CtlError>
          ret = USBD_FAIL;
 800851c:	2317      	movs	r3, #23
 800851e:	18fb      	adds	r3, r7, r3
 8008520:	2203      	movs	r2, #3
 8008522:	701a      	strb	r2, [r3, #0]
          break;
 8008524:	e002      	b.n	800852c <USBD_CDC_Setup+0x1c4>
          break;
 8008526:	46c0      	nop			; (mov r8, r8)
 8008528:	e00c      	b.n	8008544 <USBD_CDC_Setup+0x1dc>
          break;
 800852a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800852c:	e00a      	b.n	8008544 <USBD_CDC_Setup+0x1dc>

    default:
      USBD_CtlError(pdev, req);
 800852e:	683a      	ldr	r2, [r7, #0]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	0011      	movs	r1, r2
 8008534:	0018      	movs	r0, r3
 8008536:	f001 fe4b 	bl	800a1d0 <USBD_CtlError>
      ret = USBD_FAIL;
 800853a:	2317      	movs	r3, #23
 800853c:	18fb      	adds	r3, r7, r3
 800853e:	2203      	movs	r2, #3
 8008540:	701a      	strb	r2, [r3, #0]
      break;
 8008542:	46c0      	nop			; (mov r8, r8)
  }

  return (uint8_t)ret;
 8008544:	2317      	movs	r3, #23
 8008546:	18fb      	adds	r3, r7, r3
 8008548:	781b      	ldrb	r3, [r3, #0]
}
 800854a:	0018      	movs	r0, r3
 800854c:	46bd      	mov	sp, r7
 800854e:	b006      	add	sp, #24
 8008550:	bd80      	pop	{r7, pc}
 8008552:	46c0      	nop			; (mov r8, r8)
 8008554:	00000201 	.word	0x00000201

08008558 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008558:	b590      	push	{r4, r7, lr}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	000a      	movs	r2, r1
 8008562:	1cfb      	adds	r3, r7, #3
 8008564:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	23b2      	movs	r3, #178	; 0xb2
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	58d3      	ldr	r3, [r2, r3]
 800856e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	23b5      	movs	r3, #181	; 0xb5
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	58d2      	ldr	r2, [r2, r3]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	32b0      	adds	r2, #176	; 0xb0
 800857c:	0092      	lsls	r2, r2, #2
 800857e:	58d3      	ldr	r3, [r2, r3]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d101      	bne.n	8008588 <USBD_CDC_DataIn+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008584:	2303      	movs	r3, #3
 8008586:	e072      	b.n	800866e <USBD_CDC_DataIn+0x116>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	23b5      	movs	r3, #181	; 0xb5
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	58d2      	ldr	r2, [r2, r3]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	32b0      	adds	r2, #176	; 0xb0
 8008594:	0092      	lsls	r2, r2, #2
 8008596:	58d3      	ldr	r3, [r2, r3]
 8008598:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800859a:	1cfb      	adds	r3, r7, #3
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	220f      	movs	r2, #15
 80085a0:	401a      	ands	r2, r3
 80085a2:	6879      	ldr	r1, [r7, #4]
 80085a4:	0013      	movs	r3, r2
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	189b      	adds	r3, r3, r2
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	18cb      	adds	r3, r1, r3
 80085ae:	3318      	adds	r3, #24
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d031      	beq.n	800861a <USBD_CDC_DataIn+0xc2>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80085b6:	1cfb      	adds	r3, r7, #3
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	220f      	movs	r2, #15
 80085bc:	401a      	ands	r2, r3
 80085be:	6879      	ldr	r1, [r7, #4]
 80085c0:	0013      	movs	r3, r2
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	189b      	adds	r3, r3, r2
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	18cb      	adds	r3, r1, r3
 80085ca:	3318      	adds	r3, #24
 80085cc:	6818      	ldr	r0, [r3, #0]
 80085ce:	1cfb      	adds	r3, r7, #3
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	220f      	movs	r2, #15
 80085d4:	401a      	ands	r2, r3
 80085d6:	68f9      	ldr	r1, [r7, #12]
 80085d8:	0013      	movs	r3, r2
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	189b      	adds	r3, r3, r2
 80085de:	00db      	lsls	r3, r3, #3
 80085e0:	18cb      	adds	r3, r1, r3
 80085e2:	334c      	adds	r3, #76	; 0x4c
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	0019      	movs	r1, r3
 80085e8:	f7f7 fe24 	bl	8000234 <__aeabi_uidivmod>
 80085ec:	1e0b      	subs	r3, r1, #0
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80085ee:	d114      	bne.n	800861a <USBD_CDC_DataIn+0xc2>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80085f0:	1cfb      	adds	r3, r7, #3
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	220f      	movs	r2, #15
 80085f6:	401a      	ands	r2, r3
 80085f8:	6879      	ldr	r1, [r7, #4]
 80085fa:	0013      	movs	r3, r2
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	189b      	adds	r3, r3, r2
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	18cb      	adds	r3, r1, r3
 8008604:	3318      	adds	r3, #24
 8008606:	2200      	movs	r2, #0
 8008608:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800860a:	1cfb      	adds	r3, r7, #3
 800860c:	7819      	ldrb	r1, [r3, #0]
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	2300      	movs	r3, #0
 8008612:	2200      	movs	r2, #0
 8008614:	f002 fbab 	bl	800ad6e <USBD_LL_Transmit>
 8008618:	e028      	b.n	800866c <USBD_CDC_DataIn+0x114>
  }
  else
  {
    hcdc->TxState = 0U;
 800861a:	68ba      	ldr	r2, [r7, #8]
 800861c:	2385      	movs	r3, #133	; 0x85
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	2100      	movs	r1, #0
 8008622:	50d1      	str	r1, [r2, r3]

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	23b5      	movs	r3, #181	; 0xb5
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	58d3      	ldr	r3, [r2, r3]
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	33b0      	adds	r3, #176	; 0xb0
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	18d3      	adds	r3, r2, r3
 8008634:	3304      	adds	r3, #4
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	691b      	ldr	r3, [r3, #16]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d016      	beq.n	800866c <USBD_CDC_DataIn+0x114>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	23b5      	movs	r3, #181	; 0xb5
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	58d3      	ldr	r3, [r2, r3]
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	33b0      	adds	r3, #176	; 0xb0
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	18d3      	adds	r3, r2, r3
 800864e:	3304      	adds	r3, #4
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	691c      	ldr	r4, [r3, #16]
 8008654:	68ba      	ldr	r2, [r7, #8]
 8008656:	2382      	movs	r3, #130	; 0x82
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	58d0      	ldr	r0, [r2, r3]
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	2284      	movs	r2, #132	; 0x84
 8008660:	0092      	lsls	r2, r2, #2
 8008662:	1899      	adds	r1, r3, r2
 8008664:	1cfb      	adds	r3, r7, #3
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	001a      	movs	r2, r3
 800866a:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 800866c:	2300      	movs	r3, #0
}
 800866e:	0018      	movs	r0, r3
 8008670:	46bd      	mov	sp, r7
 8008672:	b005      	add	sp, #20
 8008674:	bd90      	pop	{r4, r7, pc}

08008676 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b084      	sub	sp, #16
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
 800867e:	000a      	movs	r2, r1
 8008680:	1cfb      	adds	r3, r7, #3
 8008682:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	23b5      	movs	r3, #181	; 0xb5
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	58d2      	ldr	r2, [r2, r3]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	32b0      	adds	r2, #176	; 0xb0
 8008690:	0092      	lsls	r2, r2, #2
 8008692:	58d3      	ldr	r3, [r2, r3]
 8008694:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	23b5      	movs	r3, #181	; 0xb5
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	58d2      	ldr	r2, [r2, r3]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	32b0      	adds	r2, #176	; 0xb0
 80086a2:	0092      	lsls	r2, r2, #2
 80086a4:	58d3      	ldr	r3, [r2, r3]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d101      	bne.n	80086ae <USBD_CDC_DataOut+0x38>
  {
    return (uint8_t)USBD_FAIL;
 80086aa:	2303      	movs	r3, #3
 80086ac:	e022      	b.n	80086f4 <USBD_CDC_DataOut+0x7e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80086ae:	1cfb      	adds	r3, r7, #3
 80086b0:	781a      	ldrb	r2, [r3, #0]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	0011      	movs	r1, r2
 80086b6:	0018      	movs	r0, r3
 80086b8:	f002 fbb9 	bl	800ae2e <USBD_LL_GetRxDataSize>
 80086bc:	0001      	movs	r1, r0
 80086be:	68fa      	ldr	r2, [r7, #12]
 80086c0:	2383      	movs	r3, #131	; 0x83
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	23b5      	movs	r3, #181	; 0xb5
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	58d3      	ldr	r3, [r2, r3]
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	33b0      	adds	r3, #176	; 0xb0
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	18d3      	adds	r3, r2, r3
 80086d6:	3304      	adds	r3, #4
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	68da      	ldr	r2, [r3, #12]
 80086dc:	68f9      	ldr	r1, [r7, #12]
 80086de:	2381      	movs	r3, #129	; 0x81
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	58c8      	ldr	r0, [r1, r3]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2183      	movs	r1, #131	; 0x83
 80086e8:	0089      	lsls	r1, r1, #2
 80086ea:	468c      	mov	ip, r1
 80086ec:	4463      	add	r3, ip
 80086ee:	0019      	movs	r1, r3
 80086f0:	4790      	blx	r2

  return (uint8_t)USBD_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	0018      	movs	r0, r3
 80086f6:	46bd      	mov	sp, r7
 80086f8:	b004      	add	sp, #16
 80086fa:	bd80      	pop	{r7, pc}

080086fc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80086fc:	b590      	push	{r4, r7, lr}
 80086fe:	b085      	sub	sp, #20
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	23b5      	movs	r3, #181	; 0xb5
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	58d2      	ldr	r2, [r2, r3]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	32b0      	adds	r2, #176	; 0xb0
 8008710:	0092      	lsls	r2, r2, #2
 8008712:	58d3      	ldr	r3, [r2, r3]
 8008714:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d101      	bne.n	8008720 <USBD_CDC_EP0_RxReady+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800871c:	2303      	movs	r3, #3
 800871e:	e02c      	b.n	800877a <USBD_CDC_EP0_RxReady+0x7e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	23b5      	movs	r3, #181	; 0xb5
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	58d3      	ldr	r3, [r2, r3]
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	33b0      	adds	r3, #176	; 0xb0
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	18d3      	adds	r3, r2, r3
 8008730:	3304      	adds	r3, #4
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d01f      	beq.n	8008778 <USBD_CDC_EP0_RxReady+0x7c>
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	2380      	movs	r3, #128	; 0x80
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	5cd3      	ldrb	r3, [r2, r3]
 8008740:	2bff      	cmp	r3, #255	; 0xff
 8008742:	d019      	beq.n	8008778 <USBD_CDC_EP0_RxReady+0x7c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	23b5      	movs	r3, #181	; 0xb5
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	58d3      	ldr	r3, [r2, r3]
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	33b0      	adds	r3, #176	; 0xb0
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	18d3      	adds	r3, r2, r3
 8008754:	3304      	adds	r3, #4
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	68f9      	ldr	r1, [r7, #12]
 800875c:	2280      	movs	r2, #128	; 0x80
 800875e:	0092      	lsls	r2, r2, #2
 8008760:	5c88      	ldrb	r0, [r1, r2]
                                                                     (uint8_t *)hcdc->data,
 8008762:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008764:	68fa      	ldr	r2, [r7, #12]
 8008766:	4c07      	ldr	r4, [pc, #28]	; (8008784 <USBD_CDC_EP0_RxReady+0x88>)
 8008768:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800876a:	b292      	uxth	r2, r2
 800876c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800876e:	68fa      	ldr	r2, [r7, #12]
 8008770:	2380      	movs	r3, #128	; 0x80
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	21ff      	movs	r1, #255	; 0xff
 8008776:	54d1      	strb	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 8008778:	2300      	movs	r3, #0
}
 800877a:	0018      	movs	r0, r3
 800877c:	46bd      	mov	sp, r7
 800877e:	b005      	add	sp, #20
 8008780:	bd90      	pop	{r4, r7, pc}
 8008782:	46c0      	nop			; (mov r8, r8)
 8008784:	00000201 	.word	0x00000201

08008788 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b086      	sub	sp, #24
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008790:	4b20      	ldr	r3, [pc, #128]	; (8008814 <USBD_CDC_GetFSCfgDesc+0x8c>)
 8008792:	2182      	movs	r1, #130	; 0x82
 8008794:	0018      	movs	r0, r3
 8008796:	f000 fd9c 	bl	80092d2 <USBD_GetEpDesc>
 800879a:	0003      	movs	r3, r0
 800879c:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800879e:	4b1d      	ldr	r3, [pc, #116]	; (8008814 <USBD_CDC_GetFSCfgDesc+0x8c>)
 80087a0:	2101      	movs	r1, #1
 80087a2:	0018      	movs	r0, r3
 80087a4:	f000 fd95 	bl	80092d2 <USBD_GetEpDesc>
 80087a8:	0003      	movs	r3, r0
 80087aa:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80087ac:	4b19      	ldr	r3, [pc, #100]	; (8008814 <USBD_CDC_GetFSCfgDesc+0x8c>)
 80087ae:	2181      	movs	r1, #129	; 0x81
 80087b0:	0018      	movs	r0, r3
 80087b2:	f000 fd8e 	bl	80092d2 <USBD_GetEpDesc>
 80087b6:	0003      	movs	r3, r0
 80087b8:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d002      	beq.n	80087c6 <USBD_CDC_GetFSCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	2210      	movs	r2, #16
 80087c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d00b      	beq.n	80087e4 <USBD_CDC_GetFSCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	791a      	ldrb	r2, [r3, #4]
 80087d0:	2100      	movs	r1, #0
 80087d2:	400a      	ands	r2, r1
 80087d4:	1c11      	adds	r1, r2, #0
 80087d6:	2240      	movs	r2, #64	; 0x40
 80087d8:	430a      	orrs	r2, r1
 80087da:	711a      	strb	r2, [r3, #4]
 80087dc:	795a      	ldrb	r2, [r3, #5]
 80087de:	2100      	movs	r1, #0
 80087e0:	400a      	ands	r2, r1
 80087e2:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d00b      	beq.n	8008802 <USBD_CDC_GetFSCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	791a      	ldrb	r2, [r3, #4]
 80087ee:	2100      	movs	r1, #0
 80087f0:	400a      	ands	r2, r1
 80087f2:	1c11      	adds	r1, r2, #0
 80087f4:	2240      	movs	r2, #64	; 0x40
 80087f6:	430a      	orrs	r2, r1
 80087f8:	711a      	strb	r2, [r3, #4]
 80087fa:	795a      	ldrb	r2, [r3, #5]
 80087fc:	2100      	movs	r1, #0
 80087fe:	400a      	ands	r2, r1
 8008800:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2243      	movs	r2, #67	; 0x43
 8008806:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008808:	4b02      	ldr	r3, [pc, #8]	; (8008814 <USBD_CDC_GetFSCfgDesc+0x8c>)
}
 800880a:	0018      	movs	r0, r3
 800880c:	46bd      	mov	sp, r7
 800880e:	b006      	add	sp, #24
 8008810:	bd80      	pop	{r7, pc}
 8008812:	46c0      	nop			; (mov r8, r8)
 8008814:	20000080 	.word	0x20000080

08008818 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b086      	sub	sp, #24
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008820:	4b20      	ldr	r3, [pc, #128]	; (80088a4 <USBD_CDC_GetHSCfgDesc+0x8c>)
 8008822:	2182      	movs	r1, #130	; 0x82
 8008824:	0018      	movs	r0, r3
 8008826:	f000 fd54 	bl	80092d2 <USBD_GetEpDesc>
 800882a:	0003      	movs	r3, r0
 800882c:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800882e:	4b1d      	ldr	r3, [pc, #116]	; (80088a4 <USBD_CDC_GetHSCfgDesc+0x8c>)
 8008830:	2101      	movs	r1, #1
 8008832:	0018      	movs	r0, r3
 8008834:	f000 fd4d 	bl	80092d2 <USBD_GetEpDesc>
 8008838:	0003      	movs	r3, r0
 800883a:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800883c:	4b19      	ldr	r3, [pc, #100]	; (80088a4 <USBD_CDC_GetHSCfgDesc+0x8c>)
 800883e:	2181      	movs	r1, #129	; 0x81
 8008840:	0018      	movs	r0, r3
 8008842:	f000 fd46 	bl	80092d2 <USBD_GetEpDesc>
 8008846:	0003      	movs	r3, r0
 8008848:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d002      	beq.n	8008856 <USBD_CDC_GetHSCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	2210      	movs	r2, #16
 8008854:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00b      	beq.n	8008874 <USBD_CDC_GetHSCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	791a      	ldrb	r2, [r3, #4]
 8008860:	2100      	movs	r1, #0
 8008862:	400a      	ands	r2, r1
 8008864:	711a      	strb	r2, [r3, #4]
 8008866:	795a      	ldrb	r2, [r3, #5]
 8008868:	2100      	movs	r1, #0
 800886a:	400a      	ands	r2, r1
 800886c:	1c11      	adds	r1, r2, #0
 800886e:	2202      	movs	r2, #2
 8008870:	430a      	orrs	r2, r1
 8008872:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00b      	beq.n	8008892 <USBD_CDC_GetHSCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	791a      	ldrb	r2, [r3, #4]
 800887e:	2100      	movs	r1, #0
 8008880:	400a      	ands	r2, r1
 8008882:	711a      	strb	r2, [r3, #4]
 8008884:	795a      	ldrb	r2, [r3, #5]
 8008886:	2100      	movs	r1, #0
 8008888:	400a      	ands	r2, r1
 800888a:	1c11      	adds	r1, r2, #0
 800888c:	2202      	movs	r2, #2
 800888e:	430a      	orrs	r2, r1
 8008890:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2243      	movs	r2, #67	; 0x43
 8008896:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008898:	4b02      	ldr	r3, [pc, #8]	; (80088a4 <USBD_CDC_GetHSCfgDesc+0x8c>)
}
 800889a:	0018      	movs	r0, r3
 800889c:	46bd      	mov	sp, r7
 800889e:	b006      	add	sp, #24
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	46c0      	nop			; (mov r8, r8)
 80088a4:	20000080 	.word	0x20000080

080088a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b086      	sub	sp, #24
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80088b0:	4b20      	ldr	r3, [pc, #128]	; (8008934 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 80088b2:	2182      	movs	r1, #130	; 0x82
 80088b4:	0018      	movs	r0, r3
 80088b6:	f000 fd0c 	bl	80092d2 <USBD_GetEpDesc>
 80088ba:	0003      	movs	r3, r0
 80088bc:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80088be:	4b1d      	ldr	r3, [pc, #116]	; (8008934 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 80088c0:	2101      	movs	r1, #1
 80088c2:	0018      	movs	r0, r3
 80088c4:	f000 fd05 	bl	80092d2 <USBD_GetEpDesc>
 80088c8:	0003      	movs	r3, r0
 80088ca:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80088cc:	4b19      	ldr	r3, [pc, #100]	; (8008934 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 80088ce:	2181      	movs	r1, #129	; 0x81
 80088d0:	0018      	movs	r0, r3
 80088d2:	f000 fcfe 	bl	80092d2 <USBD_GetEpDesc>
 80088d6:	0003      	movs	r3, r0
 80088d8:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d002      	beq.n	80088e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	2210      	movs	r2, #16
 80088e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d00b      	beq.n	8008904 <USBD_CDC_GetOtherSpeedCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	791a      	ldrb	r2, [r3, #4]
 80088f0:	2100      	movs	r1, #0
 80088f2:	400a      	ands	r2, r1
 80088f4:	1c11      	adds	r1, r2, #0
 80088f6:	2240      	movs	r2, #64	; 0x40
 80088f8:	430a      	orrs	r2, r1
 80088fa:	711a      	strb	r2, [r3, #4]
 80088fc:	795a      	ldrb	r2, [r3, #5]
 80088fe:	2100      	movs	r1, #0
 8008900:	400a      	ands	r2, r1
 8008902:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d00b      	beq.n	8008922 <USBD_CDC_GetOtherSpeedCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	791a      	ldrb	r2, [r3, #4]
 800890e:	2100      	movs	r1, #0
 8008910:	400a      	ands	r2, r1
 8008912:	1c11      	adds	r1, r2, #0
 8008914:	2240      	movs	r2, #64	; 0x40
 8008916:	430a      	orrs	r2, r1
 8008918:	711a      	strb	r2, [r3, #4]
 800891a:	795a      	ldrb	r2, [r3, #5]
 800891c:	2100      	movs	r1, #0
 800891e:	400a      	ands	r2, r1
 8008920:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2243      	movs	r2, #67	; 0x43
 8008926:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008928:	4b02      	ldr	r3, [pc, #8]	; (8008934 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
}
 800892a:	0018      	movs	r0, r3
 800892c:	46bd      	mov	sp, r7
 800892e:	b006      	add	sp, #24
 8008930:	bd80      	pop	{r7, pc}
 8008932:	46c0      	nop			; (mov r8, r8)
 8008934:	20000080 	.word	0x20000080

08008938 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	220a      	movs	r2, #10
 8008944:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008946:	4b02      	ldr	r3, [pc, #8]	; (8008950 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8008948:	0018      	movs	r0, r3
 800894a:	46bd      	mov	sp, r7
 800894c:	b002      	add	sp, #8
 800894e:	bd80      	pop	{r7, pc}
 8008950:	2000003c 	.word	0x2000003c

08008954 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b082      	sub	sp, #8
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d101      	bne.n	8008968 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008964:	2303      	movs	r3, #3
 8008966:	e00b      	b.n	8008980 <USBD_CDC_RegisterInterface+0x2c>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	23b5      	movs	r3, #181	; 0xb5
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	58d3      	ldr	r3, [r2, r3]
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	33b0      	adds	r3, #176	; 0xb0
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	18d3      	adds	r3, r2, r3
 8008978:	3304      	adds	r3, #4
 800897a:	683a      	ldr	r2, [r7, #0]
 800897c:	601a      	str	r2, [r3, #0]

  return (uint8_t)USBD_OK;
 800897e:	2300      	movs	r3, #0
}
 8008980:	0018      	movs	r0, r3
 8008982:	46bd      	mov	sp, r7
 8008984:	b002      	add	sp, #8
 8008986:	bd80      	pop	{r7, pc}

08008988 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b086      	sub	sp, #24
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008994:	68fa      	ldr	r2, [r7, #12]
 8008996:	23b5      	movs	r3, #181	; 0xb5
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	58d2      	ldr	r2, [r2, r3]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	32b0      	adds	r2, #176	; 0xb0
 80089a0:	0092      	lsls	r2, r2, #2
 80089a2:	58d3      	ldr	r3, [r2, r3]
 80089a4:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d101      	bne.n	80089b0 <USBD_CDC_SetTxBuffer+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80089ac:	2303      	movs	r3, #3
 80089ae:	e00a      	b.n	80089c6 <USBD_CDC_SetTxBuffer+0x3e>
  }

  hcdc->TxBuffer = pbuff;
 80089b0:	697a      	ldr	r2, [r7, #20]
 80089b2:	2382      	movs	r3, #130	; 0x82
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	68b9      	ldr	r1, [r7, #8]
 80089b8:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 80089ba:	697a      	ldr	r2, [r7, #20]
 80089bc:	2384      	movs	r3, #132	; 0x84
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	6879      	ldr	r1, [r7, #4]
 80089c2:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	0018      	movs	r0, r3
 80089c8:	46bd      	mov	sp, r7
 80089ca:	b006      	add	sp, #24
 80089cc:	bd80      	pop	{r7, pc}

080089ce <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b084      	sub	sp, #16
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
 80089d6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	23b5      	movs	r3, #181	; 0xb5
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	58d2      	ldr	r2, [r2, r3]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	32b0      	adds	r2, #176	; 0xb0
 80089e4:	0092      	lsls	r2, r2, #2
 80089e6:	58d3      	ldr	r3, [r2, r3]
 80089e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d101      	bne.n	80089f4 <USBD_CDC_SetRxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80089f0:	2303      	movs	r3, #3
 80089f2:	e005      	b.n	8008a00 <USBD_CDC_SetRxBuffer+0x32>
  }

  hcdc->RxBuffer = pbuff;
 80089f4:	68fa      	ldr	r2, [r7, #12]
 80089f6:	2381      	movs	r3, #129	; 0x81
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	6839      	ldr	r1, [r7, #0]
 80089fc:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 80089fe:	2300      	movs	r3, #0
}
 8008a00:	0018      	movs	r0, r3
 8008a02:	46bd      	mov	sp, r7
 8008a04:	b004      	add	sp, #16
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008a08:	b590      	push	{r4, r7, lr}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	23b5      	movs	r3, #181	; 0xb5
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	58d2      	ldr	r2, [r2, r3]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	32b0      	adds	r2, #176	; 0xb0
 8008a1c:	0092      	lsls	r2, r2, #2
 8008a1e:	58d3      	ldr	r3, [r2, r3]
 8008a20:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008a22:	230f      	movs	r3, #15
 8008a24:	18fb      	adds	r3, r7, r3
 8008a26:	2201      	movs	r2, #1
 8008a28:	701a      	strb	r2, [r3, #0]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d101      	bne.n	8008a34 <USBD_CDC_TransmitPacket+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8008a30:	2303      	movs	r3, #3
 8008a32:	e030      	b.n	8008a96 <USBD_CDC_TransmitPacket+0x8e>
  }

  if (hcdc->TxState == 0U)
 8008a34:	68ba      	ldr	r2, [r7, #8]
 8008a36:	2385      	movs	r3, #133	; 0x85
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	58d3      	ldr	r3, [r2, r3]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d127      	bne.n	8008a90 <USBD_CDC_TransmitPacket+0x88>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008a40:	68ba      	ldr	r2, [r7, #8]
 8008a42:	2385      	movs	r3, #133	; 0x85
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	2101      	movs	r1, #1
 8008a48:	50d1      	str	r1, [r2, r3]

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008a4a:	4b15      	ldr	r3, [pc, #84]	; (8008aa0 <USBD_CDC_TransmitPacket+0x98>)
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	001a      	movs	r2, r3
 8008a50:	230f      	movs	r3, #15
 8008a52:	401a      	ands	r2, r3
 8008a54:	68b9      	ldr	r1, [r7, #8]
 8008a56:	2384      	movs	r3, #132	; 0x84
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	58c9      	ldr	r1, [r1, r3]
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	0013      	movs	r3, r2
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	189b      	adds	r3, r3, r2
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	18c3      	adds	r3, r0, r3
 8008a68:	3318      	adds	r3, #24
 8008a6a:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008a6c:	4b0c      	ldr	r3, [pc, #48]	; (8008aa0 <USBD_CDC_TransmitPacket+0x98>)
 8008a6e:	7819      	ldrb	r1, [r3, #0]
 8008a70:	68ba      	ldr	r2, [r7, #8]
 8008a72:	2382      	movs	r3, #130	; 0x82
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	58d4      	ldr	r4, [r2, r3]
 8008a78:	68ba      	ldr	r2, [r7, #8]
 8008a7a:	2384      	movs	r3, #132	; 0x84
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	58d3      	ldr	r3, [r2, r3]
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	0022      	movs	r2, r4
 8008a84:	f002 f973 	bl	800ad6e <USBD_LL_Transmit>

    ret = USBD_OK;
 8008a88:	230f      	movs	r3, #15
 8008a8a:	18fb      	adds	r3, r7, r3
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	701a      	strb	r2, [r3, #0]
  }

  return (uint8_t)ret;
 8008a90:	230f      	movs	r3, #15
 8008a92:	18fb      	adds	r3, r7, r3
 8008a94:	781b      	ldrb	r3, [r3, #0]
}
 8008a96:	0018      	movs	r0, r3
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	b005      	add	sp, #20
 8008a9c:	bd90      	pop	{r4, r7, pc}
 8008a9e:	46c0      	nop			; (mov r8, r8)
 8008aa0:	200000c3 	.word	0x200000c3

08008aa4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	23b5      	movs	r3, #181	; 0xb5
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	58d2      	ldr	r2, [r2, r3]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	32b0      	adds	r2, #176	; 0xb0
 8008ab8:	0092      	lsls	r2, r2, #2
 8008aba:	58d3      	ldr	r3, [r2, r3]
 8008abc:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	23b5      	movs	r3, #181	; 0xb5
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	58d2      	ldr	r2, [r2, r3]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	32b0      	adds	r2, #176	; 0xb0
 8008aca:	0092      	lsls	r2, r2, #2
 8008acc:	58d3      	ldr	r3, [r2, r3]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d101      	bne.n	8008ad6 <USBD_CDC_ReceivePacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008ad2:	2303      	movs	r3, #3
 8008ad4:	e01a      	b.n	8008b0c <USBD_CDC_ReceivePacket+0x68>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	7c1b      	ldrb	r3, [r3, #16]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d10b      	bne.n	8008af6 <USBD_CDC_ReceivePacket+0x52>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008ade:	4b0d      	ldr	r3, [pc, #52]	; (8008b14 <USBD_CDC_ReceivePacket+0x70>)
 8008ae0:	7819      	ldrb	r1, [r3, #0]
 8008ae2:	68fa      	ldr	r2, [r7, #12]
 8008ae4:	2381      	movs	r3, #129	; 0x81
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	58d2      	ldr	r2, [r2, r3]
 8008aea:	2380      	movs	r3, #128	; 0x80
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f002 f96d 	bl	800adce <USBD_LL_PrepareReceive>
 8008af4:	e009      	b.n	8008b0a <USBD_CDC_ReceivePacket+0x66>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008af6:	4b07      	ldr	r3, [pc, #28]	; (8008b14 <USBD_CDC_ReceivePacket+0x70>)
 8008af8:	7819      	ldrb	r1, [r3, #0]
 8008afa:	68fa      	ldr	r2, [r7, #12]
 8008afc:	2381      	movs	r3, #129	; 0x81
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	58d2      	ldr	r2, [r2, r3]
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	2340      	movs	r3, #64	; 0x40
 8008b06:	f002 f962 	bl	800adce <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	0018      	movs	r0, r3
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	b004      	add	sp, #16
 8008b12:	bd80      	pop	{r7, pc}
 8008b14:	200000c4 	.word	0x200000c4

08008b18 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008b18:	b5b0      	push	{r4, r5, r7, lr}
 8008b1a:	b086      	sub	sp, #24
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	60b9      	str	r1, [r7, #8]
 8008b22:	1dfb      	adds	r3, r7, #7
 8008b24:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d101      	bne.n	8008b30 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008b2c:	2303      	movs	r3, #3
 8008b2e:	e029      	b.n	8008b84 <USBD_Init+0x6c>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008b30:	68fa      	ldr	r2, [r7, #12]
 8008b32:	23ae      	movs	r3, #174	; 0xae
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	2100      	movs	r1, #0
 8008b38:	50d1      	str	r1, [r2, r3]
  pdev->pUserData[0] = NULL;
 8008b3a:	68fa      	ldr	r2, [r7, #12]
 8008b3c:	23b1      	movs	r3, #177	; 0xb1
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	2100      	movs	r1, #0
 8008b42:	50d1      	str	r1, [r2, r3]
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008b44:	68fa      	ldr	r2, [r7, #12]
 8008b46:	23b4      	movs	r3, #180	; 0xb4
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	2100      	movs	r1, #0
 8008b4c:	50d1      	str	r1, [r2, r3]

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d004      	beq.n	8008b5e <USBD_Init+0x46>
  {
    pdev->pDesc = pdesc;
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	23ad      	movs	r3, #173	; 0xad
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	68b9      	ldr	r1, [r7, #8]
 8008b5c:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b5e:	68fa      	ldr	r2, [r7, #12]
 8008b60:	23a7      	movs	r3, #167	; 0xa7
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	2101      	movs	r1, #1
 8008b66:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	1dfa      	adds	r2, r7, #7
 8008b6c:	7812      	ldrb	r2, [r2, #0]
 8008b6e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008b70:	2517      	movs	r5, #23
 8008b72:	197c      	adds	r4, r7, r5
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	0018      	movs	r0, r3
 8008b78:	f001 ff4e 	bl	800aa18 <USBD_LL_Init>
 8008b7c:	0003      	movs	r3, r0
 8008b7e:	7023      	strb	r3, [r4, #0]

  return ret;
 8008b80:	197b      	adds	r3, r7, r5
 8008b82:	781b      	ldrb	r3, [r3, #0]
}
 8008b84:	0018      	movs	r0, r3
 8008b86:	46bd      	mov	sp, r7
 8008b88:	b006      	add	sp, #24
 8008b8a:	bdb0      	pop	{r4, r5, r7, pc}

08008b8c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b96:	230e      	movs	r3, #14
 8008b98:	18fb      	adds	r3, r7, r3
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	801a      	strh	r2, [r3, #0]

  if (pclass == NULL)
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d101      	bne.n	8008ba8 <USBD_RegisterClass+0x1c>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008ba4:	2303      	movs	r3, #3
 8008ba6:	e02b      	b.n	8008c00 <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	23ae      	movs	r3, #174	; 0xae
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	6839      	ldr	r1, [r7, #0]
 8008bb0:	50d1      	str	r1, [r2, r3]
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	23b5      	movs	r3, #181	; 0xb5
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	58d2      	ldr	r2, [r2, r3]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	32ae      	adds	r2, #174	; 0xae
 8008bbe:	0092      	lsls	r2, r2, #2
 8008bc0:	58d3      	ldr	r3, [r2, r3]
 8008bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d011      	beq.n	8008bec <USBD_RegisterClass+0x60>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	23b5      	movs	r3, #181	; 0xb5
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	58d2      	ldr	r2, [r2, r3]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	32ae      	adds	r2, #174	; 0xae
 8008bd4:	0092      	lsls	r2, r2, #2
 8008bd6:	58d3      	ldr	r3, [r2, r3]
 8008bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bda:	220e      	movs	r2, #14
 8008bdc:	18ba      	adds	r2, r7, r2
 8008bde:	0010      	movs	r0, r2
 8008be0:	4798      	blx	r3
 8008be2:	0001      	movs	r1, r0
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	23b4      	movs	r3, #180	; 0xb4
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	50d1      	str	r1, [r2, r3]
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	23b6      	movs	r3, #182	; 0xb6
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	58d3      	ldr	r3, [r2, r3]
 8008bf4:	1c59      	adds	r1, r3, #1
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	23b6      	movs	r3, #182	; 0xb6
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8008bfe:	2300      	movs	r3, #0
}
 8008c00:	0018      	movs	r0, r3
 8008c02:	46bd      	mov	sp, r7
 8008c04:	b004      	add	sp, #16
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	0018      	movs	r0, r3
 8008c14:	f001 ff72 	bl	800aafc <USBD_LL_Start>
 8008c18:	0003      	movs	r3, r0
}
 8008c1a:	0018      	movs	r0, r3
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	b002      	add	sp, #8
 8008c20:	bd80      	pop	{r7, pc}

08008c22 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008c22:	b580      	push	{r7, lr}
 8008c24:	b082      	sub	sp, #8
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c2a:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008c2c:	0018      	movs	r0, r3
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	b002      	add	sp, #8
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c34:	b590      	push	{r4, r7, lr}
 8008c36:	b085      	sub	sp, #20
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	000a      	movs	r2, r1
 8008c3e:	1cfb      	adds	r3, r7, #3
 8008c40:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c42:	210f      	movs	r1, #15
 8008c44:	187b      	adds	r3, r7, r1
 8008c46:	2200      	movs	r2, #0
 8008c48:	701a      	strb	r2, [r3, #0]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	23ae      	movs	r3, #174	; 0xae
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	58d3      	ldr	r3, [r2, r3]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d00c      	beq.n	8008c70 <USBD_SetClassConfig+0x3c>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	23ae      	movs	r3, #174	; 0xae
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	58d3      	ldr	r3, [r2, r3]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	187c      	adds	r4, r7, r1
 8008c62:	1cfa      	adds	r2, r7, #3
 8008c64:	7811      	ldrb	r1, [r2, #0]
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	0010      	movs	r0, r2
 8008c6a:	4798      	blx	r3
 8008c6c:	0003      	movs	r3, r0
 8008c6e:	7023      	strb	r3, [r4, #0]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008c70:	230f      	movs	r3, #15
 8008c72:	18fb      	adds	r3, r7, r3
 8008c74:	781b      	ldrb	r3, [r3, #0]
}
 8008c76:	0018      	movs	r0, r3
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	b005      	add	sp, #20
 8008c7c:	bd90      	pop	{r4, r7, pc}

08008c7e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c7e:	b590      	push	{r4, r7, lr}
 8008c80:	b085      	sub	sp, #20
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
 8008c86:	000a      	movs	r2, r1
 8008c88:	1cfb      	adds	r3, r7, #3
 8008c8a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c8c:	240f      	movs	r4, #15
 8008c8e:	193b      	adds	r3, r7, r4
 8008c90:	2200      	movs	r2, #0
 8008c92:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	23ae      	movs	r3, #174	; 0xae
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	58d3      	ldr	r3, [r2, r3]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	1cfa      	adds	r2, r7, #3
 8008ca0:	7811      	ldrb	r1, [r2, #0]
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	0010      	movs	r0, r2
 8008ca6:	4798      	blx	r3
 8008ca8:	1e03      	subs	r3, r0, #0
 8008caa:	d002      	beq.n	8008cb2 <USBD_ClrClassConfig+0x34>
  {
    ret = USBD_FAIL;
 8008cac:	193b      	adds	r3, r7, r4
 8008cae:	2203      	movs	r2, #3
 8008cb0:	701a      	strb	r2, [r3, #0]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008cb2:	230f      	movs	r3, #15
 8008cb4:	18fb      	adds	r3, r7, r3
 8008cb6:	781b      	ldrb	r3, [r3, #0]
}
 8008cb8:	0018      	movs	r0, r3
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	b005      	add	sp, #20
 8008cbe:	bd90      	pop	{r4, r7, pc}

08008cc0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008cc0:	b590      	push	{r4, r7, lr}
 8008cc2:	b085      	sub	sp, #20
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	4a30      	ldr	r2, [pc, #192]	; (8008d90 <USBD_LL_SetupStage+0xd0>)
 8008cce:	4694      	mov	ip, r2
 8008cd0:	4463      	add	r3, ip
 8008cd2:	683a      	ldr	r2, [r7, #0]
 8008cd4:	0011      	movs	r1, r2
 8008cd6:	0018      	movs	r0, r3
 8008cd8:	f001 fa3d 	bl	800a156 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	23a5      	movs	r3, #165	; 0xa5
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	2101      	movs	r1, #1
 8008ce4:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	23ac      	movs	r3, #172	; 0xac
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	5ad3      	ldrh	r3, [r2, r3]
 8008cee:	0019      	movs	r1, r3
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	23a6      	movs	r3, #166	; 0xa6
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4a25      	ldr	r2, [pc, #148]	; (8008d90 <USBD_LL_SetupStage+0xd0>)
 8008cfc:	5c9b      	ldrb	r3, [r3, r2]
 8008cfe:	001a      	movs	r2, r3
 8008d00:	231f      	movs	r3, #31
 8008d02:	4013      	ands	r3, r2
 8008d04:	2b02      	cmp	r3, #2
 8008d06:	d01f      	beq.n	8008d48 <USBD_LL_SetupStage+0x88>
 8008d08:	d82b      	bhi.n	8008d62 <USBD_LL_SetupStage+0xa2>
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d002      	beq.n	8008d14 <USBD_LL_SetupStage+0x54>
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d00d      	beq.n	8008d2e <USBD_LL_SetupStage+0x6e>
 8008d12:	e026      	b.n	8008d62 <USBD_LL_SetupStage+0xa2>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a1e      	ldr	r2, [pc, #120]	; (8008d90 <USBD_LL_SetupStage+0xd0>)
 8008d18:	189a      	adds	r2, r3, r2
 8008d1a:	230f      	movs	r3, #15
 8008d1c:	18fc      	adds	r4, r7, r3
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	0011      	movs	r1, r2
 8008d22:	0018      	movs	r0, r3
 8008d24:	f000 fb5e 	bl	80093e4 <USBD_StdDevReq>
 8008d28:	0003      	movs	r3, r0
 8008d2a:	7023      	strb	r3, [r4, #0]
      break;
 8008d2c:	e029      	b.n	8008d82 <USBD_LL_SetupStage+0xc2>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a17      	ldr	r2, [pc, #92]	; (8008d90 <USBD_LL_SetupStage+0xd0>)
 8008d32:	189a      	adds	r2, r3, r2
 8008d34:	230f      	movs	r3, #15
 8008d36:	18fc      	adds	r4, r7, r3
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	0011      	movs	r1, r2
 8008d3c:	0018      	movs	r0, r3
 8008d3e:	f000 fbcf 	bl	80094e0 <USBD_StdItfReq>
 8008d42:	0003      	movs	r3, r0
 8008d44:	7023      	strb	r3, [r4, #0]
      break;
 8008d46:	e01c      	b.n	8008d82 <USBD_LL_SetupStage+0xc2>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	4a11      	ldr	r2, [pc, #68]	; (8008d90 <USBD_LL_SetupStage+0xd0>)
 8008d4c:	189a      	adds	r2, r3, r2
 8008d4e:	230f      	movs	r3, #15
 8008d50:	18fc      	adds	r4, r7, r3
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	0011      	movs	r1, r2
 8008d56:	0018      	movs	r0, r3
 8008d58:	f000 fc4f 	bl	80095fa <USBD_StdEPReq>
 8008d5c:	0003      	movs	r3, r0
 8008d5e:	7023      	strb	r3, [r4, #0]
      break;
 8008d60:	e00f      	b.n	8008d82 <USBD_LL_SetupStage+0xc2>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4a0a      	ldr	r2, [pc, #40]	; (8008d90 <USBD_LL_SetupStage+0xd0>)
 8008d66:	5c9b      	ldrb	r3, [r3, r2]
 8008d68:	227f      	movs	r2, #127	; 0x7f
 8008d6a:	4393      	bics	r3, r2
 8008d6c:	b2da      	uxtb	r2, r3
 8008d6e:	230f      	movs	r3, #15
 8008d70:	18fc      	adds	r4, r7, r3
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	0011      	movs	r1, r2
 8008d76:	0018      	movs	r0, r3
 8008d78:	f001 ff47 	bl	800ac0a <USBD_LL_StallEP>
 8008d7c:	0003      	movs	r3, r0
 8008d7e:	7023      	strb	r3, [r4, #0]
      break;
 8008d80:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8008d82:	230f      	movs	r3, #15
 8008d84:	18fb      	adds	r3, r7, r3
 8008d86:	781b      	ldrb	r3, [r3, #0]
}
 8008d88:	0018      	movs	r0, r3
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	b005      	add	sp, #20
 8008d8e:	bd90      	pop	{r4, r7, pc}
 8008d90:	000002aa 	.word	0x000002aa

08008d94 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d96:	b087      	sub	sp, #28
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	607a      	str	r2, [r7, #4]
 8008d9e:	200b      	movs	r0, #11
 8008da0:	183b      	adds	r3, r7, r0
 8008da2:	1c0a      	adds	r2, r1, #0
 8008da4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008da6:	2317      	movs	r3, #23
 8008da8:	18fb      	adds	r3, r7, r3
 8008daa:	2200      	movs	r2, #0
 8008dac:	701a      	strb	r2, [r3, #0]
  uint8_t idx;

  if (epnum == 0U)
 8008dae:	183b      	adds	r3, r7, r0
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d000      	beq.n	8008db8 <USBD_LL_DataOutStage+0x24>
 8008db6:	e084      	b.n	8008ec2 <USBD_LL_DataOutStage+0x12e>
  {
    pep = &pdev->ep_out[0];
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	3355      	adds	r3, #85	; 0x55
 8008dbc:	33ff      	adds	r3, #255	; 0xff
 8008dbe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008dc0:	68fa      	ldr	r2, [r7, #12]
 8008dc2:	23a5      	movs	r3, #165	; 0xa5
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	58d3      	ldr	r3, [r2, r3]
 8008dc8:	2b03      	cmp	r3, #3
 8008dca:	d000      	beq.n	8008dce <USBD_LL_DataOutStage+0x3a>
 8008dcc:	e0c0      	b.n	8008f50 <USBD_LL_DataOutStage+0x1bc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	689a      	ldr	r2, [r3, #8]
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d914      	bls.n	8008e04 <USBD_LL_DataOutStage+0x70>
      {
        pep->rem_length -= pep->maxpacket;
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	689a      	ldr	r2, [r3, #8]
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	68db      	ldr	r3, [r3, #12]
 8008de2:	1ad2      	subs	r2, r2, r3
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	68d9      	ldr	r1, [r3, #12]
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	689a      	ldr	r2, [r3, #8]
 8008df0:	000b      	movs	r3, r1
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d900      	bls.n	8008df8 <USBD_LL_DataOutStage+0x64>
 8008df6:	0013      	movs	r3, r2
 8008df8:	6879      	ldr	r1, [r7, #4]
 8008dfa:	68f8      	ldr	r0, [r7, #12]
 8008dfc:	001a      	movs	r2, r3
 8008dfe:	f001 fabc 	bl	800a37a <USBD_CtlContinueRx>
 8008e02:	e0a5      	b.n	8008f50 <USBD_LL_DataOutStage+0x1bc>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	4a55      	ldr	r2, [pc, #340]	; (8008f5c <USBD_LL_DataOutStage+0x1c8>)
 8008e08:	5c9b      	ldrb	r3, [r3, r2]
 8008e0a:	001a      	movs	r2, r3
 8008e0c:	231f      	movs	r3, #31
 8008e0e:	4013      	ands	r3, r2
 8008e10:	2b02      	cmp	r3, #2
 8008e12:	d018      	beq.n	8008e46 <USBD_LL_DataOutStage+0xb2>
 8008e14:	d825      	bhi.n	8008e62 <USBD_LL_DataOutStage+0xce>
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d002      	beq.n	8008e20 <USBD_LL_DataOutStage+0x8c>
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d005      	beq.n	8008e2a <USBD_LL_DataOutStage+0x96>
 8008e1e:	e020      	b.n	8008e62 <USBD_LL_DataOutStage+0xce>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008e20:	2316      	movs	r3, #22
 8008e22:	18fb      	adds	r3, r7, r3
 8008e24:	2200      	movs	r2, #0
 8008e26:	701a      	strb	r2, [r3, #0]
            break;
 8008e28:	e020      	b.n	8008e6c <USBD_LL_DataOutStage+0xd8>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	4a4c      	ldr	r2, [pc, #304]	; (8008f60 <USBD_LL_DataOutStage+0x1cc>)
 8008e2e:	5a9b      	ldrh	r3, [r3, r2]
 8008e30:	b2da      	uxtb	r2, r3
 8008e32:	2316      	movs	r3, #22
 8008e34:	18fc      	adds	r4, r7, r3
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	0011      	movs	r1, r2
 8008e3a:	0018      	movs	r0, r3
 8008e3c:	f000 fa31 	bl	80092a2 <USBD_CoreFindIF>
 8008e40:	0003      	movs	r3, r0
 8008e42:	7023      	strb	r3, [r4, #0]
            break;
 8008e44:	e012      	b.n	8008e6c <USBD_LL_DataOutStage+0xd8>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	4a45      	ldr	r2, [pc, #276]	; (8008f60 <USBD_LL_DataOutStage+0x1cc>)
 8008e4a:	5a9b      	ldrh	r3, [r3, r2]
 8008e4c:	b2da      	uxtb	r2, r3
 8008e4e:	2316      	movs	r3, #22
 8008e50:	18fc      	adds	r4, r7, r3
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	0011      	movs	r1, r2
 8008e56:	0018      	movs	r0, r3
 8008e58:	f000 fa2f 	bl	80092ba <USBD_CoreFindEP>
 8008e5c:	0003      	movs	r3, r0
 8008e5e:	7023      	strb	r3, [r4, #0]
            break;
 8008e60:	e004      	b.n	8008e6c <USBD_LL_DataOutStage+0xd8>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008e62:	2316      	movs	r3, #22
 8008e64:	18fb      	adds	r3, r7, r3
 8008e66:	2200      	movs	r2, #0
 8008e68:	701a      	strb	r2, [r3, #0]
            break;
 8008e6a:	46c0      	nop			; (mov r8, r8)
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008e6c:	2116      	movs	r1, #22
 8008e6e:	187b      	adds	r3, r7, r1
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d120      	bne.n	8008eb8 <USBD_LL_DataOutStage+0x124>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	23a7      	movs	r3, #167	; 0xa7
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	5cd3      	ldrb	r3, [r2, r3]
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	2b03      	cmp	r3, #3
 8008e82:	d119      	bne.n	8008eb8 <USBD_LL_DataOutStage+0x124>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008e84:	187b      	adds	r3, r7, r1
 8008e86:	781a      	ldrb	r2, [r3, #0]
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	32ae      	adds	r2, #174	; 0xae
 8008e8c:	0092      	lsls	r2, r2, #2
 8008e8e:	58d3      	ldr	r3, [r2, r3]
 8008e90:	691b      	ldr	r3, [r3, #16]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d010      	beq.n	8008eb8 <USBD_LL_DataOutStage+0x124>
            {
              pdev->classId = idx;
 8008e96:	0008      	movs	r0, r1
 8008e98:	187b      	adds	r3, r7, r1
 8008e9a:	7819      	ldrb	r1, [r3, #0]
 8008e9c:	68fa      	ldr	r2, [r7, #12]
 8008e9e:	23b5      	movs	r3, #181	; 0xb5
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	50d1      	str	r1, [r2, r3]
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008ea4:	183b      	adds	r3, r7, r0
 8008ea6:	781a      	ldrb	r2, [r3, #0]
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	32ae      	adds	r2, #174	; 0xae
 8008eac:	0092      	lsls	r2, r2, #2
 8008eae:	58d3      	ldr	r3, [r2, r3]
 8008eb0:	691b      	ldr	r3, [r3, #16]
 8008eb2:	68fa      	ldr	r2, [r7, #12]
 8008eb4:	0010      	movs	r0, r2
 8008eb6:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	0018      	movs	r0, r3
 8008ebc:	f001 fa6e 	bl	800a39c <USBD_CtlSendStatus>
 8008ec0:	e046      	b.n	8008f50 <USBD_LL_DataOutStage+0x1bc>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008ec2:	260b      	movs	r6, #11
 8008ec4:	19bb      	adds	r3, r7, r6
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	227f      	movs	r2, #127	; 0x7f
 8008eca:	4013      	ands	r3, r2
 8008ecc:	b2da      	uxtb	r2, r3
 8008ece:	2516      	movs	r5, #22
 8008ed0:	197c      	adds	r4, r7, r5
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	0011      	movs	r1, r2
 8008ed6:	0018      	movs	r0, r3
 8008ed8:	f000 f9ef 	bl	80092ba <USBD_CoreFindEP>
 8008edc:	0003      	movs	r3, r0
 8008ede:	7023      	strb	r3, [r4, #0]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ee0:	0029      	movs	r1, r5
 8008ee2:	187b      	adds	r3, r7, r1
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	2bff      	cmp	r3, #255	; 0xff
 8008ee8:	d032      	beq.n	8008f50 <USBD_LL_DataOutStage+0x1bc>
 8008eea:	187b      	adds	r3, r7, r1
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d12e      	bne.n	8008f50 <USBD_LL_DataOutStage+0x1bc>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	23a7      	movs	r3, #167	; 0xa7
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	5cd3      	ldrb	r3, [r2, r3]
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	2b03      	cmp	r3, #3
 8008efe:	d11f      	bne.n	8008f40 <USBD_LL_DataOutStage+0x1ac>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008f00:	187b      	adds	r3, r7, r1
 8008f02:	781a      	ldrb	r2, [r3, #0]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	32ae      	adds	r2, #174	; 0xae
 8008f08:	0092      	lsls	r2, r2, #2
 8008f0a:	58d3      	ldr	r3, [r2, r3]
 8008f0c:	699b      	ldr	r3, [r3, #24]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d016      	beq.n	8008f40 <USBD_LL_DataOutStage+0x1ac>
        {
          pdev->classId = idx;
 8008f12:	0008      	movs	r0, r1
 8008f14:	187b      	adds	r3, r7, r1
 8008f16:	7819      	ldrb	r1, [r3, #0]
 8008f18:	68fa      	ldr	r2, [r7, #12]
 8008f1a:	23b5      	movs	r3, #181	; 0xb5
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	50d1      	str	r1, [r2, r3]
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008f20:	183b      	adds	r3, r7, r0
 8008f22:	781a      	ldrb	r2, [r3, #0]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	32ae      	adds	r2, #174	; 0xae
 8008f28:	0092      	lsls	r2, r2, #2
 8008f2a:	58d3      	ldr	r3, [r2, r3]
 8008f2c:	699b      	ldr	r3, [r3, #24]
 8008f2e:	2217      	movs	r2, #23
 8008f30:	18bc      	adds	r4, r7, r2
 8008f32:	19ba      	adds	r2, r7, r6
 8008f34:	7811      	ldrb	r1, [r2, #0]
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	0010      	movs	r0, r2
 8008f3a:	4798      	blx	r3
 8008f3c:	0003      	movs	r3, r0
 8008f3e:	7023      	strb	r3, [r4, #0]
        }
      }
      if (ret != USBD_OK)
 8008f40:	2217      	movs	r2, #23
 8008f42:	18bb      	adds	r3, r7, r2
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d002      	beq.n	8008f50 <USBD_LL_DataOutStage+0x1bc>
      {
        return ret;
 8008f4a:	18bb      	adds	r3, r7, r2
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	e000      	b.n	8008f52 <USBD_LL_DataOutStage+0x1be>
      }
    }
  }

  return USBD_OK;
 8008f50:	2300      	movs	r3, #0
}
 8008f52:	0018      	movs	r0, r3
 8008f54:	46bd      	mov	sp, r7
 8008f56:	b007      	add	sp, #28
 8008f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f5a:	46c0      	nop			; (mov r8, r8)
 8008f5c:	000002aa 	.word	0x000002aa
 8008f60:	000002ae 	.word	0x000002ae

08008f64 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f66:	b087      	sub	sp, #28
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	607a      	str	r2, [r7, #4]
 8008f6e:	200b      	movs	r0, #11
 8008f70:	183b      	adds	r3, r7, r0
 8008f72:	1c0a      	adds	r2, r1, #0
 8008f74:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008f76:	183b      	adds	r3, r7, r0
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d000      	beq.n	8008f80 <USBD_LL_DataInStage+0x1c>
 8008f7e:	e07d      	b.n	800907c <USBD_LL_DataInStage+0x118>
  {
    pep = &pdev->ep_in[0];
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	3314      	adds	r3, #20
 8008f84:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008f86:	68fa      	ldr	r2, [r7, #12]
 8008f88:	23a5      	movs	r3, #165	; 0xa5
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	58d3      	ldr	r3, [r2, r3]
 8008f8e:	2b02      	cmp	r3, #2
 8008f90:	d164      	bne.n	800905c <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	689a      	ldr	r2, [r3, #8]
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d914      	bls.n	8008fc8 <USBD_LL_DataInStage+0x64>
      {
        pep->rem_length -= pep->maxpacket;
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	689a      	ldr	r2, [r3, #8]
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	68db      	ldr	r3, [r3, #12]
 8008fa6:	1ad2      	subs	r2, r2, r3
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	689a      	ldr	r2, [r3, #8]
 8008fb0:	6879      	ldr	r1, [r7, #4]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	0018      	movs	r0, r3
 8008fb6:	f001 f9af 	bl	800a318 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fba:	68f8      	ldr	r0, [r7, #12]
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	2100      	movs	r1, #0
 8008fc2:	f001 ff04 	bl	800adce <USBD_LL_PrepareReceive>
 8008fc6:	e049      	b.n	800905c <USBD_LL_DataInStage+0xf8>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	68da      	ldr	r2, [r3, #12]
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d11f      	bne.n	8009014 <USBD_LL_DataInStage+0xb0>
            (pep->total_length >= pep->maxpacket) &&
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	685a      	ldr	r2, [r3, #4]
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d319      	bcc.n	8009014 <USBD_LL_DataInStage+0xb0>
            (pep->total_length < pdev->ep0_data_len))
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	685a      	ldr	r2, [r3, #4]
 8008fe4:	68f9      	ldr	r1, [r7, #12]
 8008fe6:	23a6      	movs	r3, #166	; 0xa6
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d211      	bcs.n	8009014 <USBD_LL_DataInStage+0xb0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	2100      	movs	r1, #0
 8008ff6:	0018      	movs	r0, r3
 8008ff8:	f001 f98e 	bl	800a318 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008ffc:	68fa      	ldr	r2, [r7, #12]
 8008ffe:	23a6      	movs	r3, #166	; 0xa6
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	2100      	movs	r1, #0
 8009004:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009006:	68f8      	ldr	r0, [r7, #12]
 8009008:	2300      	movs	r3, #0
 800900a:	2200      	movs	r2, #0
 800900c:	2100      	movs	r1, #0
 800900e:	f001 fede 	bl	800adce <USBD_LL_PrepareReceive>
 8009012:	e023      	b.n	800905c <USBD_LL_DataInStage+0xf8>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009014:	68fa      	ldr	r2, [r7, #12]
 8009016:	23a7      	movs	r3, #167	; 0xa7
 8009018:	009b      	lsls	r3, r3, #2
 800901a:	5cd3      	ldrb	r3, [r2, r3]
 800901c:	b2db      	uxtb	r3, r3
 800901e:	2b03      	cmp	r3, #3
 8009020:	d113      	bne.n	800904a <USBD_LL_DataInStage+0xe6>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009022:	68fa      	ldr	r2, [r7, #12]
 8009024:	23ae      	movs	r3, #174	; 0xae
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	58d3      	ldr	r3, [r2, r3]
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d00c      	beq.n	800904a <USBD_LL_DataInStage+0xe6>
            {
              pdev->classId = 0U;
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	23b5      	movs	r3, #181	; 0xb5
 8009034:	009b      	lsls	r3, r3, #2
 8009036:	2100      	movs	r1, #0
 8009038:	50d1      	str	r1, [r2, r3]
              pdev->pClass[0]->EP0_TxSent(pdev);
 800903a:	68fa      	ldr	r2, [r7, #12]
 800903c:	23ae      	movs	r3, #174	; 0xae
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	58d3      	ldr	r3, [r2, r3]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	68fa      	ldr	r2, [r7, #12]
 8009046:	0010      	movs	r0, r2
 8009048:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2180      	movs	r1, #128	; 0x80
 800904e:	0018      	movs	r0, r3
 8009050:	f001 fddb 	bl	800ac0a <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	0018      	movs	r0, r3
 8009058:	f001 f9b4 	bl	800a3c4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800905c:	68fa      	ldr	r2, [r7, #12]
 800905e:	23a8      	movs	r3, #168	; 0xa8
 8009060:	009b      	lsls	r3, r3, #2
 8009062:	5cd3      	ldrb	r3, [r2, r3]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d050      	beq.n	800910a <USBD_LL_DataInStage+0x1a6>
    {
      (void)USBD_RunTestMode(pdev);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	0018      	movs	r0, r3
 800906c:	f7ff fdd9 	bl	8008c22 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009070:	68fa      	ldr	r2, [r7, #12]
 8009072:	23a8      	movs	r3, #168	; 0xa8
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	2100      	movs	r1, #0
 8009078:	54d1      	strb	r1, [r2, r3]
 800907a:	e046      	b.n	800910a <USBD_LL_DataInStage+0x1a6>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800907c:	260b      	movs	r6, #11
 800907e:	19bb      	adds	r3, r7, r6
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	2280      	movs	r2, #128	; 0x80
 8009084:	4252      	negs	r2, r2
 8009086:	4313      	orrs	r3, r2
 8009088:	b2da      	uxtb	r2, r3
 800908a:	2517      	movs	r5, #23
 800908c:	197c      	adds	r4, r7, r5
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	0011      	movs	r1, r2
 8009092:	0018      	movs	r0, r3
 8009094:	f000 f911 	bl	80092ba <USBD_CoreFindEP>
 8009098:	0003      	movs	r3, r0
 800909a:	7023      	strb	r3, [r4, #0]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800909c:	0029      	movs	r1, r5
 800909e:	187b      	adds	r3, r7, r1
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	2bff      	cmp	r3, #255	; 0xff
 80090a4:	d031      	beq.n	800910a <USBD_LL_DataInStage+0x1a6>
 80090a6:	187b      	adds	r3, r7, r1
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d12d      	bne.n	800910a <USBD_LL_DataInStage+0x1a6>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090ae:	68fa      	ldr	r2, [r7, #12]
 80090b0:	23a7      	movs	r3, #167	; 0xa7
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	5cd3      	ldrb	r3, [r2, r3]
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	2b03      	cmp	r3, #3
 80090ba:	d126      	bne.n	800910a <USBD_LL_DataInStage+0x1a6>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80090bc:	187b      	adds	r3, r7, r1
 80090be:	781a      	ldrb	r2, [r3, #0]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	32ae      	adds	r2, #174	; 0xae
 80090c4:	0092      	lsls	r2, r2, #2
 80090c6:	58d3      	ldr	r3, [r2, r3]
 80090c8:	695b      	ldr	r3, [r3, #20]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d01d      	beq.n	800910a <USBD_LL_DataInStage+0x1a6>
        {
          pdev->classId = idx;
 80090ce:	0008      	movs	r0, r1
 80090d0:	187b      	adds	r3, r7, r1
 80090d2:	7819      	ldrb	r1, [r3, #0]
 80090d4:	68fa      	ldr	r2, [r7, #12]
 80090d6:	23b5      	movs	r3, #181	; 0xb5
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	50d1      	str	r1, [r2, r3]
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80090dc:	183b      	adds	r3, r7, r0
 80090de:	781a      	ldrb	r2, [r3, #0]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	32ae      	adds	r2, #174	; 0xae
 80090e4:	0092      	lsls	r2, r2, #2
 80090e6:	58d3      	ldr	r3, [r2, r3]
 80090e8:	695b      	ldr	r3, [r3, #20]
 80090ea:	2516      	movs	r5, #22
 80090ec:	197c      	adds	r4, r7, r5
 80090ee:	19ba      	adds	r2, r7, r6
 80090f0:	7811      	ldrb	r1, [r2, #0]
 80090f2:	68fa      	ldr	r2, [r7, #12]
 80090f4:	0010      	movs	r0, r2
 80090f6:	4798      	blx	r3
 80090f8:	0003      	movs	r3, r0
 80090fa:	7023      	strb	r3, [r4, #0]

          if (ret != USBD_OK)
 80090fc:	197b      	adds	r3, r7, r5
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d002      	beq.n	800910a <USBD_LL_DataInStage+0x1a6>
          {
            return ret;
 8009104:	197b      	adds	r3, r7, r5
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	e000      	b.n	800910c <USBD_LL_DataInStage+0x1a8>
        }
      }
    }
  }

  return USBD_OK;
 800910a:	2300      	movs	r3, #0
}
 800910c:	0018      	movs	r0, r3
 800910e:	46bd      	mov	sp, r7
 8009110:	b007      	add	sp, #28
 8009112:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009114 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009114:	b590      	push	{r4, r7, lr}
 8009116:	b085      	sub	sp, #20
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800911c:	240f      	movs	r4, #15
 800911e:	193b      	adds	r3, r7, r4
 8009120:	2200      	movs	r2, #0
 8009122:	701a      	strb	r2, [r3, #0]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	23a7      	movs	r3, #167	; 0xa7
 8009128:	009b      	lsls	r3, r3, #2
 800912a:	2101      	movs	r1, #1
 800912c:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	23a5      	movs	r3, #165	; 0xa5
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	2100      	movs	r1, #0
 8009136:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2200      	movs	r2, #0
 800913c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	23a9      	movs	r3, #169	; 0xa9
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	2100      	movs	r1, #0
 8009146:	50d1      	str	r1, [r2, r3]
  pdev->dev_test_mode = 0U;
 8009148:	687a      	ldr	r2, [r7, #4]
 800914a:	23a8      	movs	r3, #168	; 0xa8
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	2100      	movs	r1, #0
 8009150:	54d1      	strb	r1, [r2, r3]
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	23ae      	movs	r3, #174	; 0xae
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	58d3      	ldr	r3, [r2, r3]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d016      	beq.n	800918c <USBD_LL_Reset+0x78>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	23ae      	movs	r3, #174	; 0xae
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	58d3      	ldr	r3, [r2, r3]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d00f      	beq.n	800918c <USBD_LL_Reset+0x78>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	23ae      	movs	r3, #174	; 0xae
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	58d3      	ldr	r3, [r2, r3]
 8009174:	685a      	ldr	r2, [r3, #4]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	b2d9      	uxtb	r1, r3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	0018      	movs	r0, r3
 8009180:	4790      	blx	r2
 8009182:	1e03      	subs	r3, r0, #0
 8009184:	d002      	beq.n	800918c <USBD_LL_Reset+0x78>
      {
        ret = USBD_FAIL;
 8009186:	193b      	adds	r3, r7, r4
 8009188:	2203      	movs	r2, #3
 800918a:	701a      	strb	r2, [r3, #0]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	2340      	movs	r3, #64	; 0x40
 8009190:	2200      	movs	r2, #0
 8009192:	2100      	movs	r1, #0
 8009194:	f001 fcd7 	bl	800ab46 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	23b2      	movs	r3, #178	; 0xb2
 800919c:	005b      	lsls	r3, r3, #1
 800919e:	2101      	movs	r1, #1
 80091a0:	52d1      	strh	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	23b0      	movs	r3, #176	; 0xb0
 80091a6:	005b      	lsls	r3, r3, #1
 80091a8:	2140      	movs	r1, #64	; 0x40
 80091aa:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	2340      	movs	r3, #64	; 0x40
 80091b0:	2200      	movs	r2, #0
 80091b2:	2180      	movs	r1, #128	; 0x80
 80091b4:	f001 fcc7 	bl	800ab46 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2201      	movs	r2, #1
 80091bc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2240      	movs	r2, #64	; 0x40
 80091c2:	621a      	str	r2, [r3, #32]

  return ret;
 80091c4:	230f      	movs	r3, #15
 80091c6:	18fb      	adds	r3, r7, r3
 80091c8:	781b      	ldrb	r3, [r3, #0]
}
 80091ca:	0018      	movs	r0, r3
 80091cc:	46bd      	mov	sp, r7
 80091ce:	b005      	add	sp, #20
 80091d0:	bd90      	pop	{r4, r7, pc}

080091d2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b082      	sub	sp, #8
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
 80091da:	000a      	movs	r2, r1
 80091dc:	1cfb      	adds	r3, r7, #3
 80091de:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	1cfa      	adds	r2, r7, #3
 80091e4:	7812      	ldrb	r2, [r2, #0]
 80091e6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80091e8:	2300      	movs	r3, #0
}
 80091ea:	0018      	movs	r0, r3
 80091ec:	46bd      	mov	sp, r7
 80091ee:	b002      	add	sp, #8
 80091f0:	bd80      	pop	{r7, pc}
	...

080091f4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	23a7      	movs	r3, #167	; 0xa7
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	5cd3      	ldrb	r3, [r2, r3]
 8009204:	b2d9      	uxtb	r1, r3
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4a05      	ldr	r2, [pc, #20]	; (8009220 <USBD_LL_Suspend+0x2c>)
 800920a:	5499      	strb	r1, [r3, r2]
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	23a7      	movs	r3, #167	; 0xa7
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	2104      	movs	r1, #4
 8009214:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8009216:	2300      	movs	r3, #0
}
 8009218:	0018      	movs	r0, r3
 800921a:	46bd      	mov	sp, r7
 800921c:	b002      	add	sp, #8
 800921e:	bd80      	pop	{r7, pc}
 8009220:	0000029d 	.word	0x0000029d

08009224 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	23a7      	movs	r3, #167	; 0xa7
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	5cd3      	ldrb	r3, [r2, r3]
 8009234:	b2db      	uxtb	r3, r3
 8009236:	2b04      	cmp	r3, #4
 8009238:	d107      	bne.n	800924a <USBD_LL_Resume+0x26>
  {
    pdev->dev_state = pdev->dev_old_state;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4a05      	ldr	r2, [pc, #20]	; (8009254 <USBD_LL_Resume+0x30>)
 800923e:	5c9b      	ldrb	r3, [r3, r2]
 8009240:	b2d9      	uxtb	r1, r3
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	23a7      	movs	r3, #167	; 0xa7
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	0018      	movs	r0, r3
 800924e:	46bd      	mov	sp, r7
 8009250:	b002      	add	sp, #8
 8009252:	bd80      	pop	{r7, pc}
 8009254:	0000029d 	.word	0x0000029d

08009258 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	23a7      	movs	r3, #167	; 0xa7
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	5cd3      	ldrb	r3, [r2, r3]
 8009268:	b2db      	uxtb	r3, r3
 800926a:	2b03      	cmp	r3, #3
 800926c:	d114      	bne.n	8009298 <USBD_LL_SOF+0x40>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	23ae      	movs	r3, #174	; 0xae
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	58d3      	ldr	r3, [r2, r3]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00e      	beq.n	8009298 <USBD_LL_SOF+0x40>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	23ae      	movs	r3, #174	; 0xae
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	58d3      	ldr	r3, [r2, r3]
 8009282:	69db      	ldr	r3, [r3, #28]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d007      	beq.n	8009298 <USBD_LL_SOF+0x40>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	23ae      	movs	r3, #174	; 0xae
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	58d3      	ldr	r3, [r2, r3]
 8009290:	69db      	ldr	r3, [r3, #28]
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	0010      	movs	r0, r2
 8009296:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009298:	2300      	movs	r3, #0
}
 800929a:	0018      	movs	r0, r3
 800929c:	46bd      	mov	sp, r7
 800929e:	b002      	add	sp, #8
 80092a0:	bd80      	pop	{r7, pc}

080092a2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b082      	sub	sp, #8
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
 80092aa:	000a      	movs	r2, r1
 80092ac:	1cfb      	adds	r3, r7, #3
 80092ae:	701a      	strb	r2, [r3, #0]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80092b0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80092b2:	0018      	movs	r0, r3
 80092b4:	46bd      	mov	sp, r7
 80092b6:	b002      	add	sp, #8
 80092b8:	bd80      	pop	{r7, pc}

080092ba <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80092ba:	b580      	push	{r7, lr}
 80092bc:	b082      	sub	sp, #8
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
 80092c2:	000a      	movs	r2, r1
 80092c4:	1cfb      	adds	r3, r7, #3
 80092c6:	701a      	strb	r2, [r3, #0]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80092c8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80092ca:	0018      	movs	r0, r3
 80092cc:	46bd      	mov	sp, r7
 80092ce:	b002      	add	sp, #8
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b086      	sub	sp, #24
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
 80092da:	000a      	movs	r2, r1
 80092dc:	1cfb      	adds	r3, r7, #3
 80092de:	701a      	strb	r2, [r3, #0]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80092e8:	2300      	movs	r3, #0
 80092ea:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	789a      	ldrb	r2, [r3, #2]
 80092f0:	78db      	ldrb	r3, [r3, #3]
 80092f2:	021b      	lsls	r3, r3, #8
 80092f4:	4313      	orrs	r3, r2
 80092f6:	b29a      	uxth	r2, r3
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	429a      	cmp	r2, r3
 8009300:	d92a      	bls.n	8009358 <USBD_GetEpDesc+0x86>
  {
    ptr = desc->bLength;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	b29a      	uxth	r2, r3
 8009308:	230a      	movs	r3, #10
 800930a:	18fb      	adds	r3, r7, r3
 800930c:	801a      	strh	r2, [r3, #0]

    while (ptr < desc->wTotalLength)
 800930e:	e016      	b.n	800933e <USBD_GetEpDesc+0x6c>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009310:	230a      	movs	r3, #10
 8009312:	18fa      	adds	r2, r7, r3
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	0011      	movs	r1, r2
 8009318:	0018      	movs	r0, r3
 800931a:	f000 f822 	bl	8009362 <USBD_GetNextDesc>
 800931e:	0003      	movs	r3, r0
 8009320:	617b      	str	r3, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	785b      	ldrb	r3, [r3, #1]
 8009326:	2b05      	cmp	r3, #5
 8009328:	d109      	bne.n	800933e <USBD_GetEpDesc+0x6c>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	789b      	ldrb	r3, [r3, #2]
 8009332:	1cfa      	adds	r2, r7, #3
 8009334:	7812      	ldrb	r2, [r2, #0]
 8009336:	429a      	cmp	r2, r3
 8009338:	d00d      	beq.n	8009356 <USBD_GetEpDesc+0x84>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800933a:	2300      	movs	r3, #0
 800933c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	789a      	ldrb	r2, [r3, #2]
 8009342:	78db      	ldrb	r3, [r3, #3]
 8009344:	021b      	lsls	r3, r3, #8
 8009346:	4313      	orrs	r3, r2
 8009348:	b29a      	uxth	r2, r3
 800934a:	230a      	movs	r3, #10
 800934c:	18fb      	adds	r3, r7, r3
 800934e:	881b      	ldrh	r3, [r3, #0]
 8009350:	429a      	cmp	r2, r3
 8009352:	d8dd      	bhi.n	8009310 <USBD_GetEpDesc+0x3e>
 8009354:	e000      	b.n	8009358 <USBD_GetEpDesc+0x86>
          break;
 8009356:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009358:	693b      	ldr	r3, [r7, #16]
}
 800935a:	0018      	movs	r0, r3
 800935c:	46bd      	mov	sp, r7
 800935e:	b006      	add	sp, #24
 8009360:	bd80      	pop	{r7, pc}

08009362 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009362:	b580      	push	{r7, lr}
 8009364:	b084      	sub	sp, #16
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
 800936a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	881a      	ldrh	r2, [r3, #0]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	781b      	ldrb	r3, [r3, #0]
 8009378:	b29b      	uxth	r3, r3
 800937a:	18d3      	adds	r3, r2, r3
 800937c:	b29a      	uxth	r2, r3
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	001a      	movs	r2, r3
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	189b      	adds	r3, r3, r2
 800938c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800938e:	68fb      	ldr	r3, [r7, #12]
}
 8009390:	0018      	movs	r0, r3
 8009392:	46bd      	mov	sp, r7
 8009394:	b004      	add	sp, #16
 8009396:	bd80      	pop	{r7, pc}

08009398 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b086      	sub	sp, #24
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	781a      	ldrb	r2, [r3, #0]
 80093a8:	2112      	movs	r1, #18
 80093aa:	187b      	adds	r3, r7, r1
 80093ac:	801a      	strh	r2, [r3, #0]
  _pbuff++;
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	3301      	adds	r3, #1
 80093b2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	781a      	ldrb	r2, [r3, #0]
 80093b8:	2010      	movs	r0, #16
 80093ba:	183b      	adds	r3, r7, r0
 80093bc:	801a      	strh	r2, [r3, #0]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80093be:	183b      	adds	r3, r7, r0
 80093c0:	881b      	ldrh	r3, [r3, #0]
 80093c2:	021b      	lsls	r3, r3, #8
 80093c4:	b21a      	sxth	r2, r3
 80093c6:	187b      	adds	r3, r7, r1
 80093c8:	2100      	movs	r1, #0
 80093ca:	5e5b      	ldrsh	r3, [r3, r1]
 80093cc:	4313      	orrs	r3, r2
 80093ce:	b21a      	sxth	r2, r3
 80093d0:	210e      	movs	r1, #14
 80093d2:	187b      	adds	r3, r7, r1
 80093d4:	801a      	strh	r2, [r3, #0]

  return _SwapVal;
 80093d6:	187b      	adds	r3, r7, r1
 80093d8:	881b      	ldrh	r3, [r3, #0]
}
 80093da:	0018      	movs	r0, r3
 80093dc:	46bd      	mov	sp, r7
 80093de:	b006      	add	sp, #24
 80093e0:	bd80      	pop	{r7, pc}
	...

080093e4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093e4:	b590      	push	{r4, r7, lr}
 80093e6:	b085      	sub	sp, #20
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093ee:	230f      	movs	r3, #15
 80093f0:	18fb      	adds	r3, r7, r3
 80093f2:	2200      	movs	r2, #0
 80093f4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	001a      	movs	r2, r3
 80093fc:	2360      	movs	r3, #96	; 0x60
 80093fe:	4013      	ands	r3, r2
 8009400:	2b40      	cmp	r3, #64	; 0x40
 8009402:	d004      	beq.n	800940e <USBD_StdDevReq+0x2a>
 8009404:	d85b      	bhi.n	80094be <USBD_StdDevReq+0xda>
 8009406:	2b00      	cmp	r3, #0
 8009408:	d013      	beq.n	8009432 <USBD_StdDevReq+0x4e>
 800940a:	2b20      	cmp	r3, #32
 800940c:	d157      	bne.n	80094be <USBD_StdDevReq+0xda>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	23b5      	movs	r3, #181	; 0xb5
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	58d2      	ldr	r2, [r2, r3]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	32ae      	adds	r2, #174	; 0xae
 800941a:	0092      	lsls	r2, r2, #2
 800941c:	58d3      	ldr	r3, [r2, r3]
 800941e:	689b      	ldr	r3, [r3, #8]
 8009420:	220f      	movs	r2, #15
 8009422:	18bc      	adds	r4, r7, r2
 8009424:	6839      	ldr	r1, [r7, #0]
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	0010      	movs	r0, r2
 800942a:	4798      	blx	r3
 800942c:	0003      	movs	r3, r0
 800942e:	7023      	strb	r3, [r4, #0]
      break;
 8009430:	e04c      	b.n	80094cc <USBD_StdDevReq+0xe8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	785b      	ldrb	r3, [r3, #1]
 8009436:	2b09      	cmp	r3, #9
 8009438:	d839      	bhi.n	80094ae <USBD_StdDevReq+0xca>
 800943a:	009a      	lsls	r2, r3, #2
 800943c:	4b27      	ldr	r3, [pc, #156]	; (80094dc <USBD_StdDevReq+0xf8>)
 800943e:	18d3      	adds	r3, r2, r3
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009444:	683a      	ldr	r2, [r7, #0]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	0011      	movs	r1, r2
 800944a:	0018      	movs	r0, r3
 800944c:	f000 fada 	bl	8009a04 <USBD_GetDescriptor>
          break;
 8009450:	e034      	b.n	80094bc <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009452:	683a      	ldr	r2, [r7, #0]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	0011      	movs	r1, r2
 8009458:	0018      	movs	r0, r3
 800945a:	f000 fc8b 	bl	8009d74 <USBD_SetAddress>
          break;
 800945e:	e02d      	b.n	80094bc <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009460:	230f      	movs	r3, #15
 8009462:	18fc      	adds	r4, r7, r3
 8009464:	683a      	ldr	r2, [r7, #0]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	0011      	movs	r1, r2
 800946a:	0018      	movs	r0, r3
 800946c:	f000 fcd8 	bl	8009e20 <USBD_SetConfig>
 8009470:	0003      	movs	r3, r0
 8009472:	7023      	strb	r3, [r4, #0]
          break;
 8009474:	e022      	b.n	80094bc <USBD_StdDevReq+0xd8>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009476:	683a      	ldr	r2, [r7, #0]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	0011      	movs	r1, r2
 800947c:	0018      	movs	r0, r3
 800947e:	f000 fd9d 	bl	8009fbc <USBD_GetConfig>
          break;
 8009482:	e01b      	b.n	80094bc <USBD_StdDevReq+0xd8>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009484:	683a      	ldr	r2, [r7, #0]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	0011      	movs	r1, r2
 800948a:	0018      	movs	r0, r3
 800948c:	f000 fdd2 	bl	800a034 <USBD_GetStatus>
          break;
 8009490:	e014      	b.n	80094bc <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009492:	683a      	ldr	r2, [r7, #0]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	0011      	movs	r1, r2
 8009498:	0018      	movs	r0, r3
 800949a:	f000 fe06 	bl	800a0aa <USBD_SetFeature>
          break;
 800949e:	e00d      	b.n	80094bc <USBD_StdDevReq+0xd8>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80094a0:	683a      	ldr	r2, [r7, #0]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	0011      	movs	r1, r2
 80094a6:	0018      	movs	r0, r3
 80094a8:	f000 fe2e 	bl	800a108 <USBD_ClrFeature>
          break;
 80094ac:	e006      	b.n	80094bc <USBD_StdDevReq+0xd8>

        default:
          USBD_CtlError(pdev, req);
 80094ae:	683a      	ldr	r2, [r7, #0]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	0011      	movs	r1, r2
 80094b4:	0018      	movs	r0, r3
 80094b6:	f000 fe8b 	bl	800a1d0 <USBD_CtlError>
          break;
 80094ba:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80094bc:	e006      	b.n	80094cc <USBD_StdDevReq+0xe8>

    default:
      USBD_CtlError(pdev, req);
 80094be:	683a      	ldr	r2, [r7, #0]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	0011      	movs	r1, r2
 80094c4:	0018      	movs	r0, r3
 80094c6:	f000 fe83 	bl	800a1d0 <USBD_CtlError>
      break;
 80094ca:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80094cc:	230f      	movs	r3, #15
 80094ce:	18fb      	adds	r3, r7, r3
 80094d0:	781b      	ldrb	r3, [r3, #0]
}
 80094d2:	0018      	movs	r0, r3
 80094d4:	46bd      	mov	sp, r7
 80094d6:	b005      	add	sp, #20
 80094d8:	bd90      	pop	{r4, r7, pc}
 80094da:	46c0      	nop			; (mov r8, r8)
 80094dc:	0800b998 	.word	0x0800b998

080094e0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094e0:	b5b0      	push	{r4, r5, r7, lr}
 80094e2:	b084      	sub	sp, #16
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80094ea:	230f      	movs	r3, #15
 80094ec:	18fb      	adds	r3, r7, r3
 80094ee:	2200      	movs	r2, #0
 80094f0:	701a      	strb	r2, [r3, #0]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	001a      	movs	r2, r3
 80094f8:	2360      	movs	r3, #96	; 0x60
 80094fa:	4013      	ands	r3, r2
 80094fc:	2b40      	cmp	r3, #64	; 0x40
 80094fe:	d005      	beq.n	800950c <USBD_StdItfReq+0x2c>
 8009500:	d900      	bls.n	8009504 <USBD_StdItfReq+0x24>
 8009502:	e06c      	b.n	80095de <USBD_StdItfReq+0xfe>
 8009504:	2b00      	cmp	r3, #0
 8009506:	d001      	beq.n	800950c <USBD_StdItfReq+0x2c>
 8009508:	2b20      	cmp	r3, #32
 800950a:	d168      	bne.n	80095de <USBD_StdItfReq+0xfe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	23a7      	movs	r3, #167	; 0xa7
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	5cd3      	ldrb	r3, [r2, r3]
 8009514:	b2db      	uxtb	r3, r3
 8009516:	3b01      	subs	r3, #1
 8009518:	2b02      	cmp	r3, #2
 800951a:	d857      	bhi.n	80095cc <USBD_StdItfReq+0xec>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	889b      	ldrh	r3, [r3, #4]
 8009520:	b2db      	uxtb	r3, r3
 8009522:	2b01      	cmp	r3, #1
 8009524:	d84b      	bhi.n	80095be <USBD_StdItfReq+0xde>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	889b      	ldrh	r3, [r3, #4]
 800952a:	b2da      	uxtb	r2, r3
 800952c:	250e      	movs	r5, #14
 800952e:	197c      	adds	r4, r7, r5
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	0011      	movs	r1, r2
 8009534:	0018      	movs	r0, r3
 8009536:	f7ff feb4 	bl	80092a2 <USBD_CoreFindIF>
 800953a:	0003      	movs	r3, r0
 800953c:	7023      	strb	r3, [r4, #0]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800953e:	0029      	movs	r1, r5
 8009540:	187b      	adds	r3, r7, r1
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	2bff      	cmp	r3, #255	; 0xff
 8009546:	d028      	beq.n	800959a <USBD_StdItfReq+0xba>
 8009548:	187b      	adds	r3, r7, r1
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d124      	bne.n	800959a <USBD_StdItfReq+0xba>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009550:	187b      	adds	r3, r7, r1
 8009552:	781a      	ldrb	r2, [r3, #0]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	32ae      	adds	r2, #174	; 0xae
 8009558:	0092      	lsls	r2, r2, #2
 800955a:	58d3      	ldr	r3, [r2, r3]
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d016      	beq.n	8009590 <USBD_StdItfReq+0xb0>
              {
                pdev->classId = idx;
 8009562:	0008      	movs	r0, r1
 8009564:	187b      	adds	r3, r7, r1
 8009566:	7819      	ldrb	r1, [r3, #0]
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	23b5      	movs	r3, #181	; 0xb5
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	50d1      	str	r1, [r2, r3]
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009570:	183b      	adds	r3, r7, r0
 8009572:	781a      	ldrb	r2, [r3, #0]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	32ae      	adds	r2, #174	; 0xae
 8009578:	0092      	lsls	r2, r2, #2
 800957a:	58d3      	ldr	r3, [r2, r3]
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	220f      	movs	r2, #15
 8009580:	18bc      	adds	r4, r7, r2
 8009582:	6839      	ldr	r1, [r7, #0]
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	0010      	movs	r0, r2
 8009588:	4798      	blx	r3
 800958a:	0003      	movs	r3, r0
 800958c:	7023      	strb	r3, [r4, #0]
              if (pdev->pClass[idx]->Setup != NULL)
 800958e:	e008      	b.n	80095a2 <USBD_StdItfReq+0xc2>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009590:	230f      	movs	r3, #15
 8009592:	18fb      	adds	r3, r7, r3
 8009594:	2203      	movs	r2, #3
 8009596:	701a      	strb	r2, [r3, #0]
              if (pdev->pClass[idx]->Setup != NULL)
 8009598:	e003      	b.n	80095a2 <USBD_StdItfReq+0xc2>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800959a:	230f      	movs	r3, #15
 800959c:	18fb      	adds	r3, r7, r3
 800959e:	2203      	movs	r2, #3
 80095a0:	701a      	strb	r2, [r3, #0]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	88db      	ldrh	r3, [r3, #6]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d117      	bne.n	80095da <USBD_StdItfReq+0xfa>
 80095aa:	230f      	movs	r3, #15
 80095ac:	18fb      	adds	r3, r7, r3
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d112      	bne.n	80095da <USBD_StdItfReq+0xfa>
            {
              (void)USBD_CtlSendStatus(pdev);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	0018      	movs	r0, r3
 80095b8:	f000 fef0 	bl	800a39c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80095bc:	e00d      	b.n	80095da <USBD_StdItfReq+0xfa>
            USBD_CtlError(pdev, req);
 80095be:	683a      	ldr	r2, [r7, #0]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	0011      	movs	r1, r2
 80095c4:	0018      	movs	r0, r3
 80095c6:	f000 fe03 	bl	800a1d0 <USBD_CtlError>
          break;
 80095ca:	e006      	b.n	80095da <USBD_StdItfReq+0xfa>

        default:
          USBD_CtlError(pdev, req);
 80095cc:	683a      	ldr	r2, [r7, #0]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	0011      	movs	r1, r2
 80095d2:	0018      	movs	r0, r3
 80095d4:	f000 fdfc 	bl	800a1d0 <USBD_CtlError>
          break;
 80095d8:	e000      	b.n	80095dc <USBD_StdItfReq+0xfc>
          break;
 80095da:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80095dc:	e006      	b.n	80095ec <USBD_StdItfReq+0x10c>

    default:
      USBD_CtlError(pdev, req);
 80095de:	683a      	ldr	r2, [r7, #0]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	0011      	movs	r1, r2
 80095e4:	0018      	movs	r0, r3
 80095e6:	f000 fdf3 	bl	800a1d0 <USBD_CtlError>
      break;
 80095ea:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80095ec:	230f      	movs	r3, #15
 80095ee:	18fb      	adds	r3, r7, r3
 80095f0:	781b      	ldrb	r3, [r3, #0]
}
 80095f2:	0018      	movs	r0, r3
 80095f4:	46bd      	mov	sp, r7
 80095f6:	b004      	add	sp, #16
 80095f8:	bdb0      	pop	{r4, r5, r7, pc}

080095fa <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095fa:	b5b0      	push	{r4, r5, r7, lr}
 80095fc:	b084      	sub	sp, #16
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
 8009602:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009604:	230f      	movs	r3, #15
 8009606:	18fb      	adds	r3, r7, r3
 8009608:	2200      	movs	r2, #0
 800960a:	701a      	strb	r2, [r3, #0]

  ep_addr = LOBYTE(req->wIndex);
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	889a      	ldrh	r2, [r3, #4]
 8009610:	230e      	movs	r3, #14
 8009612:	18fb      	adds	r3, r7, r3
 8009614:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	001a      	movs	r2, r3
 800961c:	2360      	movs	r3, #96	; 0x60
 800961e:	4013      	ands	r3, r2
 8009620:	2b40      	cmp	r3, #64	; 0x40
 8009622:	d006      	beq.n	8009632 <USBD_StdEPReq+0x38>
 8009624:	d900      	bls.n	8009628 <USBD_StdEPReq+0x2e>
 8009626:	e1de      	b.n	80099e6 <USBD_StdEPReq+0x3ec>
 8009628:	2b00      	cmp	r3, #0
 800962a:	d039      	beq.n	80096a0 <USBD_StdEPReq+0xa6>
 800962c:	2b20      	cmp	r3, #32
 800962e:	d000      	beq.n	8009632 <USBD_StdEPReq+0x38>
 8009630:	e1d9      	b.n	80099e6 <USBD_StdEPReq+0x3ec>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009632:	250d      	movs	r5, #13
 8009634:	197c      	adds	r4, r7, r5
 8009636:	230e      	movs	r3, #14
 8009638:	18fb      	adds	r3, r7, r3
 800963a:	781a      	ldrb	r2, [r3, #0]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	0011      	movs	r1, r2
 8009640:	0018      	movs	r0, r3
 8009642:	f7ff fe3a 	bl	80092ba <USBD_CoreFindEP>
 8009646:	0003      	movs	r3, r0
 8009648:	7023      	strb	r3, [r4, #0]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800964a:	197b      	adds	r3, r7, r5
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	2bff      	cmp	r3, #255	; 0xff
 8009650:	d100      	bne.n	8009654 <USBD_StdEPReq+0x5a>
 8009652:	e1cf      	b.n	80099f4 <USBD_StdEPReq+0x3fa>
 8009654:	197b      	adds	r3, r7, r5
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d000      	beq.n	800965e <USBD_StdEPReq+0x64>
 800965c:	e1ca      	b.n	80099f4 <USBD_StdEPReq+0x3fa>
      {
        pdev->classId = idx;
 800965e:	197b      	adds	r3, r7, r5
 8009660:	7819      	ldrb	r1, [r3, #0]
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	23b5      	movs	r3, #181	; 0xb5
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	50d1      	str	r1, [r2, r3]
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800966a:	0029      	movs	r1, r5
 800966c:	187b      	adds	r3, r7, r1
 800966e:	781a      	ldrb	r2, [r3, #0]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	32ae      	adds	r2, #174	; 0xae
 8009674:	0092      	lsls	r2, r2, #2
 8009676:	58d3      	ldr	r3, [r2, r3]
 8009678:	689b      	ldr	r3, [r3, #8]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d100      	bne.n	8009680 <USBD_StdEPReq+0x86>
 800967e:	e1b9      	b.n	80099f4 <USBD_StdEPReq+0x3fa>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009680:	187b      	adds	r3, r7, r1
 8009682:	781a      	ldrb	r2, [r3, #0]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	32ae      	adds	r2, #174	; 0xae
 8009688:	0092      	lsls	r2, r2, #2
 800968a:	58d3      	ldr	r3, [r2, r3]
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	220f      	movs	r2, #15
 8009690:	18bc      	adds	r4, r7, r2
 8009692:	6839      	ldr	r1, [r7, #0]
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	0010      	movs	r0, r2
 8009698:	4798      	blx	r3
 800969a:	0003      	movs	r3, r0
 800969c:	7023      	strb	r3, [r4, #0]
        }
      }
      break;
 800969e:	e1a9      	b.n	80099f4 <USBD_StdEPReq+0x3fa>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	785b      	ldrb	r3, [r3, #1]
 80096a4:	2b03      	cmp	r3, #3
 80096a6:	d007      	beq.n	80096b8 <USBD_StdEPReq+0xbe>
 80096a8:	dd00      	ble.n	80096ac <USBD_StdEPReq+0xb2>
 80096aa:	e194      	b.n	80099d6 <USBD_StdEPReq+0x3dc>
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d100      	bne.n	80096b2 <USBD_StdEPReq+0xb8>
 80096b0:	e0c9      	b.n	8009846 <USBD_StdEPReq+0x24c>
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d04d      	beq.n	8009752 <USBD_StdEPReq+0x158>
 80096b6:	e18e      	b.n	80099d6 <USBD_StdEPReq+0x3dc>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	23a7      	movs	r3, #167	; 0xa7
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	5cd3      	ldrb	r3, [r2, r3]
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	2b02      	cmp	r3, #2
 80096c4:	d002      	beq.n	80096cc <USBD_StdEPReq+0xd2>
 80096c6:	2b03      	cmp	r3, #3
 80096c8:	d01e      	beq.n	8009708 <USBD_StdEPReq+0x10e>
 80096ca:	e03a      	b.n	8009742 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096cc:	220e      	movs	r2, #14
 80096ce:	18bb      	adds	r3, r7, r2
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d011      	beq.n	80096fa <USBD_StdEPReq+0x100>
 80096d6:	18bb      	adds	r3, r7, r2
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	2b80      	cmp	r3, #128	; 0x80
 80096dc:	d00d      	beq.n	80096fa <USBD_StdEPReq+0x100>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80096de:	18bb      	adds	r3, r7, r2
 80096e0:	781a      	ldrb	r2, [r3, #0]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	0011      	movs	r1, r2
 80096e6:	0018      	movs	r0, r3
 80096e8:	f001 fa8f 	bl	800ac0a <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2180      	movs	r1, #128	; 0x80
 80096f0:	0018      	movs	r0, r3
 80096f2:	f001 fa8a 	bl	800ac0a <USBD_LL_StallEP>
 80096f6:	46c0      	nop			; (mov r8, r8)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80096f8:	e02a      	b.n	8009750 <USBD_StdEPReq+0x156>
                USBD_CtlError(pdev, req);
 80096fa:	683a      	ldr	r2, [r7, #0]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	0011      	movs	r1, r2
 8009700:	0018      	movs	r0, r3
 8009702:	f000 fd65 	bl	800a1d0 <USBD_CtlError>
              break;
 8009706:	e023      	b.n	8009750 <USBD_StdEPReq+0x156>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	885b      	ldrh	r3, [r3, #2]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d113      	bne.n	8009738 <USBD_StdEPReq+0x13e>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009710:	220e      	movs	r2, #14
 8009712:	18bb      	adds	r3, r7, r2
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d00e      	beq.n	8009738 <USBD_StdEPReq+0x13e>
 800971a:	18bb      	adds	r3, r7, r2
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	2b80      	cmp	r3, #128	; 0x80
 8009720:	d00a      	beq.n	8009738 <USBD_StdEPReq+0x13e>
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	88db      	ldrh	r3, [r3, #6]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d106      	bne.n	8009738 <USBD_StdEPReq+0x13e>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800972a:	18bb      	adds	r3, r7, r2
 800972c:	781a      	ldrb	r2, [r3, #0]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	0011      	movs	r1, r2
 8009732:	0018      	movs	r0, r3
 8009734:	f001 fa69 	bl	800ac0a <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	0018      	movs	r0, r3
 800973c:	f000 fe2e 	bl	800a39c <USBD_CtlSendStatus>

              break;
 8009740:	e006      	b.n	8009750 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009742:	683a      	ldr	r2, [r7, #0]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	0011      	movs	r1, r2
 8009748:	0018      	movs	r0, r3
 800974a:	f000 fd41 	bl	800a1d0 <USBD_CtlError>
              break;
 800974e:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8009750:	e148      	b.n	80099e4 <USBD_StdEPReq+0x3ea>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	23a7      	movs	r3, #167	; 0xa7
 8009756:	009b      	lsls	r3, r3, #2
 8009758:	5cd3      	ldrb	r3, [r2, r3]
 800975a:	b2db      	uxtb	r3, r3
 800975c:	2b02      	cmp	r3, #2
 800975e:	d002      	beq.n	8009766 <USBD_StdEPReq+0x16c>
 8009760:	2b03      	cmp	r3, #3
 8009762:	d01e      	beq.n	80097a2 <USBD_StdEPReq+0x1a8>
 8009764:	e066      	b.n	8009834 <USBD_StdEPReq+0x23a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009766:	220e      	movs	r2, #14
 8009768:	18bb      	adds	r3, r7, r2
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d011      	beq.n	8009794 <USBD_StdEPReq+0x19a>
 8009770:	18bb      	adds	r3, r7, r2
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	2b80      	cmp	r3, #128	; 0x80
 8009776:	d00d      	beq.n	8009794 <USBD_StdEPReq+0x19a>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009778:	18bb      	adds	r3, r7, r2
 800977a:	781a      	ldrb	r2, [r3, #0]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	0011      	movs	r1, r2
 8009780:	0018      	movs	r0, r3
 8009782:	f001 fa42 	bl	800ac0a <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2180      	movs	r1, #128	; 0x80
 800978a:	0018      	movs	r0, r3
 800978c:	f001 fa3d 	bl	800ac0a <USBD_LL_StallEP>
 8009790:	46c0      	nop			; (mov r8, r8)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009792:	e057      	b.n	8009844 <USBD_StdEPReq+0x24a>
                USBD_CtlError(pdev, req);
 8009794:	683a      	ldr	r2, [r7, #0]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	0011      	movs	r1, r2
 800979a:	0018      	movs	r0, r3
 800979c:	f000 fd18 	bl	800a1d0 <USBD_CtlError>
              break;
 80097a0:	e050      	b.n	8009844 <USBD_StdEPReq+0x24a>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	885b      	ldrh	r3, [r3, #2]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d14b      	bne.n	8009842 <USBD_StdEPReq+0x248>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80097aa:	210e      	movs	r1, #14
 80097ac:	187b      	adds	r3, r7, r1
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	227f      	movs	r2, #127	; 0x7f
 80097b2:	4013      	ands	r3, r2
 80097b4:	d006      	beq.n	80097c4 <USBD_StdEPReq+0x1ca>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80097b6:	187b      	adds	r3, r7, r1
 80097b8:	781a      	ldrb	r2, [r3, #0]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	0011      	movs	r1, r2
 80097be:	0018      	movs	r0, r3
 80097c0:	f001 fa4e 	bl	800ac60 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	0018      	movs	r0, r3
 80097c8:	f000 fde8 	bl	800a39c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80097cc:	250d      	movs	r5, #13
 80097ce:	197c      	adds	r4, r7, r5
 80097d0:	230e      	movs	r3, #14
 80097d2:	18fb      	adds	r3, r7, r3
 80097d4:	781a      	ldrb	r2, [r3, #0]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	0011      	movs	r1, r2
 80097da:	0018      	movs	r0, r3
 80097dc:	f7ff fd6d 	bl	80092ba <USBD_CoreFindEP>
 80097e0:	0003      	movs	r3, r0
 80097e2:	7023      	strb	r3, [r4, #0]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80097e4:	197b      	adds	r3, r7, r5
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	2bff      	cmp	r3, #255	; 0xff
 80097ea:	d02a      	beq.n	8009842 <USBD_StdEPReq+0x248>
 80097ec:	197b      	adds	r3, r7, r5
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d126      	bne.n	8009842 <USBD_StdEPReq+0x248>
                {
                  pdev->classId = idx;
 80097f4:	197b      	adds	r3, r7, r5
 80097f6:	7819      	ldrb	r1, [r3, #0]
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	23b5      	movs	r3, #181	; 0xb5
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	50d1      	str	r1, [r2, r3]
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009800:	0029      	movs	r1, r5
 8009802:	187b      	adds	r3, r7, r1
 8009804:	781a      	ldrb	r2, [r3, #0]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	32ae      	adds	r2, #174	; 0xae
 800980a:	0092      	lsls	r2, r2, #2
 800980c:	58d3      	ldr	r3, [r2, r3]
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d016      	beq.n	8009842 <USBD_StdEPReq+0x248>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009814:	187b      	adds	r3, r7, r1
 8009816:	781a      	ldrb	r2, [r3, #0]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	32ae      	adds	r2, #174	; 0xae
 800981c:	0092      	lsls	r2, r2, #2
 800981e:	58d3      	ldr	r3, [r2, r3]
 8009820:	689b      	ldr	r3, [r3, #8]
 8009822:	220f      	movs	r2, #15
 8009824:	18bc      	adds	r4, r7, r2
 8009826:	6839      	ldr	r1, [r7, #0]
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	0010      	movs	r0, r2
 800982c:	4798      	blx	r3
 800982e:	0003      	movs	r3, r0
 8009830:	7023      	strb	r3, [r4, #0]
                  }
                }
              }
              break;
 8009832:	e006      	b.n	8009842 <USBD_StdEPReq+0x248>

            default:
              USBD_CtlError(pdev, req);
 8009834:	683a      	ldr	r2, [r7, #0]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	0011      	movs	r1, r2
 800983a:	0018      	movs	r0, r3
 800983c:	f000 fcc8 	bl	800a1d0 <USBD_CtlError>
              break;
 8009840:	e000      	b.n	8009844 <USBD_StdEPReq+0x24a>
              break;
 8009842:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8009844:	e0ce      	b.n	80099e4 <USBD_StdEPReq+0x3ea>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	23a7      	movs	r3, #167	; 0xa7
 800984a:	009b      	lsls	r3, r3, #2
 800984c:	5cd3      	ldrb	r3, [r2, r3]
 800984e:	b2db      	uxtb	r3, r3
 8009850:	2b02      	cmp	r3, #2
 8009852:	d002      	beq.n	800985a <USBD_StdEPReq+0x260>
 8009854:	2b03      	cmp	r3, #3
 8009856:	d03c      	beq.n	80098d2 <USBD_StdEPReq+0x2d8>
 8009858:	e0b5      	b.n	80099c6 <USBD_StdEPReq+0x3cc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800985a:	220e      	movs	r2, #14
 800985c:	18bb      	adds	r3, r7, r2
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d00a      	beq.n	800987a <USBD_StdEPReq+0x280>
 8009864:	18bb      	adds	r3, r7, r2
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	2b80      	cmp	r3, #128	; 0x80
 800986a:	d006      	beq.n	800987a <USBD_StdEPReq+0x280>
              {
                USBD_CtlError(pdev, req);
 800986c:	683a      	ldr	r2, [r7, #0]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	0011      	movs	r1, r2
 8009872:	0018      	movs	r0, r3
 8009874:	f000 fcac 	bl	800a1d0 <USBD_CtlError>
                break;
 8009878:	e0ac      	b.n	80099d4 <USBD_StdEPReq+0x3da>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800987a:	220e      	movs	r2, #14
 800987c:	18bb      	adds	r3, r7, r2
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	b25b      	sxtb	r3, r3
 8009882:	2b00      	cmp	r3, #0
 8009884:	da0c      	bge.n	80098a0 <USBD_StdEPReq+0x2a6>
 8009886:	18bb      	adds	r3, r7, r2
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	227f      	movs	r2, #127	; 0x7f
 800988c:	401a      	ands	r2, r3
 800988e:	0013      	movs	r3, r2
 8009890:	009b      	lsls	r3, r3, #2
 8009892:	189b      	adds	r3, r3, r2
 8009894:	009b      	lsls	r3, r3, #2
 8009896:	3310      	adds	r3, #16
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	18d3      	adds	r3, r2, r3
 800989c:	3304      	adds	r3, #4
 800989e:	e00d      	b.n	80098bc <USBD_StdEPReq+0x2c2>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80098a0:	230e      	movs	r3, #14
 80098a2:	18fb      	adds	r3, r7, r3
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	227f      	movs	r2, #127	; 0x7f
 80098a8:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098aa:	0013      	movs	r3, r2
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	189b      	adds	r3, r3, r2
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	3351      	adds	r3, #81	; 0x51
 80098b4:	33ff      	adds	r3, #255	; 0xff
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	18d3      	adds	r3, r2, r3
 80098ba:	3304      	adds	r3, #4
 80098bc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	2200      	movs	r2, #0
 80098c2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80098c4:	68b9      	ldr	r1, [r7, #8]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2202      	movs	r2, #2
 80098ca:	0018      	movs	r0, r3
 80098cc:	f000 fd08 	bl	800a2e0 <USBD_CtlSendData>
              break;
 80098d0:	e080      	b.n	80099d4 <USBD_StdEPReq+0x3da>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80098d2:	220e      	movs	r2, #14
 80098d4:	18bb      	adds	r3, r7, r2
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	b25b      	sxtb	r3, r3
 80098da:	2b00      	cmp	r3, #0
 80098dc:	da14      	bge.n	8009908 <USBD_StdEPReq+0x30e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80098de:	18bb      	adds	r3, r7, r2
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	220f      	movs	r2, #15
 80098e4:	401a      	ands	r2, r3
 80098e6:	6879      	ldr	r1, [r7, #4]
 80098e8:	0013      	movs	r3, r2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	189b      	adds	r3, r3, r2
 80098ee:	009b      	lsls	r3, r3, #2
 80098f0:	18cb      	adds	r3, r1, r3
 80098f2:	3324      	adds	r3, #36	; 0x24
 80098f4:	881b      	ldrh	r3, [r3, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d11e      	bne.n	8009938 <USBD_StdEPReq+0x33e>
                {
                  USBD_CtlError(pdev, req);
 80098fa:	683a      	ldr	r2, [r7, #0]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	0011      	movs	r1, r2
 8009900:	0018      	movs	r0, r3
 8009902:	f000 fc65 	bl	800a1d0 <USBD_CtlError>
                  break;
 8009906:	e065      	b.n	80099d4 <USBD_StdEPReq+0x3da>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009908:	230e      	movs	r3, #14
 800990a:	18fb      	adds	r3, r7, r3
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	220f      	movs	r2, #15
 8009910:	401a      	ands	r2, r3
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	23b2      	movs	r3, #178	; 0xb2
 8009916:	0059      	lsls	r1, r3, #1
 8009918:	0013      	movs	r3, r2
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	189b      	adds	r3, r3, r2
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	18c3      	adds	r3, r0, r3
 8009922:	185b      	adds	r3, r3, r1
 8009924:	881b      	ldrh	r3, [r3, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d106      	bne.n	8009938 <USBD_StdEPReq+0x33e>
                {
                  USBD_CtlError(pdev, req);
 800992a:	683a      	ldr	r2, [r7, #0]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	0011      	movs	r1, r2
 8009930:	0018      	movs	r0, r3
 8009932:	f000 fc4d 	bl	800a1d0 <USBD_CtlError>
                  break;
 8009936:	e04d      	b.n	80099d4 <USBD_StdEPReq+0x3da>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009938:	220e      	movs	r2, #14
 800993a:	18bb      	adds	r3, r7, r2
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	b25b      	sxtb	r3, r3
 8009940:	2b00      	cmp	r3, #0
 8009942:	da0c      	bge.n	800995e <USBD_StdEPReq+0x364>
 8009944:	18bb      	adds	r3, r7, r2
 8009946:	781b      	ldrb	r3, [r3, #0]
 8009948:	227f      	movs	r2, #127	; 0x7f
 800994a:	401a      	ands	r2, r3
 800994c:	0013      	movs	r3, r2
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	189b      	adds	r3, r3, r2
 8009952:	009b      	lsls	r3, r3, #2
 8009954:	3310      	adds	r3, #16
 8009956:	687a      	ldr	r2, [r7, #4]
 8009958:	18d3      	adds	r3, r2, r3
 800995a:	3304      	adds	r3, #4
 800995c:	e00d      	b.n	800997a <USBD_StdEPReq+0x380>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800995e:	230e      	movs	r3, #14
 8009960:	18fb      	adds	r3, r7, r3
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	227f      	movs	r2, #127	; 0x7f
 8009966:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009968:	0013      	movs	r3, r2
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	189b      	adds	r3, r3, r2
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	3351      	adds	r3, #81	; 0x51
 8009972:	33ff      	adds	r3, #255	; 0xff
 8009974:	687a      	ldr	r2, [r7, #4]
 8009976:	18d3      	adds	r3, r2, r3
 8009978:	3304      	adds	r3, #4
 800997a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800997c:	220e      	movs	r2, #14
 800997e:	18bb      	adds	r3, r7, r2
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d003      	beq.n	800998e <USBD_StdEPReq+0x394>
 8009986:	18bb      	adds	r3, r7, r2
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	2b80      	cmp	r3, #128	; 0x80
 800998c:	d103      	bne.n	8009996 <USBD_StdEPReq+0x39c>
              {
                pep->status = 0x0000U;
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	2200      	movs	r2, #0
 8009992:	601a      	str	r2, [r3, #0]
 8009994:	e010      	b.n	80099b8 <USBD_StdEPReq+0x3be>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009996:	230e      	movs	r3, #14
 8009998:	18fb      	adds	r3, r7, r3
 800999a:	781a      	ldrb	r2, [r3, #0]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	0011      	movs	r1, r2
 80099a0:	0018      	movs	r0, r3
 80099a2:	f001 f988 	bl	800acb6 <USBD_LL_IsStallEP>
 80099a6:	1e03      	subs	r3, r0, #0
 80099a8:	d003      	beq.n	80099b2 <USBD_StdEPReq+0x3b8>
              {
                pep->status = 0x0001U;
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	2201      	movs	r2, #1
 80099ae:	601a      	str	r2, [r3, #0]
 80099b0:	e002      	b.n	80099b8 <USBD_StdEPReq+0x3be>
              }
              else
              {
                pep->status = 0x0000U;
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	2200      	movs	r2, #0
 80099b6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80099b8:	68b9      	ldr	r1, [r7, #8]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2202      	movs	r2, #2
 80099be:	0018      	movs	r0, r3
 80099c0:	f000 fc8e 	bl	800a2e0 <USBD_CtlSendData>
              break;
 80099c4:	e006      	b.n	80099d4 <USBD_StdEPReq+0x3da>

            default:
              USBD_CtlError(pdev, req);
 80099c6:	683a      	ldr	r2, [r7, #0]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	0011      	movs	r1, r2
 80099cc:	0018      	movs	r0, r3
 80099ce:	f000 fbff 	bl	800a1d0 <USBD_CtlError>
              break;
 80099d2:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80099d4:	e006      	b.n	80099e4 <USBD_StdEPReq+0x3ea>

        default:
          USBD_CtlError(pdev, req);
 80099d6:	683a      	ldr	r2, [r7, #0]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	0011      	movs	r1, r2
 80099dc:	0018      	movs	r0, r3
 80099de:	f000 fbf7 	bl	800a1d0 <USBD_CtlError>
          break;
 80099e2:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80099e4:	e007      	b.n	80099f6 <USBD_StdEPReq+0x3fc>

    default:
      USBD_CtlError(pdev, req);
 80099e6:	683a      	ldr	r2, [r7, #0]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	0011      	movs	r1, r2
 80099ec:	0018      	movs	r0, r3
 80099ee:	f000 fbef 	bl	800a1d0 <USBD_CtlError>
      break;
 80099f2:	e000      	b.n	80099f6 <USBD_StdEPReq+0x3fc>
      break;
 80099f4:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80099f6:	230f      	movs	r3, #15
 80099f8:	18fb      	adds	r3, r7, r3
 80099fa:	781b      	ldrb	r3, [r3, #0]
}
 80099fc:	0018      	movs	r0, r3
 80099fe:	46bd      	mov	sp, r7
 8009a00:	b004      	add	sp, #16
 8009a02:	bdb0      	pop	{r4, r5, r7, pc}

08009a04 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009a0e:	2308      	movs	r3, #8
 8009a10:	18fb      	adds	r3, r7, r3
 8009a12:	2200      	movs	r2, #0
 8009a14:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8009a16:	2300      	movs	r3, #0
 8009a18:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009a1a:	230b      	movs	r3, #11
 8009a1c:	18fb      	adds	r3, r7, r3
 8009a1e:	2200      	movs	r2, #0
 8009a20:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	885b      	ldrh	r3, [r3, #2]
 8009a26:	0a1b      	lsrs	r3, r3, #8
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	2b07      	cmp	r3, #7
 8009a2c:	d900      	bls.n	8009a30 <USBD_GetDescriptor+0x2c>
 8009a2e:	e159      	b.n	8009ce4 <USBD_GetDescriptor+0x2e0>
 8009a30:	009a      	lsls	r2, r3, #2
 8009a32:	4bce      	ldr	r3, [pc, #824]	; (8009d6c <USBD_GetDescriptor+0x368>)
 8009a34:	18d3      	adds	r3, r2, r3
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	23ad      	movs	r3, #173	; 0xad
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	58d3      	ldr	r3, [r2, r3]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	7c12      	ldrb	r2, [r2, #16]
 8009a48:	2108      	movs	r1, #8
 8009a4a:	1879      	adds	r1, r7, r1
 8009a4c:	0010      	movs	r0, r2
 8009a4e:	4798      	blx	r3
 8009a50:	0003      	movs	r3, r0
 8009a52:	60fb      	str	r3, [r7, #12]
      break;
 8009a54:	e153      	b.n	8009cfe <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	7c1b      	ldrb	r3, [r3, #16]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d10f      	bne.n	8009a7e <USBD_GetDescriptor+0x7a>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	23ae      	movs	r3, #174	; 0xae
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	58d3      	ldr	r3, [r2, r3]
 8009a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a68:	2208      	movs	r2, #8
 8009a6a:	18ba      	adds	r2, r7, r2
 8009a6c:	0010      	movs	r0, r2
 8009a6e:	4798      	blx	r3
 8009a70:	0003      	movs	r3, r0
 8009a72:	60fb      	str	r3, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	3301      	adds	r3, #1
 8009a78:	2202      	movs	r2, #2
 8009a7a:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009a7c:	e13f      	b.n	8009cfe <USBD_GetDescriptor+0x2fa>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	23ae      	movs	r3, #174	; 0xae
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	58d3      	ldr	r3, [r2, r3]
 8009a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a88:	2208      	movs	r2, #8
 8009a8a:	18ba      	adds	r2, r7, r2
 8009a8c:	0010      	movs	r0, r2
 8009a8e:	4798      	blx	r3
 8009a90:	0003      	movs	r3, r0
 8009a92:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	3301      	adds	r3, #1
 8009a98:	2202      	movs	r2, #2
 8009a9a:	701a      	strb	r2, [r3, #0]
      break;
 8009a9c:	e12f      	b.n	8009cfe <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	885b      	ldrh	r3, [r3, #2]
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	2b05      	cmp	r3, #5
 8009aa6:	d900      	bls.n	8009aaa <USBD_GetDescriptor+0xa6>
 8009aa8:	e0d0      	b.n	8009c4c <USBD_GetDescriptor+0x248>
 8009aaa:	009a      	lsls	r2, r3, #2
 8009aac:	4bb0      	ldr	r3, [pc, #704]	; (8009d70 <USBD_GetDescriptor+0x36c>)
 8009aae:	18d3      	adds	r3, r2, r3
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	23ad      	movs	r3, #173	; 0xad
 8009ab8:	009b      	lsls	r3, r3, #2
 8009aba:	58d3      	ldr	r3, [r2, r3]
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d00d      	beq.n	8009ade <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	23ad      	movs	r3, #173	; 0xad
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	58d3      	ldr	r3, [r2, r3]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	7c12      	ldrb	r2, [r2, #16]
 8009ad0:	2108      	movs	r1, #8
 8009ad2:	1879      	adds	r1, r7, r1
 8009ad4:	0010      	movs	r0, r2
 8009ad6:	4798      	blx	r3
 8009ad8:	0003      	movs	r3, r0
 8009ada:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009adc:	e0c3      	b.n	8009c66 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009ade:	683a      	ldr	r2, [r7, #0]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	0011      	movs	r1, r2
 8009ae4:	0018      	movs	r0, r3
 8009ae6:	f000 fb73 	bl	800a1d0 <USBD_CtlError>
            err++;
 8009aea:	210b      	movs	r1, #11
 8009aec:	187b      	adds	r3, r7, r1
 8009aee:	781a      	ldrb	r2, [r3, #0]
 8009af0:	187b      	adds	r3, r7, r1
 8009af2:	3201      	adds	r2, #1
 8009af4:	701a      	strb	r2, [r3, #0]
          break;
 8009af6:	e0b6      	b.n	8009c66 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	23ad      	movs	r3, #173	; 0xad
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	58d3      	ldr	r3, [r2, r3]
 8009b00:	689b      	ldr	r3, [r3, #8]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d00d      	beq.n	8009b22 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	23ad      	movs	r3, #173	; 0xad
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	58d3      	ldr	r3, [r2, r3]
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	7c12      	ldrb	r2, [r2, #16]
 8009b14:	2108      	movs	r1, #8
 8009b16:	1879      	adds	r1, r7, r1
 8009b18:	0010      	movs	r0, r2
 8009b1a:	4798      	blx	r3
 8009b1c:	0003      	movs	r3, r0
 8009b1e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b20:	e0a1      	b.n	8009c66 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009b22:	683a      	ldr	r2, [r7, #0]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	0011      	movs	r1, r2
 8009b28:	0018      	movs	r0, r3
 8009b2a:	f000 fb51 	bl	800a1d0 <USBD_CtlError>
            err++;
 8009b2e:	210b      	movs	r1, #11
 8009b30:	187b      	adds	r3, r7, r1
 8009b32:	781a      	ldrb	r2, [r3, #0]
 8009b34:	187b      	adds	r3, r7, r1
 8009b36:	3201      	adds	r2, #1
 8009b38:	701a      	strb	r2, [r3, #0]
          break;
 8009b3a:	e094      	b.n	8009c66 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	23ad      	movs	r3, #173	; 0xad
 8009b40:	009b      	lsls	r3, r3, #2
 8009b42:	58d3      	ldr	r3, [r2, r3]
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d00d      	beq.n	8009b66 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009b4a:	687a      	ldr	r2, [r7, #4]
 8009b4c:	23ad      	movs	r3, #173	; 0xad
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	58d3      	ldr	r3, [r2, r3]
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	7c12      	ldrb	r2, [r2, #16]
 8009b58:	2108      	movs	r1, #8
 8009b5a:	1879      	adds	r1, r7, r1
 8009b5c:	0010      	movs	r0, r2
 8009b5e:	4798      	blx	r3
 8009b60:	0003      	movs	r3, r0
 8009b62:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b64:	e07f      	b.n	8009c66 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009b66:	683a      	ldr	r2, [r7, #0]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	0011      	movs	r1, r2
 8009b6c:	0018      	movs	r0, r3
 8009b6e:	f000 fb2f 	bl	800a1d0 <USBD_CtlError>
            err++;
 8009b72:	210b      	movs	r1, #11
 8009b74:	187b      	adds	r3, r7, r1
 8009b76:	781a      	ldrb	r2, [r3, #0]
 8009b78:	187b      	adds	r3, r7, r1
 8009b7a:	3201      	adds	r2, #1
 8009b7c:	701a      	strb	r2, [r3, #0]
          break;
 8009b7e:	e072      	b.n	8009c66 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	23ad      	movs	r3, #173	; 0xad
 8009b84:	009b      	lsls	r3, r3, #2
 8009b86:	58d3      	ldr	r3, [r2, r3]
 8009b88:	691b      	ldr	r3, [r3, #16]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d00d      	beq.n	8009baa <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	23ad      	movs	r3, #173	; 0xad
 8009b92:	009b      	lsls	r3, r3, #2
 8009b94:	58d3      	ldr	r3, [r2, r3]
 8009b96:	691b      	ldr	r3, [r3, #16]
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	7c12      	ldrb	r2, [r2, #16]
 8009b9c:	2108      	movs	r1, #8
 8009b9e:	1879      	adds	r1, r7, r1
 8009ba0:	0010      	movs	r0, r2
 8009ba2:	4798      	blx	r3
 8009ba4:	0003      	movs	r3, r0
 8009ba6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ba8:	e05d      	b.n	8009c66 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009baa:	683a      	ldr	r2, [r7, #0]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	0011      	movs	r1, r2
 8009bb0:	0018      	movs	r0, r3
 8009bb2:	f000 fb0d 	bl	800a1d0 <USBD_CtlError>
            err++;
 8009bb6:	210b      	movs	r1, #11
 8009bb8:	187b      	adds	r3, r7, r1
 8009bba:	781a      	ldrb	r2, [r3, #0]
 8009bbc:	187b      	adds	r3, r7, r1
 8009bbe:	3201      	adds	r2, #1
 8009bc0:	701a      	strb	r2, [r3, #0]
          break;
 8009bc2:	e050      	b.n	8009c66 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	23ad      	movs	r3, #173	; 0xad
 8009bc8:	009b      	lsls	r3, r3, #2
 8009bca:	58d3      	ldr	r3, [r2, r3]
 8009bcc:	695b      	ldr	r3, [r3, #20]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d00d      	beq.n	8009bee <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	23ad      	movs	r3, #173	; 0xad
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	58d3      	ldr	r3, [r2, r3]
 8009bda:	695b      	ldr	r3, [r3, #20]
 8009bdc:	687a      	ldr	r2, [r7, #4]
 8009bde:	7c12      	ldrb	r2, [r2, #16]
 8009be0:	2108      	movs	r1, #8
 8009be2:	1879      	adds	r1, r7, r1
 8009be4:	0010      	movs	r0, r2
 8009be6:	4798      	blx	r3
 8009be8:	0003      	movs	r3, r0
 8009bea:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bec:	e03b      	b.n	8009c66 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009bee:	683a      	ldr	r2, [r7, #0]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	0011      	movs	r1, r2
 8009bf4:	0018      	movs	r0, r3
 8009bf6:	f000 faeb 	bl	800a1d0 <USBD_CtlError>
            err++;
 8009bfa:	210b      	movs	r1, #11
 8009bfc:	187b      	adds	r3, r7, r1
 8009bfe:	781a      	ldrb	r2, [r3, #0]
 8009c00:	187b      	adds	r3, r7, r1
 8009c02:	3201      	adds	r2, #1
 8009c04:	701a      	strb	r2, [r3, #0]
          break;
 8009c06:	e02e      	b.n	8009c66 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	23ad      	movs	r3, #173	; 0xad
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	58d3      	ldr	r3, [r2, r3]
 8009c10:	699b      	ldr	r3, [r3, #24]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d00d      	beq.n	8009c32 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	23ad      	movs	r3, #173	; 0xad
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	58d3      	ldr	r3, [r2, r3]
 8009c1e:	699b      	ldr	r3, [r3, #24]
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	7c12      	ldrb	r2, [r2, #16]
 8009c24:	2108      	movs	r1, #8
 8009c26:	1879      	adds	r1, r7, r1
 8009c28:	0010      	movs	r0, r2
 8009c2a:	4798      	blx	r3
 8009c2c:	0003      	movs	r3, r0
 8009c2e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c30:	e019      	b.n	8009c66 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009c32:	683a      	ldr	r2, [r7, #0]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	0011      	movs	r1, r2
 8009c38:	0018      	movs	r0, r3
 8009c3a:	f000 fac9 	bl	800a1d0 <USBD_CtlError>
            err++;
 8009c3e:	210b      	movs	r1, #11
 8009c40:	187b      	adds	r3, r7, r1
 8009c42:	781a      	ldrb	r2, [r3, #0]
 8009c44:	187b      	adds	r3, r7, r1
 8009c46:	3201      	adds	r2, #1
 8009c48:	701a      	strb	r2, [r3, #0]
          break;
 8009c4a:	e00c      	b.n	8009c66 <USBD_GetDescriptor+0x262>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009c4c:	683a      	ldr	r2, [r7, #0]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	0011      	movs	r1, r2
 8009c52:	0018      	movs	r0, r3
 8009c54:	f000 fabc 	bl	800a1d0 <USBD_CtlError>
          err++;
 8009c58:	210b      	movs	r1, #11
 8009c5a:	187b      	adds	r3, r7, r1
 8009c5c:	781a      	ldrb	r2, [r3, #0]
 8009c5e:	187b      	adds	r3, r7, r1
 8009c60:	3201      	adds	r2, #1
 8009c62:	701a      	strb	r2, [r3, #0]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009c64:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8009c66:	e04a      	b.n	8009cfe <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	7c1b      	ldrb	r3, [r3, #16]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d10b      	bne.n	8009c88 <USBD_GetDescriptor+0x284>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	23ae      	movs	r3, #174	; 0xae
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	58d3      	ldr	r3, [r2, r3]
 8009c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c7a:	2208      	movs	r2, #8
 8009c7c:	18ba      	adds	r2, r7, r2
 8009c7e:	0010      	movs	r0, r2
 8009c80:	4798      	blx	r3
 8009c82:	0003      	movs	r3, r0
 8009c84:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c86:	e03a      	b.n	8009cfe <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8009c88:	683a      	ldr	r2, [r7, #0]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	0011      	movs	r1, r2
 8009c8e:	0018      	movs	r0, r3
 8009c90:	f000 fa9e 	bl	800a1d0 <USBD_CtlError>
        err++;
 8009c94:	210b      	movs	r1, #11
 8009c96:	187b      	adds	r3, r7, r1
 8009c98:	781a      	ldrb	r2, [r3, #0]
 8009c9a:	187b      	adds	r3, r7, r1
 8009c9c:	3201      	adds	r2, #1
 8009c9e:	701a      	strb	r2, [r3, #0]
      break;
 8009ca0:	e02d      	b.n	8009cfe <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	7c1b      	ldrb	r3, [r3, #16]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d10f      	bne.n	8009cca <USBD_GetDescriptor+0x2c6>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009caa:	687a      	ldr	r2, [r7, #4]
 8009cac:	23ae      	movs	r3, #174	; 0xae
 8009cae:	009b      	lsls	r3, r3, #2
 8009cb0:	58d3      	ldr	r3, [r2, r3]
 8009cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cb4:	2208      	movs	r2, #8
 8009cb6:	18ba      	adds	r2, r7, r2
 8009cb8:	0010      	movs	r0, r2
 8009cba:	4798      	blx	r3
 8009cbc:	0003      	movs	r3, r0
 8009cbe:	60fb      	str	r3, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	2207      	movs	r2, #7
 8009cc6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009cc8:	e019      	b.n	8009cfe <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8009cca:	683a      	ldr	r2, [r7, #0]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	0011      	movs	r1, r2
 8009cd0:	0018      	movs	r0, r3
 8009cd2:	f000 fa7d 	bl	800a1d0 <USBD_CtlError>
        err++;
 8009cd6:	210b      	movs	r1, #11
 8009cd8:	187b      	adds	r3, r7, r1
 8009cda:	781a      	ldrb	r2, [r3, #0]
 8009cdc:	187b      	adds	r3, r7, r1
 8009cde:	3201      	adds	r2, #1
 8009ce0:	701a      	strb	r2, [r3, #0]
      break;
 8009ce2:	e00c      	b.n	8009cfe <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8009ce4:	683a      	ldr	r2, [r7, #0]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	0011      	movs	r1, r2
 8009cea:	0018      	movs	r0, r3
 8009cec:	f000 fa70 	bl	800a1d0 <USBD_CtlError>
      err++;
 8009cf0:	210b      	movs	r1, #11
 8009cf2:	187b      	adds	r3, r7, r1
 8009cf4:	781a      	ldrb	r2, [r3, #0]
 8009cf6:	187b      	adds	r3, r7, r1
 8009cf8:	3201      	adds	r2, #1
 8009cfa:	701a      	strb	r2, [r3, #0]
      break;
 8009cfc:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 8009cfe:	230b      	movs	r3, #11
 8009d00:	18fb      	adds	r3, r7, r3
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d12c      	bne.n	8009d62 <USBD_GetDescriptor+0x35e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	88db      	ldrh	r3, [r3, #6]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d023      	beq.n	8009d58 <USBD_GetDescriptor+0x354>
  {
    if (len != 0U)
 8009d10:	2108      	movs	r1, #8
 8009d12:	187b      	adds	r3, r7, r1
 8009d14:	881b      	ldrh	r3, [r3, #0]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d017      	beq.n	8009d4a <USBD_GetDescriptor+0x346>
    {
      len = MIN(len, req->wLength);
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	88da      	ldrh	r2, [r3, #6]
 8009d1e:	187b      	adds	r3, r7, r1
 8009d20:	881b      	ldrh	r3, [r3, #0]
 8009d22:	1c18      	adds	r0, r3, #0
 8009d24:	1c11      	adds	r1, r2, #0
 8009d26:	b28a      	uxth	r2, r1
 8009d28:	b283      	uxth	r3, r0
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d900      	bls.n	8009d30 <USBD_GetDescriptor+0x32c>
 8009d2e:	1c01      	adds	r1, r0, #0
 8009d30:	b28a      	uxth	r2, r1
 8009d32:	2108      	movs	r1, #8
 8009d34:	187b      	adds	r3, r7, r1
 8009d36:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009d38:	187b      	adds	r3, r7, r1
 8009d3a:	881b      	ldrh	r3, [r3, #0]
 8009d3c:	001a      	movs	r2, r3
 8009d3e:	68f9      	ldr	r1, [r7, #12]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	0018      	movs	r0, r3
 8009d44:	f000 facc 	bl	800a2e0 <USBD_CtlSendData>
 8009d48:	e00c      	b.n	8009d64 <USBD_GetDescriptor+0x360>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009d4a:	683a      	ldr	r2, [r7, #0]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	0011      	movs	r1, r2
 8009d50:	0018      	movs	r0, r3
 8009d52:	f000 fa3d 	bl	800a1d0 <USBD_CtlError>
 8009d56:	e005      	b.n	8009d64 <USBD_GetDescriptor+0x360>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	0018      	movs	r0, r3
 8009d5c:	f000 fb1e 	bl	800a39c <USBD_CtlSendStatus>
 8009d60:	e000      	b.n	8009d64 <USBD_GetDescriptor+0x360>
    return;
 8009d62:	46c0      	nop			; (mov r8, r8)
  }
}
 8009d64:	46bd      	mov	sp, r7
 8009d66:	b004      	add	sp, #16
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	46c0      	nop			; (mov r8, r8)
 8009d6c:	0800b9c0 	.word	0x0800b9c0
 8009d70:	0800b9e0 	.word	0x0800b9e0

08009d74 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d74:	b590      	push	{r4, r7, lr}
 8009d76:	b085      	sub	sp, #20
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	889b      	ldrh	r3, [r3, #4]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d13e      	bne.n	8009e04 <USBD_SetAddress+0x90>
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	88db      	ldrh	r3, [r3, #6]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d13a      	bne.n	8009e04 <USBD_SetAddress+0x90>
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	885b      	ldrh	r3, [r3, #2]
 8009d92:	2b7f      	cmp	r3, #127	; 0x7f
 8009d94:	d836      	bhi.n	8009e04 <USBD_SetAddress+0x90>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	885b      	ldrh	r3, [r3, #2]
 8009d9a:	b2da      	uxtb	r2, r3
 8009d9c:	230f      	movs	r3, #15
 8009d9e:	18fb      	adds	r3, r7, r3
 8009da0:	217f      	movs	r1, #127	; 0x7f
 8009da2:	400a      	ands	r2, r1
 8009da4:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009da6:	687a      	ldr	r2, [r7, #4]
 8009da8:	23a7      	movs	r3, #167	; 0xa7
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	5cd3      	ldrb	r3, [r2, r3]
 8009dae:	b2db      	uxtb	r3, r3
 8009db0:	2b03      	cmp	r3, #3
 8009db2:	d106      	bne.n	8009dc2 <USBD_SetAddress+0x4e>
    {
      USBD_CtlError(pdev, req);
 8009db4:	683a      	ldr	r2, [r7, #0]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	0011      	movs	r1, r2
 8009dba:	0018      	movs	r0, r3
 8009dbc:	f000 fa08 	bl	800a1d0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dc0:	e027      	b.n	8009e12 <USBD_SetAddress+0x9e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	240f      	movs	r4, #15
 8009dc6:	193a      	adds	r2, r7, r4
 8009dc8:	4914      	ldr	r1, [pc, #80]	; (8009e1c <USBD_SetAddress+0xa8>)
 8009dca:	7812      	ldrb	r2, [r2, #0]
 8009dcc:	545a      	strb	r2, [r3, r1]
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009dce:	193b      	adds	r3, r7, r4
 8009dd0:	781a      	ldrb	r2, [r3, #0]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	0011      	movs	r1, r2
 8009dd6:	0018      	movs	r0, r3
 8009dd8:	f000 ff9e 	bl	800ad18 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	0018      	movs	r0, r3
 8009de0:	f000 fadc 	bl	800a39c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009de4:	193b      	adds	r3, r7, r4
 8009de6:	781b      	ldrb	r3, [r3, #0]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d005      	beq.n	8009df8 <USBD_SetAddress+0x84>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009dec:	687a      	ldr	r2, [r7, #4]
 8009dee:	23a7      	movs	r3, #167	; 0xa7
 8009df0:	009b      	lsls	r3, r3, #2
 8009df2:	2102      	movs	r1, #2
 8009df4:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009df6:	e00c      	b.n	8009e12 <USBD_SetAddress+0x9e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	23a7      	movs	r3, #167	; 0xa7
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	2101      	movs	r1, #1
 8009e00:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e02:	e006      	b.n	8009e12 <USBD_SetAddress+0x9e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009e04:	683a      	ldr	r2, [r7, #0]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	0011      	movs	r1, r2
 8009e0a:	0018      	movs	r0, r3
 8009e0c:	f000 f9e0 	bl	800a1d0 <USBD_CtlError>
  }
}
 8009e10:	46c0      	nop			; (mov r8, r8)
 8009e12:	46c0      	nop			; (mov r8, r8)
 8009e14:	46bd      	mov	sp, r7
 8009e16:	b005      	add	sp, #20
 8009e18:	bd90      	pop	{r4, r7, pc}
 8009e1a:	46c0      	nop			; (mov r8, r8)
 8009e1c:	0000029e 	.word	0x0000029e

08009e20 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e20:	b5b0      	push	{r4, r5, r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e2a:	230f      	movs	r3, #15
 8009e2c:	18fb      	adds	r3, r7, r3
 8009e2e:	2200      	movs	r2, #0
 8009e30:	701a      	strb	r2, [r3, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	885b      	ldrh	r3, [r3, #2]
 8009e36:	b2da      	uxtb	r2, r3
 8009e38:	4b5f      	ldr	r3, [pc, #380]	; (8009fb8 <USBD_SetConfig+0x198>)
 8009e3a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009e3c:	4b5e      	ldr	r3, [pc, #376]	; (8009fb8 <USBD_SetConfig+0x198>)
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d907      	bls.n	8009e54 <USBD_SetConfig+0x34>
  {
    USBD_CtlError(pdev, req);
 8009e44:	683a      	ldr	r2, [r7, #0]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	0011      	movs	r1, r2
 8009e4a:	0018      	movs	r0, r3
 8009e4c:	f000 f9c0 	bl	800a1d0 <USBD_CtlError>
    return USBD_FAIL;
 8009e50:	2303      	movs	r3, #3
 8009e52:	e0ac      	b.n	8009fae <USBD_SetConfig+0x18e>
  }

  switch (pdev->dev_state)
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	23a7      	movs	r3, #167	; 0xa7
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	5cd3      	ldrb	r3, [r2, r3]
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	2b02      	cmp	r3, #2
 8009e60:	d002      	beq.n	8009e68 <USBD_SetConfig+0x48>
 8009e62:	2b03      	cmp	r3, #3
 8009e64:	d033      	beq.n	8009ece <USBD_SetConfig+0xae>
 8009e66:	e08d      	b.n	8009f84 <USBD_SetConfig+0x164>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009e68:	4b53      	ldr	r3, [pc, #332]	; (8009fb8 <USBD_SetConfig+0x198>)
 8009e6a:	781b      	ldrb	r3, [r3, #0]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d029      	beq.n	8009ec4 <USBD_SetConfig+0xa4>
      {
        pdev->dev_config = cfgidx;
 8009e70:	4b51      	ldr	r3, [pc, #324]	; (8009fb8 <USBD_SetConfig+0x198>)
 8009e72:	781b      	ldrb	r3, [r3, #0]
 8009e74:	001a      	movs	r2, r3
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009e7a:	4b4f      	ldr	r3, [pc, #316]	; (8009fb8 <USBD_SetConfig+0x198>)
 8009e7c:	781a      	ldrb	r2, [r3, #0]
 8009e7e:	250f      	movs	r5, #15
 8009e80:	197c      	adds	r4, r7, r5
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	0011      	movs	r1, r2
 8009e86:	0018      	movs	r0, r3
 8009e88:	f7fe fed4 	bl	8008c34 <USBD_SetClassConfig>
 8009e8c:	0003      	movs	r3, r0
 8009e8e:	7023      	strb	r3, [r4, #0]

        if (ret != USBD_OK)
 8009e90:	197b      	adds	r3, r7, r5
 8009e92:	781b      	ldrb	r3, [r3, #0]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d00b      	beq.n	8009eb0 <USBD_SetConfig+0x90>
        {
          USBD_CtlError(pdev, req);
 8009e98:	683a      	ldr	r2, [r7, #0]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	0011      	movs	r1, r2
 8009e9e:	0018      	movs	r0, r3
 8009ea0:	f000 f996 	bl	800a1d0 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	23a7      	movs	r3, #167	; 0xa7
 8009ea8:	009b      	lsls	r3, r3, #2
 8009eaa:	2102      	movs	r1, #2
 8009eac:	54d1      	strb	r1, [r2, r3]
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009eae:	e07b      	b.n	8009fa8 <USBD_SetConfig+0x188>
          (void)USBD_CtlSendStatus(pdev);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	0018      	movs	r0, r3
 8009eb4:	f000 fa72 	bl	800a39c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009eb8:	687a      	ldr	r2, [r7, #4]
 8009eba:	23a7      	movs	r3, #167	; 0xa7
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	2103      	movs	r1, #3
 8009ec0:	54d1      	strb	r1, [r2, r3]
      break;
 8009ec2:	e071      	b.n	8009fa8 <USBD_SetConfig+0x188>
        (void)USBD_CtlSendStatus(pdev);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	0018      	movs	r0, r3
 8009ec8:	f000 fa68 	bl	800a39c <USBD_CtlSendStatus>
      break;
 8009ecc:	e06c      	b.n	8009fa8 <USBD_SetConfig+0x188>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009ece:	4b3a      	ldr	r3, [pc, #232]	; (8009fb8 <USBD_SetConfig+0x198>)
 8009ed0:	781b      	ldrb	r3, [r3, #0]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d115      	bne.n	8009f02 <USBD_SetConfig+0xe2>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ed6:	687a      	ldr	r2, [r7, #4]
 8009ed8:	23a7      	movs	r3, #167	; 0xa7
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	2102      	movs	r1, #2
 8009ede:	54d1      	strb	r1, [r2, r3]
        pdev->dev_config = cfgidx;
 8009ee0:	4b35      	ldr	r3, [pc, #212]	; (8009fb8 <USBD_SetConfig+0x198>)
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	001a      	movs	r2, r3
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009eea:	4b33      	ldr	r3, [pc, #204]	; (8009fb8 <USBD_SetConfig+0x198>)
 8009eec:	781a      	ldrb	r2, [r3, #0]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	0011      	movs	r1, r2
 8009ef2:	0018      	movs	r0, r3
 8009ef4:	f7fe fec3 	bl	8008c7e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	0018      	movs	r0, r3
 8009efc:	f000 fa4e 	bl	800a39c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009f00:	e052      	b.n	8009fa8 <USBD_SetConfig+0x188>
      else if (cfgidx != pdev->dev_config)
 8009f02:	4b2d      	ldr	r3, [pc, #180]	; (8009fb8 <USBD_SetConfig+0x198>)
 8009f04:	781b      	ldrb	r3, [r3, #0]
 8009f06:	001a      	movs	r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d034      	beq.n	8009f7a <USBD_SetConfig+0x15a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	b2da      	uxtb	r2, r3
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	0011      	movs	r1, r2
 8009f1a:	0018      	movs	r0, r3
 8009f1c:	f7fe feaf 	bl	8008c7e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009f20:	4b25      	ldr	r3, [pc, #148]	; (8009fb8 <USBD_SetConfig+0x198>)
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	001a      	movs	r2, r3
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009f2a:	4b23      	ldr	r3, [pc, #140]	; (8009fb8 <USBD_SetConfig+0x198>)
 8009f2c:	781a      	ldrb	r2, [r3, #0]
 8009f2e:	250f      	movs	r5, #15
 8009f30:	197c      	adds	r4, r7, r5
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	0011      	movs	r1, r2
 8009f36:	0018      	movs	r0, r3
 8009f38:	f7fe fe7c 	bl	8008c34 <USBD_SetClassConfig>
 8009f3c:	0003      	movs	r3, r0
 8009f3e:	7023      	strb	r3, [r4, #0]
        if (ret != USBD_OK)
 8009f40:	197b      	adds	r3, r7, r5
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d013      	beq.n	8009f70 <USBD_SetConfig+0x150>
          USBD_CtlError(pdev, req);
 8009f48:	683a      	ldr	r2, [r7, #0]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	0011      	movs	r1, r2
 8009f4e:	0018      	movs	r0, r3
 8009f50:	f000 f93e 	bl	800a1d0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	b2da      	uxtb	r2, r3
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	0011      	movs	r1, r2
 8009f5e:	0018      	movs	r0, r3
 8009f60:	f7fe fe8d 	bl	8008c7e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f64:	687a      	ldr	r2, [r7, #4]
 8009f66:	23a7      	movs	r3, #167	; 0xa7
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	2102      	movs	r1, #2
 8009f6c:	54d1      	strb	r1, [r2, r3]
      break;
 8009f6e:	e01b      	b.n	8009fa8 <USBD_SetConfig+0x188>
          (void)USBD_CtlSendStatus(pdev);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	0018      	movs	r0, r3
 8009f74:	f000 fa12 	bl	800a39c <USBD_CtlSendStatus>
      break;
 8009f78:	e016      	b.n	8009fa8 <USBD_SetConfig+0x188>
        (void)USBD_CtlSendStatus(pdev);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	0018      	movs	r0, r3
 8009f7e:	f000 fa0d 	bl	800a39c <USBD_CtlSendStatus>
      break;
 8009f82:	e011      	b.n	8009fa8 <USBD_SetConfig+0x188>

    default:
      USBD_CtlError(pdev, req);
 8009f84:	683a      	ldr	r2, [r7, #0]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	0011      	movs	r1, r2
 8009f8a:	0018      	movs	r0, r3
 8009f8c:	f000 f920 	bl	800a1d0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009f90:	4b09      	ldr	r3, [pc, #36]	; (8009fb8 <USBD_SetConfig+0x198>)
 8009f92:	781a      	ldrb	r2, [r3, #0]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	0011      	movs	r1, r2
 8009f98:	0018      	movs	r0, r3
 8009f9a:	f7fe fe70 	bl	8008c7e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009f9e:	230f      	movs	r3, #15
 8009fa0:	18fb      	adds	r3, r7, r3
 8009fa2:	2203      	movs	r2, #3
 8009fa4:	701a      	strb	r2, [r3, #0]
      break;
 8009fa6:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8009fa8:	230f      	movs	r3, #15
 8009faa:	18fb      	adds	r3, r7, r3
 8009fac:	781b      	ldrb	r3, [r3, #0]
}
 8009fae:	0018      	movs	r0, r3
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	b004      	add	sp, #16
 8009fb4:	bdb0      	pop	{r4, r5, r7, pc}
 8009fb6:	46c0      	nop			; (mov r8, r8)
 8009fb8:	20000574 	.word	0x20000574

08009fbc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	88db      	ldrh	r3, [r3, #6]
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d006      	beq.n	8009fdc <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8009fce:	683a      	ldr	r2, [r7, #0]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	0011      	movs	r1, r2
 8009fd4:	0018      	movs	r0, r3
 8009fd6:	f000 f8fb 	bl	800a1d0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009fda:	e027      	b.n	800a02c <USBD_GetConfig+0x70>
    switch (pdev->dev_state)
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	23a7      	movs	r3, #167	; 0xa7
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	5cd3      	ldrb	r3, [r2, r3]
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	2b02      	cmp	r3, #2
 8009fe8:	dc02      	bgt.n	8009ff0 <USBD_GetConfig+0x34>
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	dc03      	bgt.n	8009ff6 <USBD_GetConfig+0x3a>
 8009fee:	e016      	b.n	800a01e <USBD_GetConfig+0x62>
 8009ff0:	2b03      	cmp	r3, #3
 8009ff2:	d00c      	beq.n	800a00e <USBD_GetConfig+0x52>
 8009ff4:	e013      	b.n	800a01e <USBD_GetConfig+0x62>
        pdev->dev_default_config = 0U;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	3308      	adds	r3, #8
 800a000:	0019      	movs	r1, r3
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2201      	movs	r2, #1
 800a006:	0018      	movs	r0, r3
 800a008:	f000 f96a 	bl	800a2e0 <USBD_CtlSendData>
        break;
 800a00c:	e00e      	b.n	800a02c <USBD_GetConfig+0x70>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	1d19      	adds	r1, r3, #4
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2201      	movs	r2, #1
 800a016:	0018      	movs	r0, r3
 800a018:	f000 f962 	bl	800a2e0 <USBD_CtlSendData>
        break;
 800a01c:	e006      	b.n	800a02c <USBD_GetConfig+0x70>
        USBD_CtlError(pdev, req);
 800a01e:	683a      	ldr	r2, [r7, #0]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	0011      	movs	r1, r2
 800a024:	0018      	movs	r0, r3
 800a026:	f000 f8d3 	bl	800a1d0 <USBD_CtlError>
        break;
 800a02a:	46c0      	nop			; (mov r8, r8)
}
 800a02c:	46c0      	nop			; (mov r8, r8)
 800a02e:	46bd      	mov	sp, r7
 800a030:	b002      	add	sp, #8
 800a032:	bd80      	pop	{r7, pc}

0800a034 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	23a7      	movs	r3, #167	; 0xa7
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	5cd3      	ldrb	r3, [r2, r3]
 800a046:	b2db      	uxtb	r3, r3
 800a048:	3b01      	subs	r3, #1
 800a04a:	2b02      	cmp	r3, #2
 800a04c:	d822      	bhi.n	800a094 <USBD_GetStatus+0x60>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	88db      	ldrh	r3, [r3, #6]
 800a052:	2b02      	cmp	r3, #2
 800a054:	d006      	beq.n	800a064 <USBD_GetStatus+0x30>
      {
        USBD_CtlError(pdev, req);
 800a056:	683a      	ldr	r2, [r7, #0]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	0011      	movs	r1, r2
 800a05c:	0018      	movs	r0, r3
 800a05e:	f000 f8b7 	bl	800a1d0 <USBD_CtlError>
        break;
 800a062:	e01e      	b.n	800a0a2 <USBD_GetStatus+0x6e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2201      	movs	r2, #1
 800a068:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	23a9      	movs	r3, #169	; 0xa9
 800a06e:	009b      	lsls	r3, r3, #2
 800a070:	58d3      	ldr	r3, [r2, r3]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d005      	beq.n	800a082 <USBD_GetStatus+0x4e>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	2202      	movs	r2, #2
 800a07c:	431a      	orrs	r2, r3
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	330c      	adds	r3, #12
 800a086:	0019      	movs	r1, r3
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2202      	movs	r2, #2
 800a08c:	0018      	movs	r0, r3
 800a08e:	f000 f927 	bl	800a2e0 <USBD_CtlSendData>
      break;
 800a092:	e006      	b.n	800a0a2 <USBD_GetStatus+0x6e>

    default:
      USBD_CtlError(pdev, req);
 800a094:	683a      	ldr	r2, [r7, #0]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	0011      	movs	r1, r2
 800a09a:	0018      	movs	r0, r3
 800a09c:	f000 f898 	bl	800a1d0 <USBD_CtlError>
      break;
 800a0a0:	46c0      	nop			; (mov r8, r8)
  }
}
 800a0a2:	46c0      	nop			; (mov r8, r8)
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	b002      	add	sp, #8
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b082      	sub	sp, #8
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]
 800a0b2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	885b      	ldrh	r3, [r3, #2]
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d109      	bne.n	800a0d0 <USBD_SetFeature+0x26>
  {
    pdev->dev_remote_wakeup = 1U;
 800a0bc:	687a      	ldr	r2, [r7, #4]
 800a0be:	23a9      	movs	r3, #169	; 0xa9
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	2101      	movs	r1, #1
 800a0c4:	50d1      	str	r1, [r2, r3]
    (void)USBD_CtlSendStatus(pdev);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	0018      	movs	r0, r3
 800a0ca:	f000 f967 	bl	800a39c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a0ce:	e017      	b.n	800a100 <USBD_SetFeature+0x56>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	885b      	ldrh	r3, [r3, #2]
 800a0d4:	2b02      	cmp	r3, #2
 800a0d6:	d10d      	bne.n	800a0f4 <USBD_SetFeature+0x4a>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	889b      	ldrh	r3, [r3, #4]
 800a0dc:	0a1b      	lsrs	r3, r3, #8
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	b2d9      	uxtb	r1, r3
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	23a8      	movs	r3, #168	; 0xa8
 800a0e6:	009b      	lsls	r3, r3, #2
 800a0e8:	54d1      	strb	r1, [r2, r3]
    (void)USBD_CtlSendStatus(pdev);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	0018      	movs	r0, r3
 800a0ee:	f000 f955 	bl	800a39c <USBD_CtlSendStatus>
}
 800a0f2:	e005      	b.n	800a100 <USBD_SetFeature+0x56>
    USBD_CtlError(pdev, req);
 800a0f4:	683a      	ldr	r2, [r7, #0]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	0011      	movs	r1, r2
 800a0fa:	0018      	movs	r0, r3
 800a0fc:	f000 f868 	bl	800a1d0 <USBD_CtlError>
}
 800a100:	46c0      	nop			; (mov r8, r8)
 800a102:	46bd      	mov	sp, r7
 800a104:	b002      	add	sp, #8
 800a106:	bd80      	pop	{r7, pc}

0800a108 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a112:	687a      	ldr	r2, [r7, #4]
 800a114:	23a7      	movs	r3, #167	; 0xa7
 800a116:	009b      	lsls	r3, r3, #2
 800a118:	5cd3      	ldrb	r3, [r2, r3]
 800a11a:	b2db      	uxtb	r3, r3
 800a11c:	3b01      	subs	r3, #1
 800a11e:	2b02      	cmp	r3, #2
 800a120:	d80d      	bhi.n	800a13e <USBD_ClrFeature+0x36>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	885b      	ldrh	r3, [r3, #2]
 800a126:	2b01      	cmp	r3, #1
 800a128:	d110      	bne.n	800a14c <USBD_ClrFeature+0x44>
      {
        pdev->dev_remote_wakeup = 0U;
 800a12a:	687a      	ldr	r2, [r7, #4]
 800a12c:	23a9      	movs	r3, #169	; 0xa9
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	2100      	movs	r1, #0
 800a132:	50d1      	str	r1, [r2, r3]
        (void)USBD_CtlSendStatus(pdev);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	0018      	movs	r0, r3
 800a138:	f000 f930 	bl	800a39c <USBD_CtlSendStatus>
      }
      break;
 800a13c:	e006      	b.n	800a14c <USBD_ClrFeature+0x44>

    default:
      USBD_CtlError(pdev, req);
 800a13e:	683a      	ldr	r2, [r7, #0]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	0011      	movs	r1, r2
 800a144:	0018      	movs	r0, r3
 800a146:	f000 f843 	bl	800a1d0 <USBD_CtlError>
      break;
 800a14a:	e000      	b.n	800a14e <USBD_ClrFeature+0x46>
      break;
 800a14c:	46c0      	nop			; (mov r8, r8)
  }
}
 800a14e:	46c0      	nop			; (mov r8, r8)
 800a150:	46bd      	mov	sp, r7
 800a152:	b002      	add	sp, #8
 800a154:	bd80      	pop	{r7, pc}

0800a156 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a156:	b580      	push	{r7, lr}
 800a158:	b084      	sub	sp, #16
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	6078      	str	r0, [r7, #4]
 800a15e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	781a      	ldrb	r2, [r3, #0]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	3301      	adds	r3, #1
 800a170:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	781a      	ldrb	r2, [r3, #0]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	3301      	adds	r3, #1
 800a17e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	0018      	movs	r0, r3
 800a184:	f7ff f908 	bl	8009398 <SWAPBYTE>
 800a188:	0003      	movs	r3, r0
 800a18a:	001a      	movs	r2, r3
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	3301      	adds	r3, #1
 800a194:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	3301      	adds	r3, #1
 800a19a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	0018      	movs	r0, r3
 800a1a0:	f7ff f8fa 	bl	8009398 <SWAPBYTE>
 800a1a4:	0003      	movs	r3, r0
 800a1a6:	001a      	movs	r2, r3
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	0018      	movs	r0, r3
 800a1bc:	f7ff f8ec 	bl	8009398 <SWAPBYTE>
 800a1c0:	0003      	movs	r3, r0
 800a1c2:	001a      	movs	r2, r3
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	80da      	strh	r2, [r3, #6]
}
 800a1c8:	46c0      	nop			; (mov r8, r8)
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	b004      	add	sp, #16
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2180      	movs	r1, #128	; 0x80
 800a1de:	0018      	movs	r0, r3
 800a1e0:	f000 fd13 	bl	800ac0a <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2100      	movs	r1, #0
 800a1e8:	0018      	movs	r0, r3
 800a1ea:	f000 fd0e 	bl	800ac0a <USBD_LL_StallEP>
}
 800a1ee:	46c0      	nop			; (mov r8, r8)
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	b002      	add	sp, #8
 800a1f4:	bd80      	pop	{r7, pc}

0800a1f6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a1f6:	b590      	push	{r4, r7, lr}
 800a1f8:	b087      	sub	sp, #28
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	60f8      	str	r0, [r7, #12]
 800a1fe:	60b9      	str	r1, [r7, #8]
 800a200:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a202:	2417      	movs	r4, #23
 800a204:	193b      	adds	r3, r7, r4
 800a206:	2200      	movs	r2, #0
 800a208:	701a      	strb	r2, [r3, #0]
  uint8_t *pdesc;

  if (desc == NULL)
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d044      	beq.n	800a29a <USBD_GetString+0xa4>
  {
    return;
  }

  pdesc = desc;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	0018      	movs	r0, r3
 800a218:	f000 f843 	bl	800a2a2 <USBD_GetLen>
 800a21c:	0003      	movs	r3, r0
 800a21e:	3301      	adds	r3, #1
 800a220:	b29b      	uxth	r3, r3
 800a222:	18db      	adds	r3, r3, r3
 800a224:	b29a      	uxth	r2, r3
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a22a:	193b      	adds	r3, r7, r4
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	68ba      	ldr	r2, [r7, #8]
 800a230:	18d3      	adds	r3, r2, r3
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	7812      	ldrb	r2, [r2, #0]
 800a236:	701a      	strb	r2, [r3, #0]
  idx++;
 800a238:	193b      	adds	r3, r7, r4
 800a23a:	781a      	ldrb	r2, [r3, #0]
 800a23c:	193b      	adds	r3, r7, r4
 800a23e:	3201      	adds	r2, #1
 800a240:	701a      	strb	r2, [r3, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a242:	193b      	adds	r3, r7, r4
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	68ba      	ldr	r2, [r7, #8]
 800a248:	18d3      	adds	r3, r2, r3
 800a24a:	2203      	movs	r2, #3
 800a24c:	701a      	strb	r2, [r3, #0]
  idx++;
 800a24e:	193b      	adds	r3, r7, r4
 800a250:	781a      	ldrb	r2, [r3, #0]
 800a252:	193b      	adds	r3, r7, r4
 800a254:	3201      	adds	r2, #1
 800a256:	701a      	strb	r2, [r3, #0]

  while (*pdesc != (uint8_t)'\0')
 800a258:	e01a      	b.n	800a290 <USBD_GetString+0x9a>
  {
    unicode[idx] = *pdesc;
 800a25a:	2117      	movs	r1, #23
 800a25c:	187b      	adds	r3, r7, r1
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	68ba      	ldr	r2, [r7, #8]
 800a262:	18d3      	adds	r3, r2, r3
 800a264:	693a      	ldr	r2, [r7, #16]
 800a266:	7812      	ldrb	r2, [r2, #0]
 800a268:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	3301      	adds	r3, #1
 800a26e:	613b      	str	r3, [r7, #16]
    idx++;
 800a270:	187b      	adds	r3, r7, r1
 800a272:	781a      	ldrb	r2, [r3, #0]
 800a274:	187b      	adds	r3, r7, r1
 800a276:	3201      	adds	r2, #1
 800a278:	701a      	strb	r2, [r3, #0]

    unicode[idx] = 0U;
 800a27a:	187b      	adds	r3, r7, r1
 800a27c:	781b      	ldrb	r3, [r3, #0]
 800a27e:	68ba      	ldr	r2, [r7, #8]
 800a280:	18d3      	adds	r3, r2, r3
 800a282:	2200      	movs	r2, #0
 800a284:	701a      	strb	r2, [r3, #0]
    idx++;
 800a286:	187b      	adds	r3, r7, r1
 800a288:	781a      	ldrb	r2, [r3, #0]
 800a28a:	187b      	adds	r3, r7, r1
 800a28c:	3201      	adds	r2, #1
 800a28e:	701a      	strb	r2, [r3, #0]
  while (*pdesc != (uint8_t)'\0')
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	781b      	ldrb	r3, [r3, #0]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d1e0      	bne.n	800a25a <USBD_GetString+0x64>
 800a298:	e000      	b.n	800a29c <USBD_GetString+0xa6>
    return;
 800a29a:	46c0      	nop			; (mov r8, r8)
  }
}
 800a29c:	46bd      	mov	sp, r7
 800a29e:	b007      	add	sp, #28
 800a2a0:	bd90      	pop	{r4, r7, pc}

0800a2a2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b084      	sub	sp, #16
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a2aa:	230f      	movs	r3, #15
 800a2ac:	18fb      	adds	r3, r7, r3
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	701a      	strb	r2, [r3, #0]
  uint8_t *pbuff = buf;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a2b6:	e008      	b.n	800a2ca <USBD_GetLen+0x28>
  {
    len++;
 800a2b8:	210f      	movs	r1, #15
 800a2ba:	187b      	adds	r3, r7, r1
 800a2bc:	781a      	ldrb	r2, [r3, #0]
 800a2be:	187b      	adds	r3, r7, r1
 800a2c0:	3201      	adds	r2, #1
 800a2c2:	701a      	strb	r2, [r3, #0]
    pbuff++;
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d1f2      	bne.n	800a2b8 <USBD_GetLen+0x16>
  }

  return len;
 800a2d2:	230f      	movs	r3, #15
 800a2d4:	18fb      	adds	r3, r7, r3
 800a2d6:	781b      	ldrb	r3, [r3, #0]
}
 800a2d8:	0018      	movs	r0, r3
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	b004      	add	sp, #16
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	60f8      	str	r0, [r7, #12]
 800a2e8:	60b9      	str	r1, [r7, #8]
 800a2ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a2ec:	68fa      	ldr	r2, [r7, #12]
 800a2ee:	23a5      	movs	r3, #165	; 0xa5
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	2102      	movs	r1, #2
 800a2f4:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	687a      	ldr	r2, [r7, #4]
 800a2fa:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	687a      	ldr	r2, [r7, #4]
 800a300:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	68ba      	ldr	r2, [r7, #8]
 800a306:	68f8      	ldr	r0, [r7, #12]
 800a308:	2100      	movs	r1, #0
 800a30a:	f000 fd30 	bl	800ad6e <USBD_LL_Transmit>

  return USBD_OK;
 800a30e:	2300      	movs	r3, #0
}
 800a310:	0018      	movs	r0, r3
 800a312:	46bd      	mov	sp, r7
 800a314:	b004      	add	sp, #16
 800a316:	bd80      	pop	{r7, pc}

0800a318 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	68ba      	ldr	r2, [r7, #8]
 800a328:	68f8      	ldr	r0, [r7, #12]
 800a32a:	2100      	movs	r1, #0
 800a32c:	f000 fd1f 	bl	800ad6e <USBD_LL_Transmit>

  return USBD_OK;
 800a330:	2300      	movs	r3, #0
}
 800a332:	0018      	movs	r0, r3
 800a334:	46bd      	mov	sp, r7
 800a336:	b004      	add	sp, #16
 800a338:	bd80      	pop	{r7, pc}

0800a33a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a33a:	b580      	push	{r7, lr}
 800a33c:	b084      	sub	sp, #16
 800a33e:	af00      	add	r7, sp, #0
 800a340:	60f8      	str	r0, [r7, #12]
 800a342:	60b9      	str	r1, [r7, #8]
 800a344:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a346:	68fa      	ldr	r2, [r7, #12]
 800a348:	23a5      	movs	r3, #165	; 0xa5
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	2103      	movs	r1, #3
 800a34e:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800a350:	68fa      	ldr	r2, [r7, #12]
 800a352:	23ac      	movs	r3, #172	; 0xac
 800a354:	005b      	lsls	r3, r3, #1
 800a356:	6879      	ldr	r1, [r7, #4]
 800a358:	50d1      	str	r1, [r2, r3]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a35a:	68fa      	ldr	r2, [r7, #12]
 800a35c:	23ae      	movs	r3, #174	; 0xae
 800a35e:	005b      	lsls	r3, r3, #1
 800a360:	6879      	ldr	r1, [r7, #4]
 800a362:	50d1      	str	r1, [r2, r3]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	68ba      	ldr	r2, [r7, #8]
 800a368:	68f8      	ldr	r0, [r7, #12]
 800a36a:	2100      	movs	r1, #0
 800a36c:	f000 fd2f 	bl	800adce <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a370:	2300      	movs	r3, #0
}
 800a372:	0018      	movs	r0, r3
 800a374:	46bd      	mov	sp, r7
 800a376:	b004      	add	sp, #16
 800a378:	bd80      	pop	{r7, pc}

0800a37a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a37a:	b580      	push	{r7, lr}
 800a37c:	b084      	sub	sp, #16
 800a37e:	af00      	add	r7, sp, #0
 800a380:	60f8      	str	r0, [r7, #12]
 800a382:	60b9      	str	r1, [r7, #8]
 800a384:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	68ba      	ldr	r2, [r7, #8]
 800a38a:	68f8      	ldr	r0, [r7, #12]
 800a38c:	2100      	movs	r1, #0
 800a38e:	f000 fd1e 	bl	800adce <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a392:	2300      	movs	r3, #0
}
 800a394:	0018      	movs	r0, r3
 800a396:	46bd      	mov	sp, r7
 800a398:	b004      	add	sp, #16
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	23a5      	movs	r3, #165	; 0xa5
 800a3a8:	009b      	lsls	r3, r3, #2
 800a3aa:	2104      	movs	r1, #4
 800a3ac:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	2100      	movs	r1, #0
 800a3b6:	f000 fcda 	bl	800ad6e <USBD_LL_Transmit>

  return USBD_OK;
 800a3ba:	2300      	movs	r3, #0
}
 800a3bc:	0018      	movs	r0, r3
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	b002      	add	sp, #8
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a3cc:	687a      	ldr	r2, [r7, #4]
 800a3ce:	23a5      	movs	r3, #165	; 0xa5
 800a3d0:	009b      	lsls	r3, r3, #2
 800a3d2:	2105      	movs	r1, #5
 800a3d4:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	2300      	movs	r3, #0
 800a3da:	2200      	movs	r2, #0
 800a3dc:	2100      	movs	r1, #0
 800a3de:	f000 fcf6 	bl	800adce <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a3e2:	2300      	movs	r3, #0
}
 800a3e4:	0018      	movs	r0, r3
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	b002      	add	sp, #8
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800a3f0:	4914      	ldr	r1, [pc, #80]	; (800a444 <MX_USB_Device_Init+0x58>)
 800a3f2:	4b15      	ldr	r3, [pc, #84]	; (800a448 <MX_USB_Device_Init+0x5c>)
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	0018      	movs	r0, r3
 800a3f8:	f7fe fb8e 	bl	8008b18 <USBD_Init>
 800a3fc:	1e03      	subs	r3, r0, #0
 800a3fe:	d001      	beq.n	800a404 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800a400:	f7f6 fd94 	bl	8000f2c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800a404:	4a11      	ldr	r2, [pc, #68]	; (800a44c <MX_USB_Device_Init+0x60>)
 800a406:	4b10      	ldr	r3, [pc, #64]	; (800a448 <MX_USB_Device_Init+0x5c>)
 800a408:	0011      	movs	r1, r2
 800a40a:	0018      	movs	r0, r3
 800a40c:	f7fe fbbe 	bl	8008b8c <USBD_RegisterClass>
 800a410:	1e03      	subs	r3, r0, #0
 800a412:	d001      	beq.n	800a418 <MX_USB_Device_Init+0x2c>
    Error_Handler();
 800a414:	f7f6 fd8a 	bl	8000f2c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800a418:	4a0d      	ldr	r2, [pc, #52]	; (800a450 <MX_USB_Device_Init+0x64>)
 800a41a:	4b0b      	ldr	r3, [pc, #44]	; (800a448 <MX_USB_Device_Init+0x5c>)
 800a41c:	0011      	movs	r1, r2
 800a41e:	0018      	movs	r0, r3
 800a420:	f7fe fa98 	bl	8008954 <USBD_CDC_RegisterInterface>
 800a424:	1e03      	subs	r3, r0, #0
 800a426:	d001      	beq.n	800a42c <MX_USB_Device_Init+0x40>
    Error_Handler();
 800a428:	f7f6 fd80 	bl	8000f2c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a42c:	4b06      	ldr	r3, [pc, #24]	; (800a448 <MX_USB_Device_Init+0x5c>)
 800a42e:	0018      	movs	r0, r3
 800a430:	f7fe fbea 	bl	8008c08 <USBD_Start>
 800a434:	1e03      	subs	r3, r0, #0
 800a436:	d001      	beq.n	800a43c <MX_USB_Device_Init+0x50>
    Error_Handler();
 800a438:	f7f6 fd78 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800a43c:	46c0      	nop			; (mov r8, r8)
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
 800a442:	46c0      	nop			; (mov r8, r8)
 800a444:	200000dc 	.word	0x200000dc
 800a448:	20000578 	.word	0x20000578
 800a44c:	20000048 	.word	0x20000048
 800a450:	200000c8 	.word	0x200000c8

0800a454 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a458:	4907      	ldr	r1, [pc, #28]	; (800a478 <CDC_Init_FS+0x24>)
 800a45a:	4b08      	ldr	r3, [pc, #32]	; (800a47c <CDC_Init_FS+0x28>)
 800a45c:	2200      	movs	r2, #0
 800a45e:	0018      	movs	r0, r3
 800a460:	f7fe fa92 	bl	8008988 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a464:	4a06      	ldr	r2, [pc, #24]	; (800a480 <CDC_Init_FS+0x2c>)
 800a466:	4b05      	ldr	r3, [pc, #20]	; (800a47c <CDC_Init_FS+0x28>)
 800a468:	0011      	movs	r1, r2
 800a46a:	0018      	movs	r0, r3
 800a46c:	f7fe faaf 	bl	80089ce <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a470:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a472:	0018      	movs	r0, r3
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}
 800a478:	20000a54 	.word	0x20000a54
 800a47c:	20000578 	.word	0x20000578
 800a480:	20000854 	.word	0x20000854

0800a484 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a488:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a48a:	0018      	movs	r0, r3
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b082      	sub	sp, #8
 800a494:	af00      	add	r7, sp, #0
 800a496:	6039      	str	r1, [r7, #0]
 800a498:	0011      	movs	r1, r2
 800a49a:	1dfb      	adds	r3, r7, #7
 800a49c:	1c02      	adds	r2, r0, #0
 800a49e:	701a      	strb	r2, [r3, #0]
 800a4a0:	1d3b      	adds	r3, r7, #4
 800a4a2:	1c0a      	adds	r2, r1, #0
 800a4a4:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a4a6:	1dfb      	adds	r3, r7, #7
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	2b23      	cmp	r3, #35	; 0x23
 800a4ac:	d804      	bhi.n	800a4b8 <CDC_Control_FS+0x28>
 800a4ae:	009a      	lsls	r2, r3, #2
 800a4b0:	4b04      	ldr	r3, [pc, #16]	; (800a4c4 <CDC_Control_FS+0x34>)
 800a4b2:	18d3      	adds	r3, r2, r3
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a4b8:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 800a4ba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a4bc:	0018      	movs	r0, r3
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	b002      	add	sp, #8
 800a4c2:	bd80      	pop	{r7, pc}
 800a4c4:	0800b9f8 	.word	0x0800b9f8

0800a4c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	4b06      	ldr	r3, [pc, #24]	; (800a4f0 <CDC_Receive_FS+0x28>)
 800a4d6:	0011      	movs	r1, r2
 800a4d8:	0018      	movs	r0, r3
 800a4da:	f7fe fa78 	bl	80089ce <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a4de:	4b04      	ldr	r3, [pc, #16]	; (800a4f0 <CDC_Receive_FS+0x28>)
 800a4e0:	0018      	movs	r0, r3
 800a4e2:	f7fe fadf 	bl	8008aa4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a4e6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a4e8:	0018      	movs	r0, r3
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	b002      	add	sp, #8
 800a4ee:	bd80      	pop	{r7, pc}
 800a4f0:	20000578 	.word	0x20000578

0800a4f4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a4f4:	b5b0      	push	{r4, r5, r7, lr}
 800a4f6:	b084      	sub	sp, #16
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	000a      	movs	r2, r1
 800a4fe:	1cbb      	adds	r3, r7, #2
 800a500:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800a502:	230f      	movs	r3, #15
 800a504:	18fb      	adds	r3, r7, r3
 800a506:	2200      	movs	r2, #0
 800a508:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a50a:	4a11      	ldr	r2, [pc, #68]	; (800a550 <CDC_Transmit_FS+0x5c>)
 800a50c:	23af      	movs	r3, #175	; 0xaf
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	58d3      	ldr	r3, [r2, r3]
 800a512:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a514:	68ba      	ldr	r2, [r7, #8]
 800a516:	2385      	movs	r3, #133	; 0x85
 800a518:	009b      	lsls	r3, r3, #2
 800a51a:	58d3      	ldr	r3, [r2, r3]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d001      	beq.n	800a524 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800a520:	2301      	movs	r3, #1
 800a522:	e010      	b.n	800a546 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a524:	1cbb      	adds	r3, r7, #2
 800a526:	881a      	ldrh	r2, [r3, #0]
 800a528:	6879      	ldr	r1, [r7, #4]
 800a52a:	4b09      	ldr	r3, [pc, #36]	; (800a550 <CDC_Transmit_FS+0x5c>)
 800a52c:	0018      	movs	r0, r3
 800a52e:	f7fe fa2b 	bl	8008988 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a532:	250f      	movs	r5, #15
 800a534:	197c      	adds	r4, r7, r5
 800a536:	4b06      	ldr	r3, [pc, #24]	; (800a550 <CDC_Transmit_FS+0x5c>)
 800a538:	0018      	movs	r0, r3
 800a53a:	f7fe fa65 	bl	8008a08 <USBD_CDC_TransmitPacket>
 800a53e:	0003      	movs	r3, r0
 800a540:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800a542:	197b      	adds	r3, r7, r5
 800a544:	781b      	ldrb	r3, [r3, #0]
}
 800a546:	0018      	movs	r0, r3
 800a548:	46bd      	mov	sp, r7
 800a54a:	b004      	add	sp, #16
 800a54c:	bdb0      	pop	{r4, r5, r7, pc}
 800a54e:	46c0      	nop			; (mov r8, r8)
 800a550:	20000578 	.word	0x20000578

0800a554 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b086      	sub	sp, #24
 800a558:	af00      	add	r7, sp, #0
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	60b9      	str	r1, [r7, #8]
 800a55e:	1dfb      	adds	r3, r7, #7
 800a560:	701a      	strb	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800a562:	2117      	movs	r1, #23
 800a564:	187b      	adds	r3, r7, r1
 800a566:	2200      	movs	r2, #0
 800a568:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a56a:	187b      	adds	r3, r7, r1
 800a56c:	781b      	ldrb	r3, [r3, #0]
 800a56e:	b25b      	sxtb	r3, r3
}
 800a570:	0018      	movs	r0, r3
 800a572:	46bd      	mov	sp, r7
 800a574:	b006      	add	sp, #24
 800a576:	bd80      	pop	{r7, pc}

0800a578 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b082      	sub	sp, #8
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	0002      	movs	r2, r0
 800a580:	6039      	str	r1, [r7, #0]
 800a582:	1dfb      	adds	r3, r7, #7
 800a584:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	2212      	movs	r2, #18
 800a58a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800a58c:	4b02      	ldr	r3, [pc, #8]	; (800a598 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800a58e:	0018      	movs	r0, r3
 800a590:	46bd      	mov	sp, r7
 800a592:	b002      	add	sp, #8
 800a594:	bd80      	pop	{r7, pc}
 800a596:	46c0      	nop			; (mov r8, r8)
 800a598:	200000f8 	.word	0x200000f8

0800a59c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	0002      	movs	r2, r0
 800a5a4:	6039      	str	r1, [r7, #0]
 800a5a6:	1dfb      	adds	r3, r7, #7
 800a5a8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	2204      	movs	r2, #4
 800a5ae:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a5b0:	4b02      	ldr	r3, [pc, #8]	; (800a5bc <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800a5b2:	0018      	movs	r0, r3
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	b002      	add	sp, #8
 800a5b8:	bd80      	pop	{r7, pc}
 800a5ba:	46c0      	nop			; (mov r8, r8)
 800a5bc:	2000010c 	.word	0x2000010c

0800a5c0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b082      	sub	sp, #8
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	0002      	movs	r2, r0
 800a5c8:	6039      	str	r1, [r7, #0]
 800a5ca:	1dfb      	adds	r3, r7, #7
 800a5cc:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800a5ce:	1dfb      	adds	r3, r7, #7
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d106      	bne.n	800a5e4 <USBD_CDC_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a5d6:	683a      	ldr	r2, [r7, #0]
 800a5d8:	4908      	ldr	r1, [pc, #32]	; (800a5fc <USBD_CDC_ProductStrDescriptor+0x3c>)
 800a5da:	4b09      	ldr	r3, [pc, #36]	; (800a600 <USBD_CDC_ProductStrDescriptor+0x40>)
 800a5dc:	0018      	movs	r0, r3
 800a5de:	f7ff fe0a 	bl	800a1f6 <USBD_GetString>
 800a5e2:	e005      	b.n	800a5f0 <USBD_CDC_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a5e4:	683a      	ldr	r2, [r7, #0]
 800a5e6:	4905      	ldr	r1, [pc, #20]	; (800a5fc <USBD_CDC_ProductStrDescriptor+0x3c>)
 800a5e8:	4b05      	ldr	r3, [pc, #20]	; (800a600 <USBD_CDC_ProductStrDescriptor+0x40>)
 800a5ea:	0018      	movs	r0, r3
 800a5ec:	f7ff fe03 	bl	800a1f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a5f0:	4b02      	ldr	r3, [pc, #8]	; (800a5fc <USBD_CDC_ProductStrDescriptor+0x3c>)
}
 800a5f2:	0018      	movs	r0, r3
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	b002      	add	sp, #8
 800a5f8:	bd80      	pop	{r7, pc}
 800a5fa:	46c0      	nop			; (mov r8, r8)
 800a5fc:	20001254 	.word	0x20001254
 800a600:	0800b8cc 	.word	0x0800b8cc

0800a604 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
 800a60a:	0002      	movs	r2, r0
 800a60c:	6039      	str	r1, [r7, #0]
 800a60e:	1dfb      	adds	r3, r7, #7
 800a610:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a612:	683a      	ldr	r2, [r7, #0]
 800a614:	4904      	ldr	r1, [pc, #16]	; (800a628 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800a616:	4b05      	ldr	r3, [pc, #20]	; (800a62c <USBD_CDC_ManufacturerStrDescriptor+0x28>)
 800a618:	0018      	movs	r0, r3
 800a61a:	f7ff fdec 	bl	800a1f6 <USBD_GetString>
  return USBD_StrDesc;
 800a61e:	4b02      	ldr	r3, [pc, #8]	; (800a628 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
}
 800a620:	0018      	movs	r0, r3
 800a622:	46bd      	mov	sp, r7
 800a624:	b002      	add	sp, #8
 800a626:	bd80      	pop	{r7, pc}
 800a628:	20001254 	.word	0x20001254
 800a62c:	0800b8e0 	.word	0x0800b8e0

0800a630 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
 800a636:	0002      	movs	r2, r0
 800a638:	6039      	str	r1, [r7, #0]
 800a63a:	1dfb      	adds	r3, r7, #7
 800a63c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	221a      	movs	r2, #26
 800a642:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a644:	f000 f84c 	bl	800a6e0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a648:	4b02      	ldr	r3, [pc, #8]	; (800a654 <USBD_CDC_SerialStrDescriptor+0x24>)
}
 800a64a:	0018      	movs	r0, r3
 800a64c:	46bd      	mov	sp, r7
 800a64e:	b002      	add	sp, #8
 800a650:	bd80      	pop	{r7, pc}
 800a652:	46c0      	nop			; (mov r8, r8)
 800a654:	20000110 	.word	0x20000110

0800a658 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b082      	sub	sp, #8
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	0002      	movs	r2, r0
 800a660:	6039      	str	r1, [r7, #0]
 800a662:	1dfb      	adds	r3, r7, #7
 800a664:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800a666:	1dfb      	adds	r3, r7, #7
 800a668:	781b      	ldrb	r3, [r3, #0]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d106      	bne.n	800a67c <USBD_CDC_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a66e:	683a      	ldr	r2, [r7, #0]
 800a670:	4908      	ldr	r1, [pc, #32]	; (800a694 <USBD_CDC_ConfigStrDescriptor+0x3c>)
 800a672:	4b09      	ldr	r3, [pc, #36]	; (800a698 <USBD_CDC_ConfigStrDescriptor+0x40>)
 800a674:	0018      	movs	r0, r3
 800a676:	f7ff fdbe 	bl	800a1f6 <USBD_GetString>
 800a67a:	e005      	b.n	800a688 <USBD_CDC_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a67c:	683a      	ldr	r2, [r7, #0]
 800a67e:	4905      	ldr	r1, [pc, #20]	; (800a694 <USBD_CDC_ConfigStrDescriptor+0x3c>)
 800a680:	4b05      	ldr	r3, [pc, #20]	; (800a698 <USBD_CDC_ConfigStrDescriptor+0x40>)
 800a682:	0018      	movs	r0, r3
 800a684:	f7ff fdb7 	bl	800a1f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a688:	4b02      	ldr	r3, [pc, #8]	; (800a694 <USBD_CDC_ConfigStrDescriptor+0x3c>)
}
 800a68a:	0018      	movs	r0, r3
 800a68c:	46bd      	mov	sp, r7
 800a68e:	b002      	add	sp, #8
 800a690:	bd80      	pop	{r7, pc}
 800a692:	46c0      	nop			; (mov r8, r8)
 800a694:	20001254 	.word	0x20001254
 800a698:	0800b8e4 	.word	0x0800b8e4

0800a69c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b082      	sub	sp, #8
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	0002      	movs	r2, r0
 800a6a4:	6039      	str	r1, [r7, #0]
 800a6a6:	1dfb      	adds	r3, r7, #7
 800a6a8:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800a6aa:	1dfb      	adds	r3, r7, #7
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d106      	bne.n	800a6c0 <USBD_CDC_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a6b2:	683a      	ldr	r2, [r7, #0]
 800a6b4:	4908      	ldr	r1, [pc, #32]	; (800a6d8 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
 800a6b6:	4b09      	ldr	r3, [pc, #36]	; (800a6dc <USBD_CDC_InterfaceStrDescriptor+0x40>)
 800a6b8:	0018      	movs	r0, r3
 800a6ba:	f7ff fd9c 	bl	800a1f6 <USBD_GetString>
 800a6be:	e005      	b.n	800a6cc <USBD_CDC_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a6c0:	683a      	ldr	r2, [r7, #0]
 800a6c2:	4905      	ldr	r1, [pc, #20]	; (800a6d8 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
 800a6c4:	4b05      	ldr	r3, [pc, #20]	; (800a6dc <USBD_CDC_InterfaceStrDescriptor+0x40>)
 800a6c6:	0018      	movs	r0, r3
 800a6c8:	f7ff fd95 	bl	800a1f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a6cc:	4b02      	ldr	r3, [pc, #8]	; (800a6d8 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
}
 800a6ce:	0018      	movs	r0, r3
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	b002      	add	sp, #8
 800a6d4:	bd80      	pop	{r7, pc}
 800a6d6:	46c0      	nop			; (mov r8, r8)
 800a6d8:	20001254 	.word	0x20001254
 800a6dc:	0800b8f0 	.word	0x0800b8f0

0800a6e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b084      	sub	sp, #16
 800a6e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a6e6:	4b10      	ldr	r3, [pc, #64]	; (800a728 <Get_SerialNum+0x48>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a6ec:	4b0f      	ldr	r3, [pc, #60]	; (800a72c <Get_SerialNum+0x4c>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a6f2:	4b0f      	ldr	r3, [pc, #60]	; (800a730 <Get_SerialNum+0x50>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a6f8:	68fa      	ldr	r2, [r7, #12]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	18d3      	adds	r3, r2, r3
 800a6fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d00b      	beq.n	800a71e <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a706:	490b      	ldr	r1, [pc, #44]	; (800a734 <Get_SerialNum+0x54>)
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2208      	movs	r2, #8
 800a70c:	0018      	movs	r0, r3
 800a70e:	f000 f815 	bl	800a73c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a712:	4909      	ldr	r1, [pc, #36]	; (800a738 <Get_SerialNum+0x58>)
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	2204      	movs	r2, #4
 800a718:	0018      	movs	r0, r3
 800a71a:	f000 f80f 	bl	800a73c <IntToUnicode>
  }
}
 800a71e:	46c0      	nop			; (mov r8, r8)
 800a720:	46bd      	mov	sp, r7
 800a722:	b004      	add	sp, #16
 800a724:	bd80      	pop	{r7, pc}
 800a726:	46c0      	nop			; (mov r8, r8)
 800a728:	1fff7590 	.word	0x1fff7590
 800a72c:	1fff7594 	.word	0x1fff7594
 800a730:	1fff7598 	.word	0x1fff7598
 800a734:	20000112 	.word	0x20000112
 800a738:	20000122 	.word	0x20000122

0800a73c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b086      	sub	sp, #24
 800a740:	af00      	add	r7, sp, #0
 800a742:	60f8      	str	r0, [r7, #12]
 800a744:	60b9      	str	r1, [r7, #8]
 800a746:	1dfb      	adds	r3, r7, #7
 800a748:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800a74a:	2117      	movs	r1, #23
 800a74c:	187b      	adds	r3, r7, r1
 800a74e:	2200      	movs	r2, #0
 800a750:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800a752:	187b      	adds	r3, r7, r1
 800a754:	2200      	movs	r2, #0
 800a756:	701a      	strb	r2, [r3, #0]
 800a758:	e02f      	b.n	800a7ba <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	0f1b      	lsrs	r3, r3, #28
 800a75e:	2b09      	cmp	r3, #9
 800a760:	d80d      	bhi.n	800a77e <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	0f1b      	lsrs	r3, r3, #28
 800a766:	b2da      	uxtb	r2, r3
 800a768:	2317      	movs	r3, #23
 800a76a:	18fb      	adds	r3, r7, r3
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	005b      	lsls	r3, r3, #1
 800a770:	0019      	movs	r1, r3
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	185b      	adds	r3, r3, r1
 800a776:	3230      	adds	r2, #48	; 0x30
 800a778:	b2d2      	uxtb	r2, r2
 800a77a:	701a      	strb	r2, [r3, #0]
 800a77c:	e00c      	b.n	800a798 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	0f1b      	lsrs	r3, r3, #28
 800a782:	b2da      	uxtb	r2, r3
 800a784:	2317      	movs	r3, #23
 800a786:	18fb      	adds	r3, r7, r3
 800a788:	781b      	ldrb	r3, [r3, #0]
 800a78a:	005b      	lsls	r3, r3, #1
 800a78c:	0019      	movs	r1, r3
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	185b      	adds	r3, r3, r1
 800a792:	3237      	adds	r2, #55	; 0x37
 800a794:	b2d2      	uxtb	r2, r2
 800a796:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	011b      	lsls	r3, r3, #4
 800a79c:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a79e:	2117      	movs	r1, #23
 800a7a0:	187b      	adds	r3, r7, r1
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	005b      	lsls	r3, r3, #1
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	68ba      	ldr	r2, [r7, #8]
 800a7aa:	18d3      	adds	r3, r2, r3
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a7b0:	187b      	adds	r3, r7, r1
 800a7b2:	781a      	ldrb	r2, [r3, #0]
 800a7b4:	187b      	adds	r3, r7, r1
 800a7b6:	3201      	adds	r2, #1
 800a7b8:	701a      	strb	r2, [r3, #0]
 800a7ba:	2317      	movs	r3, #23
 800a7bc:	18fa      	adds	r2, r7, r3
 800a7be:	1dfb      	adds	r3, r7, #7
 800a7c0:	7812      	ldrb	r2, [r2, #0]
 800a7c2:	781b      	ldrb	r3, [r3, #0]
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d3c8      	bcc.n	800a75a <IntToUnicode+0x1e>
  }
}
 800a7c8:	46c0      	nop			; (mov r8, r8)
 800a7ca:	46c0      	nop			; (mov r8, r8)
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	b006      	add	sp, #24
 800a7d0:	bd80      	pop	{r7, pc}
	...

0800a7d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a7d4:	b590      	push	{r4, r7, lr}
 800a7d6:	b099      	sub	sp, #100	; 0x64
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a7dc:	2414      	movs	r4, #20
 800a7de:	193b      	adds	r3, r7, r4
 800a7e0:	0018      	movs	r0, r3
 800a7e2:	234c      	movs	r3, #76	; 0x4c
 800a7e4:	001a      	movs	r2, r3
 800a7e6:	2100      	movs	r1, #0
 800a7e8:	f000 fbaa 	bl	800af40 <memset>
  if(pcdHandle->Instance==USB_DRD_FS)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a25      	ldr	r2, [pc, #148]	; (800a888 <HAL_PCD_MspInit+0xb4>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d143      	bne.n	800a87e <HAL_PCD_MspInit+0xaa>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a7f6:	193b      	adds	r3, r7, r4
 800a7f8:	2280      	movs	r2, #128	; 0x80
 800a7fa:	0452      	lsls	r2, r2, #17
 800a7fc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a7fe:	193b      	adds	r3, r7, r4
 800a800:	2200      	movs	r2, #0
 800a802:	645a      	str	r2, [r3, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a804:	193b      	adds	r3, r7, r4
 800a806:	0018      	movs	r0, r3
 800a808:	f7fa f9f6 	bl	8004bf8 <HAL_RCCEx_PeriphCLKConfig>
 800a80c:	1e03      	subs	r3, r0, #0
 800a80e:	d001      	beq.n	800a814 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800a810:	f7f6 fb8c 	bl	8000f2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a814:	4b1d      	ldr	r3, [pc, #116]	; (800a88c <HAL_PCD_MspInit+0xb8>)
 800a816:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a818:	4b1c      	ldr	r3, [pc, #112]	; (800a88c <HAL_PCD_MspInit+0xb8>)
 800a81a:	2180      	movs	r1, #128	; 0x80
 800a81c:	0189      	lsls	r1, r1, #6
 800a81e:	430a      	orrs	r2, r1
 800a820:	63da      	str	r2, [r3, #60]	; 0x3c
 800a822:	4b1a      	ldr	r3, [pc, #104]	; (800a88c <HAL_PCD_MspInit+0xb8>)
 800a824:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a826:	2380      	movs	r3, #128	; 0x80
 800a828:	019b      	lsls	r3, r3, #6
 800a82a:	4013      	ands	r3, r2
 800a82c:	613b      	str	r3, [r7, #16]
 800a82e:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a830:	4b16      	ldr	r3, [pc, #88]	; (800a88c <HAL_PCD_MspInit+0xb8>)
 800a832:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a834:	2380      	movs	r3, #128	; 0x80
 800a836:	055b      	lsls	r3, r3, #21
 800a838:	4013      	ands	r3, r2
 800a83a:	d116      	bne.n	800a86a <HAL_PCD_MspInit+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a83c:	4b13      	ldr	r3, [pc, #76]	; (800a88c <HAL_PCD_MspInit+0xb8>)
 800a83e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a840:	4b12      	ldr	r3, [pc, #72]	; (800a88c <HAL_PCD_MspInit+0xb8>)
 800a842:	2180      	movs	r1, #128	; 0x80
 800a844:	0549      	lsls	r1, r1, #21
 800a846:	430a      	orrs	r2, r1
 800a848:	63da      	str	r2, [r3, #60]	; 0x3c
 800a84a:	4b10      	ldr	r3, [pc, #64]	; (800a88c <HAL_PCD_MspInit+0xb8>)
 800a84c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a84e:	2380      	movs	r3, #128	; 0x80
 800a850:	055b      	lsls	r3, r3, #21
 800a852:	4013      	ands	r3, r2
 800a854:	60fb      	str	r3, [r7, #12]
 800a856:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800a858:	f7f9 fc6a 	bl	8004130 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a85c:	4b0b      	ldr	r3, [pc, #44]	; (800a88c <HAL_PCD_MspInit+0xb8>)
 800a85e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a860:	4b0a      	ldr	r3, [pc, #40]	; (800a88c <HAL_PCD_MspInit+0xb8>)
 800a862:	490b      	ldr	r1, [pc, #44]	; (800a890 <HAL_PCD_MspInit+0xbc>)
 800a864:	400a      	ands	r2, r1
 800a866:	63da      	str	r2, [r3, #60]	; 0x3c
 800a868:	e001      	b.n	800a86e <HAL_PCD_MspInit+0x9a>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800a86a:	f7f9 fc61 	bl	8004130 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_UCPD1_2_IRQn, 0, 0);
 800a86e:	2200      	movs	r2, #0
 800a870:	2100      	movs	r1, #0
 800a872:	2008      	movs	r0, #8
 800a874:	f7f7 f828 	bl	80018c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_UCPD1_2_IRQn);
 800a878:	2008      	movs	r0, #8
 800a87a:	f7f7 f83a 	bl	80018f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }
}
 800a87e:	46c0      	nop			; (mov r8, r8)
 800a880:	46bd      	mov	sp, r7
 800a882:	b019      	add	sp, #100	; 0x64
 800a884:	bd90      	pop	{r4, r7, pc}
 800a886:	46c0      	nop			; (mov r8, r8)
 800a888:	40005c00 	.word	0x40005c00
 800a88c:	40021000 	.word	0x40021000
 800a890:	efffffff 	.word	0xefffffff

0800a894 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b082      	sub	sp, #8
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	23c1      	movs	r3, #193	; 0xc1
 800a8a0:	009b      	lsls	r3, r3, #2
 800a8a2:	58d2      	ldr	r2, [r2, r3]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	21b1      	movs	r1, #177	; 0xb1
 800a8a8:	0089      	lsls	r1, r1, #2
 800a8aa:	468c      	mov	ip, r1
 800a8ac:	4463      	add	r3, ip
 800a8ae:	0019      	movs	r1, r3
 800a8b0:	0010      	movs	r0, r2
 800a8b2:	f7fe fa05 	bl	8008cc0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800a8b6:	46c0      	nop			; (mov r8, r8)
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	b002      	add	sp, #8
 800a8bc:	bd80      	pop	{r7, pc}

0800a8be <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8be:	b590      	push	{r4, r7, lr}
 800a8c0:	b083      	sub	sp, #12
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	6078      	str	r0, [r7, #4]
 800a8c6:	000a      	movs	r2, r1
 800a8c8:	1cfb      	adds	r3, r7, #3
 800a8ca:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	23c1      	movs	r3, #193	; 0xc1
 800a8d0:	009b      	lsls	r3, r3, #2
 800a8d2:	58d4      	ldr	r4, [r2, r3]
 800a8d4:	1cfb      	adds	r3, r7, #3
 800a8d6:	781a      	ldrb	r2, [r3, #0]
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	23c8      	movs	r3, #200	; 0xc8
 800a8dc:	0059      	lsls	r1, r3, #1
 800a8de:	0013      	movs	r3, r2
 800a8e0:	009b      	lsls	r3, r3, #2
 800a8e2:	189b      	adds	r3, r3, r2
 800a8e4:	00db      	lsls	r3, r3, #3
 800a8e6:	18c3      	adds	r3, r0, r3
 800a8e8:	185b      	adds	r3, r3, r1
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	1cfb      	adds	r3, r7, #3
 800a8ee:	781b      	ldrb	r3, [r3, #0]
 800a8f0:	0019      	movs	r1, r3
 800a8f2:	0020      	movs	r0, r4
 800a8f4:	f7fe fa4e 	bl	8008d94 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a8f8:	46c0      	nop			; (mov r8, r8)
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	b003      	add	sp, #12
 800a8fe:	bd90      	pop	{r4, r7, pc}

0800a900 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b082      	sub	sp, #8
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
 800a908:	000a      	movs	r2, r1
 800a90a:	1cfb      	adds	r3, r7, #3
 800a90c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	23c1      	movs	r3, #193	; 0xc1
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	58d0      	ldr	r0, [r2, r3]
 800a916:	1cfb      	adds	r3, r7, #3
 800a918:	781a      	ldrb	r2, [r3, #0]
 800a91a:	6879      	ldr	r1, [r7, #4]
 800a91c:	0013      	movs	r3, r2
 800a91e:	009b      	lsls	r3, r3, #2
 800a920:	189b      	adds	r3, r3, r2
 800a922:	00db      	lsls	r3, r3, #3
 800a924:	18cb      	adds	r3, r1, r3
 800a926:	3350      	adds	r3, #80	; 0x50
 800a928:	681a      	ldr	r2, [r3, #0]
 800a92a:	1cfb      	adds	r3, r7, #3
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	0019      	movs	r1, r3
 800a930:	f7fe fb18 	bl	8008f64 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a934:	46c0      	nop			; (mov r8, r8)
 800a936:	46bd      	mov	sp, r7
 800a938:	b002      	add	sp, #8
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b082      	sub	sp, #8
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	23c1      	movs	r3, #193	; 0xc1
 800a948:	009b      	lsls	r3, r3, #2
 800a94a:	58d3      	ldr	r3, [r2, r3]
 800a94c:	0018      	movs	r0, r3
 800a94e:	f7fe fc83 	bl	8009258 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a952:	46c0      	nop			; (mov r8, r8)
 800a954:	46bd      	mov	sp, r7
 800a956:	b002      	add	sp, #8
 800a958:	bd80      	pop	{r7, pc}

0800a95a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a95a:	b580      	push	{r7, lr}
 800a95c:	b084      	sub	sp, #16
 800a95e:	af00      	add	r7, sp, #0
 800a960:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a962:	230f      	movs	r3, #15
 800a964:	18fb      	adds	r3, r7, r3
 800a966:	2201      	movs	r2, #1
 800a968:	701a      	strb	r2, [r3, #0]
  if (hpcd->Init.speed != USBD_FS_SPEED)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	68db      	ldr	r3, [r3, #12]
 800a96e:	2b02      	cmp	r3, #2
 800a970:	d001      	beq.n	800a976 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800a972:	f7f6 fadb 	bl	8000f2c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a976:	687a      	ldr	r2, [r7, #4]
 800a978:	23c1      	movs	r3, #193	; 0xc1
 800a97a:	009b      	lsls	r3, r3, #2
 800a97c:	58d2      	ldr	r2, [r2, r3]
 800a97e:	230f      	movs	r3, #15
 800a980:	18fb      	adds	r3, r7, r3
 800a982:	781b      	ldrb	r3, [r3, #0]
 800a984:	0019      	movs	r1, r3
 800a986:	0010      	movs	r0, r2
 800a988:	f7fe fc23 	bl	80091d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a98c:	687a      	ldr	r2, [r7, #4]
 800a98e:	23c1      	movs	r3, #193	; 0xc1
 800a990:	009b      	lsls	r3, r3, #2
 800a992:	58d3      	ldr	r3, [r2, r3]
 800a994:	0018      	movs	r0, r3
 800a996:	f7fe fbbd 	bl	8009114 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a99a:	46c0      	nop			; (mov r8, r8)
 800a99c:	46bd      	mov	sp, r7
 800a99e:	b004      	add	sp, #16
 800a9a0:	bd80      	pop	{r7, pc}
	...

0800a9a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b082      	sub	sp, #8
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
 /* __HAL_PCD_GATE_PHYCLOCK(hpcd);*/
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a9ac:	687a      	ldr	r2, [r7, #4]
 800a9ae:	23c1      	movs	r3, #193	; 0xc1
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	58d3      	ldr	r3, [r2, r3]
 800a9b4:	0018      	movs	r0, r3
 800a9b6:	f7fe fc1d 	bl	80091f4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6a1b      	ldr	r3, [r3, #32]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d005      	beq.n	800a9ce <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a9c2:	4b05      	ldr	r3, [pc, #20]	; (800a9d8 <HAL_PCD_SuspendCallback+0x34>)
 800a9c4:	691a      	ldr	r2, [r3, #16]
 800a9c6:	4b04      	ldr	r3, [pc, #16]	; (800a9d8 <HAL_PCD_SuspendCallback+0x34>)
 800a9c8:	2106      	movs	r1, #6
 800a9ca:	430a      	orrs	r2, r1
 800a9cc:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a9ce:	46c0      	nop			; (mov r8, r8)
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	b002      	add	sp, #8
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	46c0      	nop			; (mov r8, r8)
 800a9d8:	e000ed00 	.word	0xe000ed00

0800a9dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b082      	sub	sp, #8
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */
 /* __HAL_PCD_UNGATE_PHYCLOCK(hpcd);*/

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6a1b      	ldr	r3, [r3, #32]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d007      	beq.n	800a9fc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a9ec:	4b09      	ldr	r3, [pc, #36]	; (800aa14 <HAL_PCD_ResumeCallback+0x38>)
 800a9ee:	691a      	ldr	r2, [r3, #16]
 800a9f0:	4b08      	ldr	r3, [pc, #32]	; (800aa14 <HAL_PCD_ResumeCallback+0x38>)
 800a9f2:	2106      	movs	r1, #6
 800a9f4:	438a      	bics	r2, r1
 800a9f6:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800a9f8:	f000 fa44 	bl	800ae84 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a9fc:	687a      	ldr	r2, [r7, #4]
 800a9fe:	23c1      	movs	r3, #193	; 0xc1
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	58d3      	ldr	r3, [r2, r3]
 800aa04:	0018      	movs	r0, r3
 800aa06:	f7fe fc0d 	bl	8009224 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800aa0a:	46c0      	nop			; (mov r8, r8)
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	b002      	add	sp, #8
 800aa10:	bd80      	pop	{r7, pc}
 800aa12:	46c0      	nop			; (mov r8, r8)
 800aa14:	e000ed00 	.word	0xe000ed00

0800aa18 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b082      	sub	sp, #8
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_DRD_FS.pData = pdev;
 800aa20:	4a34      	ldr	r2, [pc, #208]	; (800aaf4 <USBD_LL_Init+0xdc>)
 800aa22:	23c1      	movs	r3, #193	; 0xc1
 800aa24:	009b      	lsls	r3, r3, #2
 800aa26:	6879      	ldr	r1, [r7, #4]
 800aa28:	50d1      	str	r1, [r2, r3]
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_DRD_FS;
 800aa2a:	687a      	ldr	r2, [r7, #4]
 800aa2c:	23b2      	movs	r3, #178	; 0xb2
 800aa2e:	009b      	lsls	r3, r3, #2
 800aa30:	4930      	ldr	r1, [pc, #192]	; (800aaf4 <USBD_LL_Init+0xdc>)
 800aa32:	50d1      	str	r1, [r2, r3]

  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 800aa34:	4b2f      	ldr	r3, [pc, #188]	; (800aaf4 <USBD_LL_Init+0xdc>)
 800aa36:	4a30      	ldr	r2, [pc, #192]	; (800aaf8 <USBD_LL_Init+0xe0>)
 800aa38:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 800aa3a:	4b2e      	ldr	r3, [pc, #184]	; (800aaf4 <USBD_LL_Init+0xdc>)
 800aa3c:	2208      	movs	r2, #8
 800aa3e:	605a      	str	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.Host_channels = 8;
 800aa40:	4b2c      	ldr	r3, [pc, #176]	; (800aaf4 <USBD_LL_Init+0xdc>)
 800aa42:	2208      	movs	r2, #8
 800aa44:	609a      	str	r2, [r3, #8]
  hpcd_USB_DRD_FS.Init.speed = PCD_SPEED_FULL;
 800aa46:	4b2b      	ldr	r3, [pc, #172]	; (800aaf4 <USBD_LL_Init+0xdc>)
 800aa48:	2202      	movs	r2, #2
 800aa4a:	60da      	str	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800aa4c:	4b29      	ldr	r3, [pc, #164]	; (800aaf4 <USBD_LL_Init+0xdc>)
 800aa4e:	2202      	movs	r2, #2
 800aa50:	619a      	str	r2, [r3, #24]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 800aa52:	4b28      	ldr	r3, [pc, #160]	; (800aaf4 <USBD_LL_Init+0xdc>)
 800aa54:	2200      	movs	r2, #0
 800aa56:	61da      	str	r2, [r3, #28]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 800aa58:	4b26      	ldr	r3, [pc, #152]	; (800aaf4 <USBD_LL_Init+0xdc>)
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	621a      	str	r2, [r3, #32]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 800aa5e:	4b25      	ldr	r3, [pc, #148]	; (800aaf4 <USBD_LL_Init+0xdc>)
 800aa60:	2200      	movs	r2, #0
 800aa62:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 800aa64:	4b23      	ldr	r3, [pc, #140]	; (800aaf4 <USBD_LL_Init+0xdc>)
 800aa66:	2200      	movs	r2, #0
 800aa68:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 800aa6a:	4b22      	ldr	r3, [pc, #136]	; (800aaf4 <USBD_LL_Init+0xdc>)
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 800aa70:	4b20      	ldr	r3, [pc, #128]	; (800aaf4 <USBD_LL_Init+0xdc>)
 800aa72:	2200      	movs	r2, #0
 800aa74:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 800aa76:	4b1f      	ldr	r3, [pc, #124]	; (800aaf4 <USBD_LL_Init+0xdc>)
 800aa78:	2200      	movs	r2, #0
 800aa7a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 800aa7c:	4b1d      	ldr	r3, [pc, #116]	; (800aaf4 <USBD_LL_Init+0xdc>)
 800aa7e:	0018      	movs	r0, r3
 800aa80:	f7f7 fd64 	bl	800254c <HAL_PCD_Init>
 800aa84:	1e03      	subs	r3, r0, #0
 800aa86:	d001      	beq.n	800aa8c <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 800aa88:	f7f6 fa50 	bl	8000f2c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800aa8c:	687a      	ldr	r2, [r7, #4]
 800aa8e:	23b2      	movs	r3, #178	; 0xb2
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	58d0      	ldr	r0, [r2, r3]
 800aa94:	2318      	movs	r3, #24
 800aa96:	2200      	movs	r2, #0
 800aa98:	2100      	movs	r1, #0
 800aa9a:	f7f9 facb 	bl	8004034 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800aa9e:	687a      	ldr	r2, [r7, #4]
 800aaa0:	23b2      	movs	r3, #178	; 0xb2
 800aaa2:	009b      	lsls	r3, r3, #2
 800aaa4:	58d0      	ldr	r0, [r2, r3]
 800aaa6:	2358      	movs	r3, #88	; 0x58
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	2180      	movs	r1, #128	; 0x80
 800aaac:	f7f9 fac2 	bl	8004034 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	23b2      	movs	r3, #178	; 0xb2
 800aab4:	009b      	lsls	r3, r3, #2
 800aab6:	58d0      	ldr	r0, [r2, r3]
 800aab8:	23c0      	movs	r3, #192	; 0xc0
 800aaba:	2200      	movs	r2, #0
 800aabc:	2181      	movs	r1, #129	; 0x81
 800aabe:	f7f9 fab9 	bl	8004034 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	23b2      	movs	r3, #178	; 0xb2
 800aac6:	009b      	lsls	r3, r3, #2
 800aac8:	58d0      	ldr	r0, [r2, r3]
 800aaca:	2388      	movs	r3, #136	; 0x88
 800aacc:	005b      	lsls	r3, r3, #1
 800aace:	2200      	movs	r2, #0
 800aad0:	2101      	movs	r1, #1
 800aad2:	f7f9 faaf 	bl	8004034 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800aad6:	687a      	ldr	r2, [r7, #4]
 800aad8:	23b2      	movs	r3, #178	; 0xb2
 800aada:	009b      	lsls	r3, r3, #2
 800aadc:	58d0      	ldr	r0, [r2, r3]
 800aade:	2380      	movs	r3, #128	; 0x80
 800aae0:	005b      	lsls	r3, r3, #1
 800aae2:	2200      	movs	r2, #0
 800aae4:	2182      	movs	r1, #130	; 0x82
 800aae6:	f7f9 faa5 	bl	8004034 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */

  return USBD_OK;
 800aaea:	2300      	movs	r3, #0
}
 800aaec:	0018      	movs	r0, r3
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	b002      	add	sp, #8
 800aaf2:	bd80      	pop	{r7, pc}
 800aaf4:	20001454 	.word	0x20001454
 800aaf8:	40005c00 	.word	0x40005c00

0800aafc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aafc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aafe:	b085      	sub	sp, #20
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab04:	210f      	movs	r1, #15
 800ab06:	187b      	adds	r3, r7, r1
 800ab08:	2200      	movs	r2, #0
 800ab0a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab0c:	260e      	movs	r6, #14
 800ab0e:	19bb      	adds	r3, r7, r6
 800ab10:	2200      	movs	r2, #0
 800ab12:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	23b2      	movs	r3, #178	; 0xb2
 800ab18:	009b      	lsls	r3, r3, #2
 800ab1a:	58d3      	ldr	r3, [r2, r3]
 800ab1c:	000d      	movs	r5, r1
 800ab1e:	187c      	adds	r4, r7, r1
 800ab20:	0018      	movs	r0, r3
 800ab22:	f7f7 fe2d 	bl	8002780 <HAL_PCD_Start>
 800ab26:	0003      	movs	r3, r0
 800ab28:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab2a:	19bc      	adds	r4, r7, r6
 800ab2c:	197b      	adds	r3, r7, r5
 800ab2e:	781b      	ldrb	r3, [r3, #0]
 800ab30:	0018      	movs	r0, r3
 800ab32:	f000 f9ae 	bl	800ae92 <USBD_Get_USB_Status>
 800ab36:	0003      	movs	r3, r0
 800ab38:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ab3a:	19bb      	adds	r3, r7, r6
 800ab3c:	781b      	ldrb	r3, [r3, #0]
}
 800ab3e:	0018      	movs	r0, r3
 800ab40:	46bd      	mov	sp, r7
 800ab42:	b005      	add	sp, #20
 800ab44:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ab46 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ab46:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab48:	b085      	sub	sp, #20
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
 800ab4e:	000c      	movs	r4, r1
 800ab50:	0010      	movs	r0, r2
 800ab52:	0019      	movs	r1, r3
 800ab54:	1cfb      	adds	r3, r7, #3
 800ab56:	1c22      	adds	r2, r4, #0
 800ab58:	701a      	strb	r2, [r3, #0]
 800ab5a:	1cbb      	adds	r3, r7, #2
 800ab5c:	1c02      	adds	r2, r0, #0
 800ab5e:	701a      	strb	r2, [r3, #0]
 800ab60:	003b      	movs	r3, r7
 800ab62:	1c0a      	adds	r2, r1, #0
 800ab64:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab66:	260f      	movs	r6, #15
 800ab68:	19bb      	adds	r3, r7, r6
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab6e:	250e      	movs	r5, #14
 800ab70:	197b      	adds	r3, r7, r5
 800ab72:	2200      	movs	r2, #0
 800ab74:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ab76:	687a      	ldr	r2, [r7, #4]
 800ab78:	23b2      	movs	r3, #178	; 0xb2
 800ab7a:	009b      	lsls	r3, r3, #2
 800ab7c:	58d0      	ldr	r0, [r2, r3]
 800ab7e:	19bc      	adds	r4, r7, r6
 800ab80:	1cbb      	adds	r3, r7, #2
 800ab82:	781d      	ldrb	r5, [r3, #0]
 800ab84:	003b      	movs	r3, r7
 800ab86:	881a      	ldrh	r2, [r3, #0]
 800ab88:	1cfb      	adds	r3, r7, #3
 800ab8a:	7819      	ldrb	r1, [r3, #0]
 800ab8c:	002b      	movs	r3, r5
 800ab8e:	f7f7 ff5e 	bl	8002a4e <HAL_PCD_EP_Open>
 800ab92:	0003      	movs	r3, r0
 800ab94:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab96:	250e      	movs	r5, #14
 800ab98:	197c      	adds	r4, r7, r5
 800ab9a:	19bb      	adds	r3, r7, r6
 800ab9c:	781b      	ldrb	r3, [r3, #0]
 800ab9e:	0018      	movs	r0, r3
 800aba0:	f000 f977 	bl	800ae92 <USBD_Get_USB_Status>
 800aba4:	0003      	movs	r3, r0
 800aba6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800aba8:	197b      	adds	r3, r7, r5
 800abaa:	781b      	ldrb	r3, [r3, #0]
}
 800abac:	0018      	movs	r0, r3
 800abae:	46bd      	mov	sp, r7
 800abb0:	b005      	add	sp, #20
 800abb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800abb4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abb6:	b085      	sub	sp, #20
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	000a      	movs	r2, r1
 800abbe:	1cfb      	adds	r3, r7, #3
 800abc0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abc2:	210f      	movs	r1, #15
 800abc4:	187b      	adds	r3, r7, r1
 800abc6:	2200      	movs	r2, #0
 800abc8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abca:	260e      	movs	r6, #14
 800abcc:	19bb      	adds	r3, r7, r6
 800abce:	2200      	movs	r2, #0
 800abd0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800abd2:	687a      	ldr	r2, [r7, #4]
 800abd4:	23b2      	movs	r3, #178	; 0xb2
 800abd6:	009b      	lsls	r3, r3, #2
 800abd8:	58d2      	ldr	r2, [r2, r3]
 800abda:	000d      	movs	r5, r1
 800abdc:	187c      	adds	r4, r7, r1
 800abde:	1cfb      	adds	r3, r7, #3
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	0019      	movs	r1, r3
 800abe4:	0010      	movs	r0, r2
 800abe6:	f7f7 ffac 	bl	8002b42 <HAL_PCD_EP_Close>
 800abea:	0003      	movs	r3, r0
 800abec:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abee:	19bc      	adds	r4, r7, r6
 800abf0:	197b      	adds	r3, r7, r5
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	0018      	movs	r0, r3
 800abf6:	f000 f94c 	bl	800ae92 <USBD_Get_USB_Status>
 800abfa:	0003      	movs	r3, r0
 800abfc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800abfe:	19bb      	adds	r3, r7, r6
 800ac00:	781b      	ldrb	r3, [r3, #0]
}
 800ac02:	0018      	movs	r0, r3
 800ac04:	46bd      	mov	sp, r7
 800ac06:	b005      	add	sp, #20
 800ac08:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ac0a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac0c:	b085      	sub	sp, #20
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	6078      	str	r0, [r7, #4]
 800ac12:	000a      	movs	r2, r1
 800ac14:	1cfb      	adds	r3, r7, #3
 800ac16:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac18:	210f      	movs	r1, #15
 800ac1a:	187b      	adds	r3, r7, r1
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac20:	260e      	movs	r6, #14
 800ac22:	19bb      	adds	r3, r7, r6
 800ac24:	2200      	movs	r2, #0
 800ac26:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	23b2      	movs	r3, #178	; 0xb2
 800ac2c:	009b      	lsls	r3, r3, #2
 800ac2e:	58d2      	ldr	r2, [r2, r3]
 800ac30:	000d      	movs	r5, r1
 800ac32:	187c      	adds	r4, r7, r1
 800ac34:	1cfb      	adds	r3, r7, #3
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	0019      	movs	r1, r3
 800ac3a:	0010      	movs	r0, r2
 800ac3c:	f7f8 f87c 	bl	8002d38 <HAL_PCD_EP_SetStall>
 800ac40:	0003      	movs	r3, r0
 800ac42:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac44:	19bc      	adds	r4, r7, r6
 800ac46:	197b      	adds	r3, r7, r5
 800ac48:	781b      	ldrb	r3, [r3, #0]
 800ac4a:	0018      	movs	r0, r3
 800ac4c:	f000 f921 	bl	800ae92 <USBD_Get_USB_Status>
 800ac50:	0003      	movs	r3, r0
 800ac52:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ac54:	19bb      	adds	r3, r7, r6
 800ac56:	781b      	ldrb	r3, [r3, #0]
}
 800ac58:	0018      	movs	r0, r3
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	b005      	add	sp, #20
 800ac5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ac60 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac62:	b085      	sub	sp, #20
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	000a      	movs	r2, r1
 800ac6a:	1cfb      	adds	r3, r7, #3
 800ac6c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac6e:	210f      	movs	r1, #15
 800ac70:	187b      	adds	r3, r7, r1
 800ac72:	2200      	movs	r2, #0
 800ac74:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac76:	260e      	movs	r6, #14
 800ac78:	19bb      	adds	r3, r7, r6
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ac7e:	687a      	ldr	r2, [r7, #4]
 800ac80:	23b2      	movs	r3, #178	; 0xb2
 800ac82:	009b      	lsls	r3, r3, #2
 800ac84:	58d2      	ldr	r2, [r2, r3]
 800ac86:	000d      	movs	r5, r1
 800ac88:	187c      	adds	r4, r7, r1
 800ac8a:	1cfb      	adds	r3, r7, #3
 800ac8c:	781b      	ldrb	r3, [r3, #0]
 800ac8e:	0019      	movs	r1, r3
 800ac90:	0010      	movs	r0, r2
 800ac92:	f7f8 f8af 	bl	8002df4 <HAL_PCD_EP_ClrStall>
 800ac96:	0003      	movs	r3, r0
 800ac98:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac9a:	19bc      	adds	r4, r7, r6
 800ac9c:	197b      	adds	r3, r7, r5
 800ac9e:	781b      	ldrb	r3, [r3, #0]
 800aca0:	0018      	movs	r0, r3
 800aca2:	f000 f8f6 	bl	800ae92 <USBD_Get_USB_Status>
 800aca6:	0003      	movs	r3, r0
 800aca8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800acaa:	19bb      	adds	r3, r7, r6
 800acac:	781b      	ldrb	r3, [r3, #0]
}
 800acae:	0018      	movs	r0, r3
 800acb0:	46bd      	mov	sp, r7
 800acb2:	b005      	add	sp, #20
 800acb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800acb6 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acb6:	b580      	push	{r7, lr}
 800acb8:	b084      	sub	sp, #16
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
 800acbe:	000a      	movs	r2, r1
 800acc0:	1cfb      	adds	r3, r7, #3
 800acc2:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800acc4:	687a      	ldr	r2, [r7, #4]
 800acc6:	23b2      	movs	r3, #178	; 0xb2
 800acc8:	009b      	lsls	r3, r3, #2
 800acca:	58d3      	ldr	r3, [r2, r3]
 800accc:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800acce:	1cfb      	adds	r3, r7, #3
 800acd0:	781b      	ldrb	r3, [r3, #0]
 800acd2:	b25b      	sxtb	r3, r3
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	da0d      	bge.n	800acf4 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800acd8:	1cfb      	adds	r3, r7, #3
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	227f      	movs	r2, #127	; 0x7f
 800acde:	401a      	ands	r2, r3
 800ace0:	68f9      	ldr	r1, [r7, #12]
 800ace2:	203e      	movs	r0, #62	; 0x3e
 800ace4:	0013      	movs	r3, r2
 800ace6:	009b      	lsls	r3, r3, #2
 800ace8:	189b      	adds	r3, r3, r2
 800acea:	00db      	lsls	r3, r3, #3
 800acec:	18cb      	adds	r3, r1, r3
 800acee:	181b      	adds	r3, r3, r0
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	e00d      	b.n	800ad10 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800acf4:	1cfb      	adds	r3, r7, #3
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	227f      	movs	r2, #127	; 0x7f
 800acfa:	401a      	ands	r2, r3
 800acfc:	68f8      	ldr	r0, [r7, #12]
 800acfe:	23bf      	movs	r3, #191	; 0xbf
 800ad00:	0059      	lsls	r1, r3, #1
 800ad02:	0013      	movs	r3, r2
 800ad04:	009b      	lsls	r3, r3, #2
 800ad06:	189b      	adds	r3, r3, r2
 800ad08:	00db      	lsls	r3, r3, #3
 800ad0a:	18c3      	adds	r3, r0, r3
 800ad0c:	185b      	adds	r3, r3, r1
 800ad0e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ad10:	0018      	movs	r0, r3
 800ad12:	46bd      	mov	sp, r7
 800ad14:	b004      	add	sp, #16
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ad18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad1a:	b085      	sub	sp, #20
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	000a      	movs	r2, r1
 800ad22:	1cfb      	adds	r3, r7, #3
 800ad24:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad26:	210f      	movs	r1, #15
 800ad28:	187b      	adds	r3, r7, r1
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad2e:	260e      	movs	r6, #14
 800ad30:	19bb      	adds	r3, r7, r6
 800ad32:	2200      	movs	r2, #0
 800ad34:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	23b2      	movs	r3, #178	; 0xb2
 800ad3a:	009b      	lsls	r3, r3, #2
 800ad3c:	58d2      	ldr	r2, [r2, r3]
 800ad3e:	000d      	movs	r5, r1
 800ad40:	187c      	adds	r4, r7, r1
 800ad42:	1cfb      	adds	r3, r7, #3
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	0019      	movs	r1, r3
 800ad48:	0010      	movs	r0, r2
 800ad4a:	f7f7 fe55 	bl	80029f8 <HAL_PCD_SetAddress>
 800ad4e:	0003      	movs	r3, r0
 800ad50:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad52:	19bc      	adds	r4, r7, r6
 800ad54:	197b      	adds	r3, r7, r5
 800ad56:	781b      	ldrb	r3, [r3, #0]
 800ad58:	0018      	movs	r0, r3
 800ad5a:	f000 f89a 	bl	800ae92 <USBD_Get_USB_Status>
 800ad5e:	0003      	movs	r3, r0
 800ad60:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ad62:	19bb      	adds	r3, r7, r6
 800ad64:	781b      	ldrb	r3, [r3, #0]
}
 800ad66:	0018      	movs	r0, r3
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	b005      	add	sp, #20
 800ad6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ad6e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ad6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad70:	b087      	sub	sp, #28
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	60f8      	str	r0, [r7, #12]
 800ad76:	607a      	str	r2, [r7, #4]
 800ad78:	603b      	str	r3, [r7, #0]
 800ad7a:	230b      	movs	r3, #11
 800ad7c:	18fb      	adds	r3, r7, r3
 800ad7e:	1c0a      	adds	r2, r1, #0
 800ad80:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad82:	2617      	movs	r6, #23
 800ad84:	19bb      	adds	r3, r7, r6
 800ad86:	2200      	movs	r2, #0
 800ad88:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad8a:	2516      	movs	r5, #22
 800ad8c:	197b      	adds	r3, r7, r5
 800ad8e:	2200      	movs	r2, #0
 800ad90:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ad92:	68fa      	ldr	r2, [r7, #12]
 800ad94:	23b2      	movs	r3, #178	; 0xb2
 800ad96:	009b      	lsls	r3, r3, #2
 800ad98:	58d0      	ldr	r0, [r2, r3]
 800ad9a:	19bc      	adds	r4, r7, r6
 800ad9c:	683d      	ldr	r5, [r7, #0]
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	230b      	movs	r3, #11
 800ada2:	18fb      	adds	r3, r7, r3
 800ada4:	7819      	ldrb	r1, [r3, #0]
 800ada6:	002b      	movs	r3, r5
 800ada8:	f7f7 ff7c 	bl	8002ca4 <HAL_PCD_EP_Transmit>
 800adac:	0003      	movs	r3, r0
 800adae:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adb0:	2516      	movs	r5, #22
 800adb2:	197c      	adds	r4, r7, r5
 800adb4:	19bb      	adds	r3, r7, r6
 800adb6:	781b      	ldrb	r3, [r3, #0]
 800adb8:	0018      	movs	r0, r3
 800adba:	f000 f86a 	bl	800ae92 <USBD_Get_USB_Status>
 800adbe:	0003      	movs	r3, r0
 800adc0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800adc2:	197b      	adds	r3, r7, r5
 800adc4:	781b      	ldrb	r3, [r3, #0]
}
 800adc6:	0018      	movs	r0, r3
 800adc8:	46bd      	mov	sp, r7
 800adca:	b007      	add	sp, #28
 800adcc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800adce <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800adce:	b5f0      	push	{r4, r5, r6, r7, lr}
 800add0:	b087      	sub	sp, #28
 800add2:	af00      	add	r7, sp, #0
 800add4:	60f8      	str	r0, [r7, #12]
 800add6:	607a      	str	r2, [r7, #4]
 800add8:	603b      	str	r3, [r7, #0]
 800adda:	230b      	movs	r3, #11
 800addc:	18fb      	adds	r3, r7, r3
 800adde:	1c0a      	adds	r2, r1, #0
 800ade0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ade2:	2617      	movs	r6, #23
 800ade4:	19bb      	adds	r3, r7, r6
 800ade6:	2200      	movs	r2, #0
 800ade8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adea:	2516      	movs	r5, #22
 800adec:	197b      	adds	r3, r7, r5
 800adee:	2200      	movs	r2, #0
 800adf0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800adf2:	68fa      	ldr	r2, [r7, #12]
 800adf4:	23b2      	movs	r3, #178	; 0xb2
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	58d0      	ldr	r0, [r2, r3]
 800adfa:	19bc      	adds	r4, r7, r6
 800adfc:	683d      	ldr	r5, [r7, #0]
 800adfe:	687a      	ldr	r2, [r7, #4]
 800ae00:	230b      	movs	r3, #11
 800ae02:	18fb      	adds	r3, r7, r3
 800ae04:	7819      	ldrb	r1, [r3, #0]
 800ae06:	002b      	movs	r3, r5
 800ae08:	f7f7 feee 	bl	8002be8 <HAL_PCD_EP_Receive>
 800ae0c:	0003      	movs	r3, r0
 800ae0e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae10:	2516      	movs	r5, #22
 800ae12:	197c      	adds	r4, r7, r5
 800ae14:	19bb      	adds	r3, r7, r6
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	0018      	movs	r0, r3
 800ae1a:	f000 f83a 	bl	800ae92 <USBD_Get_USB_Status>
 800ae1e:	0003      	movs	r3, r0
 800ae20:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ae22:	197b      	adds	r3, r7, r5
 800ae24:	781b      	ldrb	r3, [r3, #0]
}
 800ae26:	0018      	movs	r0, r3
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	b007      	add	sp, #28
 800ae2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ae2e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae2e:	b580      	push	{r7, lr}
 800ae30:	b082      	sub	sp, #8
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	6078      	str	r0, [r7, #4]
 800ae36:	000a      	movs	r2, r1
 800ae38:	1cfb      	adds	r3, r7, #3
 800ae3a:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	23b2      	movs	r3, #178	; 0xb2
 800ae40:	009b      	lsls	r3, r3, #2
 800ae42:	58d2      	ldr	r2, [r2, r3]
 800ae44:	1cfb      	adds	r3, r7, #3
 800ae46:	781b      	ldrb	r3, [r3, #0]
 800ae48:	0019      	movs	r1, r3
 800ae4a:	0010      	movs	r0, r2
 800ae4c:	f7f7 ff11 	bl	8002c72 <HAL_PCD_EP_GetRxCount>
 800ae50:	0003      	movs	r3, r0
}
 800ae52:	0018      	movs	r0, r3
 800ae54:	46bd      	mov	sp, r7
 800ae56:	b002      	add	sp, #8
 800ae58:	bd80      	pop	{r7, pc}
	...

0800ae5c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b082      	sub	sp, #8
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ae64:	4b02      	ldr	r3, [pc, #8]	; (800ae70 <USBD_static_malloc+0x14>)
}
 800ae66:	0018      	movs	r0, r3
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	b002      	add	sp, #8
 800ae6c:	bd80      	pop	{r7, pc}
 800ae6e:	46c0      	nop			; (mov r8, r8)
 800ae70:	2000175c 	.word	0x2000175c

0800ae74 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b082      	sub	sp, #8
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]

}
 800ae7c:	46c0      	nop			; (mov r8, r8)
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	b002      	add	sp, #8
 800ae82:	bd80      	pop	{r7, pc}

0800ae84 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ae88:	f7f5 ff6a 	bl	8000d60 <SystemClock_Config>
}
 800ae8c:	46c0      	nop			; (mov r8, r8)
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}

0800ae92 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ae92:	b580      	push	{r7, lr}
 800ae94:	b084      	sub	sp, #16
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	0002      	movs	r2, r0
 800ae9a:	1dfb      	adds	r3, r7, #7
 800ae9c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae9e:	230f      	movs	r3, #15
 800aea0:	18fb      	adds	r3, r7, r3
 800aea2:	2200      	movs	r2, #0
 800aea4:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800aea6:	1dfb      	adds	r3, r7, #7
 800aea8:	781b      	ldrb	r3, [r3, #0]
 800aeaa:	2b03      	cmp	r3, #3
 800aeac:	d017      	beq.n	800aede <USBD_Get_USB_Status+0x4c>
 800aeae:	dc1b      	bgt.n	800aee8 <USBD_Get_USB_Status+0x56>
 800aeb0:	2b02      	cmp	r3, #2
 800aeb2:	d00f      	beq.n	800aed4 <USBD_Get_USB_Status+0x42>
 800aeb4:	dc18      	bgt.n	800aee8 <USBD_Get_USB_Status+0x56>
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d002      	beq.n	800aec0 <USBD_Get_USB_Status+0x2e>
 800aeba:	2b01      	cmp	r3, #1
 800aebc:	d005      	beq.n	800aeca <USBD_Get_USB_Status+0x38>
 800aebe:	e013      	b.n	800aee8 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aec0:	230f      	movs	r3, #15
 800aec2:	18fb      	adds	r3, r7, r3
 800aec4:	2200      	movs	r2, #0
 800aec6:	701a      	strb	r2, [r3, #0]
    break;
 800aec8:	e013      	b.n	800aef2 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aeca:	230f      	movs	r3, #15
 800aecc:	18fb      	adds	r3, r7, r3
 800aece:	2203      	movs	r2, #3
 800aed0:	701a      	strb	r2, [r3, #0]
    break;
 800aed2:	e00e      	b.n	800aef2 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aed4:	230f      	movs	r3, #15
 800aed6:	18fb      	adds	r3, r7, r3
 800aed8:	2201      	movs	r2, #1
 800aeda:	701a      	strb	r2, [r3, #0]
    break;
 800aedc:	e009      	b.n	800aef2 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aede:	230f      	movs	r3, #15
 800aee0:	18fb      	adds	r3, r7, r3
 800aee2:	2203      	movs	r2, #3
 800aee4:	701a      	strb	r2, [r3, #0]
    break;
 800aee6:	e004      	b.n	800aef2 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800aee8:	230f      	movs	r3, #15
 800aeea:	18fb      	adds	r3, r7, r3
 800aeec:	2203      	movs	r2, #3
 800aeee:	701a      	strb	r2, [r3, #0]
    break;
 800aef0:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800aef2:	230f      	movs	r3, #15
 800aef4:	18fb      	adds	r3, r7, r3
 800aef6:	781b      	ldrb	r3, [r3, #0]
}
 800aef8:	0018      	movs	r0, r3
 800aefa:	46bd      	mov	sp, r7
 800aefc:	b004      	add	sp, #16
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <siprintf>:
 800af00:	b40e      	push	{r1, r2, r3}
 800af02:	b500      	push	{lr}
 800af04:	490b      	ldr	r1, [pc, #44]	; (800af34 <siprintf+0x34>)
 800af06:	b09c      	sub	sp, #112	; 0x70
 800af08:	ab1d      	add	r3, sp, #116	; 0x74
 800af0a:	9002      	str	r0, [sp, #8]
 800af0c:	9006      	str	r0, [sp, #24]
 800af0e:	9107      	str	r1, [sp, #28]
 800af10:	9104      	str	r1, [sp, #16]
 800af12:	4809      	ldr	r0, [pc, #36]	; (800af38 <siprintf+0x38>)
 800af14:	4909      	ldr	r1, [pc, #36]	; (800af3c <siprintf+0x3c>)
 800af16:	cb04      	ldmia	r3!, {r2}
 800af18:	9105      	str	r1, [sp, #20]
 800af1a:	6800      	ldr	r0, [r0, #0]
 800af1c:	a902      	add	r1, sp, #8
 800af1e:	9301      	str	r3, [sp, #4]
 800af20:	f000 f9a2 	bl	800b268 <_svfiprintf_r>
 800af24:	2200      	movs	r2, #0
 800af26:	9b02      	ldr	r3, [sp, #8]
 800af28:	701a      	strb	r2, [r3, #0]
 800af2a:	b01c      	add	sp, #112	; 0x70
 800af2c:	bc08      	pop	{r3}
 800af2e:	b003      	add	sp, #12
 800af30:	4718      	bx	r3
 800af32:	46c0      	nop			; (mov r8, r8)
 800af34:	7fffffff 	.word	0x7fffffff
 800af38:	20000178 	.word	0x20000178
 800af3c:	ffff0208 	.word	0xffff0208

0800af40 <memset>:
 800af40:	0003      	movs	r3, r0
 800af42:	1882      	adds	r2, r0, r2
 800af44:	4293      	cmp	r3, r2
 800af46:	d100      	bne.n	800af4a <memset+0xa>
 800af48:	4770      	bx	lr
 800af4a:	7019      	strb	r1, [r3, #0]
 800af4c:	3301      	adds	r3, #1
 800af4e:	e7f9      	b.n	800af44 <memset+0x4>

0800af50 <__errno>:
 800af50:	4b01      	ldr	r3, [pc, #4]	; (800af58 <__errno+0x8>)
 800af52:	6818      	ldr	r0, [r3, #0]
 800af54:	4770      	bx	lr
 800af56:	46c0      	nop			; (mov r8, r8)
 800af58:	20000178 	.word	0x20000178

0800af5c <__libc_init_array>:
 800af5c:	b570      	push	{r4, r5, r6, lr}
 800af5e:	2600      	movs	r6, #0
 800af60:	4c0c      	ldr	r4, [pc, #48]	; (800af94 <__libc_init_array+0x38>)
 800af62:	4d0d      	ldr	r5, [pc, #52]	; (800af98 <__libc_init_array+0x3c>)
 800af64:	1b64      	subs	r4, r4, r5
 800af66:	10a4      	asrs	r4, r4, #2
 800af68:	42a6      	cmp	r6, r4
 800af6a:	d109      	bne.n	800af80 <__libc_init_array+0x24>
 800af6c:	2600      	movs	r6, #0
 800af6e:	f000 fc6d 	bl	800b84c <_init>
 800af72:	4c0a      	ldr	r4, [pc, #40]	; (800af9c <__libc_init_array+0x40>)
 800af74:	4d0a      	ldr	r5, [pc, #40]	; (800afa0 <__libc_init_array+0x44>)
 800af76:	1b64      	subs	r4, r4, r5
 800af78:	10a4      	asrs	r4, r4, #2
 800af7a:	42a6      	cmp	r6, r4
 800af7c:	d105      	bne.n	800af8a <__libc_init_array+0x2e>
 800af7e:	bd70      	pop	{r4, r5, r6, pc}
 800af80:	00b3      	lsls	r3, r6, #2
 800af82:	58eb      	ldr	r3, [r5, r3]
 800af84:	4798      	blx	r3
 800af86:	3601      	adds	r6, #1
 800af88:	e7ee      	b.n	800af68 <__libc_init_array+0xc>
 800af8a:	00b3      	lsls	r3, r6, #2
 800af8c:	58eb      	ldr	r3, [r5, r3]
 800af8e:	4798      	blx	r3
 800af90:	3601      	adds	r6, #1
 800af92:	e7f2      	b.n	800af7a <__libc_init_array+0x1e>
 800af94:	0800bac4 	.word	0x0800bac4
 800af98:	0800bac4 	.word	0x0800bac4
 800af9c:	0800bac8 	.word	0x0800bac8
 800afa0:	0800bac4 	.word	0x0800bac4

0800afa4 <__retarget_lock_acquire_recursive>:
 800afa4:	4770      	bx	lr

0800afa6 <__retarget_lock_release_recursive>:
 800afa6:	4770      	bx	lr

0800afa8 <_free_r>:
 800afa8:	b570      	push	{r4, r5, r6, lr}
 800afaa:	0005      	movs	r5, r0
 800afac:	2900      	cmp	r1, #0
 800afae:	d010      	beq.n	800afd2 <_free_r+0x2a>
 800afb0:	1f0c      	subs	r4, r1, #4
 800afb2:	6823      	ldr	r3, [r4, #0]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	da00      	bge.n	800afba <_free_r+0x12>
 800afb8:	18e4      	adds	r4, r4, r3
 800afba:	0028      	movs	r0, r5
 800afbc:	f000 f8e2 	bl	800b184 <__malloc_lock>
 800afc0:	4a1d      	ldr	r2, [pc, #116]	; (800b038 <_free_r+0x90>)
 800afc2:	6813      	ldr	r3, [r2, #0]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d105      	bne.n	800afd4 <_free_r+0x2c>
 800afc8:	6063      	str	r3, [r4, #4]
 800afca:	6014      	str	r4, [r2, #0]
 800afcc:	0028      	movs	r0, r5
 800afce:	f000 f8e1 	bl	800b194 <__malloc_unlock>
 800afd2:	bd70      	pop	{r4, r5, r6, pc}
 800afd4:	42a3      	cmp	r3, r4
 800afd6:	d908      	bls.n	800afea <_free_r+0x42>
 800afd8:	6820      	ldr	r0, [r4, #0]
 800afda:	1821      	adds	r1, r4, r0
 800afdc:	428b      	cmp	r3, r1
 800afde:	d1f3      	bne.n	800afc8 <_free_r+0x20>
 800afe0:	6819      	ldr	r1, [r3, #0]
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	1809      	adds	r1, r1, r0
 800afe6:	6021      	str	r1, [r4, #0]
 800afe8:	e7ee      	b.n	800afc8 <_free_r+0x20>
 800afea:	001a      	movs	r2, r3
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d001      	beq.n	800aff6 <_free_r+0x4e>
 800aff2:	42a3      	cmp	r3, r4
 800aff4:	d9f9      	bls.n	800afea <_free_r+0x42>
 800aff6:	6811      	ldr	r1, [r2, #0]
 800aff8:	1850      	adds	r0, r2, r1
 800affa:	42a0      	cmp	r0, r4
 800affc:	d10b      	bne.n	800b016 <_free_r+0x6e>
 800affe:	6820      	ldr	r0, [r4, #0]
 800b000:	1809      	adds	r1, r1, r0
 800b002:	1850      	adds	r0, r2, r1
 800b004:	6011      	str	r1, [r2, #0]
 800b006:	4283      	cmp	r3, r0
 800b008:	d1e0      	bne.n	800afcc <_free_r+0x24>
 800b00a:	6818      	ldr	r0, [r3, #0]
 800b00c:	685b      	ldr	r3, [r3, #4]
 800b00e:	1841      	adds	r1, r0, r1
 800b010:	6011      	str	r1, [r2, #0]
 800b012:	6053      	str	r3, [r2, #4]
 800b014:	e7da      	b.n	800afcc <_free_r+0x24>
 800b016:	42a0      	cmp	r0, r4
 800b018:	d902      	bls.n	800b020 <_free_r+0x78>
 800b01a:	230c      	movs	r3, #12
 800b01c:	602b      	str	r3, [r5, #0]
 800b01e:	e7d5      	b.n	800afcc <_free_r+0x24>
 800b020:	6820      	ldr	r0, [r4, #0]
 800b022:	1821      	adds	r1, r4, r0
 800b024:	428b      	cmp	r3, r1
 800b026:	d103      	bne.n	800b030 <_free_r+0x88>
 800b028:	6819      	ldr	r1, [r3, #0]
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	1809      	adds	r1, r1, r0
 800b02e:	6021      	str	r1, [r4, #0]
 800b030:	6063      	str	r3, [r4, #4]
 800b032:	6054      	str	r4, [r2, #4]
 800b034:	e7ca      	b.n	800afcc <_free_r+0x24>
 800b036:	46c0      	nop			; (mov r8, r8)
 800b038:	20001abc 	.word	0x20001abc

0800b03c <sbrk_aligned>:
 800b03c:	b570      	push	{r4, r5, r6, lr}
 800b03e:	4e0f      	ldr	r6, [pc, #60]	; (800b07c <sbrk_aligned+0x40>)
 800b040:	000d      	movs	r5, r1
 800b042:	6831      	ldr	r1, [r6, #0]
 800b044:	0004      	movs	r4, r0
 800b046:	2900      	cmp	r1, #0
 800b048:	d102      	bne.n	800b050 <sbrk_aligned+0x14>
 800b04a:	f000 fba1 	bl	800b790 <_sbrk_r>
 800b04e:	6030      	str	r0, [r6, #0]
 800b050:	0029      	movs	r1, r5
 800b052:	0020      	movs	r0, r4
 800b054:	f000 fb9c 	bl	800b790 <_sbrk_r>
 800b058:	1c43      	adds	r3, r0, #1
 800b05a:	d00a      	beq.n	800b072 <sbrk_aligned+0x36>
 800b05c:	2303      	movs	r3, #3
 800b05e:	1cc5      	adds	r5, r0, #3
 800b060:	439d      	bics	r5, r3
 800b062:	42a8      	cmp	r0, r5
 800b064:	d007      	beq.n	800b076 <sbrk_aligned+0x3a>
 800b066:	1a29      	subs	r1, r5, r0
 800b068:	0020      	movs	r0, r4
 800b06a:	f000 fb91 	bl	800b790 <_sbrk_r>
 800b06e:	3001      	adds	r0, #1
 800b070:	d101      	bne.n	800b076 <sbrk_aligned+0x3a>
 800b072:	2501      	movs	r5, #1
 800b074:	426d      	negs	r5, r5
 800b076:	0028      	movs	r0, r5
 800b078:	bd70      	pop	{r4, r5, r6, pc}
 800b07a:	46c0      	nop			; (mov r8, r8)
 800b07c:	20001ac0 	.word	0x20001ac0

0800b080 <_malloc_r>:
 800b080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b082:	2203      	movs	r2, #3
 800b084:	1ccb      	adds	r3, r1, #3
 800b086:	4393      	bics	r3, r2
 800b088:	3308      	adds	r3, #8
 800b08a:	0006      	movs	r6, r0
 800b08c:	001f      	movs	r7, r3
 800b08e:	2b0c      	cmp	r3, #12
 800b090:	d238      	bcs.n	800b104 <_malloc_r+0x84>
 800b092:	270c      	movs	r7, #12
 800b094:	42b9      	cmp	r1, r7
 800b096:	d837      	bhi.n	800b108 <_malloc_r+0x88>
 800b098:	0030      	movs	r0, r6
 800b09a:	f000 f873 	bl	800b184 <__malloc_lock>
 800b09e:	4b38      	ldr	r3, [pc, #224]	; (800b180 <_malloc_r+0x100>)
 800b0a0:	9300      	str	r3, [sp, #0]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	001c      	movs	r4, r3
 800b0a6:	2c00      	cmp	r4, #0
 800b0a8:	d133      	bne.n	800b112 <_malloc_r+0x92>
 800b0aa:	0039      	movs	r1, r7
 800b0ac:	0030      	movs	r0, r6
 800b0ae:	f7ff ffc5 	bl	800b03c <sbrk_aligned>
 800b0b2:	0004      	movs	r4, r0
 800b0b4:	1c43      	adds	r3, r0, #1
 800b0b6:	d15e      	bne.n	800b176 <_malloc_r+0xf6>
 800b0b8:	9b00      	ldr	r3, [sp, #0]
 800b0ba:	681c      	ldr	r4, [r3, #0]
 800b0bc:	0025      	movs	r5, r4
 800b0be:	2d00      	cmp	r5, #0
 800b0c0:	d14e      	bne.n	800b160 <_malloc_r+0xe0>
 800b0c2:	2c00      	cmp	r4, #0
 800b0c4:	d051      	beq.n	800b16a <_malloc_r+0xea>
 800b0c6:	6823      	ldr	r3, [r4, #0]
 800b0c8:	0029      	movs	r1, r5
 800b0ca:	18e3      	adds	r3, r4, r3
 800b0cc:	0030      	movs	r0, r6
 800b0ce:	9301      	str	r3, [sp, #4]
 800b0d0:	f000 fb5e 	bl	800b790 <_sbrk_r>
 800b0d4:	9b01      	ldr	r3, [sp, #4]
 800b0d6:	4283      	cmp	r3, r0
 800b0d8:	d147      	bne.n	800b16a <_malloc_r+0xea>
 800b0da:	6823      	ldr	r3, [r4, #0]
 800b0dc:	0030      	movs	r0, r6
 800b0de:	1aff      	subs	r7, r7, r3
 800b0e0:	0039      	movs	r1, r7
 800b0e2:	f7ff ffab 	bl	800b03c <sbrk_aligned>
 800b0e6:	3001      	adds	r0, #1
 800b0e8:	d03f      	beq.n	800b16a <_malloc_r+0xea>
 800b0ea:	6823      	ldr	r3, [r4, #0]
 800b0ec:	19db      	adds	r3, r3, r7
 800b0ee:	6023      	str	r3, [r4, #0]
 800b0f0:	9b00      	ldr	r3, [sp, #0]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d040      	beq.n	800b17a <_malloc_r+0xfa>
 800b0f8:	685a      	ldr	r2, [r3, #4]
 800b0fa:	42a2      	cmp	r2, r4
 800b0fc:	d133      	bne.n	800b166 <_malloc_r+0xe6>
 800b0fe:	2200      	movs	r2, #0
 800b100:	605a      	str	r2, [r3, #4]
 800b102:	e014      	b.n	800b12e <_malloc_r+0xae>
 800b104:	2b00      	cmp	r3, #0
 800b106:	dac5      	bge.n	800b094 <_malloc_r+0x14>
 800b108:	230c      	movs	r3, #12
 800b10a:	2500      	movs	r5, #0
 800b10c:	6033      	str	r3, [r6, #0]
 800b10e:	0028      	movs	r0, r5
 800b110:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b112:	6821      	ldr	r1, [r4, #0]
 800b114:	1bc9      	subs	r1, r1, r7
 800b116:	d420      	bmi.n	800b15a <_malloc_r+0xda>
 800b118:	290b      	cmp	r1, #11
 800b11a:	d918      	bls.n	800b14e <_malloc_r+0xce>
 800b11c:	19e2      	adds	r2, r4, r7
 800b11e:	6027      	str	r7, [r4, #0]
 800b120:	42a3      	cmp	r3, r4
 800b122:	d112      	bne.n	800b14a <_malloc_r+0xca>
 800b124:	9b00      	ldr	r3, [sp, #0]
 800b126:	601a      	str	r2, [r3, #0]
 800b128:	6863      	ldr	r3, [r4, #4]
 800b12a:	6011      	str	r1, [r2, #0]
 800b12c:	6053      	str	r3, [r2, #4]
 800b12e:	0030      	movs	r0, r6
 800b130:	0025      	movs	r5, r4
 800b132:	f000 f82f 	bl	800b194 <__malloc_unlock>
 800b136:	2207      	movs	r2, #7
 800b138:	350b      	adds	r5, #11
 800b13a:	1d23      	adds	r3, r4, #4
 800b13c:	4395      	bics	r5, r2
 800b13e:	1aea      	subs	r2, r5, r3
 800b140:	429d      	cmp	r5, r3
 800b142:	d0e4      	beq.n	800b10e <_malloc_r+0x8e>
 800b144:	1b5b      	subs	r3, r3, r5
 800b146:	50a3      	str	r3, [r4, r2]
 800b148:	e7e1      	b.n	800b10e <_malloc_r+0x8e>
 800b14a:	605a      	str	r2, [r3, #4]
 800b14c:	e7ec      	b.n	800b128 <_malloc_r+0xa8>
 800b14e:	6862      	ldr	r2, [r4, #4]
 800b150:	42a3      	cmp	r3, r4
 800b152:	d1d5      	bne.n	800b100 <_malloc_r+0x80>
 800b154:	9b00      	ldr	r3, [sp, #0]
 800b156:	601a      	str	r2, [r3, #0]
 800b158:	e7e9      	b.n	800b12e <_malloc_r+0xae>
 800b15a:	0023      	movs	r3, r4
 800b15c:	6864      	ldr	r4, [r4, #4]
 800b15e:	e7a2      	b.n	800b0a6 <_malloc_r+0x26>
 800b160:	002c      	movs	r4, r5
 800b162:	686d      	ldr	r5, [r5, #4]
 800b164:	e7ab      	b.n	800b0be <_malloc_r+0x3e>
 800b166:	0013      	movs	r3, r2
 800b168:	e7c4      	b.n	800b0f4 <_malloc_r+0x74>
 800b16a:	230c      	movs	r3, #12
 800b16c:	0030      	movs	r0, r6
 800b16e:	6033      	str	r3, [r6, #0]
 800b170:	f000 f810 	bl	800b194 <__malloc_unlock>
 800b174:	e7cb      	b.n	800b10e <_malloc_r+0x8e>
 800b176:	6027      	str	r7, [r4, #0]
 800b178:	e7d9      	b.n	800b12e <_malloc_r+0xae>
 800b17a:	605b      	str	r3, [r3, #4]
 800b17c:	deff      	udf	#255	; 0xff
 800b17e:	46c0      	nop			; (mov r8, r8)
 800b180:	20001abc 	.word	0x20001abc

0800b184 <__malloc_lock>:
 800b184:	b510      	push	{r4, lr}
 800b186:	4802      	ldr	r0, [pc, #8]	; (800b190 <__malloc_lock+0xc>)
 800b188:	f7ff ff0c 	bl	800afa4 <__retarget_lock_acquire_recursive>
 800b18c:	bd10      	pop	{r4, pc}
 800b18e:	46c0      	nop			; (mov r8, r8)
 800b190:	20001ab8 	.word	0x20001ab8

0800b194 <__malloc_unlock>:
 800b194:	b510      	push	{r4, lr}
 800b196:	4802      	ldr	r0, [pc, #8]	; (800b1a0 <__malloc_unlock+0xc>)
 800b198:	f7ff ff05 	bl	800afa6 <__retarget_lock_release_recursive>
 800b19c:	bd10      	pop	{r4, pc}
 800b19e:	46c0      	nop			; (mov r8, r8)
 800b1a0:	20001ab8 	.word	0x20001ab8

0800b1a4 <__ssputs_r>:
 800b1a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1a6:	b085      	sub	sp, #20
 800b1a8:	9301      	str	r3, [sp, #4]
 800b1aa:	9203      	str	r2, [sp, #12]
 800b1ac:	688e      	ldr	r6, [r1, #8]
 800b1ae:	9a01      	ldr	r2, [sp, #4]
 800b1b0:	0007      	movs	r7, r0
 800b1b2:	000c      	movs	r4, r1
 800b1b4:	680b      	ldr	r3, [r1, #0]
 800b1b6:	4296      	cmp	r6, r2
 800b1b8:	d831      	bhi.n	800b21e <__ssputs_r+0x7a>
 800b1ba:	898a      	ldrh	r2, [r1, #12]
 800b1bc:	2190      	movs	r1, #144	; 0x90
 800b1be:	00c9      	lsls	r1, r1, #3
 800b1c0:	420a      	tst	r2, r1
 800b1c2:	d029      	beq.n	800b218 <__ssputs_r+0x74>
 800b1c4:	2003      	movs	r0, #3
 800b1c6:	6921      	ldr	r1, [r4, #16]
 800b1c8:	1a5b      	subs	r3, r3, r1
 800b1ca:	9302      	str	r3, [sp, #8]
 800b1cc:	6963      	ldr	r3, [r4, #20]
 800b1ce:	4343      	muls	r3, r0
 800b1d0:	0fdd      	lsrs	r5, r3, #31
 800b1d2:	18ed      	adds	r5, r5, r3
 800b1d4:	9b01      	ldr	r3, [sp, #4]
 800b1d6:	9802      	ldr	r0, [sp, #8]
 800b1d8:	3301      	adds	r3, #1
 800b1da:	181b      	adds	r3, r3, r0
 800b1dc:	106d      	asrs	r5, r5, #1
 800b1de:	42ab      	cmp	r3, r5
 800b1e0:	d900      	bls.n	800b1e4 <__ssputs_r+0x40>
 800b1e2:	001d      	movs	r5, r3
 800b1e4:	0552      	lsls	r2, r2, #21
 800b1e6:	d529      	bpl.n	800b23c <__ssputs_r+0x98>
 800b1e8:	0029      	movs	r1, r5
 800b1ea:	0038      	movs	r0, r7
 800b1ec:	f7ff ff48 	bl	800b080 <_malloc_r>
 800b1f0:	1e06      	subs	r6, r0, #0
 800b1f2:	d02d      	beq.n	800b250 <__ssputs_r+0xac>
 800b1f4:	9a02      	ldr	r2, [sp, #8]
 800b1f6:	6921      	ldr	r1, [r4, #16]
 800b1f8:	f000 fae7 	bl	800b7ca <memcpy>
 800b1fc:	89a2      	ldrh	r2, [r4, #12]
 800b1fe:	4b19      	ldr	r3, [pc, #100]	; (800b264 <__ssputs_r+0xc0>)
 800b200:	401a      	ands	r2, r3
 800b202:	2380      	movs	r3, #128	; 0x80
 800b204:	4313      	orrs	r3, r2
 800b206:	81a3      	strh	r3, [r4, #12]
 800b208:	9b02      	ldr	r3, [sp, #8]
 800b20a:	6126      	str	r6, [r4, #16]
 800b20c:	18f6      	adds	r6, r6, r3
 800b20e:	6026      	str	r6, [r4, #0]
 800b210:	6165      	str	r5, [r4, #20]
 800b212:	9e01      	ldr	r6, [sp, #4]
 800b214:	1aed      	subs	r5, r5, r3
 800b216:	60a5      	str	r5, [r4, #8]
 800b218:	9b01      	ldr	r3, [sp, #4]
 800b21a:	429e      	cmp	r6, r3
 800b21c:	d900      	bls.n	800b220 <__ssputs_r+0x7c>
 800b21e:	9e01      	ldr	r6, [sp, #4]
 800b220:	0032      	movs	r2, r6
 800b222:	9903      	ldr	r1, [sp, #12]
 800b224:	6820      	ldr	r0, [r4, #0]
 800b226:	f000 fa9f 	bl	800b768 <memmove>
 800b22a:	2000      	movs	r0, #0
 800b22c:	68a3      	ldr	r3, [r4, #8]
 800b22e:	1b9b      	subs	r3, r3, r6
 800b230:	60a3      	str	r3, [r4, #8]
 800b232:	6823      	ldr	r3, [r4, #0]
 800b234:	199b      	adds	r3, r3, r6
 800b236:	6023      	str	r3, [r4, #0]
 800b238:	b005      	add	sp, #20
 800b23a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b23c:	002a      	movs	r2, r5
 800b23e:	0038      	movs	r0, r7
 800b240:	f000 facc 	bl	800b7dc <_realloc_r>
 800b244:	1e06      	subs	r6, r0, #0
 800b246:	d1df      	bne.n	800b208 <__ssputs_r+0x64>
 800b248:	0038      	movs	r0, r7
 800b24a:	6921      	ldr	r1, [r4, #16]
 800b24c:	f7ff feac 	bl	800afa8 <_free_r>
 800b250:	230c      	movs	r3, #12
 800b252:	2001      	movs	r0, #1
 800b254:	603b      	str	r3, [r7, #0]
 800b256:	89a2      	ldrh	r2, [r4, #12]
 800b258:	3334      	adds	r3, #52	; 0x34
 800b25a:	4313      	orrs	r3, r2
 800b25c:	81a3      	strh	r3, [r4, #12]
 800b25e:	4240      	negs	r0, r0
 800b260:	e7ea      	b.n	800b238 <__ssputs_r+0x94>
 800b262:	46c0      	nop			; (mov r8, r8)
 800b264:	fffffb7f 	.word	0xfffffb7f

0800b268 <_svfiprintf_r>:
 800b268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b26a:	b0a1      	sub	sp, #132	; 0x84
 800b26c:	9003      	str	r0, [sp, #12]
 800b26e:	001d      	movs	r5, r3
 800b270:	898b      	ldrh	r3, [r1, #12]
 800b272:	000f      	movs	r7, r1
 800b274:	0016      	movs	r6, r2
 800b276:	061b      	lsls	r3, r3, #24
 800b278:	d511      	bpl.n	800b29e <_svfiprintf_r+0x36>
 800b27a:	690b      	ldr	r3, [r1, #16]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d10e      	bne.n	800b29e <_svfiprintf_r+0x36>
 800b280:	2140      	movs	r1, #64	; 0x40
 800b282:	f7ff fefd 	bl	800b080 <_malloc_r>
 800b286:	6038      	str	r0, [r7, #0]
 800b288:	6138      	str	r0, [r7, #16]
 800b28a:	2800      	cmp	r0, #0
 800b28c:	d105      	bne.n	800b29a <_svfiprintf_r+0x32>
 800b28e:	230c      	movs	r3, #12
 800b290:	9a03      	ldr	r2, [sp, #12]
 800b292:	3801      	subs	r0, #1
 800b294:	6013      	str	r3, [r2, #0]
 800b296:	b021      	add	sp, #132	; 0x84
 800b298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b29a:	2340      	movs	r3, #64	; 0x40
 800b29c:	617b      	str	r3, [r7, #20]
 800b29e:	2300      	movs	r3, #0
 800b2a0:	ac08      	add	r4, sp, #32
 800b2a2:	6163      	str	r3, [r4, #20]
 800b2a4:	3320      	adds	r3, #32
 800b2a6:	7663      	strb	r3, [r4, #25]
 800b2a8:	3310      	adds	r3, #16
 800b2aa:	76a3      	strb	r3, [r4, #26]
 800b2ac:	9507      	str	r5, [sp, #28]
 800b2ae:	0035      	movs	r5, r6
 800b2b0:	782b      	ldrb	r3, [r5, #0]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d001      	beq.n	800b2ba <_svfiprintf_r+0x52>
 800b2b6:	2b25      	cmp	r3, #37	; 0x25
 800b2b8:	d148      	bne.n	800b34c <_svfiprintf_r+0xe4>
 800b2ba:	1bab      	subs	r3, r5, r6
 800b2bc:	9305      	str	r3, [sp, #20]
 800b2be:	42b5      	cmp	r5, r6
 800b2c0:	d00b      	beq.n	800b2da <_svfiprintf_r+0x72>
 800b2c2:	0032      	movs	r2, r6
 800b2c4:	0039      	movs	r1, r7
 800b2c6:	9803      	ldr	r0, [sp, #12]
 800b2c8:	f7ff ff6c 	bl	800b1a4 <__ssputs_r>
 800b2cc:	3001      	adds	r0, #1
 800b2ce:	d100      	bne.n	800b2d2 <_svfiprintf_r+0x6a>
 800b2d0:	e0af      	b.n	800b432 <_svfiprintf_r+0x1ca>
 800b2d2:	6963      	ldr	r3, [r4, #20]
 800b2d4:	9a05      	ldr	r2, [sp, #20]
 800b2d6:	189b      	adds	r3, r3, r2
 800b2d8:	6163      	str	r3, [r4, #20]
 800b2da:	782b      	ldrb	r3, [r5, #0]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d100      	bne.n	800b2e2 <_svfiprintf_r+0x7a>
 800b2e0:	e0a7      	b.n	800b432 <_svfiprintf_r+0x1ca>
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	4252      	negs	r2, r2
 800b2e8:	6062      	str	r2, [r4, #4]
 800b2ea:	a904      	add	r1, sp, #16
 800b2ec:	3254      	adds	r2, #84	; 0x54
 800b2ee:	1852      	adds	r2, r2, r1
 800b2f0:	1c6e      	adds	r6, r5, #1
 800b2f2:	6023      	str	r3, [r4, #0]
 800b2f4:	60e3      	str	r3, [r4, #12]
 800b2f6:	60a3      	str	r3, [r4, #8]
 800b2f8:	7013      	strb	r3, [r2, #0]
 800b2fa:	65a3      	str	r3, [r4, #88]	; 0x58
 800b2fc:	4b55      	ldr	r3, [pc, #340]	; (800b454 <_svfiprintf_r+0x1ec>)
 800b2fe:	2205      	movs	r2, #5
 800b300:	0018      	movs	r0, r3
 800b302:	7831      	ldrb	r1, [r6, #0]
 800b304:	9305      	str	r3, [sp, #20]
 800b306:	f000 fa55 	bl	800b7b4 <memchr>
 800b30a:	1c75      	adds	r5, r6, #1
 800b30c:	2800      	cmp	r0, #0
 800b30e:	d11f      	bne.n	800b350 <_svfiprintf_r+0xe8>
 800b310:	6822      	ldr	r2, [r4, #0]
 800b312:	06d3      	lsls	r3, r2, #27
 800b314:	d504      	bpl.n	800b320 <_svfiprintf_r+0xb8>
 800b316:	2353      	movs	r3, #83	; 0x53
 800b318:	a904      	add	r1, sp, #16
 800b31a:	185b      	adds	r3, r3, r1
 800b31c:	2120      	movs	r1, #32
 800b31e:	7019      	strb	r1, [r3, #0]
 800b320:	0713      	lsls	r3, r2, #28
 800b322:	d504      	bpl.n	800b32e <_svfiprintf_r+0xc6>
 800b324:	2353      	movs	r3, #83	; 0x53
 800b326:	a904      	add	r1, sp, #16
 800b328:	185b      	adds	r3, r3, r1
 800b32a:	212b      	movs	r1, #43	; 0x2b
 800b32c:	7019      	strb	r1, [r3, #0]
 800b32e:	7833      	ldrb	r3, [r6, #0]
 800b330:	2b2a      	cmp	r3, #42	; 0x2a
 800b332:	d016      	beq.n	800b362 <_svfiprintf_r+0xfa>
 800b334:	0035      	movs	r5, r6
 800b336:	2100      	movs	r1, #0
 800b338:	200a      	movs	r0, #10
 800b33a:	68e3      	ldr	r3, [r4, #12]
 800b33c:	782a      	ldrb	r2, [r5, #0]
 800b33e:	1c6e      	adds	r6, r5, #1
 800b340:	3a30      	subs	r2, #48	; 0x30
 800b342:	2a09      	cmp	r2, #9
 800b344:	d94e      	bls.n	800b3e4 <_svfiprintf_r+0x17c>
 800b346:	2900      	cmp	r1, #0
 800b348:	d111      	bne.n	800b36e <_svfiprintf_r+0x106>
 800b34a:	e017      	b.n	800b37c <_svfiprintf_r+0x114>
 800b34c:	3501      	adds	r5, #1
 800b34e:	e7af      	b.n	800b2b0 <_svfiprintf_r+0x48>
 800b350:	9b05      	ldr	r3, [sp, #20]
 800b352:	6822      	ldr	r2, [r4, #0]
 800b354:	1ac0      	subs	r0, r0, r3
 800b356:	2301      	movs	r3, #1
 800b358:	4083      	lsls	r3, r0
 800b35a:	4313      	orrs	r3, r2
 800b35c:	002e      	movs	r6, r5
 800b35e:	6023      	str	r3, [r4, #0]
 800b360:	e7cc      	b.n	800b2fc <_svfiprintf_r+0x94>
 800b362:	9b07      	ldr	r3, [sp, #28]
 800b364:	1d19      	adds	r1, r3, #4
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	9107      	str	r1, [sp, #28]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	db01      	blt.n	800b372 <_svfiprintf_r+0x10a>
 800b36e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b370:	e004      	b.n	800b37c <_svfiprintf_r+0x114>
 800b372:	425b      	negs	r3, r3
 800b374:	60e3      	str	r3, [r4, #12]
 800b376:	2302      	movs	r3, #2
 800b378:	4313      	orrs	r3, r2
 800b37a:	6023      	str	r3, [r4, #0]
 800b37c:	782b      	ldrb	r3, [r5, #0]
 800b37e:	2b2e      	cmp	r3, #46	; 0x2e
 800b380:	d10a      	bne.n	800b398 <_svfiprintf_r+0x130>
 800b382:	786b      	ldrb	r3, [r5, #1]
 800b384:	2b2a      	cmp	r3, #42	; 0x2a
 800b386:	d135      	bne.n	800b3f4 <_svfiprintf_r+0x18c>
 800b388:	9b07      	ldr	r3, [sp, #28]
 800b38a:	3502      	adds	r5, #2
 800b38c:	1d1a      	adds	r2, r3, #4
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	9207      	str	r2, [sp, #28]
 800b392:	2b00      	cmp	r3, #0
 800b394:	db2b      	blt.n	800b3ee <_svfiprintf_r+0x186>
 800b396:	9309      	str	r3, [sp, #36]	; 0x24
 800b398:	4e2f      	ldr	r6, [pc, #188]	; (800b458 <_svfiprintf_r+0x1f0>)
 800b39a:	2203      	movs	r2, #3
 800b39c:	0030      	movs	r0, r6
 800b39e:	7829      	ldrb	r1, [r5, #0]
 800b3a0:	f000 fa08 	bl	800b7b4 <memchr>
 800b3a4:	2800      	cmp	r0, #0
 800b3a6:	d006      	beq.n	800b3b6 <_svfiprintf_r+0x14e>
 800b3a8:	2340      	movs	r3, #64	; 0x40
 800b3aa:	1b80      	subs	r0, r0, r6
 800b3ac:	4083      	lsls	r3, r0
 800b3ae:	6822      	ldr	r2, [r4, #0]
 800b3b0:	3501      	adds	r5, #1
 800b3b2:	4313      	orrs	r3, r2
 800b3b4:	6023      	str	r3, [r4, #0]
 800b3b6:	7829      	ldrb	r1, [r5, #0]
 800b3b8:	2206      	movs	r2, #6
 800b3ba:	4828      	ldr	r0, [pc, #160]	; (800b45c <_svfiprintf_r+0x1f4>)
 800b3bc:	1c6e      	adds	r6, r5, #1
 800b3be:	7621      	strb	r1, [r4, #24]
 800b3c0:	f000 f9f8 	bl	800b7b4 <memchr>
 800b3c4:	2800      	cmp	r0, #0
 800b3c6:	d03c      	beq.n	800b442 <_svfiprintf_r+0x1da>
 800b3c8:	4b25      	ldr	r3, [pc, #148]	; (800b460 <_svfiprintf_r+0x1f8>)
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d125      	bne.n	800b41a <_svfiprintf_r+0x1b2>
 800b3ce:	2207      	movs	r2, #7
 800b3d0:	9b07      	ldr	r3, [sp, #28]
 800b3d2:	3307      	adds	r3, #7
 800b3d4:	4393      	bics	r3, r2
 800b3d6:	3308      	adds	r3, #8
 800b3d8:	9307      	str	r3, [sp, #28]
 800b3da:	6963      	ldr	r3, [r4, #20]
 800b3dc:	9a04      	ldr	r2, [sp, #16]
 800b3de:	189b      	adds	r3, r3, r2
 800b3e0:	6163      	str	r3, [r4, #20]
 800b3e2:	e764      	b.n	800b2ae <_svfiprintf_r+0x46>
 800b3e4:	4343      	muls	r3, r0
 800b3e6:	0035      	movs	r5, r6
 800b3e8:	2101      	movs	r1, #1
 800b3ea:	189b      	adds	r3, r3, r2
 800b3ec:	e7a6      	b.n	800b33c <_svfiprintf_r+0xd4>
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	425b      	negs	r3, r3
 800b3f2:	e7d0      	b.n	800b396 <_svfiprintf_r+0x12e>
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	200a      	movs	r0, #10
 800b3f8:	001a      	movs	r2, r3
 800b3fa:	3501      	adds	r5, #1
 800b3fc:	6063      	str	r3, [r4, #4]
 800b3fe:	7829      	ldrb	r1, [r5, #0]
 800b400:	1c6e      	adds	r6, r5, #1
 800b402:	3930      	subs	r1, #48	; 0x30
 800b404:	2909      	cmp	r1, #9
 800b406:	d903      	bls.n	800b410 <_svfiprintf_r+0x1a8>
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d0c5      	beq.n	800b398 <_svfiprintf_r+0x130>
 800b40c:	9209      	str	r2, [sp, #36]	; 0x24
 800b40e:	e7c3      	b.n	800b398 <_svfiprintf_r+0x130>
 800b410:	4342      	muls	r2, r0
 800b412:	0035      	movs	r5, r6
 800b414:	2301      	movs	r3, #1
 800b416:	1852      	adds	r2, r2, r1
 800b418:	e7f1      	b.n	800b3fe <_svfiprintf_r+0x196>
 800b41a:	aa07      	add	r2, sp, #28
 800b41c:	9200      	str	r2, [sp, #0]
 800b41e:	0021      	movs	r1, r4
 800b420:	003a      	movs	r2, r7
 800b422:	4b10      	ldr	r3, [pc, #64]	; (800b464 <_svfiprintf_r+0x1fc>)
 800b424:	9803      	ldr	r0, [sp, #12]
 800b426:	e000      	b.n	800b42a <_svfiprintf_r+0x1c2>
 800b428:	bf00      	nop
 800b42a:	9004      	str	r0, [sp, #16]
 800b42c:	9b04      	ldr	r3, [sp, #16]
 800b42e:	3301      	adds	r3, #1
 800b430:	d1d3      	bne.n	800b3da <_svfiprintf_r+0x172>
 800b432:	89bb      	ldrh	r3, [r7, #12]
 800b434:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b436:	065b      	lsls	r3, r3, #25
 800b438:	d400      	bmi.n	800b43c <_svfiprintf_r+0x1d4>
 800b43a:	e72c      	b.n	800b296 <_svfiprintf_r+0x2e>
 800b43c:	2001      	movs	r0, #1
 800b43e:	4240      	negs	r0, r0
 800b440:	e729      	b.n	800b296 <_svfiprintf_r+0x2e>
 800b442:	aa07      	add	r2, sp, #28
 800b444:	9200      	str	r2, [sp, #0]
 800b446:	0021      	movs	r1, r4
 800b448:	003a      	movs	r2, r7
 800b44a:	4b06      	ldr	r3, [pc, #24]	; (800b464 <_svfiprintf_r+0x1fc>)
 800b44c:	9803      	ldr	r0, [sp, #12]
 800b44e:	f000 f87b 	bl	800b548 <_printf_i>
 800b452:	e7ea      	b.n	800b42a <_svfiprintf_r+0x1c2>
 800b454:	0800ba88 	.word	0x0800ba88
 800b458:	0800ba8e 	.word	0x0800ba8e
 800b45c:	0800ba92 	.word	0x0800ba92
 800b460:	00000000 	.word	0x00000000
 800b464:	0800b1a5 	.word	0x0800b1a5

0800b468 <_printf_common>:
 800b468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b46a:	0016      	movs	r6, r2
 800b46c:	9301      	str	r3, [sp, #4]
 800b46e:	688a      	ldr	r2, [r1, #8]
 800b470:	690b      	ldr	r3, [r1, #16]
 800b472:	000c      	movs	r4, r1
 800b474:	9000      	str	r0, [sp, #0]
 800b476:	4293      	cmp	r3, r2
 800b478:	da00      	bge.n	800b47c <_printf_common+0x14>
 800b47a:	0013      	movs	r3, r2
 800b47c:	0022      	movs	r2, r4
 800b47e:	6033      	str	r3, [r6, #0]
 800b480:	3243      	adds	r2, #67	; 0x43
 800b482:	7812      	ldrb	r2, [r2, #0]
 800b484:	2a00      	cmp	r2, #0
 800b486:	d001      	beq.n	800b48c <_printf_common+0x24>
 800b488:	3301      	adds	r3, #1
 800b48a:	6033      	str	r3, [r6, #0]
 800b48c:	6823      	ldr	r3, [r4, #0]
 800b48e:	069b      	lsls	r3, r3, #26
 800b490:	d502      	bpl.n	800b498 <_printf_common+0x30>
 800b492:	6833      	ldr	r3, [r6, #0]
 800b494:	3302      	adds	r3, #2
 800b496:	6033      	str	r3, [r6, #0]
 800b498:	6822      	ldr	r2, [r4, #0]
 800b49a:	2306      	movs	r3, #6
 800b49c:	0015      	movs	r5, r2
 800b49e:	401d      	ands	r5, r3
 800b4a0:	421a      	tst	r2, r3
 800b4a2:	d027      	beq.n	800b4f4 <_printf_common+0x8c>
 800b4a4:	0023      	movs	r3, r4
 800b4a6:	3343      	adds	r3, #67	; 0x43
 800b4a8:	781b      	ldrb	r3, [r3, #0]
 800b4aa:	1e5a      	subs	r2, r3, #1
 800b4ac:	4193      	sbcs	r3, r2
 800b4ae:	6822      	ldr	r2, [r4, #0]
 800b4b0:	0692      	lsls	r2, r2, #26
 800b4b2:	d430      	bmi.n	800b516 <_printf_common+0xae>
 800b4b4:	0022      	movs	r2, r4
 800b4b6:	9901      	ldr	r1, [sp, #4]
 800b4b8:	9800      	ldr	r0, [sp, #0]
 800b4ba:	9d08      	ldr	r5, [sp, #32]
 800b4bc:	3243      	adds	r2, #67	; 0x43
 800b4be:	47a8      	blx	r5
 800b4c0:	3001      	adds	r0, #1
 800b4c2:	d025      	beq.n	800b510 <_printf_common+0xa8>
 800b4c4:	2206      	movs	r2, #6
 800b4c6:	6823      	ldr	r3, [r4, #0]
 800b4c8:	2500      	movs	r5, #0
 800b4ca:	4013      	ands	r3, r2
 800b4cc:	2b04      	cmp	r3, #4
 800b4ce:	d105      	bne.n	800b4dc <_printf_common+0x74>
 800b4d0:	6833      	ldr	r3, [r6, #0]
 800b4d2:	68e5      	ldr	r5, [r4, #12]
 800b4d4:	1aed      	subs	r5, r5, r3
 800b4d6:	43eb      	mvns	r3, r5
 800b4d8:	17db      	asrs	r3, r3, #31
 800b4da:	401d      	ands	r5, r3
 800b4dc:	68a3      	ldr	r3, [r4, #8]
 800b4de:	6922      	ldr	r2, [r4, #16]
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	dd01      	ble.n	800b4e8 <_printf_common+0x80>
 800b4e4:	1a9b      	subs	r3, r3, r2
 800b4e6:	18ed      	adds	r5, r5, r3
 800b4e8:	2600      	movs	r6, #0
 800b4ea:	42b5      	cmp	r5, r6
 800b4ec:	d120      	bne.n	800b530 <_printf_common+0xc8>
 800b4ee:	2000      	movs	r0, #0
 800b4f0:	e010      	b.n	800b514 <_printf_common+0xac>
 800b4f2:	3501      	adds	r5, #1
 800b4f4:	68e3      	ldr	r3, [r4, #12]
 800b4f6:	6832      	ldr	r2, [r6, #0]
 800b4f8:	1a9b      	subs	r3, r3, r2
 800b4fa:	42ab      	cmp	r3, r5
 800b4fc:	ddd2      	ble.n	800b4a4 <_printf_common+0x3c>
 800b4fe:	0022      	movs	r2, r4
 800b500:	2301      	movs	r3, #1
 800b502:	9901      	ldr	r1, [sp, #4]
 800b504:	9800      	ldr	r0, [sp, #0]
 800b506:	9f08      	ldr	r7, [sp, #32]
 800b508:	3219      	adds	r2, #25
 800b50a:	47b8      	blx	r7
 800b50c:	3001      	adds	r0, #1
 800b50e:	d1f0      	bne.n	800b4f2 <_printf_common+0x8a>
 800b510:	2001      	movs	r0, #1
 800b512:	4240      	negs	r0, r0
 800b514:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b516:	2030      	movs	r0, #48	; 0x30
 800b518:	18e1      	adds	r1, r4, r3
 800b51a:	3143      	adds	r1, #67	; 0x43
 800b51c:	7008      	strb	r0, [r1, #0]
 800b51e:	0021      	movs	r1, r4
 800b520:	1c5a      	adds	r2, r3, #1
 800b522:	3145      	adds	r1, #69	; 0x45
 800b524:	7809      	ldrb	r1, [r1, #0]
 800b526:	18a2      	adds	r2, r4, r2
 800b528:	3243      	adds	r2, #67	; 0x43
 800b52a:	3302      	adds	r3, #2
 800b52c:	7011      	strb	r1, [r2, #0]
 800b52e:	e7c1      	b.n	800b4b4 <_printf_common+0x4c>
 800b530:	0022      	movs	r2, r4
 800b532:	2301      	movs	r3, #1
 800b534:	9901      	ldr	r1, [sp, #4]
 800b536:	9800      	ldr	r0, [sp, #0]
 800b538:	9f08      	ldr	r7, [sp, #32]
 800b53a:	321a      	adds	r2, #26
 800b53c:	47b8      	blx	r7
 800b53e:	3001      	adds	r0, #1
 800b540:	d0e6      	beq.n	800b510 <_printf_common+0xa8>
 800b542:	3601      	adds	r6, #1
 800b544:	e7d1      	b.n	800b4ea <_printf_common+0x82>
	...

0800b548 <_printf_i>:
 800b548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b54a:	b08b      	sub	sp, #44	; 0x2c
 800b54c:	9206      	str	r2, [sp, #24]
 800b54e:	000a      	movs	r2, r1
 800b550:	3243      	adds	r2, #67	; 0x43
 800b552:	9307      	str	r3, [sp, #28]
 800b554:	9005      	str	r0, [sp, #20]
 800b556:	9204      	str	r2, [sp, #16]
 800b558:	7e0a      	ldrb	r2, [r1, #24]
 800b55a:	000c      	movs	r4, r1
 800b55c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b55e:	2a78      	cmp	r2, #120	; 0x78
 800b560:	d809      	bhi.n	800b576 <_printf_i+0x2e>
 800b562:	2a62      	cmp	r2, #98	; 0x62
 800b564:	d80b      	bhi.n	800b57e <_printf_i+0x36>
 800b566:	2a00      	cmp	r2, #0
 800b568:	d100      	bne.n	800b56c <_printf_i+0x24>
 800b56a:	e0be      	b.n	800b6ea <_printf_i+0x1a2>
 800b56c:	497c      	ldr	r1, [pc, #496]	; (800b760 <_printf_i+0x218>)
 800b56e:	9103      	str	r1, [sp, #12]
 800b570:	2a58      	cmp	r2, #88	; 0x58
 800b572:	d100      	bne.n	800b576 <_printf_i+0x2e>
 800b574:	e093      	b.n	800b69e <_printf_i+0x156>
 800b576:	0026      	movs	r6, r4
 800b578:	3642      	adds	r6, #66	; 0x42
 800b57a:	7032      	strb	r2, [r6, #0]
 800b57c:	e022      	b.n	800b5c4 <_printf_i+0x7c>
 800b57e:	0010      	movs	r0, r2
 800b580:	3863      	subs	r0, #99	; 0x63
 800b582:	2815      	cmp	r0, #21
 800b584:	d8f7      	bhi.n	800b576 <_printf_i+0x2e>
 800b586:	f7f4 fdc5 	bl	8000114 <__gnu_thumb1_case_shi>
 800b58a:	0016      	.short	0x0016
 800b58c:	fff6001f 	.word	0xfff6001f
 800b590:	fff6fff6 	.word	0xfff6fff6
 800b594:	001ffff6 	.word	0x001ffff6
 800b598:	fff6fff6 	.word	0xfff6fff6
 800b59c:	fff6fff6 	.word	0xfff6fff6
 800b5a0:	003600a3 	.word	0x003600a3
 800b5a4:	fff60083 	.word	0xfff60083
 800b5a8:	00b4fff6 	.word	0x00b4fff6
 800b5ac:	0036fff6 	.word	0x0036fff6
 800b5b0:	fff6fff6 	.word	0xfff6fff6
 800b5b4:	0087      	.short	0x0087
 800b5b6:	0026      	movs	r6, r4
 800b5b8:	681a      	ldr	r2, [r3, #0]
 800b5ba:	3642      	adds	r6, #66	; 0x42
 800b5bc:	1d11      	adds	r1, r2, #4
 800b5be:	6019      	str	r1, [r3, #0]
 800b5c0:	6813      	ldr	r3, [r2, #0]
 800b5c2:	7033      	strb	r3, [r6, #0]
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	e0a2      	b.n	800b70e <_printf_i+0x1c6>
 800b5c8:	6818      	ldr	r0, [r3, #0]
 800b5ca:	6809      	ldr	r1, [r1, #0]
 800b5cc:	1d02      	adds	r2, r0, #4
 800b5ce:	060d      	lsls	r5, r1, #24
 800b5d0:	d50b      	bpl.n	800b5ea <_printf_i+0xa2>
 800b5d2:	6805      	ldr	r5, [r0, #0]
 800b5d4:	601a      	str	r2, [r3, #0]
 800b5d6:	2d00      	cmp	r5, #0
 800b5d8:	da03      	bge.n	800b5e2 <_printf_i+0x9a>
 800b5da:	232d      	movs	r3, #45	; 0x2d
 800b5dc:	9a04      	ldr	r2, [sp, #16]
 800b5de:	426d      	negs	r5, r5
 800b5e0:	7013      	strb	r3, [r2, #0]
 800b5e2:	4b5f      	ldr	r3, [pc, #380]	; (800b760 <_printf_i+0x218>)
 800b5e4:	270a      	movs	r7, #10
 800b5e6:	9303      	str	r3, [sp, #12]
 800b5e8:	e01b      	b.n	800b622 <_printf_i+0xda>
 800b5ea:	6805      	ldr	r5, [r0, #0]
 800b5ec:	601a      	str	r2, [r3, #0]
 800b5ee:	0649      	lsls	r1, r1, #25
 800b5f0:	d5f1      	bpl.n	800b5d6 <_printf_i+0x8e>
 800b5f2:	b22d      	sxth	r5, r5
 800b5f4:	e7ef      	b.n	800b5d6 <_printf_i+0x8e>
 800b5f6:	680d      	ldr	r5, [r1, #0]
 800b5f8:	6819      	ldr	r1, [r3, #0]
 800b5fa:	1d08      	adds	r0, r1, #4
 800b5fc:	6018      	str	r0, [r3, #0]
 800b5fe:	062e      	lsls	r6, r5, #24
 800b600:	d501      	bpl.n	800b606 <_printf_i+0xbe>
 800b602:	680d      	ldr	r5, [r1, #0]
 800b604:	e003      	b.n	800b60e <_printf_i+0xc6>
 800b606:	066d      	lsls	r5, r5, #25
 800b608:	d5fb      	bpl.n	800b602 <_printf_i+0xba>
 800b60a:	680d      	ldr	r5, [r1, #0]
 800b60c:	b2ad      	uxth	r5, r5
 800b60e:	4b54      	ldr	r3, [pc, #336]	; (800b760 <_printf_i+0x218>)
 800b610:	2708      	movs	r7, #8
 800b612:	9303      	str	r3, [sp, #12]
 800b614:	2a6f      	cmp	r2, #111	; 0x6f
 800b616:	d000      	beq.n	800b61a <_printf_i+0xd2>
 800b618:	3702      	adds	r7, #2
 800b61a:	0023      	movs	r3, r4
 800b61c:	2200      	movs	r2, #0
 800b61e:	3343      	adds	r3, #67	; 0x43
 800b620:	701a      	strb	r2, [r3, #0]
 800b622:	6863      	ldr	r3, [r4, #4]
 800b624:	60a3      	str	r3, [r4, #8]
 800b626:	2b00      	cmp	r3, #0
 800b628:	db03      	blt.n	800b632 <_printf_i+0xea>
 800b62a:	2104      	movs	r1, #4
 800b62c:	6822      	ldr	r2, [r4, #0]
 800b62e:	438a      	bics	r2, r1
 800b630:	6022      	str	r2, [r4, #0]
 800b632:	2d00      	cmp	r5, #0
 800b634:	d102      	bne.n	800b63c <_printf_i+0xf4>
 800b636:	9e04      	ldr	r6, [sp, #16]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d00c      	beq.n	800b656 <_printf_i+0x10e>
 800b63c:	9e04      	ldr	r6, [sp, #16]
 800b63e:	0028      	movs	r0, r5
 800b640:	0039      	movs	r1, r7
 800b642:	f7f4 fdf7 	bl	8000234 <__aeabi_uidivmod>
 800b646:	9b03      	ldr	r3, [sp, #12]
 800b648:	3e01      	subs	r6, #1
 800b64a:	5c5b      	ldrb	r3, [r3, r1]
 800b64c:	7033      	strb	r3, [r6, #0]
 800b64e:	002b      	movs	r3, r5
 800b650:	0005      	movs	r5, r0
 800b652:	429f      	cmp	r7, r3
 800b654:	d9f3      	bls.n	800b63e <_printf_i+0xf6>
 800b656:	2f08      	cmp	r7, #8
 800b658:	d109      	bne.n	800b66e <_printf_i+0x126>
 800b65a:	6823      	ldr	r3, [r4, #0]
 800b65c:	07db      	lsls	r3, r3, #31
 800b65e:	d506      	bpl.n	800b66e <_printf_i+0x126>
 800b660:	6862      	ldr	r2, [r4, #4]
 800b662:	6923      	ldr	r3, [r4, #16]
 800b664:	429a      	cmp	r2, r3
 800b666:	dc02      	bgt.n	800b66e <_printf_i+0x126>
 800b668:	2330      	movs	r3, #48	; 0x30
 800b66a:	3e01      	subs	r6, #1
 800b66c:	7033      	strb	r3, [r6, #0]
 800b66e:	9b04      	ldr	r3, [sp, #16]
 800b670:	1b9b      	subs	r3, r3, r6
 800b672:	6123      	str	r3, [r4, #16]
 800b674:	9b07      	ldr	r3, [sp, #28]
 800b676:	0021      	movs	r1, r4
 800b678:	9300      	str	r3, [sp, #0]
 800b67a:	9805      	ldr	r0, [sp, #20]
 800b67c:	9b06      	ldr	r3, [sp, #24]
 800b67e:	aa09      	add	r2, sp, #36	; 0x24
 800b680:	f7ff fef2 	bl	800b468 <_printf_common>
 800b684:	3001      	adds	r0, #1
 800b686:	d147      	bne.n	800b718 <_printf_i+0x1d0>
 800b688:	2001      	movs	r0, #1
 800b68a:	4240      	negs	r0, r0
 800b68c:	b00b      	add	sp, #44	; 0x2c
 800b68e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b690:	2220      	movs	r2, #32
 800b692:	6809      	ldr	r1, [r1, #0]
 800b694:	430a      	orrs	r2, r1
 800b696:	6022      	str	r2, [r4, #0]
 800b698:	2278      	movs	r2, #120	; 0x78
 800b69a:	4932      	ldr	r1, [pc, #200]	; (800b764 <_printf_i+0x21c>)
 800b69c:	9103      	str	r1, [sp, #12]
 800b69e:	0021      	movs	r1, r4
 800b6a0:	3145      	adds	r1, #69	; 0x45
 800b6a2:	700a      	strb	r2, [r1, #0]
 800b6a4:	6819      	ldr	r1, [r3, #0]
 800b6a6:	6822      	ldr	r2, [r4, #0]
 800b6a8:	c920      	ldmia	r1!, {r5}
 800b6aa:	0610      	lsls	r0, r2, #24
 800b6ac:	d402      	bmi.n	800b6b4 <_printf_i+0x16c>
 800b6ae:	0650      	lsls	r0, r2, #25
 800b6b0:	d500      	bpl.n	800b6b4 <_printf_i+0x16c>
 800b6b2:	b2ad      	uxth	r5, r5
 800b6b4:	6019      	str	r1, [r3, #0]
 800b6b6:	07d3      	lsls	r3, r2, #31
 800b6b8:	d502      	bpl.n	800b6c0 <_printf_i+0x178>
 800b6ba:	2320      	movs	r3, #32
 800b6bc:	4313      	orrs	r3, r2
 800b6be:	6023      	str	r3, [r4, #0]
 800b6c0:	2710      	movs	r7, #16
 800b6c2:	2d00      	cmp	r5, #0
 800b6c4:	d1a9      	bne.n	800b61a <_printf_i+0xd2>
 800b6c6:	2220      	movs	r2, #32
 800b6c8:	6823      	ldr	r3, [r4, #0]
 800b6ca:	4393      	bics	r3, r2
 800b6cc:	6023      	str	r3, [r4, #0]
 800b6ce:	e7a4      	b.n	800b61a <_printf_i+0xd2>
 800b6d0:	681a      	ldr	r2, [r3, #0]
 800b6d2:	680d      	ldr	r5, [r1, #0]
 800b6d4:	1d10      	adds	r0, r2, #4
 800b6d6:	6949      	ldr	r1, [r1, #20]
 800b6d8:	6018      	str	r0, [r3, #0]
 800b6da:	6813      	ldr	r3, [r2, #0]
 800b6dc:	062e      	lsls	r6, r5, #24
 800b6de:	d501      	bpl.n	800b6e4 <_printf_i+0x19c>
 800b6e0:	6019      	str	r1, [r3, #0]
 800b6e2:	e002      	b.n	800b6ea <_printf_i+0x1a2>
 800b6e4:	066d      	lsls	r5, r5, #25
 800b6e6:	d5fb      	bpl.n	800b6e0 <_printf_i+0x198>
 800b6e8:	8019      	strh	r1, [r3, #0]
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	9e04      	ldr	r6, [sp, #16]
 800b6ee:	6123      	str	r3, [r4, #16]
 800b6f0:	e7c0      	b.n	800b674 <_printf_i+0x12c>
 800b6f2:	681a      	ldr	r2, [r3, #0]
 800b6f4:	1d11      	adds	r1, r2, #4
 800b6f6:	6019      	str	r1, [r3, #0]
 800b6f8:	6816      	ldr	r6, [r2, #0]
 800b6fa:	2100      	movs	r1, #0
 800b6fc:	0030      	movs	r0, r6
 800b6fe:	6862      	ldr	r2, [r4, #4]
 800b700:	f000 f858 	bl	800b7b4 <memchr>
 800b704:	2800      	cmp	r0, #0
 800b706:	d001      	beq.n	800b70c <_printf_i+0x1c4>
 800b708:	1b80      	subs	r0, r0, r6
 800b70a:	6060      	str	r0, [r4, #4]
 800b70c:	6863      	ldr	r3, [r4, #4]
 800b70e:	6123      	str	r3, [r4, #16]
 800b710:	2300      	movs	r3, #0
 800b712:	9a04      	ldr	r2, [sp, #16]
 800b714:	7013      	strb	r3, [r2, #0]
 800b716:	e7ad      	b.n	800b674 <_printf_i+0x12c>
 800b718:	0032      	movs	r2, r6
 800b71a:	6923      	ldr	r3, [r4, #16]
 800b71c:	9906      	ldr	r1, [sp, #24]
 800b71e:	9805      	ldr	r0, [sp, #20]
 800b720:	9d07      	ldr	r5, [sp, #28]
 800b722:	47a8      	blx	r5
 800b724:	3001      	adds	r0, #1
 800b726:	d0af      	beq.n	800b688 <_printf_i+0x140>
 800b728:	6823      	ldr	r3, [r4, #0]
 800b72a:	079b      	lsls	r3, r3, #30
 800b72c:	d415      	bmi.n	800b75a <_printf_i+0x212>
 800b72e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b730:	68e0      	ldr	r0, [r4, #12]
 800b732:	4298      	cmp	r0, r3
 800b734:	daaa      	bge.n	800b68c <_printf_i+0x144>
 800b736:	0018      	movs	r0, r3
 800b738:	e7a8      	b.n	800b68c <_printf_i+0x144>
 800b73a:	0022      	movs	r2, r4
 800b73c:	2301      	movs	r3, #1
 800b73e:	9906      	ldr	r1, [sp, #24]
 800b740:	9805      	ldr	r0, [sp, #20]
 800b742:	9e07      	ldr	r6, [sp, #28]
 800b744:	3219      	adds	r2, #25
 800b746:	47b0      	blx	r6
 800b748:	3001      	adds	r0, #1
 800b74a:	d09d      	beq.n	800b688 <_printf_i+0x140>
 800b74c:	3501      	adds	r5, #1
 800b74e:	68e3      	ldr	r3, [r4, #12]
 800b750:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b752:	1a9b      	subs	r3, r3, r2
 800b754:	42ab      	cmp	r3, r5
 800b756:	dcf0      	bgt.n	800b73a <_printf_i+0x1f2>
 800b758:	e7e9      	b.n	800b72e <_printf_i+0x1e6>
 800b75a:	2500      	movs	r5, #0
 800b75c:	e7f7      	b.n	800b74e <_printf_i+0x206>
 800b75e:	46c0      	nop			; (mov r8, r8)
 800b760:	0800ba99 	.word	0x0800ba99
 800b764:	0800baaa 	.word	0x0800baaa

0800b768 <memmove>:
 800b768:	b510      	push	{r4, lr}
 800b76a:	4288      	cmp	r0, r1
 800b76c:	d902      	bls.n	800b774 <memmove+0xc>
 800b76e:	188b      	adds	r3, r1, r2
 800b770:	4298      	cmp	r0, r3
 800b772:	d303      	bcc.n	800b77c <memmove+0x14>
 800b774:	2300      	movs	r3, #0
 800b776:	e007      	b.n	800b788 <memmove+0x20>
 800b778:	5c8b      	ldrb	r3, [r1, r2]
 800b77a:	5483      	strb	r3, [r0, r2]
 800b77c:	3a01      	subs	r2, #1
 800b77e:	d2fb      	bcs.n	800b778 <memmove+0x10>
 800b780:	bd10      	pop	{r4, pc}
 800b782:	5ccc      	ldrb	r4, [r1, r3]
 800b784:	54c4      	strb	r4, [r0, r3]
 800b786:	3301      	adds	r3, #1
 800b788:	429a      	cmp	r2, r3
 800b78a:	d1fa      	bne.n	800b782 <memmove+0x1a>
 800b78c:	e7f8      	b.n	800b780 <memmove+0x18>
	...

0800b790 <_sbrk_r>:
 800b790:	2300      	movs	r3, #0
 800b792:	b570      	push	{r4, r5, r6, lr}
 800b794:	4d06      	ldr	r5, [pc, #24]	; (800b7b0 <_sbrk_r+0x20>)
 800b796:	0004      	movs	r4, r0
 800b798:	0008      	movs	r0, r1
 800b79a:	602b      	str	r3, [r5, #0]
 800b79c:	f7f5 fca0 	bl	80010e0 <_sbrk>
 800b7a0:	1c43      	adds	r3, r0, #1
 800b7a2:	d103      	bne.n	800b7ac <_sbrk_r+0x1c>
 800b7a4:	682b      	ldr	r3, [r5, #0]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d000      	beq.n	800b7ac <_sbrk_r+0x1c>
 800b7aa:	6023      	str	r3, [r4, #0]
 800b7ac:	bd70      	pop	{r4, r5, r6, pc}
 800b7ae:	46c0      	nop			; (mov r8, r8)
 800b7b0:	20001ab4 	.word	0x20001ab4

0800b7b4 <memchr>:
 800b7b4:	b2c9      	uxtb	r1, r1
 800b7b6:	1882      	adds	r2, r0, r2
 800b7b8:	4290      	cmp	r0, r2
 800b7ba:	d101      	bne.n	800b7c0 <memchr+0xc>
 800b7bc:	2000      	movs	r0, #0
 800b7be:	4770      	bx	lr
 800b7c0:	7803      	ldrb	r3, [r0, #0]
 800b7c2:	428b      	cmp	r3, r1
 800b7c4:	d0fb      	beq.n	800b7be <memchr+0xa>
 800b7c6:	3001      	adds	r0, #1
 800b7c8:	e7f6      	b.n	800b7b8 <memchr+0x4>

0800b7ca <memcpy>:
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	b510      	push	{r4, lr}
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d100      	bne.n	800b7d4 <memcpy+0xa>
 800b7d2:	bd10      	pop	{r4, pc}
 800b7d4:	5ccc      	ldrb	r4, [r1, r3]
 800b7d6:	54c4      	strb	r4, [r0, r3]
 800b7d8:	3301      	adds	r3, #1
 800b7da:	e7f8      	b.n	800b7ce <memcpy+0x4>

0800b7dc <_realloc_r>:
 800b7dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7de:	0007      	movs	r7, r0
 800b7e0:	000e      	movs	r6, r1
 800b7e2:	0014      	movs	r4, r2
 800b7e4:	2900      	cmp	r1, #0
 800b7e6:	d105      	bne.n	800b7f4 <_realloc_r+0x18>
 800b7e8:	0011      	movs	r1, r2
 800b7ea:	f7ff fc49 	bl	800b080 <_malloc_r>
 800b7ee:	0005      	movs	r5, r0
 800b7f0:	0028      	movs	r0, r5
 800b7f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b7f4:	2a00      	cmp	r2, #0
 800b7f6:	d103      	bne.n	800b800 <_realloc_r+0x24>
 800b7f8:	f7ff fbd6 	bl	800afa8 <_free_r>
 800b7fc:	0025      	movs	r5, r4
 800b7fe:	e7f7      	b.n	800b7f0 <_realloc_r+0x14>
 800b800:	f000 f81b 	bl	800b83a <_malloc_usable_size_r>
 800b804:	9001      	str	r0, [sp, #4]
 800b806:	4284      	cmp	r4, r0
 800b808:	d803      	bhi.n	800b812 <_realloc_r+0x36>
 800b80a:	0035      	movs	r5, r6
 800b80c:	0843      	lsrs	r3, r0, #1
 800b80e:	42a3      	cmp	r3, r4
 800b810:	d3ee      	bcc.n	800b7f0 <_realloc_r+0x14>
 800b812:	0021      	movs	r1, r4
 800b814:	0038      	movs	r0, r7
 800b816:	f7ff fc33 	bl	800b080 <_malloc_r>
 800b81a:	1e05      	subs	r5, r0, #0
 800b81c:	d0e8      	beq.n	800b7f0 <_realloc_r+0x14>
 800b81e:	9b01      	ldr	r3, [sp, #4]
 800b820:	0022      	movs	r2, r4
 800b822:	429c      	cmp	r4, r3
 800b824:	d900      	bls.n	800b828 <_realloc_r+0x4c>
 800b826:	001a      	movs	r2, r3
 800b828:	0031      	movs	r1, r6
 800b82a:	0028      	movs	r0, r5
 800b82c:	f7ff ffcd 	bl	800b7ca <memcpy>
 800b830:	0031      	movs	r1, r6
 800b832:	0038      	movs	r0, r7
 800b834:	f7ff fbb8 	bl	800afa8 <_free_r>
 800b838:	e7da      	b.n	800b7f0 <_realloc_r+0x14>

0800b83a <_malloc_usable_size_r>:
 800b83a:	1f0b      	subs	r3, r1, #4
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	1f18      	subs	r0, r3, #4
 800b840:	2b00      	cmp	r3, #0
 800b842:	da01      	bge.n	800b848 <_malloc_usable_size_r+0xe>
 800b844:	580b      	ldr	r3, [r1, r0]
 800b846:	18c0      	adds	r0, r0, r3
 800b848:	4770      	bx	lr
	...

0800b84c <_init>:
 800b84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b84e:	46c0      	nop			; (mov r8, r8)
 800b850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b852:	bc08      	pop	{r3}
 800b854:	469e      	mov	lr, r3
 800b856:	4770      	bx	lr

0800b858 <_fini>:
 800b858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b85a:	46c0      	nop			; (mov r8, r8)
 800b85c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b85e:	bc08      	pop	{r3}
 800b860:	469e      	mov	lr, r3
 800b862:	4770      	bx	lr
