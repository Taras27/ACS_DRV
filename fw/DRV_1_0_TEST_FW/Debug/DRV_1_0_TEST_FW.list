
DRV_1_0_TEST_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b738  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  0800b7f4  0800b7f4  0000c7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba4c  0800ba4c  0000d17c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba4c  0800ba4c  0000ca4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba54  0800ba54  0000d17c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba54  0800ba54  0000ca54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba58  0800ba58  0000ca58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800ba5c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001948  2000017c  0800bbd8  0000d17c  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  20001ac4  0800bbd8  0000dac4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000d17c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d501  00000000  00000000  0000d1a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004921  00000000  00000000  0002a6a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001770  00000000  00000000  0002efc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011f9  00000000  00000000  00030738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020d53  00000000  00000000  00031931  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020e08  00000000  00000000  00052684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0406  00000000  00000000  0007348c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00133892  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005804  00000000  00000000  001338d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  001390dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000017c 	.word	0x2000017c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800b7dc 	.word	0x0800b7dc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000180 	.word	0x20000180
 8000100:	0800b7dc 	.word	0x0800b7dc

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	@ 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	@ 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	@ 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			@ (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	@ (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	@ (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			@ (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	@ (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000644:	4b20      	ldr	r3, [pc, #128]	@ (80006c8 <MX_FDCAN1_Init+0x88>)
 8000646:	4a21      	ldr	r2, [pc, #132]	@ (80006cc <MX_FDCAN1_Init+0x8c>)
 8000648:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800064a:	4b1f      	ldr	r3, [pc, #124]	@ (80006c8 <MX_FDCAN1_Init+0x88>)
 800064c:	2200      	movs	r2, #0
 800064e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000650:	4b1d      	ldr	r3, [pc, #116]	@ (80006c8 <MX_FDCAN1_Init+0x88>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000656:	4b1c      	ldr	r3, [pc, #112]	@ (80006c8 <MX_FDCAN1_Init+0x88>)
 8000658:	2200      	movs	r2, #0
 800065a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800065c:	4b1a      	ldr	r3, [pc, #104]	@ (80006c8 <MX_FDCAN1_Init+0x88>)
 800065e:	2200      	movs	r2, #0
 8000660:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000662:	4b19      	ldr	r3, [pc, #100]	@ (80006c8 <MX_FDCAN1_Init+0x88>)
 8000664:	2200      	movs	r2, #0
 8000666:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000668:	4b17      	ldr	r3, [pc, #92]	@ (80006c8 <MX_FDCAN1_Init+0x88>)
 800066a:	2200      	movs	r2, #0
 800066c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 8;
 800066e:	4b16      	ldr	r3, [pc, #88]	@ (80006c8 <MX_FDCAN1_Init+0x88>)
 8000670:	2208      	movs	r2, #8
 8000672:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000674:	4b14      	ldr	r3, [pc, #80]	@ (80006c8 <MX_FDCAN1_Init+0x88>)
 8000676:	2201      	movs	r2, #1
 8000678:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 800067a:	4b13      	ldr	r3, [pc, #76]	@ (80006c8 <MX_FDCAN1_Init+0x88>)
 800067c:	220d      	movs	r2, #13
 800067e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000680:	4b11      	ldr	r3, [pc, #68]	@ (80006c8 <MX_FDCAN1_Init+0x88>)
 8000682:	2202      	movs	r2, #2
 8000684:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000686:	4b10      	ldr	r3, [pc, #64]	@ (80006c8 <MX_FDCAN1_Init+0x88>)
 8000688:	2201      	movs	r2, #1
 800068a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800068c:	4b0e      	ldr	r3, [pc, #56]	@ (80006c8 <MX_FDCAN1_Init+0x88>)
 800068e:	2201      	movs	r2, #1
 8000690:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000692:	4b0d      	ldr	r3, [pc, #52]	@ (80006c8 <MX_FDCAN1_Init+0x88>)
 8000694:	2201      	movs	r2, #1
 8000696:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000698:	4b0b      	ldr	r3, [pc, #44]	@ (80006c8 <MX_FDCAN1_Init+0x88>)
 800069a:	2201      	movs	r2, #1
 800069c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800069e:	4b0a      	ldr	r3, [pc, #40]	@ (80006c8 <MX_FDCAN1_Init+0x88>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80006a4:	4b08      	ldr	r3, [pc, #32]	@ (80006c8 <MX_FDCAN1_Init+0x88>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80006aa:	4b07      	ldr	r3, [pc, #28]	@ (80006c8 <MX_FDCAN1_Init+0x88>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80006b0:	4b05      	ldr	r3, [pc, #20]	@ (80006c8 <MX_FDCAN1_Init+0x88>)
 80006b2:	0018      	movs	r0, r3
 80006b4:	f001 f934 	bl	8001920 <HAL_FDCAN_Init>
 80006b8:	1e03      	subs	r3, r0, #0
 80006ba:	d001      	beq.n	80006c0 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80006bc:	f000 fc2e 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80006c0:	46c0      	nop			@ (mov r8, r8)
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	46c0      	nop			@ (mov r8, r8)
 80006c8:	20000198 	.word	0x20000198
 80006cc:	40006400 	.word	0x40006400

080006d0 <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80006d4:	4b20      	ldr	r3, [pc, #128]	@ (8000758 <MX_FDCAN2_Init+0x88>)
 80006d6:	4a21      	ldr	r2, [pc, #132]	@ (800075c <MX_FDCAN2_Init+0x8c>)
 80006d8:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80006da:	4b1f      	ldr	r3, [pc, #124]	@ (8000758 <MX_FDCAN2_Init+0x88>)
 80006dc:	2200      	movs	r2, #0
 80006de:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80006e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000758 <MX_FDCAN2_Init+0x88>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80006e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000758 <MX_FDCAN2_Init+0x88>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80006ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000758 <MX_FDCAN2_Init+0x88>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80006f2:	4b19      	ldr	r3, [pc, #100]	@ (8000758 <MX_FDCAN2_Init+0x88>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80006f8:	4b17      	ldr	r3, [pc, #92]	@ (8000758 <MX_FDCAN2_Init+0x88>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 8;
 80006fe:	4b16      	ldr	r3, [pc, #88]	@ (8000758 <MX_FDCAN2_Init+0x88>)
 8000700:	2208      	movs	r2, #8
 8000702:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000704:	4b14      	ldr	r3, [pc, #80]	@ (8000758 <MX_FDCAN2_Init+0x88>)
 8000706:	2201      	movs	r2, #1
 8000708:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 13;
 800070a:	4b13      	ldr	r3, [pc, #76]	@ (8000758 <MX_FDCAN2_Init+0x88>)
 800070c:	220d      	movs	r2, #13
 800070e:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000710:	4b11      	ldr	r3, [pc, #68]	@ (8000758 <MX_FDCAN2_Init+0x88>)
 8000712:	2202      	movs	r2, #2
 8000714:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000716:	4b10      	ldr	r3, [pc, #64]	@ (8000758 <MX_FDCAN2_Init+0x88>)
 8000718:	2201      	movs	r2, #1
 800071a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800071c:	4b0e      	ldr	r3, [pc, #56]	@ (8000758 <MX_FDCAN2_Init+0x88>)
 800071e:	2201      	movs	r2, #1
 8000720:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000722:	4b0d      	ldr	r3, [pc, #52]	@ (8000758 <MX_FDCAN2_Init+0x88>)
 8000724:	2201      	movs	r2, #1
 8000726:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000728:	4b0b      	ldr	r3, [pc, #44]	@ (8000758 <MX_FDCAN2_Init+0x88>)
 800072a:	2201      	movs	r2, #1
 800072c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 800072e:	4b0a      	ldr	r3, [pc, #40]	@ (8000758 <MX_FDCAN2_Init+0x88>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000734:	4b08      	ldr	r3, [pc, #32]	@ (8000758 <MX_FDCAN2_Init+0x88>)
 8000736:	2200      	movs	r2, #0
 8000738:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800073a:	4b07      	ldr	r3, [pc, #28]	@ (8000758 <MX_FDCAN2_Init+0x88>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000740:	4b05      	ldr	r3, [pc, #20]	@ (8000758 <MX_FDCAN2_Init+0x88>)
 8000742:	0018      	movs	r0, r3
 8000744:	f001 f8ec 	bl	8001920 <HAL_FDCAN_Init>
 8000748:	1e03      	subs	r3, r0, #0
 800074a:	d001      	beq.n	8000750 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 800074c:	f000 fbe6 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000750:	46c0      	nop			@ (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	46c0      	nop			@ (mov r8, r8)
 8000758:	200001fc 	.word	0x200001fc
 800075c:	40006800 	.word	0x40006800

08000760 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000760:	b590      	push	{r4, r7, lr}
 8000762:	b09f      	sub	sp, #124	@ 0x7c
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000768:	2364      	movs	r3, #100	@ 0x64
 800076a:	18fb      	adds	r3, r7, r3
 800076c:	0018      	movs	r0, r3
 800076e:	2314      	movs	r3, #20
 8000770:	001a      	movs	r2, r3
 8000772:	2100      	movs	r1, #0
 8000774:	f00a fbb8 	bl	800aee8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000778:	2418      	movs	r4, #24
 800077a:	193b      	adds	r3, r7, r4
 800077c:	0018      	movs	r0, r3
 800077e:	234c      	movs	r3, #76	@ 0x4c
 8000780:	001a      	movs	r2, r3
 8000782:	2100      	movs	r1, #0
 8000784:	f00a fbb0 	bl	800aee8 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a4e      	ldr	r2, [pc, #312]	@ (80008c8 <HAL_FDCAN_MspInit+0x168>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d148      	bne.n	8000824 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000792:	193b      	adds	r3, r7, r4
 8000794:	2280      	movs	r2, #128	@ 0x80
 8000796:	0492      	lsls	r2, r2, #18
 8000798:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800079a:	193b      	adds	r3, r7, r4
 800079c:	2200      	movs	r2, #0
 800079e:	649a      	str	r2, [r3, #72]	@ 0x48

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007a0:	193b      	adds	r3, r7, r4
 80007a2:	0018      	movs	r0, r3
 80007a4:	f004 f9fe 	bl	8004ba4 <HAL_RCCEx_PeriphCLKConfig>
 80007a8:	1e03      	subs	r3, r0, #0
 80007aa:	d001      	beq.n	80007b0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80007ac:	f000 fbb6 	bl	8000f1c <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80007b0:	4b46      	ldr	r3, [pc, #280]	@ (80008cc <HAL_FDCAN_MspInit+0x16c>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	1c5a      	adds	r2, r3, #1
 80007b6:	4b45      	ldr	r3, [pc, #276]	@ (80008cc <HAL_FDCAN_MspInit+0x16c>)
 80007b8:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80007ba:	4b44      	ldr	r3, [pc, #272]	@ (80008cc <HAL_FDCAN_MspInit+0x16c>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d10d      	bne.n	80007de <HAL_FDCAN_MspInit+0x7e>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80007c2:	4b43      	ldr	r3, [pc, #268]	@ (80008d0 <HAL_FDCAN_MspInit+0x170>)
 80007c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007c6:	4b42      	ldr	r3, [pc, #264]	@ (80008d0 <HAL_FDCAN_MspInit+0x170>)
 80007c8:	2180      	movs	r1, #128	@ 0x80
 80007ca:	0149      	lsls	r1, r1, #5
 80007cc:	430a      	orrs	r2, r1
 80007ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 80007d0:	4b3f      	ldr	r3, [pc, #252]	@ (80008d0 <HAL_FDCAN_MspInit+0x170>)
 80007d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007d4:	2380      	movs	r3, #128	@ 0x80
 80007d6:	015b      	lsls	r3, r3, #5
 80007d8:	4013      	ands	r3, r2
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007de:	4b3c      	ldr	r3, [pc, #240]	@ (80008d0 <HAL_FDCAN_MspInit+0x170>)
 80007e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007e2:	4b3b      	ldr	r3, [pc, #236]	@ (80008d0 <HAL_FDCAN_MspInit+0x170>)
 80007e4:	2108      	movs	r1, #8
 80007e6:	430a      	orrs	r2, r1
 80007e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80007ea:	4b39      	ldr	r3, [pc, #228]	@ (80008d0 <HAL_FDCAN_MspInit+0x170>)
 80007ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007ee:	2208      	movs	r2, #8
 80007f0:	4013      	ands	r3, r2
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007f6:	2164      	movs	r1, #100	@ 0x64
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	2203      	movs	r2, #3
 80007fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	2202      	movs	r2, #2
 8000802:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	187b      	adds	r3, r7, r1
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	187b      	adds	r3, r7, r1
 800080c:	2200      	movs	r2, #0
 800080e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN1;
 8000810:	187b      	adds	r3, r7, r1
 8000812:	2203      	movs	r2, #3
 8000814:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000816:	187b      	adds	r3, r7, r1
 8000818:	4a2e      	ldr	r2, [pc, #184]	@ (80008d4 <HAL_FDCAN_MspInit+0x174>)
 800081a:	0019      	movs	r1, r3
 800081c:	0010      	movs	r0, r2
 800081e:	f001 fb39 	bl	8001e94 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8000822:	e04d      	b.n	80008c0 <HAL_FDCAN_MspInit+0x160>
  else if(fdcanHandle->Instance==FDCAN2)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a2b      	ldr	r2, [pc, #172]	@ (80008d8 <HAL_FDCAN_MspInit+0x178>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d148      	bne.n	80008c0 <HAL_FDCAN_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800082e:	2118      	movs	r1, #24
 8000830:	187b      	adds	r3, r7, r1
 8000832:	2280      	movs	r2, #128	@ 0x80
 8000834:	0492      	lsls	r2, r2, #18
 8000836:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000838:	187b      	adds	r3, r7, r1
 800083a:	2200      	movs	r2, #0
 800083c:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800083e:	187b      	adds	r3, r7, r1
 8000840:	0018      	movs	r0, r3
 8000842:	f004 f9af 	bl	8004ba4 <HAL_RCCEx_PeriphCLKConfig>
 8000846:	1e03      	subs	r3, r0, #0
 8000848:	d001      	beq.n	800084e <HAL_FDCAN_MspInit+0xee>
      Error_Handler();
 800084a:	f000 fb67 	bl	8000f1c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800084e:	4b1f      	ldr	r3, [pc, #124]	@ (80008cc <HAL_FDCAN_MspInit+0x16c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	1c5a      	adds	r2, r3, #1
 8000854:	4b1d      	ldr	r3, [pc, #116]	@ (80008cc <HAL_FDCAN_MspInit+0x16c>)
 8000856:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000858:	4b1c      	ldr	r3, [pc, #112]	@ (80008cc <HAL_FDCAN_MspInit+0x16c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d10d      	bne.n	800087c <HAL_FDCAN_MspInit+0x11c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000860:	4b1b      	ldr	r3, [pc, #108]	@ (80008d0 <HAL_FDCAN_MspInit+0x170>)
 8000862:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000864:	4b1a      	ldr	r3, [pc, #104]	@ (80008d0 <HAL_FDCAN_MspInit+0x170>)
 8000866:	2180      	movs	r1, #128	@ 0x80
 8000868:	0149      	lsls	r1, r1, #5
 800086a:	430a      	orrs	r2, r1
 800086c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800086e:	4b18      	ldr	r3, [pc, #96]	@ (80008d0 <HAL_FDCAN_MspInit+0x170>)
 8000870:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000872:	2380      	movs	r3, #128	@ 0x80
 8000874:	015b      	lsls	r3, r3, #5
 8000876:	4013      	ands	r3, r2
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800087c:	4b14      	ldr	r3, [pc, #80]	@ (80008d0 <HAL_FDCAN_MspInit+0x170>)
 800087e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000880:	4b13      	ldr	r3, [pc, #76]	@ (80008d0 <HAL_FDCAN_MspInit+0x170>)
 8000882:	2102      	movs	r1, #2
 8000884:	430a      	orrs	r2, r1
 8000886:	635a      	str	r2, [r3, #52]	@ 0x34
 8000888:	4b11      	ldr	r3, [pc, #68]	@ (80008d0 <HAL_FDCAN_MspInit+0x170>)
 800088a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800088c:	2202      	movs	r2, #2
 800088e:	4013      	ands	r3, r2
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000894:	2164      	movs	r1, #100	@ 0x64
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2260      	movs	r2, #96	@ 0x60
 800089a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2202      	movs	r2, #2
 80008a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN2;
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	2203      	movs	r2, #3
 80008b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	4a09      	ldr	r2, [pc, #36]	@ (80008dc <HAL_FDCAN_MspInit+0x17c>)
 80008b8:	0019      	movs	r1, r3
 80008ba:	0010      	movs	r0, r2
 80008bc:	f001 faea 	bl	8001e94 <HAL_GPIO_Init>
}
 80008c0:	46c0      	nop			@ (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b01f      	add	sp, #124	@ 0x7c
 80008c6:	bd90      	pop	{r4, r7, pc}
 80008c8:	40006400 	.word	0x40006400
 80008cc:	20000260 	.word	0x20000260
 80008d0:	40021000 	.word	0x40021000
 80008d4:	50000c00 	.word	0x50000c00
 80008d8:	40006800 	.word	0x40006800
 80008dc:	50000400 	.word	0x50000400

080008e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008e0:	b590      	push	{r4, r7, lr}
 80008e2:	b08b      	sub	sp, #44	@ 0x2c
 80008e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e6:	2414      	movs	r4, #20
 80008e8:	193b      	adds	r3, r7, r4
 80008ea:	0018      	movs	r0, r3
 80008ec:	2314      	movs	r3, #20
 80008ee:	001a      	movs	r2, r3
 80008f0:	2100      	movs	r1, #0
 80008f2:	f00a faf9 	bl	800aee8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	4b5d      	ldr	r3, [pc, #372]	@ (8000a6c <MX_GPIO_Init+0x18c>)
 80008f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008fa:	4b5c      	ldr	r3, [pc, #368]	@ (8000a6c <MX_GPIO_Init+0x18c>)
 80008fc:	2104      	movs	r1, #4
 80008fe:	430a      	orrs	r2, r1
 8000900:	635a      	str	r2, [r3, #52]	@ 0x34
 8000902:	4b5a      	ldr	r3, [pc, #360]	@ (8000a6c <MX_GPIO_Init+0x18c>)
 8000904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000906:	2204      	movs	r2, #4
 8000908:	4013      	ands	r3, r2
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800090e:	4b57      	ldr	r3, [pc, #348]	@ (8000a6c <MX_GPIO_Init+0x18c>)
 8000910:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000912:	4b56      	ldr	r3, [pc, #344]	@ (8000a6c <MX_GPIO_Init+0x18c>)
 8000914:	2120      	movs	r1, #32
 8000916:	430a      	orrs	r2, r1
 8000918:	635a      	str	r2, [r3, #52]	@ 0x34
 800091a:	4b54      	ldr	r3, [pc, #336]	@ (8000a6c <MX_GPIO_Init+0x18c>)
 800091c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800091e:	2220      	movs	r2, #32
 8000920:	4013      	ands	r3, r2
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4b51      	ldr	r3, [pc, #324]	@ (8000a6c <MX_GPIO_Init+0x18c>)
 8000928:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800092a:	4b50      	ldr	r3, [pc, #320]	@ (8000a6c <MX_GPIO_Init+0x18c>)
 800092c:	2101      	movs	r1, #1
 800092e:	430a      	orrs	r2, r1
 8000930:	635a      	str	r2, [r3, #52]	@ 0x34
 8000932:	4b4e      	ldr	r3, [pc, #312]	@ (8000a6c <MX_GPIO_Init+0x18c>)
 8000934:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000936:	2201      	movs	r2, #1
 8000938:	4013      	ands	r3, r2
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093e:	4b4b      	ldr	r3, [pc, #300]	@ (8000a6c <MX_GPIO_Init+0x18c>)
 8000940:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000942:	4b4a      	ldr	r3, [pc, #296]	@ (8000a6c <MX_GPIO_Init+0x18c>)
 8000944:	2102      	movs	r1, #2
 8000946:	430a      	orrs	r2, r1
 8000948:	635a      	str	r2, [r3, #52]	@ 0x34
 800094a:	4b48      	ldr	r3, [pc, #288]	@ (8000a6c <MX_GPIO_Init+0x18c>)
 800094c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800094e:	2202      	movs	r2, #2
 8000950:	4013      	ands	r3, r2
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000956:	4b45      	ldr	r3, [pc, #276]	@ (8000a6c <MX_GPIO_Init+0x18c>)
 8000958:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800095a:	4b44      	ldr	r3, [pc, #272]	@ (8000a6c <MX_GPIO_Init+0x18c>)
 800095c:	2108      	movs	r1, #8
 800095e:	430a      	orrs	r2, r1
 8000960:	635a      	str	r2, [r3, #52]	@ 0x34
 8000962:	4b42      	ldr	r3, [pc, #264]	@ (8000a6c <MX_GPIO_Init+0x18c>)
 8000964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000966:	2208      	movs	r2, #8
 8000968:	4013      	ands	r3, r2
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_ERROR_Pin|LED_PROCESS_Pin|LED_OK_Pin, GPIO_PIN_RESET);
 800096e:	23e0      	movs	r3, #224	@ 0xe0
 8000970:	021b      	lsls	r3, r3, #8
 8000972:	483f      	ldr	r0, [pc, #252]	@ (8000a70 <MX_GPIO_Init+0x190>)
 8000974:	2200      	movs	r2, #0
 8000976:	0019      	movs	r1, r3
 8000978:	f001 fc15 	bl	80021a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, UART2_CS0_Pin|BUZZ_Pin, GPIO_PIN_RESET);
 800097c:	493d      	ldr	r1, [pc, #244]	@ (8000a74 <MX_GPIO_Init+0x194>)
 800097e:	23a0      	movs	r3, #160	@ 0xa0
 8000980:	05db      	lsls	r3, r3, #23
 8000982:	2200      	movs	r2, #0
 8000984:	0018      	movs	r0, r3
 8000986:	f001 fc0e 	bl	80021a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_CS0_Pin|SPI_CS1_Pin|UART3_CS0_Pin|UART5_CS0_Pin
 800098a:	493b      	ldr	r1, [pc, #236]	@ (8000a78 <MX_GPIO_Init+0x198>)
 800098c:	4b3b      	ldr	r3, [pc, #236]	@ (8000a7c <MX_GPIO_Init+0x19c>)
 800098e:	2200      	movs	r2, #0
 8000990:	0018      	movs	r0, r3
 8000992:	f001 fc08 	bl	80021a6 <HAL_GPIO_WritePin>
                          |UART6_CS0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_ERROR_Pin|LED_PROCESS_Pin|LED_OK_Pin;
 8000996:	193b      	adds	r3, r7, r4
 8000998:	22e0      	movs	r2, #224	@ 0xe0
 800099a:	0212      	lsls	r2, r2, #8
 800099c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	2201      	movs	r2, #1
 80009a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	193b      	adds	r3, r7, r4
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	193b      	adds	r3, r7, r4
 80009ac:	2200      	movs	r2, #0
 80009ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b0:	193b      	adds	r3, r7, r4
 80009b2:	4a2f      	ldr	r2, [pc, #188]	@ (8000a70 <MX_GPIO_Init+0x190>)
 80009b4:	0019      	movs	r1, r3
 80009b6:	0010      	movs	r0, r2
 80009b8:	f001 fa6c 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = ADDR0_Pin|ADDR1_Pin|LS1_Pin|LS2_Pin
 80009bc:	193b      	adds	r3, r7, r4
 80009be:	4a30      	ldr	r2, [pc, #192]	@ (8000a80 <MX_GPIO_Init+0x1a0>)
 80009c0:	601a      	str	r2, [r3, #0]
                          |LS5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c2:	193b      	adds	r3, r7, r4
 80009c4:	2200      	movs	r2, #0
 80009c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	193b      	adds	r3, r7, r4
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ce:	193a      	adds	r2, r7, r4
 80009d0:	23a0      	movs	r3, #160	@ 0xa0
 80009d2:	05db      	lsls	r3, r3, #23
 80009d4:	0011      	movs	r1, r2
 80009d6:	0018      	movs	r0, r3
 80009d8:	f001 fa5c 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = UART2_CS0_Pin|BUZZ_Pin;
 80009dc:	193b      	adds	r3, r7, r4
 80009de:	4a25      	ldr	r2, [pc, #148]	@ (8000a74 <MX_GPIO_Init+0x194>)
 80009e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	193b      	adds	r3, r7, r4
 80009e4:	2201      	movs	r2, #1
 80009e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	193b      	adds	r3, r7, r4
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	193b      	adds	r3, r7, r4
 80009f0:	2200      	movs	r2, #0
 80009f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f4:	193a      	adds	r2, r7, r4
 80009f6:	23a0      	movs	r3, #160	@ 0xa0
 80009f8:	05db      	lsls	r3, r3, #23
 80009fa:	0011      	movs	r1, r2
 80009fc:	0018      	movs	r0, r3
 80009fe:	f001 fa49 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SPI_CS0_Pin|SPI_CS1_Pin|UART3_CS0_Pin|UART5_CS0_Pin
 8000a02:	193b      	adds	r3, r7, r4
 8000a04:	4a1c      	ldr	r2, [pc, #112]	@ (8000a78 <MX_GPIO_Init+0x198>)
 8000a06:	601a      	str	r2, [r3, #0]
                          |UART6_CS0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	193b      	adds	r3, r7, r4
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	193b      	adds	r3, r7, r4
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	193b      	adds	r3, r7, r4
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1a:	193b      	adds	r3, r7, r4
 8000a1c:	4a17      	ldr	r2, [pc, #92]	@ (8000a7c <MX_GPIO_Init+0x19c>)
 8000a1e:	0019      	movs	r1, r3
 8000a20:	0010      	movs	r0, r2
 8000a22:	f001 fa37 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ADDR2_Pin|LS0_Pin|BOOT_BTN_Pin;
 8000a26:	193b      	adds	r3, r7, r4
 8000a28:	4a16      	ldr	r2, [pc, #88]	@ (8000a84 <MX_GPIO_Init+0x1a4>)
 8000a2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2c:	193b      	adds	r3, r7, r4
 8000a2e:	2200      	movs	r2, #0
 8000a30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	193b      	adds	r3, r7, r4
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a38:	193b      	adds	r3, r7, r4
 8000a3a:	4a10      	ldr	r2, [pc, #64]	@ (8000a7c <MX_GPIO_Init+0x19c>)
 8000a3c:	0019      	movs	r1, r3
 8000a3e:	0010      	movs	r0, r2
 8000a40:	f001 fa28 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LS3_Pin|LS4_Pin;
 8000a44:	0021      	movs	r1, r4
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	22c0      	movs	r2, #192	@ 0xc0
 8000a4a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	2200      	movs	r2, #0
 8000a50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	4a05      	ldr	r2, [pc, #20]	@ (8000a70 <MX_GPIO_Init+0x190>)
 8000a5c:	0019      	movs	r1, r3
 8000a5e:	0010      	movs	r0, r2
 8000a60:	f001 fa18 	bl	8001e94 <HAL_GPIO_Init>

}
 8000a64:	46c0      	nop			@ (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b00b      	add	sp, #44	@ 0x2c
 8000a6a:	bd90      	pop	{r4, r7, pc}
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	50000800 	.word	0x50000800
 8000a74:	00008010 	.word	0x00008010
 8000a78:	0000108b 	.word	0x0000108b
 8000a7c:	50000400 	.word	0x50000400
 8000a80:	00000703 	.word	0x00000703
 8000a84:	00008014 	.word	0x00008014

08000a88 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000afc <MX_I2C2_Init+0x74>)
 8000a8e:	4a1c      	ldr	r2, [pc, #112]	@ (8000b00 <MX_I2C2_Init+0x78>)
 8000a90:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 8000a92:	4b1a      	ldr	r3, [pc, #104]	@ (8000afc <MX_I2C2_Init+0x74>)
 8000a94:	4a1b      	ldr	r2, [pc, #108]	@ (8000b04 <MX_I2C2_Init+0x7c>)
 8000a96:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a98:	4b18      	ldr	r3, [pc, #96]	@ (8000afc <MX_I2C2_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a9e:	4b17      	ldr	r3, [pc, #92]	@ (8000afc <MX_I2C2_Init+0x74>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aa4:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <MX_I2C2_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000aaa:	4b14      	ldr	r3, [pc, #80]	@ (8000afc <MX_I2C2_Init+0x74>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ab0:	4b12      	ldr	r3, [pc, #72]	@ (8000afc <MX_I2C2_Init+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	@ (8000afc <MX_I2C2_Init+0x74>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	@ (8000afc <MX_I2C2_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8000afc <MX_I2C2_Init+0x74>)
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f001 fb8b 	bl	80021e0 <HAL_I2C_Init>
 8000aca:	1e03      	subs	r3, r0, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ace:	f000 fa25 	bl	8000f1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8000afc <MX_I2C2_Init+0x74>)
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f001 fc18 	bl	800230c <HAL_I2CEx_ConfigAnalogFilter>
 8000adc:	1e03      	subs	r3, r0, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ae0:	f000 fa1c 	bl	8000f1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ae4:	4b05      	ldr	r3, [pc, #20]	@ (8000afc <MX_I2C2_Init+0x74>)
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f001 fc5b 	bl	80023a4 <HAL_I2CEx_ConfigDigitalFilter>
 8000aee:	1e03      	subs	r3, r0, #0
 8000af0:	d001      	beq.n	8000af6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000af2:	f000 fa13 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000af6:	46c0      	nop			@ (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000264 	.word	0x20000264
 8000b00:	40005800 	.word	0x40005800
 8000b04:	10707dbc 	.word	0x10707dbc

08000b08 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b08:	b590      	push	{r4, r7, lr}
 8000b0a:	b09d      	sub	sp, #116	@ 0x74
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	235c      	movs	r3, #92	@ 0x5c
 8000b12:	18fb      	adds	r3, r7, r3
 8000b14:	0018      	movs	r0, r3
 8000b16:	2314      	movs	r3, #20
 8000b18:	001a      	movs	r2, r3
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	f00a f9e4 	bl	800aee8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b20:	2410      	movs	r4, #16
 8000b22:	193b      	adds	r3, r7, r4
 8000b24:	0018      	movs	r0, r3
 8000b26:	234c      	movs	r3, #76	@ 0x4c
 8000b28:	001a      	movs	r2, r3
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	f00a f9dc 	bl	800aee8 <memset>
  if(i2cHandle->Instance==I2C2)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a22      	ldr	r2, [pc, #136]	@ (8000bc0 <HAL_I2C_MspInit+0xb8>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d13e      	bne.n	8000bb8 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000b3a:	193b      	adds	r3, r7, r4
 8000b3c:	2240      	movs	r2, #64	@ 0x40
 8000b3e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000b40:	193b      	adds	r3, r7, r4
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b46:	193b      	adds	r3, r7, r4
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f004 f82b 	bl	8004ba4 <HAL_RCCEx_PeriphCLKConfig>
 8000b4e:	1e03      	subs	r3, r0, #0
 8000b50:	d001      	beq.n	8000b56 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000b52:	f000 f9e3 	bl	8000f1c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b56:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc4 <HAL_I2C_MspInit+0xbc>)
 8000b58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc4 <HAL_I2C_MspInit+0xbc>)
 8000b5c:	2102      	movs	r1, #2
 8000b5e:	430a      	orrs	r2, r1
 8000b60:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b62:	4b18      	ldr	r3, [pc, #96]	@ (8000bc4 <HAL_I2C_MspInit+0xbc>)
 8000b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b66:	2202      	movs	r2, #2
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000b6e:	215c      	movs	r1, #92	@ 0x5c
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	22c0      	movs	r2, #192	@ 0xc0
 8000b74:	01d2      	lsls	r2, r2, #7
 8000b76:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	2212      	movs	r2, #18
 8000b7c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	187b      	adds	r3, r7, r1
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000b8a:	187b      	adds	r3, r7, r1
 8000b8c:	2206      	movs	r2, #6
 8000b8e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc8 <HAL_I2C_MspInit+0xc0>)
 8000b94:	0019      	movs	r1, r3
 8000b96:	0010      	movs	r0, r2
 8000b98:	f001 f97c 	bl	8001e94 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b9c:	4b09      	ldr	r3, [pc, #36]	@ (8000bc4 <HAL_I2C_MspInit+0xbc>)
 8000b9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ba0:	4b08      	ldr	r3, [pc, #32]	@ (8000bc4 <HAL_I2C_MspInit+0xbc>)
 8000ba2:	2180      	movs	r1, #128	@ 0x80
 8000ba4:	03c9      	lsls	r1, r1, #15
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000baa:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <HAL_I2C_MspInit+0xbc>)
 8000bac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bae:	2380      	movs	r3, #128	@ 0x80
 8000bb0:	03db      	lsls	r3, r3, #15
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000bb8:	46c0      	nop			@ (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b01d      	add	sp, #116	@ 0x74
 8000bbe:	bd90      	pop	{r4, r7, pc}
 8000bc0:	40005800 	.word	0x40005800
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	50000400 	.word	0x50000400

08000bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bce:	b0cf      	sub	sp, #316	@ 0x13c
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd2:	f000 fd07 	bl	80015e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd6:	f000 f8bb 	bl	8000d50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bda:	f7ff fe81 	bl	80008e0 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000bde:	f7ff fd2f 	bl	8000640 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000be2:	f7ff fd75 	bl	80006d0 <MX_FDCAN2_Init>
  MX_I2C2_Init();
 8000be6:	f7ff ff4f 	bl	8000a88 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000bea:	f000 f99d 	bl	8000f28 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000bee:	f000 faad 	bl	800114c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000bf2:	f000 faf9 	bl	80011e8 <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 8000bf6:	f000 fb45 	bl	8001284 <MX_USART5_UART_Init>
  MX_USART6_UART_Init();
 8000bfa:	f000 fb77 	bl	80012ec <MX_USART6_UART_Init>
  MX_USB_Device_Init();
 8000bfe:	f009 fbc7 	bl	800a390 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
	FDCAN_TxHeaderTypeDef can1TxHeader;


	char *cdc_data = "Hello from drv board: CDC Transport!!!\r\n";
 8000c02:	4b4c      	ldr	r3, [pc, #304]	@ (8000d34 <main+0x168>)
 8000c04:	2298      	movs	r2, #152	@ 0x98
 8000c06:	0052      	lsls	r2, r2, #1
 8000c08:	18ba      	adds	r2, r7, r2
 8000c0a:	6013      	str	r3, [r2, #0]
	char *uart_data[64];
	uint8_t can1_data[] = { 1, 2, 3, 4, 5, 6, 7, 8 };
 8000c0c:	4b4a      	ldr	r3, [pc, #296]	@ (8000d38 <main+0x16c>)
 8000c0e:	229c      	movs	r2, #156	@ 0x9c
 8000c10:	0052      	lsls	r2, r2, #1
 8000c12:	189b      	adds	r3, r3, r2
 8000c14:	19db      	adds	r3, r3, r7
 8000c16:	4a49      	ldr	r2, [pc, #292]	@ (8000d3c <main+0x170>)
 8000c18:	ca03      	ldmia	r2!, {r0, r1}
 8000c1a:	c303      	stmia	r3!, {r0, r1}

	HAL_FDCAN_Start(&hfdcan1);
 8000c1c:	4b48      	ldr	r3, [pc, #288]	@ (8000d40 <main+0x174>)
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f000 ffe4 	bl	8001bec <HAL_FDCAN_Start>

	can1TxHeader.Identifier = 0x11;
 8000c24:	2184      	movs	r1, #132	@ 0x84
 8000c26:	0049      	lsls	r1, r1, #1
 8000c28:	187b      	adds	r3, r7, r1
 8000c2a:	2211      	movs	r2, #17
 8000c2c:	601a      	str	r2, [r3, #0]
	can1TxHeader.IdType = FDCAN_STANDARD_ID;
 8000c2e:	187b      	adds	r3, r7, r1
 8000c30:	2200      	movs	r2, #0
 8000c32:	605a      	str	r2, [r3, #4]
	can1TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000c34:	187b      	adds	r3, r7, r1
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
	can1TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000c3a:	187b      	adds	r3, r7, r1
 8000c3c:	2280      	movs	r2, #128	@ 0x80
 8000c3e:	0312      	lsls	r2, r2, #12
 8000c40:	60da      	str	r2, [r3, #12]
	can1TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000c42:	187b      	adds	r3, r7, r1
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
	can1TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000c48:	187b      	adds	r3, r7, r1
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	615a      	str	r2, [r3, #20]
	can1TxHeader.FDFormat = FDCAN_FD_CAN;
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	2280      	movs	r2, #128	@ 0x80
 8000c52:	0392      	lsls	r2, r2, #14
 8000c54:	619a      	str	r2, [r3, #24]
	can1TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2200      	movs	r2, #0
 8000c5a:	61da      	str	r2, [r3, #28]
	can1TxHeader.MessageMarker = 0;
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	2200      	movs	r2, #0
 8000c60:	621a      	str	r2, [r3, #32]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		LS_Test();
 8000c62:	f000 f8d1 	bl	8000e08 <LS_Test>
		CDC_Transmit_FS((uint8_t*)cdc_data, strlen(cdc_data));
 8000c66:	2498      	movs	r4, #152	@ 0x98
 8000c68:	0064      	lsls	r4, r4, #1
 8000c6a:	193b      	adds	r3, r7, r4
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f7ff fa48 	bl	8000104 <strlen>
 8000c74:	0003      	movs	r3, r0
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	193b      	adds	r3, r7, r4
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	0011      	movs	r1, r2
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f009 fc0a 	bl	800a498 <CDC_Transmit_FS>
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &can1TxHeader, can1_data);
 8000c84:	003a      	movs	r2, r7
 8000c86:	2384      	movs	r3, #132	@ 0x84
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	18f9      	adds	r1, r7, r3
 8000c8c:	4b2c      	ldr	r3, [pc, #176]	@ (8000d40 <main+0x174>)
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f000 ffd2 	bl	8001c38 <HAL_FDCAN_AddMessageToTxFifoQ>
		for (uint8_t i = 0; i < 4; i++)
 8000c94:	2338      	movs	r3, #56	@ 0x38
 8000c96:	33ff      	adds	r3, #255	@ 0xff
 8000c98:	18fb      	adds	r3, r7, r3
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	701a      	strb	r2, [r3, #0]
 8000c9e:	e03f      	b.n	8000d20 <main+0x154>
		{
			uint32_t length = sprintf((char*) uart_data, "Hello from drv board: UART Transport [%02d]!!!\r\n", i);
 8000ca0:	2438      	movs	r4, #56	@ 0x38
 8000ca2:	34ff      	adds	r4, #255	@ 0xff
 8000ca4:	193b      	adds	r3, r7, r4
 8000ca6:	781a      	ldrb	r2, [r3, #0]
 8000ca8:	4926      	ldr	r1, [pc, #152]	@ (8000d44 <main+0x178>)
 8000caa:	2508      	movs	r5, #8
 8000cac:	197b      	adds	r3, r7, r5
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f00a f8f8 	bl	800aea4 <siprintf>
 8000cb4:	0003      	movs	r3, r0
 8000cb6:	2696      	movs	r6, #150	@ 0x96
 8000cb8:	0076      	lsls	r6, r6, #1
 8000cba:	19ba      	adds	r2, r7, r6
 8000cbc:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(uart_cs_pin[i].port, uart_cs_pin[i].pin,GPIO_PIN_SET);
 8000cbe:	193b      	adds	r3, r7, r4
 8000cc0:	781a      	ldrb	r2, [r3, #0]
 8000cc2:	4b21      	ldr	r3, [pc, #132]	@ (8000d48 <main+0x17c>)
 8000cc4:	00d2      	lsls	r2, r2, #3
 8000cc6:	58d0      	ldr	r0, [r2, r3]
 8000cc8:	193b      	adds	r3, r7, r4
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	4a1e      	ldr	r2, [pc, #120]	@ (8000d48 <main+0x17c>)
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	18d3      	adds	r3, r2, r3
 8000cd2:	3304      	adds	r3, #4
 8000cd4:	881b      	ldrh	r3, [r3, #0]
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	0019      	movs	r1, r3
 8000cda:	f001 fa64 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_UART_Transmit(uart_list[i], (uint8_t*) uart_data, length, 100);
 8000cde:	193b      	adds	r3, r7, r4
 8000ce0:	781a      	ldrb	r2, [r3, #0]
 8000ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d4c <main+0x180>)
 8000ce4:	0092      	lsls	r2, r2, #2
 8000ce6:	58d0      	ldr	r0, [r2, r3]
 8000ce8:	19bb      	adds	r3, r7, r6
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	1979      	adds	r1, r7, r5
 8000cf0:	2364      	movs	r3, #100	@ 0x64
 8000cf2:	f004 faa1 	bl	8005238 <HAL_UART_Transmit>
			HAL_GPIO_WritePin(uart_cs_pin[i].port, uart_cs_pin[i].pin, GPIO_PIN_RESET);
 8000cf6:	193b      	adds	r3, r7, r4
 8000cf8:	781a      	ldrb	r2, [r3, #0]
 8000cfa:	4b13      	ldr	r3, [pc, #76]	@ (8000d48 <main+0x17c>)
 8000cfc:	00d2      	lsls	r2, r2, #3
 8000cfe:	58d0      	ldr	r0, [r2, r3]
 8000d00:	193b      	adds	r3, r7, r4
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	4a10      	ldr	r2, [pc, #64]	@ (8000d48 <main+0x17c>)
 8000d06:	00db      	lsls	r3, r3, #3
 8000d08:	18d3      	adds	r3, r2, r3
 8000d0a:	3304      	adds	r3, #4
 8000d0c:	881b      	ldrh	r3, [r3, #0]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	0019      	movs	r1, r3
 8000d12:	f001 fa48 	bl	80021a6 <HAL_GPIO_WritePin>
		for (uint8_t i = 0; i < 4; i++)
 8000d16:	193b      	adds	r3, r7, r4
 8000d18:	781a      	ldrb	r2, [r3, #0]
 8000d1a:	193b      	adds	r3, r7, r4
 8000d1c:	3201      	adds	r2, #1
 8000d1e:	701a      	strb	r2, [r3, #0]
 8000d20:	2338      	movs	r3, #56	@ 0x38
 8000d22:	33ff      	adds	r3, #255	@ 0xff
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b03      	cmp	r3, #3
 8000d2a:	d9b9      	bls.n	8000ca0 <main+0xd4>
		}
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
		HAL_Delay(100);
 8000d2c:	2064      	movs	r0, #100	@ 0x64
 8000d2e:	f000 fcdf 	bl	80016f0 <HAL_Delay>
		LS_Test();
 8000d32:	e796      	b.n	8000c62 <main+0x96>
 8000d34:	0800b7f4 	.word	0x0800b7f4
 8000d38:	fffffec8 	.word	0xfffffec8
 8000d3c:	0800b854 	.word	0x0800b854
 8000d40:	20000198 	.word	0x20000198
 8000d44:	0800b820 	.word	0x0800b820
 8000d48:	20000000 	.word	0x20000000
 8000d4c:	20000020 	.word	0x20000020

08000d50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d50:	b590      	push	{r4, r7, lr}
 8000d52:	b095      	sub	sp, #84	@ 0x54
 8000d54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d56:	2414      	movs	r4, #20
 8000d58:	193b      	adds	r3, r7, r4
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	233c      	movs	r3, #60	@ 0x3c
 8000d5e:	001a      	movs	r2, r3
 8000d60:	2100      	movs	r1, #0
 8000d62:	f00a f8c1 	bl	800aee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	0018      	movs	r0, r3
 8000d6a:	2310      	movs	r3, #16
 8000d6c:	001a      	movs	r2, r3
 8000d6e:	2100      	movs	r1, #0
 8000d70:	f00a f8ba 	bl	800aee8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d74:	2380      	movs	r3, #128	@ 0x80
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f003 f9bd 	bl	80040f8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_HSI48;
 8000d7e:	193b      	adds	r3, r7, r4
 8000d80:	2221      	movs	r2, #33	@ 0x21
 8000d82:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d84:	193b      	adds	r3, r7, r4
 8000d86:	2280      	movs	r2, #128	@ 0x80
 8000d88:	0252      	lsls	r2, r2, #9
 8000d8a:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000d8c:	193b      	adds	r3, r7, r4
 8000d8e:	2280      	movs	r2, #128	@ 0x80
 8000d90:	03d2      	lsls	r2, r2, #15
 8000d92:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d94:	0021      	movs	r1, r4
 8000d96:	187b      	adds	r3, r7, r1
 8000d98:	2202      	movs	r2, #2
 8000d9a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	2203      	movs	r2, #3
 8000da0:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	2210      	movs	r2, #16
 8000da6:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	2220      	movs	r2, #32
 8000dac:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	2280      	movs	r2, #128	@ 0x80
 8000db2:	0292      	lsls	r2, r2, #10
 8000db4:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000db6:	187b      	adds	r3, r7, r1
 8000db8:	2280      	movs	r2, #128	@ 0x80
 8000dba:	0492      	lsls	r2, r2, #18
 8000dbc:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dbe:	187b      	adds	r3, r7, r1
 8000dc0:	2280      	movs	r2, #128	@ 0x80
 8000dc2:	0592      	lsls	r2, r2, #22
 8000dc4:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f003 f9e1 	bl	8004190 <HAL_RCC_OscConfig>
 8000dce:	1e03      	subs	r3, r0, #0
 8000dd0:	d001      	beq.n	8000dd6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000dd2:	f000 f8a3 	bl	8000f1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	2207      	movs	r2, #7
 8000dda:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ddc:	1d3b      	adds	r3, r7, #4
 8000dde:	2202      	movs	r2, #2
 8000de0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	2200      	movs	r2, #0
 8000dec:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	2102      	movs	r1, #2
 8000df2:	0018      	movs	r0, r3
 8000df4:	f003 fd2c 	bl	8004850 <HAL_RCC_ClockConfig>
 8000df8:	1e03      	subs	r3, r0, #0
 8000dfa:	d001      	beq.n	8000e00 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000dfc:	f000 f88e 	bl	8000f1c <Error_Handler>
  }
}
 8000e00:	46c0      	nop			@ (mov r8, r8)
 8000e02:	46bd      	mov	sp, r7
 8000e04:	b015      	add	sp, #84	@ 0x54
 8000e06:	bd90      	pop	{r4, r7, pc}

08000e08 <LS_Test>:

LS4 -> PC7
LS5 -> PA10
*/

static void LS_Test(void) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0

	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_SET) {
 8000e0c:	2380      	movs	r3, #128	@ 0x80
 8000e0e:	021b      	lsls	r3, r3, #8
 8000e10:	4a40      	ldr	r2, [pc, #256]	@ (8000f14 <LS_Test+0x10c>)
 8000e12:	0019      	movs	r1, r3
 8000e14:	0010      	movs	r0, r2
 8000e16:	f001 f9a9 	bl	800216c <HAL_GPIO_ReadPin>
 8000e1a:	0003      	movs	r3, r0
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d107      	bne.n	8000e30 <LS_Test+0x28>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000e20:	2380      	movs	r3, #128	@ 0x80
 8000e22:	019b      	lsls	r3, r3, #6
 8000e24:	483c      	ldr	r0, [pc, #240]	@ (8000f18 <LS_Test+0x110>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	0019      	movs	r1, r3
 8000e2a:	f001 f9bc 	bl	80021a6 <HAL_GPIO_WritePin>
 8000e2e:	e019      	b.n	8000e64 <LS_Test+0x5c>
	} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_SET) {
 8000e30:	2380      	movs	r3, #128	@ 0x80
 8000e32:	005a      	lsls	r2, r3, #1
 8000e34:	23a0      	movs	r3, #160	@ 0xa0
 8000e36:	05db      	lsls	r3, r3, #23
 8000e38:	0011      	movs	r1, r2
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f001 f996 	bl	800216c <HAL_GPIO_ReadPin>
 8000e40:	0003      	movs	r3, r0
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d107      	bne.n	8000e56 <LS_Test+0x4e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000e46:	2380      	movs	r3, #128	@ 0x80
 8000e48:	019b      	lsls	r3, r3, #6
 8000e4a:	4833      	ldr	r0, [pc, #204]	@ (8000f18 <LS_Test+0x110>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	0019      	movs	r1, r3
 8000e50:	f001 f9a9 	bl	80021a6 <HAL_GPIO_WritePin>
 8000e54:	e006      	b.n	8000e64 <LS_Test+0x5c>
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e56:	2380      	movs	r3, #128	@ 0x80
 8000e58:	019b      	lsls	r3, r3, #6
 8000e5a:	482f      	ldr	r0, [pc, #188]	@ (8000f18 <LS_Test+0x110>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	0019      	movs	r1, r3
 8000e60:	f001 f9a1 	bl	80021a6 <HAL_GPIO_WritePin>
	}

	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET) {
 8000e64:	2380      	movs	r3, #128	@ 0x80
 8000e66:	009a      	lsls	r2, r3, #2
 8000e68:	23a0      	movs	r3, #160	@ 0xa0
 8000e6a:	05db      	lsls	r3, r3, #23
 8000e6c:	0011      	movs	r1, r2
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f001 f97c 	bl	800216c <HAL_GPIO_ReadPin>
 8000e74:	0003      	movs	r3, r0
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d107      	bne.n	8000e8a <LS_Test+0x82>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8000e7a:	2380      	movs	r3, #128	@ 0x80
 8000e7c:	01db      	lsls	r3, r3, #7
 8000e7e:	4826      	ldr	r0, [pc, #152]	@ (8000f18 <LS_Test+0x110>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	0019      	movs	r1, r3
 8000e84:	f001 f98f 	bl	80021a6 <HAL_GPIO_WritePin>
 8000e88:	e016      	b.n	8000eb8 <LS_Test+0xb0>
		} else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_SET) {
 8000e8a:	4b23      	ldr	r3, [pc, #140]	@ (8000f18 <LS_Test+0x110>)
 8000e8c:	2140      	movs	r1, #64	@ 0x40
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f001 f96c 	bl	800216c <HAL_GPIO_ReadPin>
 8000e94:	0003      	movs	r3, r0
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d107      	bne.n	8000eaa <LS_Test+0xa2>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8000e9a:	2380      	movs	r3, #128	@ 0x80
 8000e9c:	01db      	lsls	r3, r3, #7
 8000e9e:	481e      	ldr	r0, [pc, #120]	@ (8000f18 <LS_Test+0x110>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	0019      	movs	r1, r3
 8000ea4:	f001 f97f 	bl	80021a6 <HAL_GPIO_WritePin>
 8000ea8:	e006      	b.n	8000eb8 <LS_Test+0xb0>
		} else {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000eaa:	2380      	movs	r3, #128	@ 0x80
 8000eac:	01db      	lsls	r3, r3, #7
 8000eae:	481a      	ldr	r0, [pc, #104]	@ (8000f18 <LS_Test+0x110>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	0019      	movs	r1, r3
 8000eb4:	f001 f977 	bl	80021a6 <HAL_GPIO_WritePin>
		}
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_SET) {
 8000eb8:	4b17      	ldr	r3, [pc, #92]	@ (8000f18 <LS_Test+0x110>)
 8000eba:	2180      	movs	r1, #128	@ 0x80
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f001 f955 	bl	800216c <HAL_GPIO_ReadPin>
 8000ec2:	0003      	movs	r3, r0
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d107      	bne.n	8000ed8 <LS_Test+0xd0>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8000ec8:	2380      	movs	r3, #128	@ 0x80
 8000eca:	021b      	lsls	r3, r3, #8
 8000ecc:	4812      	ldr	r0, [pc, #72]	@ (8000f18 <LS_Test+0x110>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	0019      	movs	r1, r3
 8000ed2:	f001 f968 	bl	80021a6 <HAL_GPIO_WritePin>
		} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == GPIO_PIN_SET) {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
		} else {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
		}
}
 8000ed6:	e019      	b.n	8000f0c <LS_Test+0x104>
		} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == GPIO_PIN_SET) {
 8000ed8:	2380      	movs	r3, #128	@ 0x80
 8000eda:	00da      	lsls	r2, r3, #3
 8000edc:	23a0      	movs	r3, #160	@ 0xa0
 8000ede:	05db      	lsls	r3, r3, #23
 8000ee0:	0011      	movs	r1, r2
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f001 f942 	bl	800216c <HAL_GPIO_ReadPin>
 8000ee8:	0003      	movs	r3, r0
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d107      	bne.n	8000efe <LS_Test+0xf6>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8000eee:	2380      	movs	r3, #128	@ 0x80
 8000ef0:	021b      	lsls	r3, r3, #8
 8000ef2:	4809      	ldr	r0, [pc, #36]	@ (8000f18 <LS_Test+0x110>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	0019      	movs	r1, r3
 8000ef8:	f001 f955 	bl	80021a6 <HAL_GPIO_WritePin>
}
 8000efc:	e006      	b.n	8000f0c <LS_Test+0x104>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8000efe:	2380      	movs	r3, #128	@ 0x80
 8000f00:	021b      	lsls	r3, r3, #8
 8000f02:	4805      	ldr	r0, [pc, #20]	@ (8000f18 <LS_Test+0x110>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	0019      	movs	r1, r3
 8000f08:	f001 f94d 	bl	80021a6 <HAL_GPIO_WritePin>
}
 8000f0c:	46c0      	nop			@ (mov r8, r8)
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	46c0      	nop			@ (mov r8, r8)
 8000f14:	50000400 	.word	0x50000400
 8000f18:	50000800 	.word	0x50000800

08000f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f20:	b672      	cpsid	i
}
 8000f22:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f24:	46c0      	nop			@ (mov r8, r8)
 8000f26:	e7fd      	b.n	8000f24 <Error_Handler+0x8>

08000f28 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f9c <MX_SPI1_Init+0x74>)
 8000f2e:	4a1c      	ldr	r2, [pc, #112]	@ (8000fa0 <MX_SPI1_Init+0x78>)
 8000f30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f32:	4b1a      	ldr	r3, [pc, #104]	@ (8000f9c <MX_SPI1_Init+0x74>)
 8000f34:	2282      	movs	r2, #130	@ 0x82
 8000f36:	0052      	lsls	r2, r2, #1
 8000f38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f3a:	4b18      	ldr	r3, [pc, #96]	@ (8000f9c <MX_SPI1_Init+0x74>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f40:	4b16      	ldr	r3, [pc, #88]	@ (8000f9c <MX_SPI1_Init+0x74>)
 8000f42:	22e0      	movs	r2, #224	@ 0xe0
 8000f44:	00d2      	lsls	r2, r2, #3
 8000f46:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f48:	4b14      	ldr	r3, [pc, #80]	@ (8000f9c <MX_SPI1_Init+0x74>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f4e:	4b13      	ldr	r3, [pc, #76]	@ (8000f9c <MX_SPI1_Init+0x74>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f54:	4b11      	ldr	r3, [pc, #68]	@ (8000f9c <MX_SPI1_Init+0x74>)
 8000f56:	2280      	movs	r2, #128	@ 0x80
 8000f58:	0092      	lsls	r2, r2, #2
 8000f5a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f9c <MX_SPI1_Init+0x74>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f62:	4b0e      	ldr	r3, [pc, #56]	@ (8000f9c <MX_SPI1_Init+0x74>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f68:	4b0c      	ldr	r3, [pc, #48]	@ (8000f9c <MX_SPI1_Init+0x74>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f9c <MX_SPI1_Init+0x74>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f74:	4b09      	ldr	r3, [pc, #36]	@ (8000f9c <MX_SPI1_Init+0x74>)
 8000f76:	2207      	movs	r2, #7
 8000f78:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f7a:	4b08      	ldr	r3, [pc, #32]	@ (8000f9c <MX_SPI1_Init+0x74>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f80:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <MX_SPI1_Init+0x74>)
 8000f82:	2208      	movs	r2, #8
 8000f84:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f86:	4b05      	ldr	r3, [pc, #20]	@ (8000f9c <MX_SPI1_Init+0x74>)
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f004 f847 	bl	800501c <HAL_SPI_Init>
 8000f8e:	1e03      	subs	r3, r0, #0
 8000f90:	d001      	beq.n	8000f96 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f92:	f7ff ffc3 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f96:	46c0      	nop			@ (mov r8, r8)
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	200002b8 	.word	0x200002b8
 8000fa0:	40013000 	.word	0x40013000

08000fa4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000fa4:	b590      	push	{r4, r7, lr}
 8000fa6:	b08b      	sub	sp, #44	@ 0x2c
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	2414      	movs	r4, #20
 8000fae:	193b      	adds	r3, r7, r4
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	2314      	movs	r3, #20
 8000fb4:	001a      	movs	r2, r3
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	f009 ff96 	bl	800aee8 <memset>
  if(spiHandle->Instance==SPI1)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a1b      	ldr	r2, [pc, #108]	@ (8001030 <HAL_SPI_MspInit+0x8c>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d130      	bne.n	8001028 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8001034 <HAL_SPI_MspInit+0x90>)
 8000fc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fca:	4b1a      	ldr	r3, [pc, #104]	@ (8001034 <HAL_SPI_MspInit+0x90>)
 8000fcc:	2180      	movs	r1, #128	@ 0x80
 8000fce:	0149      	lsls	r1, r1, #5
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fd4:	4b17      	ldr	r3, [pc, #92]	@ (8001034 <HAL_SPI_MspInit+0x90>)
 8000fd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fd8:	2380      	movs	r3, #128	@ 0x80
 8000fda:	015b      	lsls	r3, r3, #5
 8000fdc:	4013      	ands	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe2:	4b14      	ldr	r3, [pc, #80]	@ (8001034 <HAL_SPI_MspInit+0x90>)
 8000fe4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fe6:	4b13      	ldr	r3, [pc, #76]	@ (8001034 <HAL_SPI_MspInit+0x90>)
 8000fe8:	2101      	movs	r1, #1
 8000fea:	430a      	orrs	r2, r1
 8000fec:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fee:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <HAL_SPI_MspInit+0x90>)
 8000ff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ffa:	0021      	movs	r1, r4
 8000ffc:	187b      	adds	r3, r7, r1
 8000ffe:	22e0      	movs	r2, #224	@ 0xe0
 8001000:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	187b      	adds	r3, r7, r1
 8001004:	2202      	movs	r2, #2
 8001006:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	187b      	adds	r3, r7, r1
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	187b      	adds	r3, r7, r1
 8001010:	2200      	movs	r2, #0
 8001012:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001014:	187b      	adds	r3, r7, r1
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101a:	187a      	adds	r2, r7, r1
 800101c:	23a0      	movs	r3, #160	@ 0xa0
 800101e:	05db      	lsls	r3, r3, #23
 8001020:	0011      	movs	r1, r2
 8001022:	0018      	movs	r0, r3
 8001024:	f000 ff36 	bl	8001e94 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001028:	46c0      	nop			@ (mov r8, r8)
 800102a:	46bd      	mov	sp, r7
 800102c:	b00b      	add	sp, #44	@ 0x2c
 800102e:	bd90      	pop	{r4, r7, pc}
 8001030:	40013000 	.word	0x40013000
 8001034:	40021000 	.word	0x40021000

08001038 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103e:	4b11      	ldr	r3, [pc, #68]	@ (8001084 <HAL_MspInit+0x4c>)
 8001040:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001042:	4b10      	ldr	r3, [pc, #64]	@ (8001084 <HAL_MspInit+0x4c>)
 8001044:	2101      	movs	r1, #1
 8001046:	430a      	orrs	r2, r1
 8001048:	641a      	str	r2, [r3, #64]	@ 0x40
 800104a:	4b0e      	ldr	r3, [pc, #56]	@ (8001084 <HAL_MspInit+0x4c>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104e:	2201      	movs	r2, #1
 8001050:	4013      	ands	r3, r2
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001056:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <HAL_MspInit+0x4c>)
 8001058:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800105a:	4b0a      	ldr	r3, [pc, #40]	@ (8001084 <HAL_MspInit+0x4c>)
 800105c:	2180      	movs	r1, #128	@ 0x80
 800105e:	0549      	lsls	r1, r1, #21
 8001060:	430a      	orrs	r2, r1
 8001062:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001064:	4b07      	ldr	r3, [pc, #28]	@ (8001084 <HAL_MspInit+0x4c>)
 8001066:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001068:	2380      	movs	r3, #128	@ 0x80
 800106a:	055b      	lsls	r3, r3, #21
 800106c:	4013      	ands	r3, r2
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8001072:	23c0      	movs	r3, #192	@ 0xc0
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	0018      	movs	r0, r3
 8001078:	f000 fb5e 	bl	8001738 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107c:	46c0      	nop			@ (mov r8, r8)
 800107e:	46bd      	mov	sp, r7
 8001080:	b002      	add	sp, #8
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40021000 	.word	0x40021000

08001088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800108c:	46c0      	nop			@ (mov r8, r8)
 800108e:	e7fd      	b.n	800108c <NMI_Handler+0x4>

08001090 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001094:	46c0      	nop			@ (mov r8, r8)
 8001096:	e7fd      	b.n	8001094 <HardFault_Handler+0x4>

08001098 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800109c:	46c0      	nop			@ (mov r8, r8)
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010a6:	46c0      	nop			@ (mov r8, r8)
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b0:	f000 fb02 	bl	80016b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b4:	46c0      	nop			@ (mov r8, r8)
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <USB_UCPD1_2_IRQHandler>:

/**
  * @brief This function handles USB, UCPD1 and UCPD2 global interrupts.
  */
void USB_UCPD1_2_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_UCPD1_2_IRQn 0 */

  /* USER CODE END USB_UCPD1_2_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 80010c0:	4b03      	ldr	r3, [pc, #12]	@ (80010d0 <USB_UCPD1_2_IRQHandler+0x14>)
 80010c2:	0018      	movs	r0, r3
 80010c4:	f001 fb60 	bl	8002788 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_UCPD1_2_IRQn 1 */

  /* USER CODE END USB_UCPD1_2_IRQn 1 */
}
 80010c8:	46c0      	nop			@ (mov r8, r8)
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	46c0      	nop			@ (mov r8, r8)
 80010d0:	20001454 	.word	0x20001454

080010d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010dc:	4a14      	ldr	r2, [pc, #80]	@ (8001130 <_sbrk+0x5c>)
 80010de:	4b15      	ldr	r3, [pc, #84]	@ (8001134 <_sbrk+0x60>)
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e8:	4b13      	ldr	r3, [pc, #76]	@ (8001138 <_sbrk+0x64>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d102      	bne.n	80010f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f0:	4b11      	ldr	r3, [pc, #68]	@ (8001138 <_sbrk+0x64>)
 80010f2:	4a12      	ldr	r2, [pc, #72]	@ (800113c <_sbrk+0x68>)
 80010f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010f6:	4b10      	ldr	r3, [pc, #64]	@ (8001138 <_sbrk+0x64>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	18d3      	adds	r3, r2, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	429a      	cmp	r2, r3
 8001102:	d207      	bcs.n	8001114 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001104:	f009 fef8 	bl	800aef8 <__errno>
 8001108:	0003      	movs	r3, r0
 800110a:	220c      	movs	r2, #12
 800110c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800110e:	2301      	movs	r3, #1
 8001110:	425b      	negs	r3, r3
 8001112:	e009      	b.n	8001128 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001114:	4b08      	ldr	r3, [pc, #32]	@ (8001138 <_sbrk+0x64>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800111a:	4b07      	ldr	r3, [pc, #28]	@ (8001138 <_sbrk+0x64>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	18d2      	adds	r2, r2, r3
 8001122:	4b05      	ldr	r3, [pc, #20]	@ (8001138 <_sbrk+0x64>)
 8001124:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001126:	68fb      	ldr	r3, [r7, #12]
}
 8001128:	0018      	movs	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	b006      	add	sp, #24
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20024000 	.word	0x20024000
 8001134:	00004000 	.word	0x00004000
 8001138:	2000031c 	.word	0x2000031c
 800113c:	20001ac8 	.word	0x20001ac8

08001140 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001144:	46c0      	nop			@ (mov r8, r8)
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001150:	4b23      	ldr	r3, [pc, #140]	@ (80011e0 <MX_USART2_UART_Init+0x94>)
 8001152:	4a24      	ldr	r2, [pc, #144]	@ (80011e4 <MX_USART2_UART_Init+0x98>)
 8001154:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001156:	4b22      	ldr	r3, [pc, #136]	@ (80011e0 <MX_USART2_UART_Init+0x94>)
 8001158:	22e1      	movs	r2, #225	@ 0xe1
 800115a:	0252      	lsls	r2, r2, #9
 800115c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800115e:	4b20      	ldr	r3, [pc, #128]	@ (80011e0 <MX_USART2_UART_Init+0x94>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001164:	4b1e      	ldr	r3, [pc, #120]	@ (80011e0 <MX_USART2_UART_Init+0x94>)
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800116a:	4b1d      	ldr	r3, [pc, #116]	@ (80011e0 <MX_USART2_UART_Init+0x94>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001170:	4b1b      	ldr	r3, [pc, #108]	@ (80011e0 <MX_USART2_UART_Init+0x94>)
 8001172:	220c      	movs	r2, #12
 8001174:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001176:	4b1a      	ldr	r3, [pc, #104]	@ (80011e0 <MX_USART2_UART_Init+0x94>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800117c:	4b18      	ldr	r3, [pc, #96]	@ (80011e0 <MX_USART2_UART_Init+0x94>)
 800117e:	2200      	movs	r2, #0
 8001180:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001182:	4b17      	ldr	r3, [pc, #92]	@ (80011e0 <MX_USART2_UART_Init+0x94>)
 8001184:	2200      	movs	r2, #0
 8001186:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001188:	4b15      	ldr	r3, [pc, #84]	@ (80011e0 <MX_USART2_UART_Init+0x94>)
 800118a:	2200      	movs	r2, #0
 800118c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800118e:	4b14      	ldr	r3, [pc, #80]	@ (80011e0 <MX_USART2_UART_Init+0x94>)
 8001190:	2200      	movs	r2, #0
 8001192:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001194:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <MX_USART2_UART_Init+0x94>)
 8001196:	0018      	movs	r0, r3
 8001198:	f003 fff8 	bl	800518c <HAL_UART_Init>
 800119c:	1e03      	subs	r3, r0, #0
 800119e:	d001      	beq.n	80011a4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80011a0:	f7ff febc 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011a4:	4b0e      	ldr	r3, [pc, #56]	@ (80011e0 <MX_USART2_UART_Init+0x94>)
 80011a6:	2100      	movs	r1, #0
 80011a8:	0018      	movs	r0, r3
 80011aa:	f004 fe3b 	bl	8005e24 <HAL_UARTEx_SetTxFifoThreshold>
 80011ae:	1e03      	subs	r3, r0, #0
 80011b0:	d001      	beq.n	80011b6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80011b2:	f7ff feb3 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011b6:	4b0a      	ldr	r3, [pc, #40]	@ (80011e0 <MX_USART2_UART_Init+0x94>)
 80011b8:	2100      	movs	r1, #0
 80011ba:	0018      	movs	r0, r3
 80011bc:	f004 fe72 	bl	8005ea4 <HAL_UARTEx_SetRxFifoThreshold>
 80011c0:	1e03      	subs	r3, r0, #0
 80011c2:	d001      	beq.n	80011c8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80011c4:	f7ff feaa 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80011c8:	4b05      	ldr	r3, [pc, #20]	@ (80011e0 <MX_USART2_UART_Init+0x94>)
 80011ca:	0018      	movs	r0, r3
 80011cc:	f004 fdf0 	bl	8005db0 <HAL_UARTEx_DisableFifoMode>
 80011d0:	1e03      	subs	r3, r0, #0
 80011d2:	d001      	beq.n	80011d8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80011d4:	f7ff fea2 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011d8:	46c0      	nop			@ (mov r8, r8)
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	46c0      	nop			@ (mov r8, r8)
 80011e0:	20000320 	.word	0x20000320
 80011e4:	40004400 	.word	0x40004400

080011e8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011ec:	4b23      	ldr	r3, [pc, #140]	@ (800127c <MX_USART3_UART_Init+0x94>)
 80011ee:	4a24      	ldr	r2, [pc, #144]	@ (8001280 <MX_USART3_UART_Init+0x98>)
 80011f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011f2:	4b22      	ldr	r3, [pc, #136]	@ (800127c <MX_USART3_UART_Init+0x94>)
 80011f4:	22e1      	movs	r2, #225	@ 0xe1
 80011f6:	0252      	lsls	r2, r2, #9
 80011f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011fa:	4b20      	ldr	r3, [pc, #128]	@ (800127c <MX_USART3_UART_Init+0x94>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001200:	4b1e      	ldr	r3, [pc, #120]	@ (800127c <MX_USART3_UART_Init+0x94>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001206:	4b1d      	ldr	r3, [pc, #116]	@ (800127c <MX_USART3_UART_Init+0x94>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800120c:	4b1b      	ldr	r3, [pc, #108]	@ (800127c <MX_USART3_UART_Init+0x94>)
 800120e:	220c      	movs	r2, #12
 8001210:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001212:	4b1a      	ldr	r3, [pc, #104]	@ (800127c <MX_USART3_UART_Init+0x94>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001218:	4b18      	ldr	r3, [pc, #96]	@ (800127c <MX_USART3_UART_Init+0x94>)
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800121e:	4b17      	ldr	r3, [pc, #92]	@ (800127c <MX_USART3_UART_Init+0x94>)
 8001220:	2200      	movs	r2, #0
 8001222:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001224:	4b15      	ldr	r3, [pc, #84]	@ (800127c <MX_USART3_UART_Init+0x94>)
 8001226:	2200      	movs	r2, #0
 8001228:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800122a:	4b14      	ldr	r3, [pc, #80]	@ (800127c <MX_USART3_UART_Init+0x94>)
 800122c:	2200      	movs	r2, #0
 800122e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001230:	4b12      	ldr	r3, [pc, #72]	@ (800127c <MX_USART3_UART_Init+0x94>)
 8001232:	0018      	movs	r0, r3
 8001234:	f003 ffaa 	bl	800518c <HAL_UART_Init>
 8001238:	1e03      	subs	r3, r0, #0
 800123a:	d001      	beq.n	8001240 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800123c:	f7ff fe6e 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001240:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <MX_USART3_UART_Init+0x94>)
 8001242:	2100      	movs	r1, #0
 8001244:	0018      	movs	r0, r3
 8001246:	f004 fded 	bl	8005e24 <HAL_UARTEx_SetTxFifoThreshold>
 800124a:	1e03      	subs	r3, r0, #0
 800124c:	d001      	beq.n	8001252 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800124e:	f7ff fe65 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001252:	4b0a      	ldr	r3, [pc, #40]	@ (800127c <MX_USART3_UART_Init+0x94>)
 8001254:	2100      	movs	r1, #0
 8001256:	0018      	movs	r0, r3
 8001258:	f004 fe24 	bl	8005ea4 <HAL_UARTEx_SetRxFifoThreshold>
 800125c:	1e03      	subs	r3, r0, #0
 800125e:	d001      	beq.n	8001264 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001260:	f7ff fe5c 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001264:	4b05      	ldr	r3, [pc, #20]	@ (800127c <MX_USART3_UART_Init+0x94>)
 8001266:	0018      	movs	r0, r3
 8001268:	f004 fda2 	bl	8005db0 <HAL_UARTEx_DisableFifoMode>
 800126c:	1e03      	subs	r3, r0, #0
 800126e:	d001      	beq.n	8001274 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001270:	f7ff fe54 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001274:	46c0      	nop			@ (mov r8, r8)
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	46c0      	nop			@ (mov r8, r8)
 800127c:	200003b4 	.word	0x200003b4
 8001280:	40004800 	.word	0x40004800

08001284 <MX_USART5_UART_Init>:
/* USART5 init function */

void MX_USART5_UART_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8001288:	4b16      	ldr	r3, [pc, #88]	@ (80012e4 <MX_USART5_UART_Init+0x60>)
 800128a:	4a17      	ldr	r2, [pc, #92]	@ (80012e8 <MX_USART5_UART_Init+0x64>)
 800128c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800128e:	4b15      	ldr	r3, [pc, #84]	@ (80012e4 <MX_USART5_UART_Init+0x60>)
 8001290:	22e1      	movs	r2, #225	@ 0xe1
 8001292:	0252      	lsls	r2, r2, #9
 8001294:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001296:	4b13      	ldr	r3, [pc, #76]	@ (80012e4 <MX_USART5_UART_Init+0x60>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800129c:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <MX_USART5_UART_Init+0x60>)
 800129e:	2200      	movs	r2, #0
 80012a0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80012a2:	4b10      	ldr	r3, [pc, #64]	@ (80012e4 <MX_USART5_UART_Init+0x60>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80012a8:	4b0e      	ldr	r3, [pc, #56]	@ (80012e4 <MX_USART5_UART_Init+0x60>)
 80012aa:	220c      	movs	r2, #12
 80012ac:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ae:	4b0d      	ldr	r3, [pc, #52]	@ (80012e4 <MX_USART5_UART_Init+0x60>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b4:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <MX_USART5_UART_Init+0x60>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ba:	4b0a      	ldr	r3, [pc, #40]	@ (80012e4 <MX_USART5_UART_Init+0x60>)
 80012bc:	2200      	movs	r2, #0
 80012be:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012c0:	4b08      	ldr	r3, [pc, #32]	@ (80012e4 <MX_USART5_UART_Init+0x60>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012c6:	4b07      	ldr	r3, [pc, #28]	@ (80012e4 <MX_USART5_UART_Init+0x60>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80012cc:	4b05      	ldr	r3, [pc, #20]	@ (80012e4 <MX_USART5_UART_Init+0x60>)
 80012ce:	0018      	movs	r0, r3
 80012d0:	f003 ff5c 	bl	800518c <HAL_UART_Init>
 80012d4:	1e03      	subs	r3, r0, #0
 80012d6:	d001      	beq.n	80012dc <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 80012d8:	f7ff fe20 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 80012dc:	46c0      	nop			@ (mov r8, r8)
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	46c0      	nop			@ (mov r8, r8)
 80012e4:	20000448 	.word	0x20000448
 80012e8:	40005000 	.word	0x40005000

080012ec <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80012f0:	4b16      	ldr	r3, [pc, #88]	@ (800134c <MX_USART6_UART_Init+0x60>)
 80012f2:	4a17      	ldr	r2, [pc, #92]	@ (8001350 <MX_USART6_UART_Init+0x64>)
 80012f4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80012f6:	4b15      	ldr	r3, [pc, #84]	@ (800134c <MX_USART6_UART_Init+0x60>)
 80012f8:	22e1      	movs	r2, #225	@ 0xe1
 80012fa:	0252      	lsls	r2, r2, #9
 80012fc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80012fe:	4b13      	ldr	r3, [pc, #76]	@ (800134c <MX_USART6_UART_Init+0x60>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001304:	4b11      	ldr	r3, [pc, #68]	@ (800134c <MX_USART6_UART_Init+0x60>)
 8001306:	2200      	movs	r2, #0
 8001308:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800130a:	4b10      	ldr	r3, [pc, #64]	@ (800134c <MX_USART6_UART_Init+0x60>)
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001310:	4b0e      	ldr	r3, [pc, #56]	@ (800134c <MX_USART6_UART_Init+0x60>)
 8001312:	220c      	movs	r2, #12
 8001314:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001316:	4b0d      	ldr	r3, [pc, #52]	@ (800134c <MX_USART6_UART_Init+0x60>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800131c:	4b0b      	ldr	r3, [pc, #44]	@ (800134c <MX_USART6_UART_Init+0x60>)
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001322:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <MX_USART6_UART_Init+0x60>)
 8001324:	2200      	movs	r2, #0
 8001326:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001328:	4b08      	ldr	r3, [pc, #32]	@ (800134c <MX_USART6_UART_Init+0x60>)
 800132a:	2200      	movs	r2, #0
 800132c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800132e:	4b07      	ldr	r3, [pc, #28]	@ (800134c <MX_USART6_UART_Init+0x60>)
 8001330:	2200      	movs	r2, #0
 8001332:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001334:	4b05      	ldr	r3, [pc, #20]	@ (800134c <MX_USART6_UART_Init+0x60>)
 8001336:	0018      	movs	r0, r3
 8001338:	f003 ff28 	bl	800518c <HAL_UART_Init>
 800133c:	1e03      	subs	r3, r0, #0
 800133e:	d001      	beq.n	8001344 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8001340:	f7ff fdec 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001344:	46c0      	nop			@ (mov r8, r8)
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	46c0      	nop			@ (mov r8, r8)
 800134c:	200004dc 	.word	0x200004dc
 8001350:	40013c00 	.word	0x40013c00

08001354 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001354:	b590      	push	{r4, r7, lr}
 8001356:	b0a3      	sub	sp, #140	@ 0x8c
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	2374      	movs	r3, #116	@ 0x74
 800135e:	18fb      	adds	r3, r7, r3
 8001360:	0018      	movs	r0, r3
 8001362:	2314      	movs	r3, #20
 8001364:	001a      	movs	r2, r3
 8001366:	2100      	movs	r1, #0
 8001368:	f009 fdbe 	bl	800aee8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800136c:	2428      	movs	r4, #40	@ 0x28
 800136e:	193b      	adds	r3, r7, r4
 8001370:	0018      	movs	r0, r3
 8001372:	234c      	movs	r3, #76	@ 0x4c
 8001374:	001a      	movs	r2, r3
 8001376:	2100      	movs	r1, #0
 8001378:	f009 fdb6 	bl	800aee8 <memset>
  if(uartHandle->Instance==USART2)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a7c      	ldr	r2, [pc, #496]	@ (8001574 <HAL_UART_MspInit+0x220>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d13f      	bne.n	8001406 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001386:	193b      	adds	r3, r7, r4
 8001388:	2202      	movs	r2, #2
 800138a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800138c:	193b      	adds	r3, r7, r4
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001392:	193b      	adds	r3, r7, r4
 8001394:	0018      	movs	r0, r3
 8001396:	f003 fc05 	bl	8004ba4 <HAL_RCCEx_PeriphCLKConfig>
 800139a:	1e03      	subs	r3, r0, #0
 800139c:	d001      	beq.n	80013a2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800139e:	f7ff fdbd 	bl	8000f1c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013a2:	4b75      	ldr	r3, [pc, #468]	@ (8001578 <HAL_UART_MspInit+0x224>)
 80013a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013a6:	4b74      	ldr	r3, [pc, #464]	@ (8001578 <HAL_UART_MspInit+0x224>)
 80013a8:	2180      	movs	r1, #128	@ 0x80
 80013aa:	0289      	lsls	r1, r1, #10
 80013ac:	430a      	orrs	r2, r1
 80013ae:	63da      	str	r2, [r3, #60]	@ 0x3c
 80013b0:	4b71      	ldr	r3, [pc, #452]	@ (8001578 <HAL_UART_MspInit+0x224>)
 80013b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013b4:	2380      	movs	r3, #128	@ 0x80
 80013b6:	029b      	lsls	r3, r3, #10
 80013b8:	4013      	ands	r3, r2
 80013ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80013bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013be:	4b6e      	ldr	r3, [pc, #440]	@ (8001578 <HAL_UART_MspInit+0x224>)
 80013c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013c2:	4b6d      	ldr	r3, [pc, #436]	@ (8001578 <HAL_UART_MspInit+0x224>)
 80013c4:	2101      	movs	r1, #1
 80013c6:	430a      	orrs	r2, r1
 80013c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80013ca:	4b6b      	ldr	r3, [pc, #428]	@ (8001578 <HAL_UART_MspInit+0x224>)
 80013cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013ce:	2201      	movs	r2, #1
 80013d0:	4013      	ands	r3, r2
 80013d2:	623b      	str	r3, [r7, #32]
 80013d4:	6a3b      	ldr	r3, [r7, #32]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013d6:	2174      	movs	r1, #116	@ 0x74
 80013d8:	187b      	adds	r3, r7, r1
 80013da:	220c      	movs	r2, #12
 80013dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	187b      	adds	r3, r7, r1
 80013e0:	2202      	movs	r2, #2
 80013e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	187b      	adds	r3, r7, r1
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	187b      	adds	r3, r7, r1
 80013ec:	2200      	movs	r2, #0
 80013ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80013f0:	187b      	adds	r3, r7, r1
 80013f2:	2201      	movs	r2, #1
 80013f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f6:	187a      	adds	r2, r7, r1
 80013f8:	23a0      	movs	r3, #160	@ 0xa0
 80013fa:	05db      	lsls	r3, r3, #23
 80013fc:	0011      	movs	r1, r2
 80013fe:	0018      	movs	r0, r3
 8001400:	f000 fd48 	bl	8001e94 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001404:	e0b1      	b.n	800156a <HAL_UART_MspInit+0x216>
  else if(uartHandle->Instance==USART3)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a5c      	ldr	r2, [pc, #368]	@ (800157c <HAL_UART_MspInit+0x228>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d140      	bne.n	8001492 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001410:	2128      	movs	r1, #40	@ 0x28
 8001412:	187b      	adds	r3, r7, r1
 8001414:	2204      	movs	r2, #4
 8001416:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001418:	187b      	adds	r3, r7, r1
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800141e:	187b      	adds	r3, r7, r1
 8001420:	0018      	movs	r0, r3
 8001422:	f003 fbbf 	bl	8004ba4 <HAL_RCCEx_PeriphCLKConfig>
 8001426:	1e03      	subs	r3, r0, #0
 8001428:	d001      	beq.n	800142e <HAL_UART_MspInit+0xda>
      Error_Handler();
 800142a:	f7ff fd77 	bl	8000f1c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800142e:	4b52      	ldr	r3, [pc, #328]	@ (8001578 <HAL_UART_MspInit+0x224>)
 8001430:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001432:	4b51      	ldr	r3, [pc, #324]	@ (8001578 <HAL_UART_MspInit+0x224>)
 8001434:	2180      	movs	r1, #128	@ 0x80
 8001436:	02c9      	lsls	r1, r1, #11
 8001438:	430a      	orrs	r2, r1
 800143a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800143c:	4b4e      	ldr	r3, [pc, #312]	@ (8001578 <HAL_UART_MspInit+0x224>)
 800143e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001440:	2380      	movs	r3, #128	@ 0x80
 8001442:	02db      	lsls	r3, r3, #11
 8001444:	4013      	ands	r3, r2
 8001446:	61fb      	str	r3, [r7, #28]
 8001448:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144a:	4b4b      	ldr	r3, [pc, #300]	@ (8001578 <HAL_UART_MspInit+0x224>)
 800144c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800144e:	4b4a      	ldr	r3, [pc, #296]	@ (8001578 <HAL_UART_MspInit+0x224>)
 8001450:	2102      	movs	r1, #2
 8001452:	430a      	orrs	r2, r1
 8001454:	635a      	str	r2, [r3, #52]	@ 0x34
 8001456:	4b48      	ldr	r3, [pc, #288]	@ (8001578 <HAL_UART_MspInit+0x224>)
 8001458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800145a:	2202      	movs	r2, #2
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
 8001460:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001462:	2174      	movs	r1, #116	@ 0x74
 8001464:	187b      	adds	r3, r7, r1
 8001466:	22c0      	movs	r2, #192	@ 0xc0
 8001468:	0112      	lsls	r2, r2, #4
 800146a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	187b      	adds	r3, r7, r1
 800146e:	2202      	movs	r2, #2
 8001470:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	187b      	adds	r3, r7, r1
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	187b      	adds	r3, r7, r1
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800147e:	187b      	adds	r3, r7, r1
 8001480:	2204      	movs	r2, #4
 8001482:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001484:	187b      	adds	r3, r7, r1
 8001486:	4a3e      	ldr	r2, [pc, #248]	@ (8001580 <HAL_UART_MspInit+0x22c>)
 8001488:	0019      	movs	r1, r3
 800148a:	0010      	movs	r0, r2
 800148c:	f000 fd02 	bl	8001e94 <HAL_GPIO_Init>
}
 8001490:	e06b      	b.n	800156a <HAL_UART_MspInit+0x216>
  else if(uartHandle->Instance==USART5)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a3b      	ldr	r2, [pc, #236]	@ (8001584 <HAL_UART_MspInit+0x230>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d130      	bne.n	80014fe <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART5_CLK_ENABLE();
 800149c:	4b36      	ldr	r3, [pc, #216]	@ (8001578 <HAL_UART_MspInit+0x224>)
 800149e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014a0:	4b35      	ldr	r3, [pc, #212]	@ (8001578 <HAL_UART_MspInit+0x224>)
 80014a2:	2180      	movs	r1, #128	@ 0x80
 80014a4:	0049      	lsls	r1, r1, #1
 80014a6:	430a      	orrs	r2, r1
 80014a8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80014aa:	4b33      	ldr	r3, [pc, #204]	@ (8001578 <HAL_UART_MspInit+0x224>)
 80014ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014ae:	2380      	movs	r3, #128	@ 0x80
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	4013      	ands	r3, r2
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001578 <HAL_UART_MspInit+0x224>)
 80014ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001578 <HAL_UART_MspInit+0x224>)
 80014be:	2108      	movs	r1, #8
 80014c0:	430a      	orrs	r2, r1
 80014c2:	635a      	str	r2, [r3, #52]	@ 0x34
 80014c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001578 <HAL_UART_MspInit+0x224>)
 80014c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014c8:	2208      	movs	r2, #8
 80014ca:	4013      	ands	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014d0:	2174      	movs	r1, #116	@ 0x74
 80014d2:	187b      	adds	r3, r7, r1
 80014d4:	220c      	movs	r2, #12
 80014d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	187b      	adds	r3, r7, r1
 80014da:	2202      	movs	r2, #2
 80014dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	187b      	adds	r3, r7, r1
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e4:	187b      	adds	r3, r7, r1
 80014e6:	2200      	movs	r2, #0
 80014e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 80014ea:	187b      	adds	r3, r7, r1
 80014ec:	2203      	movs	r2, #3
 80014ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f0:	187b      	adds	r3, r7, r1
 80014f2:	4a25      	ldr	r2, [pc, #148]	@ (8001588 <HAL_UART_MspInit+0x234>)
 80014f4:	0019      	movs	r1, r3
 80014f6:	0010      	movs	r0, r2
 80014f8:	f000 fccc 	bl	8001e94 <HAL_GPIO_Init>
}
 80014fc:	e035      	b.n	800156a <HAL_UART_MspInit+0x216>
  else if(uartHandle->Instance==USART6)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a22      	ldr	r2, [pc, #136]	@ (800158c <HAL_UART_MspInit+0x238>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d130      	bne.n	800156a <HAL_UART_MspInit+0x216>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001508:	4b1b      	ldr	r3, [pc, #108]	@ (8001578 <HAL_UART_MspInit+0x224>)
 800150a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800150c:	4b1a      	ldr	r3, [pc, #104]	@ (8001578 <HAL_UART_MspInit+0x224>)
 800150e:	2180      	movs	r1, #128	@ 0x80
 8001510:	0089      	lsls	r1, r1, #2
 8001512:	430a      	orrs	r2, r1
 8001514:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001516:	4b18      	ldr	r3, [pc, #96]	@ (8001578 <HAL_UART_MspInit+0x224>)
 8001518:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800151a:	2380      	movs	r3, #128	@ 0x80
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4013      	ands	r3, r2
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001524:	4b14      	ldr	r3, [pc, #80]	@ (8001578 <HAL_UART_MspInit+0x224>)
 8001526:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001528:	4b13      	ldr	r3, [pc, #76]	@ (8001578 <HAL_UART_MspInit+0x224>)
 800152a:	2102      	movs	r1, #2
 800152c:	430a      	orrs	r2, r1
 800152e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001530:	4b11      	ldr	r3, [pc, #68]	@ (8001578 <HAL_UART_MspInit+0x224>)
 8001532:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001534:	2202      	movs	r2, #2
 8001536:	4013      	ands	r3, r2
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800153c:	2174      	movs	r1, #116	@ 0x74
 800153e:	187b      	adds	r3, r7, r1
 8001540:	22c0      	movs	r2, #192	@ 0xc0
 8001542:	0092      	lsls	r2, r2, #2
 8001544:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	187b      	adds	r3, r7, r1
 8001548:	2202      	movs	r2, #2
 800154a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	187b      	adds	r3, r7, r1
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001552:	187b      	adds	r3, r7, r1
 8001554:	2200      	movs	r2, #0
 8001556:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001558:	187b      	adds	r3, r7, r1
 800155a:	2208      	movs	r2, #8
 800155c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155e:	187b      	adds	r3, r7, r1
 8001560:	4a07      	ldr	r2, [pc, #28]	@ (8001580 <HAL_UART_MspInit+0x22c>)
 8001562:	0019      	movs	r1, r3
 8001564:	0010      	movs	r0, r2
 8001566:	f000 fc95 	bl	8001e94 <HAL_GPIO_Init>
}
 800156a:	46c0      	nop			@ (mov r8, r8)
 800156c:	46bd      	mov	sp, r7
 800156e:	b023      	add	sp, #140	@ 0x8c
 8001570:	bd90      	pop	{r4, r7, pc}
 8001572:	46c0      	nop			@ (mov r8, r8)
 8001574:	40004400 	.word	0x40004400
 8001578:	40021000 	.word	0x40021000
 800157c:	40004800 	.word	0x40004800
 8001580:	50000400 	.word	0x50000400
 8001584:	40005000 	.word	0x40005000
 8001588:	50000c00 	.word	0x50000c00
 800158c:	40013c00 	.word	0x40013c00

08001590 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001590:	480d      	ldr	r0, [pc, #52]	@ (80015c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001592:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001594:	f7ff fdd4 	bl	8001140 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001598:	480c      	ldr	r0, [pc, #48]	@ (80015cc <LoopForever+0x6>)
  ldr r1, =_edata
 800159a:	490d      	ldr	r1, [pc, #52]	@ (80015d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800159c:	4a0d      	ldr	r2, [pc, #52]	@ (80015d4 <LoopForever+0xe>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a0:	e002      	b.n	80015a8 <LoopCopyDataInit>

080015a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015a6:	3304      	adds	r3, #4

080015a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015ac:	d3f9      	bcc.n	80015a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ae:	4a0a      	ldr	r2, [pc, #40]	@ (80015d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015b0:	4c0a      	ldr	r4, [pc, #40]	@ (80015dc <LoopForever+0x16>)
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b4:	e001      	b.n	80015ba <LoopFillZerobss>

080015b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b8:	3204      	adds	r2, #4

080015ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015bc:	d3fb      	bcc.n	80015b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80015be:	f009 fca1 	bl	800af04 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80015c2:	f7ff fb03 	bl	8000bcc <main>

080015c6 <LoopForever>:

LoopForever:
  b LoopForever
 80015c6:	e7fe      	b.n	80015c6 <LoopForever>
  ldr   r0, =_estack
 80015c8:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80015cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d0:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80015d4:	0800ba5c 	.word	0x0800ba5c
  ldr r2, =_sbss
 80015d8:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80015dc:	20001ac4 	.word	0x20001ac4

080015e0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015e0:	e7fe      	b.n	80015e0 <ADC1_COMP_IRQHandler>
	...

080015e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015ea:	1dfb      	adds	r3, r7, #7
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001620 <HAL_Init+0x3c>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001620 <HAL_Init+0x3c>)
 80015f6:	2180      	movs	r1, #128	@ 0x80
 80015f8:	0049      	lsls	r1, r1, #1
 80015fa:	430a      	orrs	r2, r1
 80015fc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015fe:	2003      	movs	r0, #3
 8001600:	f000 f810 	bl	8001624 <HAL_InitTick>
 8001604:	1e03      	subs	r3, r0, #0
 8001606:	d003      	beq.n	8001610 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001608:	1dfb      	adds	r3, r7, #7
 800160a:	2201      	movs	r2, #1
 800160c:	701a      	strb	r2, [r3, #0]
 800160e:	e001      	b.n	8001614 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001610:	f7ff fd12 	bl	8001038 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001614:	1dfb      	adds	r3, r7, #7
 8001616:	781b      	ldrb	r3, [r3, #0]
}
 8001618:	0018      	movs	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	b002      	add	sp, #8
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40022000 	.word	0x40022000

08001624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001624:	b590      	push	{r4, r7, lr}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800162c:	230f      	movs	r3, #15
 800162e:	18fb      	adds	r3, r7, r3
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001634:	4b1d      	ldr	r3, [pc, #116]	@ (80016ac <HAL_InitTick+0x88>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d02b      	beq.n	8001694 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800163c:	4b1c      	ldr	r3, [pc, #112]	@ (80016b0 <HAL_InitTick+0x8c>)
 800163e:	681c      	ldr	r4, [r3, #0]
 8001640:	4b1a      	ldr	r3, [pc, #104]	@ (80016ac <HAL_InitTick+0x88>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	0019      	movs	r1, r3
 8001646:	23fa      	movs	r3, #250	@ 0xfa
 8001648:	0098      	lsls	r0, r3, #2
 800164a:	f7fe fd6d 	bl	8000128 <__udivsi3>
 800164e:	0003      	movs	r3, r0
 8001650:	0019      	movs	r1, r3
 8001652:	0020      	movs	r0, r4
 8001654:	f7fe fd68 	bl	8000128 <__udivsi3>
 8001658:	0003      	movs	r3, r0
 800165a:	0018      	movs	r0, r3
 800165c:	f000 f953 	bl	8001906 <HAL_SYSTICK_Config>
 8001660:	1e03      	subs	r3, r0, #0
 8001662:	d112      	bne.n	800168a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b03      	cmp	r3, #3
 8001668:	d80a      	bhi.n	8001680 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	2301      	movs	r3, #1
 800166e:	425b      	negs	r3, r3
 8001670:	2200      	movs	r2, #0
 8001672:	0018      	movs	r0, r3
 8001674:	f000 f922 	bl	80018bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001678:	4b0e      	ldr	r3, [pc, #56]	@ (80016b4 <HAL_InitTick+0x90>)
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	e00d      	b.n	800169c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001680:	230f      	movs	r3, #15
 8001682:	18fb      	adds	r3, r7, r3
 8001684:	2201      	movs	r2, #1
 8001686:	701a      	strb	r2, [r3, #0]
 8001688:	e008      	b.n	800169c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800168a:	230f      	movs	r3, #15
 800168c:	18fb      	adds	r3, r7, r3
 800168e:	2201      	movs	r2, #1
 8001690:	701a      	strb	r2, [r3, #0]
 8001692:	e003      	b.n	800169c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001694:	230f      	movs	r3, #15
 8001696:	18fb      	adds	r3, r7, r3
 8001698:	2201      	movs	r2, #1
 800169a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800169c:	230f      	movs	r3, #15
 800169e:	18fb      	adds	r3, r7, r3
 80016a0:	781b      	ldrb	r3, [r3, #0]
}
 80016a2:	0018      	movs	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	b005      	add	sp, #20
 80016a8:	bd90      	pop	{r4, r7, pc}
 80016aa:	46c0      	nop			@ (mov r8, r8)
 80016ac:	20000038 	.word	0x20000038
 80016b0:	20000030 	.word	0x20000030
 80016b4:	20000034 	.word	0x20000034

080016b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016bc:	4b05      	ldr	r3, [pc, #20]	@ (80016d4 <HAL_IncTick+0x1c>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	001a      	movs	r2, r3
 80016c2:	4b05      	ldr	r3, [pc, #20]	@ (80016d8 <HAL_IncTick+0x20>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	18d2      	adds	r2, r2, r3
 80016c8:	4b03      	ldr	r3, [pc, #12]	@ (80016d8 <HAL_IncTick+0x20>)
 80016ca:	601a      	str	r2, [r3, #0]
}
 80016cc:	46c0      	nop			@ (mov r8, r8)
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	46c0      	nop			@ (mov r8, r8)
 80016d4:	20000038 	.word	0x20000038
 80016d8:	20000570 	.word	0x20000570

080016dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  return uwTick;
 80016e0:	4b02      	ldr	r3, [pc, #8]	@ (80016ec <HAL_GetTick+0x10>)
 80016e2:	681b      	ldr	r3, [r3, #0]
}
 80016e4:	0018      	movs	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	46c0      	nop			@ (mov r8, r8)
 80016ec:	20000570 	.word	0x20000570

080016f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016f8:	f7ff fff0 	bl	80016dc <HAL_GetTick>
 80016fc:	0003      	movs	r3, r0
 80016fe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	3301      	adds	r3, #1
 8001708:	d005      	beq.n	8001716 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800170a:	4b0a      	ldr	r3, [pc, #40]	@ (8001734 <HAL_Delay+0x44>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	001a      	movs	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	189b      	adds	r3, r3, r2
 8001714:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001716:	46c0      	nop			@ (mov r8, r8)
 8001718:	f7ff ffe0 	bl	80016dc <HAL_GetTick>
 800171c:	0002      	movs	r2, r0
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	429a      	cmp	r2, r3
 8001726:	d8f7      	bhi.n	8001718 <HAL_Delay+0x28>
  {
  }
}
 8001728:	46c0      	nop			@ (mov r8, r8)
 800172a:	46c0      	nop			@ (mov r8, r8)
 800172c:	46bd      	mov	sp, r7
 800172e:	b004      	add	sp, #16
 8001730:	bd80      	pop	{r7, pc}
 8001732:	46c0      	nop			@ (mov r8, r8)
 8001734:	20000038 	.word	0x20000038

08001738 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001740:	4b06      	ldr	r3, [pc, #24]	@ (800175c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a06      	ldr	r2, [pc, #24]	@ (8001760 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001746:	4013      	ands	r3, r2
 8001748:	0019      	movs	r1, r3
 800174a:	4b04      	ldr	r3, [pc, #16]	@ (800175c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	430a      	orrs	r2, r1
 8001750:	601a      	str	r2, [r3, #0]
}
 8001752:	46c0      	nop			@ (mov r8, r8)
 8001754:	46bd      	mov	sp, r7
 8001756:	b002      	add	sp, #8
 8001758:	bd80      	pop	{r7, pc}
 800175a:	46c0      	nop			@ (mov r8, r8)
 800175c:	40010000 	.word	0x40010000
 8001760:	fffff9ff 	.word	0xfffff9ff

08001764 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	0002      	movs	r2, r0
 800176c:	1dfb      	adds	r3, r7, #7
 800176e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001770:	1dfb      	adds	r3, r7, #7
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b7f      	cmp	r3, #127	@ 0x7f
 8001776:	d809      	bhi.n	800178c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001778:	1dfb      	adds	r3, r7, #7
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	001a      	movs	r2, r3
 800177e:	231f      	movs	r3, #31
 8001780:	401a      	ands	r2, r3
 8001782:	4b04      	ldr	r3, [pc, #16]	@ (8001794 <__NVIC_EnableIRQ+0x30>)
 8001784:	2101      	movs	r1, #1
 8001786:	4091      	lsls	r1, r2
 8001788:	000a      	movs	r2, r1
 800178a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800178c:	46c0      	nop			@ (mov r8, r8)
 800178e:	46bd      	mov	sp, r7
 8001790:	b002      	add	sp, #8
 8001792:	bd80      	pop	{r7, pc}
 8001794:	e000e100 	.word	0xe000e100

08001798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001798:	b590      	push	{r4, r7, lr}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	0002      	movs	r2, r0
 80017a0:	6039      	str	r1, [r7, #0]
 80017a2:	1dfb      	adds	r3, r7, #7
 80017a4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017a6:	1dfb      	adds	r3, r7, #7
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80017ac:	d828      	bhi.n	8001800 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017ae:	4a2f      	ldr	r2, [pc, #188]	@ (800186c <__NVIC_SetPriority+0xd4>)
 80017b0:	1dfb      	adds	r3, r7, #7
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	b25b      	sxtb	r3, r3
 80017b6:	089b      	lsrs	r3, r3, #2
 80017b8:	33c0      	adds	r3, #192	@ 0xc0
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	589b      	ldr	r3, [r3, r2]
 80017be:	1dfa      	adds	r2, r7, #7
 80017c0:	7812      	ldrb	r2, [r2, #0]
 80017c2:	0011      	movs	r1, r2
 80017c4:	2203      	movs	r2, #3
 80017c6:	400a      	ands	r2, r1
 80017c8:	00d2      	lsls	r2, r2, #3
 80017ca:	21ff      	movs	r1, #255	@ 0xff
 80017cc:	4091      	lsls	r1, r2
 80017ce:	000a      	movs	r2, r1
 80017d0:	43d2      	mvns	r2, r2
 80017d2:	401a      	ands	r2, r3
 80017d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	019b      	lsls	r3, r3, #6
 80017da:	22ff      	movs	r2, #255	@ 0xff
 80017dc:	401a      	ands	r2, r3
 80017de:	1dfb      	adds	r3, r7, #7
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	0018      	movs	r0, r3
 80017e4:	2303      	movs	r3, #3
 80017e6:	4003      	ands	r3, r0
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017ec:	481f      	ldr	r0, [pc, #124]	@ (800186c <__NVIC_SetPriority+0xd4>)
 80017ee:	1dfb      	adds	r3, r7, #7
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	b25b      	sxtb	r3, r3
 80017f4:	089b      	lsrs	r3, r3, #2
 80017f6:	430a      	orrs	r2, r1
 80017f8:	33c0      	adds	r3, #192	@ 0xc0
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80017fe:	e031      	b.n	8001864 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001800:	4a1b      	ldr	r2, [pc, #108]	@ (8001870 <__NVIC_SetPriority+0xd8>)
 8001802:	1dfb      	adds	r3, r7, #7
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	0019      	movs	r1, r3
 8001808:	230f      	movs	r3, #15
 800180a:	400b      	ands	r3, r1
 800180c:	3b08      	subs	r3, #8
 800180e:	089b      	lsrs	r3, r3, #2
 8001810:	3306      	adds	r3, #6
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	18d3      	adds	r3, r2, r3
 8001816:	3304      	adds	r3, #4
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	1dfa      	adds	r2, r7, #7
 800181c:	7812      	ldrb	r2, [r2, #0]
 800181e:	0011      	movs	r1, r2
 8001820:	2203      	movs	r2, #3
 8001822:	400a      	ands	r2, r1
 8001824:	00d2      	lsls	r2, r2, #3
 8001826:	21ff      	movs	r1, #255	@ 0xff
 8001828:	4091      	lsls	r1, r2
 800182a:	000a      	movs	r2, r1
 800182c:	43d2      	mvns	r2, r2
 800182e:	401a      	ands	r2, r3
 8001830:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	019b      	lsls	r3, r3, #6
 8001836:	22ff      	movs	r2, #255	@ 0xff
 8001838:	401a      	ands	r2, r3
 800183a:	1dfb      	adds	r3, r7, #7
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	0018      	movs	r0, r3
 8001840:	2303      	movs	r3, #3
 8001842:	4003      	ands	r3, r0
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001848:	4809      	ldr	r0, [pc, #36]	@ (8001870 <__NVIC_SetPriority+0xd8>)
 800184a:	1dfb      	adds	r3, r7, #7
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	001c      	movs	r4, r3
 8001850:	230f      	movs	r3, #15
 8001852:	4023      	ands	r3, r4
 8001854:	3b08      	subs	r3, #8
 8001856:	089b      	lsrs	r3, r3, #2
 8001858:	430a      	orrs	r2, r1
 800185a:	3306      	adds	r3, #6
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	18c3      	adds	r3, r0, r3
 8001860:	3304      	adds	r3, #4
 8001862:	601a      	str	r2, [r3, #0]
}
 8001864:	46c0      	nop			@ (mov r8, r8)
 8001866:	46bd      	mov	sp, r7
 8001868:	b003      	add	sp, #12
 800186a:	bd90      	pop	{r4, r7, pc}
 800186c:	e000e100 	.word	0xe000e100
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	1e5a      	subs	r2, r3, #1
 8001880:	2380      	movs	r3, #128	@ 0x80
 8001882:	045b      	lsls	r3, r3, #17
 8001884:	429a      	cmp	r2, r3
 8001886:	d301      	bcc.n	800188c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001888:	2301      	movs	r3, #1
 800188a:	e010      	b.n	80018ae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800188c:	4b0a      	ldr	r3, [pc, #40]	@ (80018b8 <SysTick_Config+0x44>)
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	3a01      	subs	r2, #1
 8001892:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001894:	2301      	movs	r3, #1
 8001896:	425b      	negs	r3, r3
 8001898:	2103      	movs	r1, #3
 800189a:	0018      	movs	r0, r3
 800189c:	f7ff ff7c 	bl	8001798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018a0:	4b05      	ldr	r3, [pc, #20]	@ (80018b8 <SysTick_Config+0x44>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018a6:	4b04      	ldr	r3, [pc, #16]	@ (80018b8 <SysTick_Config+0x44>)
 80018a8:	2207      	movs	r2, #7
 80018aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	0018      	movs	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	b002      	add	sp, #8
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	46c0      	nop			@ (mov r8, r8)
 80018b8:	e000e010 	.word	0xe000e010

080018bc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	607a      	str	r2, [r7, #4]
 80018c6:	210f      	movs	r1, #15
 80018c8:	187b      	adds	r3, r7, r1
 80018ca:	1c02      	adds	r2, r0, #0
 80018cc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	187b      	adds	r3, r7, r1
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	b25b      	sxtb	r3, r3
 80018d6:	0011      	movs	r1, r2
 80018d8:	0018      	movs	r0, r3
 80018da:	f7ff ff5d 	bl	8001798 <__NVIC_SetPriority>
}
 80018de:	46c0      	nop			@ (mov r8, r8)
 80018e0:	46bd      	mov	sp, r7
 80018e2:	b004      	add	sp, #16
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	0002      	movs	r2, r0
 80018ee:	1dfb      	adds	r3, r7, #7
 80018f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018f2:	1dfb      	adds	r3, r7, #7
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	b25b      	sxtb	r3, r3
 80018f8:	0018      	movs	r0, r3
 80018fa:	f7ff ff33 	bl	8001764 <__NVIC_EnableIRQ>
}
 80018fe:	46c0      	nop			@ (mov r8, r8)
 8001900:	46bd      	mov	sp, r7
 8001902:	b002      	add	sp, #8
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	0018      	movs	r0, r3
 8001912:	f7ff ffaf 	bl	8001874 <SysTick_Config>
 8001916:	0003      	movs	r3, r0
}
 8001918:	0018      	movs	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	b002      	add	sp, #8
 800191e:	bd80      	pop	{r7, pc}

08001920 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e14e      	b.n	8001bd0 <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	225c      	movs	r2, #92	@ 0x5c
 8001936:	5c9b      	ldrb	r3, [r3, r2]
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d107      	bne.n	800194e <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	225d      	movs	r2, #93	@ 0x5d
 8001942:	2100      	movs	r1, #0
 8001944:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	0018      	movs	r0, r3
 800194a:	f7fe ff09 	bl	8000760 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	699a      	ldr	r2, [r3, #24]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2110      	movs	r1, #16
 800195a:	438a      	bics	r2, r1
 800195c:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800195e:	f7ff febd 	bl	80016dc <HAL_GetTick>
 8001962:	0003      	movs	r3, r0
 8001964:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001966:	e012      	b.n	800198e <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001968:	f7ff feb8 	bl	80016dc <HAL_GetTick>
 800196c:	0002      	movs	r2, r0
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b0a      	cmp	r3, #10
 8001974:	d90b      	bls.n	800198e <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800197a:	2201      	movs	r2, #1
 800197c:	431a      	orrs	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	225c      	movs	r2, #92	@ 0x5c
 8001986:	2103      	movs	r1, #3
 8001988:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e120      	b.n	8001bd0 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	2208      	movs	r2, #8
 8001996:	4013      	ands	r3, r2
 8001998:	2b08      	cmp	r3, #8
 800199a:	d0e5      	beq.n	8001968 <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	699a      	ldr	r2, [r3, #24]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2101      	movs	r1, #1
 80019a8:	430a      	orrs	r2, r1
 80019aa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019ac:	f7ff fe96 	bl	80016dc <HAL_GetTick>
 80019b0:	0003      	movs	r3, r0
 80019b2:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80019b4:	e012      	b.n	80019dc <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80019b6:	f7ff fe91 	bl	80016dc <HAL_GetTick>
 80019ba:	0002      	movs	r2, r0
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b0a      	cmp	r3, #10
 80019c2:	d90b      	bls.n	80019dc <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019c8:	2201      	movs	r2, #1
 80019ca:	431a      	orrs	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	225c      	movs	r2, #92	@ 0x5c
 80019d4:	2103      	movs	r1, #3
 80019d6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0f9      	b.n	8001bd0 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	2201      	movs	r2, #1
 80019e4:	4013      	ands	r3, r2
 80019e6:	d0e6      	beq.n	80019b6 <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	699a      	ldr	r2, [r3, #24]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2102      	movs	r1, #2
 80019f4:	430a      	orrs	r2, r1
 80019f6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a76      	ldr	r2, [pc, #472]	@ (8001bd8 <HAL_FDCAN_Init+0x2b8>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d103      	bne.n	8001a0a <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001a02:	4a76      	ldr	r2, [pc, #472]	@ (8001bdc <HAL_FDCAN_Init+0x2bc>)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	7c1b      	ldrb	r3, [r3, #16]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d108      	bne.n	8001a24 <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	699a      	ldr	r2, [r3, #24]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2140      	movs	r1, #64	@ 0x40
 8001a1e:	438a      	bics	r2, r1
 8001a20:	619a      	str	r2, [r3, #24]
 8001a22:	e007      	b.n	8001a34 <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	699a      	ldr	r2, [r3, #24]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2140      	movs	r1, #64	@ 0x40
 8001a30:	430a      	orrs	r2, r1
 8001a32:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	7c5b      	ldrb	r3, [r3, #17]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d109      	bne.n	8001a50 <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	699a      	ldr	r2, [r3, #24]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2180      	movs	r1, #128	@ 0x80
 8001a48:	01c9      	lsls	r1, r1, #7
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	619a      	str	r2, [r3, #24]
 8001a4e:	e007      	b.n	8001a60 <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	699a      	ldr	r2, [r3, #24]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4961      	ldr	r1, [pc, #388]	@ (8001be0 <HAL_FDCAN_Init+0x2c0>)
 8001a5c:	400a      	ands	r2, r1
 8001a5e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	7c9b      	ldrb	r3, [r3, #18]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d108      	bne.n	8001a7a <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	699a      	ldr	r2, [r3, #24]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	495c      	ldr	r1, [pc, #368]	@ (8001be4 <HAL_FDCAN_Init+0x2c4>)
 8001a74:	400a      	ands	r2, r1
 8001a76:	619a      	str	r2, [r3, #24]
 8001a78:	e008      	b.n	8001a8c <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	699a      	ldr	r2, [r3, #24]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2180      	movs	r1, #128	@ 0x80
 8001a86:	0149      	lsls	r1, r1, #5
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	4a55      	ldr	r2, [pc, #340]	@ (8001be8 <HAL_FDCAN_Init+0x2c8>)
 8001a94:	4013      	ands	r3, r2
 8001a96:	0019      	movs	r1, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	699a      	ldr	r2, [r3, #24]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	21a4      	movs	r1, #164	@ 0xa4
 8001ab0:	438a      	bics	r2, r1
 8001ab2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	691a      	ldr	r2, [r3, #16]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2110      	movs	r1, #16
 8001ac0:	438a      	bics	r2, r1
 8001ac2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d108      	bne.n	8001ade <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	699a      	ldr	r2, [r3, #24]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2104      	movs	r1, #4
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	619a      	str	r2, [r3, #24]
 8001adc:	e02c      	b.n	8001b38 <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d028      	beq.n	8001b38 <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d01c      	beq.n	8001b28 <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	699a      	ldr	r2, [r3, #24]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2180      	movs	r1, #128	@ 0x80
 8001afa:	430a      	orrs	r2, r1
 8001afc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	691a      	ldr	r2, [r3, #16]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2110      	movs	r1, #16
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	2b03      	cmp	r3, #3
 8001b14:	d110      	bne.n	8001b38 <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	699a      	ldr	r2, [r3, #24]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2120      	movs	r1, #32
 8001b22:	430a      	orrs	r2, r1
 8001b24:	619a      	str	r2, [r3, #24]
 8001b26:	e007      	b.n	8001b38 <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	699a      	ldr	r2, [r3, #24]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2120      	movs	r1, #32
 8001b34:	430a      	orrs	r2, r1
 8001b36:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	69db      	ldr	r3, [r3, #28]
 8001b44:	3b01      	subs	r3, #1
 8001b46:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001b48:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a1b      	ldr	r3, [r3, #32]
 8001b4e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001b50:	431a      	orrs	r2, r3
 8001b52:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001b60:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001b62:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	23c0      	movs	r3, #192	@ 0xc0
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d115      	bne.n	8001b9c <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b74:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001b7e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b84:	3b01      	subs	r3, #1
 8001b86:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b90:	3b01      	subs	r3, #1
 8001b92:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001b98:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001b9a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	22c0      	movs	r2, #192	@ 0xc0
 8001ba2:	5899      	ldr	r1, [r3, r2]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	21c0      	movs	r1, #192	@ 0xc0
 8001bb0:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f000 f885 	bl	8001cc4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	225c      	movs	r2, #92	@ 0x5c
 8001bca:	2101      	movs	r1, #1
 8001bcc:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	b004      	add	sp, #16
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40006400 	.word	0x40006400
 8001bdc:	40006500 	.word	0x40006500
 8001be0:	ffffbfff 	.word	0xffffbfff
 8001be4:	ffffefff 	.word	0xffffefff
 8001be8:	fffffcff 	.word	0xfffffcff

08001bec <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	225c      	movs	r2, #92	@ 0x5c
 8001bf8:	5c9b      	ldrb	r3, [r3, r2]
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d110      	bne.n	8001c22 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	225c      	movs	r2, #92	@ 0x5c
 8001c04:	2102      	movs	r1, #2
 8001c06:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	699a      	ldr	r2, [r3, #24]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2101      	movs	r1, #1
 8001c14:	438a      	bics	r2, r1
 8001c16:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	e006      	b.n	8001c30 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c26:	2204      	movs	r2, #4
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
  }
}
 8001c30:	0018      	movs	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	b002      	add	sp, #8
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	225c      	movs	r2, #92	@ 0x5c
 8001c48:	5c9b      	ldrb	r3, [r3, r2]
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d12d      	bne.n	8001cac <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	22c4      	movs	r2, #196	@ 0xc4
 8001c56:	589a      	ldr	r2, [r3, r2]
 8001c58:	2380      	movs	r3, #128	@ 0x80
 8001c5a:	039b      	lsls	r3, r3, #14
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d008      	beq.n	8001c72 <HAL_FDCAN_AddMessageToTxFifoQ+0x3a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c64:	2280      	movs	r2, #128	@ 0x80
 8001c66:	0092      	lsls	r2, r2, #2
 8001c68:	431a      	orrs	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e023      	b.n	8001cba <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	22c4      	movs	r2, #196	@ 0xc4
 8001c78:	589b      	ldr	r3, [r3, r2]
 8001c7a:	0c1b      	lsrs	r3, r3, #16
 8001c7c:	2203      	movs	r2, #3
 8001c7e:	4013      	ands	r3, r2
 8001c80:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	68b9      	ldr	r1, [r7, #8]
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f000 f887 	bl	8001d9c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2101      	movs	r1, #1
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	4091      	lsls	r1, r2
 8001c98:	000a      	movs	r2, r1
 8001c9a:	21cc      	movs	r1, #204	@ 0xcc
 8001c9c:	505a      	str	r2, [r3, r1]

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	409a      	lsls	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	e006      	b.n	8001cba <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cb0:	2208      	movs	r2, #8
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
  }
}
 8001cba:	0018      	movs	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	b006      	add	sp, #24
 8001cc0:	bd80      	pop	{r7, pc}
	...

08001cc4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001ccc:	4b2f      	ldr	r3, [pc, #188]	@ (8001d8c <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 8001cce:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a2e      	ldr	r2, [pc, #184]	@ (8001d90 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d105      	bne.n	8001ce6 <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	22d4      	movs	r2, #212	@ 0xd4
 8001cde:	0092      	lsls	r2, r2, #2
 8001ce0:	4694      	mov	ip, r2
 8001ce2:	4463      	add	r3, ip
 8001ce4:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68ba      	ldr	r2, [r7, #8]
 8001cea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2280      	movs	r2, #128	@ 0x80
 8001cf2:	589b      	ldr	r3, [r3, r2]
 8001cf4:	4a27      	ldr	r2, [pc, #156]	@ (8001d94 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	0019      	movs	r1, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cfe:	041a      	lsls	r2, r3, #16
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	2180      	movs	r1, #128	@ 0x80
 8001d08:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	3370      	adds	r3, #112	@ 0x70
 8001d0e:	001a      	movs	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2280      	movs	r2, #128	@ 0x80
 8001d1a:	589b      	ldr	r3, [r3, r2]
 8001d1c:	4a1e      	ldr	r2, [pc, #120]	@ (8001d98 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	0019      	movs	r1, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d26:	061a      	lsls	r2, r3, #24
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	2180      	movs	r1, #128	@ 0x80
 8001d30:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	33b0      	adds	r3, #176	@ 0xb0
 8001d36:	001a      	movs	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	3389      	adds	r3, #137	@ 0x89
 8001d40:	33ff      	adds	r3, #255	@ 0xff
 8001d42:	001a      	movs	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	2298      	movs	r2, #152	@ 0x98
 8001d4c:	0092      	lsls	r2, r2, #2
 8001d4e:	189a      	adds	r2, r3, r2
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	229e      	movs	r2, #158	@ 0x9e
 8001d58:	0092      	lsls	r2, r2, #2
 8001d5a:	189a      	adds	r2, r3, r2
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	e005      	b.n	8001d72 <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	3304      	adds	r3, #4
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	22d4      	movs	r2, #212	@ 0xd4
 8001d76:	0092      	lsls	r2, r2, #2
 8001d78:	4694      	mov	ip, r2
 8001d7a:	4463      	add	r3, ip
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d3f1      	bcc.n	8001d66 <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 8001d82:	46c0      	nop			@ (mov r8, r8)
 8001d84:	46c0      	nop			@ (mov r8, r8)
 8001d86:	46bd      	mov	sp, r7
 8001d88:	b004      	add	sp, #16
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	4000b400 	.word	0x4000b400
 8001d90:	40006800 	.word	0x40006800
 8001d94:	ffe0ffff 	.word	0xffe0ffff
 8001d98:	f0ffffff 	.word	0xf0ffffff

08001d9c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b088      	sub	sp, #32
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
 8001da8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10a      	bne.n	8001dc8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001dba:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61fb      	str	r3, [r7, #28]
 8001dc6:	e00b      	b.n	8001de0 <FDCAN_CopyMessageToRAM+0x44>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001dd0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001dd6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001dd8:	2280      	movs	r2, #128	@ 0x80
 8001dda:	05d2      	lsls	r2, r2, #23
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001dea:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001df0:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001df6:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	0013      	movs	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	189b      	adds	r3, r3, r2
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	18cb      	adds	r3, r1, r3
 8001e10:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	69fa      	ldr	r2, [r7, #28]
 8001e16:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	3304      	adds	r3, #4
 8001e1c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	3304      	adds	r3, #4
 8001e28:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	e020      	b.n	8001e72 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	3303      	adds	r3, #3
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	18d3      	adds	r3, r2, r3
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	3302      	adds	r3, #2
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	18cb      	adds	r3, r1, r3
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001e48:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	18cb      	adds	r3, r1, r3
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001e56:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001e58:	6879      	ldr	r1, [r7, #4]
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	188a      	adds	r2, r1, r2
 8001e5e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001e60:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	3304      	adds	r3, #4
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	0c1b      	lsrs	r3, r3, #16
 8001e78:	4a05      	ldr	r2, [pc, #20]	@ (8001e90 <FDCAN_CopyMessageToRAM+0xf4>)
 8001e7a:	5cd3      	ldrb	r3, [r2, r3]
 8001e7c:	001a      	movs	r2, r3
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d3d5      	bcc.n	8001e30 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8001e84:	46c0      	nop			@ (mov r8, r8)
 8001e86:	46c0      	nop			@ (mov r8, r8)
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	b008      	add	sp, #32
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	46c0      	nop			@ (mov r8, r8)
 8001e90:	0800b8f0 	.word	0x0800b8f0

08001e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea2:	e14d      	b.n	8002140 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	4091      	lsls	r1, r2
 8001eae:	000a      	movs	r2, r1
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d100      	bne.n	8001ebc <HAL_GPIO_Init+0x28>
 8001eba:	e13e      	b.n	800213a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d005      	beq.n	8001ed4 <HAL_GPIO_Init+0x40>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2203      	movs	r2, #3
 8001ece:	4013      	ands	r3, r2
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d130      	bne.n	8001f36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	2203      	movs	r2, #3
 8001ee0:	409a      	lsls	r2, r3
 8001ee2:	0013      	movs	r3, r2
 8001ee4:	43da      	mvns	r2, r3
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	68da      	ldr	r2, [r3, #12]
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	0013      	movs	r3, r2
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	409a      	lsls	r2, r3
 8001f10:	0013      	movs	r3, r2
 8001f12:	43da      	mvns	r2, r3
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4013      	ands	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	091b      	lsrs	r3, r3, #4
 8001f20:	2201      	movs	r2, #1
 8001f22:	401a      	ands	r2, r3
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	409a      	lsls	r2, r3
 8001f28:	0013      	movs	r3, r2
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2203      	movs	r2, #3
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	2b03      	cmp	r3, #3
 8001f40:	d017      	beq.n	8001f72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	2203      	movs	r2, #3
 8001f4e:	409a      	lsls	r2, r3
 8001f50:	0013      	movs	r3, r2
 8001f52:	43da      	mvns	r2, r3
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	4013      	ands	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	409a      	lsls	r2, r3
 8001f64:	0013      	movs	r3, r2
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2203      	movs	r2, #3
 8001f78:	4013      	ands	r3, r2
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d123      	bne.n	8001fc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	08da      	lsrs	r2, r3, #3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	3208      	adds	r2, #8
 8001f86:	0092      	lsls	r2, r2, #2
 8001f88:	58d3      	ldr	r3, [r2, r3]
 8001f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	2207      	movs	r2, #7
 8001f90:	4013      	ands	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	220f      	movs	r2, #15
 8001f96:	409a      	lsls	r2, r3
 8001f98:	0013      	movs	r3, r2
 8001f9a:	43da      	mvns	r2, r3
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	691a      	ldr	r2, [r3, #16]
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	2107      	movs	r1, #7
 8001faa:	400b      	ands	r3, r1
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	409a      	lsls	r2, r3
 8001fb0:	0013      	movs	r3, r2
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	08da      	lsrs	r2, r3, #3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3208      	adds	r2, #8
 8001fc0:	0092      	lsls	r2, r2, #2
 8001fc2:	6939      	ldr	r1, [r7, #16]
 8001fc4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	2203      	movs	r2, #3
 8001fd2:	409a      	lsls	r2, r3
 8001fd4:	0013      	movs	r3, r2
 8001fd6:	43da      	mvns	r2, r3
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2203      	movs	r2, #3
 8001fe4:	401a      	ands	r2, r3
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	409a      	lsls	r2, r3
 8001fec:	0013      	movs	r3, r2
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	23c0      	movs	r3, #192	@ 0xc0
 8002000:	029b      	lsls	r3, r3, #10
 8002002:	4013      	ands	r3, r2
 8002004:	d100      	bne.n	8002008 <HAL_GPIO_Init+0x174>
 8002006:	e098      	b.n	800213a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002008:	4a53      	ldr	r2, [pc, #332]	@ (8002158 <HAL_GPIO_Init+0x2c4>)
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	089b      	lsrs	r3, r3, #2
 800200e:	3318      	adds	r3, #24
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	589b      	ldr	r3, [r3, r2]
 8002014:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	2203      	movs	r2, #3
 800201a:	4013      	ands	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	220f      	movs	r2, #15
 8002020:	409a      	lsls	r2, r3
 8002022:	0013      	movs	r3, r2
 8002024:	43da      	mvns	r2, r3
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4013      	ands	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	23a0      	movs	r3, #160	@ 0xa0
 8002030:	05db      	lsls	r3, r3, #23
 8002032:	429a      	cmp	r2, r3
 8002034:	d019      	beq.n	800206a <HAL_GPIO_Init+0x1d6>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a48      	ldr	r2, [pc, #288]	@ (800215c <HAL_GPIO_Init+0x2c8>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d013      	beq.n	8002066 <HAL_GPIO_Init+0x1d2>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a47      	ldr	r2, [pc, #284]	@ (8002160 <HAL_GPIO_Init+0x2cc>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d00d      	beq.n	8002062 <HAL_GPIO_Init+0x1ce>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a46      	ldr	r2, [pc, #280]	@ (8002164 <HAL_GPIO_Init+0x2d0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d007      	beq.n	800205e <HAL_GPIO_Init+0x1ca>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a45      	ldr	r2, [pc, #276]	@ (8002168 <HAL_GPIO_Init+0x2d4>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d101      	bne.n	800205a <HAL_GPIO_Init+0x1c6>
 8002056:	2304      	movs	r3, #4
 8002058:	e008      	b.n	800206c <HAL_GPIO_Init+0x1d8>
 800205a:	2305      	movs	r3, #5
 800205c:	e006      	b.n	800206c <HAL_GPIO_Init+0x1d8>
 800205e:	2303      	movs	r3, #3
 8002060:	e004      	b.n	800206c <HAL_GPIO_Init+0x1d8>
 8002062:	2302      	movs	r3, #2
 8002064:	e002      	b.n	800206c <HAL_GPIO_Init+0x1d8>
 8002066:	2301      	movs	r3, #1
 8002068:	e000      	b.n	800206c <HAL_GPIO_Init+0x1d8>
 800206a:	2300      	movs	r3, #0
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	2103      	movs	r1, #3
 8002070:	400a      	ands	r2, r1
 8002072:	00d2      	lsls	r2, r2, #3
 8002074:	4093      	lsls	r3, r2
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	4313      	orrs	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800207c:	4936      	ldr	r1, [pc, #216]	@ (8002158 <HAL_GPIO_Init+0x2c4>)
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	089b      	lsrs	r3, r3, #2
 8002082:	3318      	adds	r3, #24
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800208a:	4b33      	ldr	r3, [pc, #204]	@ (8002158 <HAL_GPIO_Init+0x2c4>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	43da      	mvns	r2, r3
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	4013      	ands	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685a      	ldr	r2, [r3, #4]
 800209e:	2380      	movs	r3, #128	@ 0x80
 80020a0:	035b      	lsls	r3, r3, #13
 80020a2:	4013      	ands	r3, r2
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002158 <HAL_GPIO_Init+0x2c4>)
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80020b4:	4b28      	ldr	r3, [pc, #160]	@ (8002158 <HAL_GPIO_Init+0x2c4>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	43da      	mvns	r2, r3
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	4013      	ands	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	2380      	movs	r3, #128	@ 0x80
 80020ca:	039b      	lsls	r3, r3, #14
 80020cc:	4013      	ands	r3, r2
 80020ce:	d003      	beq.n	80020d8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002158 <HAL_GPIO_Init+0x2c4>)
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020de:	4a1e      	ldr	r2, [pc, #120]	@ (8002158 <HAL_GPIO_Init+0x2c4>)
 80020e0:	2384      	movs	r3, #132	@ 0x84
 80020e2:	58d3      	ldr	r3, [r2, r3]
 80020e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	43da      	mvns	r2, r3
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	4013      	ands	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	2380      	movs	r3, #128	@ 0x80
 80020f6:	029b      	lsls	r3, r3, #10
 80020f8:	4013      	ands	r3, r2
 80020fa:	d003      	beq.n	8002104 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	4313      	orrs	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002104:	4914      	ldr	r1, [pc, #80]	@ (8002158 <HAL_GPIO_Init+0x2c4>)
 8002106:	2284      	movs	r2, #132	@ 0x84
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800210c:	4a12      	ldr	r2, [pc, #72]	@ (8002158 <HAL_GPIO_Init+0x2c4>)
 800210e:	2380      	movs	r3, #128	@ 0x80
 8002110:	58d3      	ldr	r3, [r2, r3]
 8002112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	43da      	mvns	r2, r3
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4013      	ands	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	2380      	movs	r3, #128	@ 0x80
 8002124:	025b      	lsls	r3, r3, #9
 8002126:	4013      	ands	r3, r2
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4313      	orrs	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002132:	4909      	ldr	r1, [pc, #36]	@ (8002158 <HAL_GPIO_Init+0x2c4>)
 8002134:	2280      	movs	r2, #128	@ 0x80
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	3301      	adds	r3, #1
 800213e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	40da      	lsrs	r2, r3
 8002148:	1e13      	subs	r3, r2, #0
 800214a:	d000      	beq.n	800214e <HAL_GPIO_Init+0x2ba>
 800214c:	e6aa      	b.n	8001ea4 <HAL_GPIO_Init+0x10>
  }
}
 800214e:	46c0      	nop			@ (mov r8, r8)
 8002150:	46c0      	nop			@ (mov r8, r8)
 8002152:	46bd      	mov	sp, r7
 8002154:	b006      	add	sp, #24
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40021800 	.word	0x40021800
 800215c:	50000400 	.word	0x50000400
 8002160:	50000800 	.word	0x50000800
 8002164:	50000c00 	.word	0x50000c00
 8002168:	50001000 	.word	0x50001000

0800216c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	000a      	movs	r2, r1
 8002176:	1cbb      	adds	r3, r7, #2
 8002178:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	1cba      	adds	r2, r7, #2
 8002180:	8812      	ldrh	r2, [r2, #0]
 8002182:	4013      	ands	r3, r2
 8002184:	d004      	beq.n	8002190 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002186:	230f      	movs	r3, #15
 8002188:	18fb      	adds	r3, r7, r3
 800218a:	2201      	movs	r2, #1
 800218c:	701a      	strb	r2, [r3, #0]
 800218e:	e003      	b.n	8002198 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002190:	230f      	movs	r3, #15
 8002192:	18fb      	adds	r3, r7, r3
 8002194:	2200      	movs	r2, #0
 8002196:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002198:	230f      	movs	r3, #15
 800219a:	18fb      	adds	r3, r7, r3
 800219c:	781b      	ldrb	r3, [r3, #0]
}
 800219e:	0018      	movs	r0, r3
 80021a0:	46bd      	mov	sp, r7
 80021a2:	b004      	add	sp, #16
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	0008      	movs	r0, r1
 80021b0:	0011      	movs	r1, r2
 80021b2:	1cbb      	adds	r3, r7, #2
 80021b4:	1c02      	adds	r2, r0, #0
 80021b6:	801a      	strh	r2, [r3, #0]
 80021b8:	1c7b      	adds	r3, r7, #1
 80021ba:	1c0a      	adds	r2, r1, #0
 80021bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021be:	1c7b      	adds	r3, r7, #1
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d004      	beq.n	80021d0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021c6:	1cbb      	adds	r3, r7, #2
 80021c8:	881a      	ldrh	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021ce:	e003      	b.n	80021d8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021d0:	1cbb      	adds	r3, r7, #2
 80021d2:	881a      	ldrh	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021d8:	46c0      	nop			@ (mov r8, r8)
 80021da:	46bd      	mov	sp, r7
 80021dc:	b002      	add	sp, #8
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e082      	b.n	80022f8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2241      	movs	r2, #65	@ 0x41
 80021f6:	5c9b      	ldrb	r3, [r3, r2]
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d107      	bne.n	800220e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2240      	movs	r2, #64	@ 0x40
 8002202:	2100      	movs	r1, #0
 8002204:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	0018      	movs	r0, r3
 800220a:	f7fe fc7d 	bl	8000b08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2241      	movs	r2, #65	@ 0x41
 8002212:	2124      	movs	r1, #36	@ 0x24
 8002214:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2101      	movs	r1, #1
 8002222:	438a      	bics	r2, r1
 8002224:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4934      	ldr	r1, [pc, #208]	@ (8002300 <HAL_I2C_Init+0x120>)
 8002230:	400a      	ands	r2, r1
 8002232:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4931      	ldr	r1, [pc, #196]	@ (8002304 <HAL_I2C_Init+0x124>)
 8002240:	400a      	ands	r2, r1
 8002242:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d108      	bne.n	800225e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2180      	movs	r1, #128	@ 0x80
 8002256:	0209      	lsls	r1, r1, #8
 8002258:	430a      	orrs	r2, r1
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	e007      	b.n	800226e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2184      	movs	r1, #132	@ 0x84
 8002268:	0209      	lsls	r1, r1, #8
 800226a:	430a      	orrs	r2, r1
 800226c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	2b02      	cmp	r3, #2
 8002274:	d104      	bne.n	8002280 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2280      	movs	r2, #128	@ 0x80
 800227c:	0112      	lsls	r2, r2, #4
 800227e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	491f      	ldr	r1, [pc, #124]	@ (8002308 <HAL_I2C_Init+0x128>)
 800228c:	430a      	orrs	r2, r1
 800228e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68da      	ldr	r2, [r3, #12]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	491a      	ldr	r1, [pc, #104]	@ (8002304 <HAL_I2C_Init+0x124>)
 800229c:	400a      	ands	r2, r1
 800229e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	691a      	ldr	r2, [r3, #16]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	431a      	orrs	r2, r3
 80022aa:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69d9      	ldr	r1, [r3, #28]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a1a      	ldr	r2, [r3, #32]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2101      	movs	r1, #1
 80022d6:	430a      	orrs	r2, r1
 80022d8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2241      	movs	r2, #65	@ 0x41
 80022e4:	2120      	movs	r1, #32
 80022e6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2242      	movs	r2, #66	@ 0x42
 80022f2:	2100      	movs	r1, #0
 80022f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	0018      	movs	r0, r3
 80022fa:	46bd      	mov	sp, r7
 80022fc:	b002      	add	sp, #8
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	f0ffffff 	.word	0xf0ffffff
 8002304:	ffff7fff 	.word	0xffff7fff
 8002308:	02008000 	.word	0x02008000

0800230c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2241      	movs	r2, #65	@ 0x41
 800231a:	5c9b      	ldrb	r3, [r3, r2]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b20      	cmp	r3, #32
 8002320:	d138      	bne.n	8002394 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2240      	movs	r2, #64	@ 0x40
 8002326:	5c9b      	ldrb	r3, [r3, r2]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d101      	bne.n	8002330 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800232c:	2302      	movs	r3, #2
 800232e:	e032      	b.n	8002396 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2240      	movs	r2, #64	@ 0x40
 8002334:	2101      	movs	r1, #1
 8002336:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2241      	movs	r2, #65	@ 0x41
 800233c:	2124      	movs	r1, #36	@ 0x24
 800233e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2101      	movs	r1, #1
 800234c:	438a      	bics	r2, r1
 800234e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4911      	ldr	r1, [pc, #68]	@ (80023a0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800235c:	400a      	ands	r2, r1
 800235e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6819      	ldr	r1, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2101      	movs	r1, #1
 800237c:	430a      	orrs	r2, r1
 800237e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2241      	movs	r2, #65	@ 0x41
 8002384:	2120      	movs	r1, #32
 8002386:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2240      	movs	r2, #64	@ 0x40
 800238c:	2100      	movs	r1, #0
 800238e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002390:	2300      	movs	r3, #0
 8002392:	e000      	b.n	8002396 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002394:	2302      	movs	r3, #2
  }
}
 8002396:	0018      	movs	r0, r3
 8002398:	46bd      	mov	sp, r7
 800239a:	b002      	add	sp, #8
 800239c:	bd80      	pop	{r7, pc}
 800239e:	46c0      	nop			@ (mov r8, r8)
 80023a0:	ffffefff 	.word	0xffffefff

080023a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2241      	movs	r2, #65	@ 0x41
 80023b2:	5c9b      	ldrb	r3, [r3, r2]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b20      	cmp	r3, #32
 80023b8:	d139      	bne.n	800242e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2240      	movs	r2, #64	@ 0x40
 80023be:	5c9b      	ldrb	r3, [r3, r2]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d101      	bne.n	80023c8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80023c4:	2302      	movs	r3, #2
 80023c6:	e033      	b.n	8002430 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2240      	movs	r2, #64	@ 0x40
 80023cc:	2101      	movs	r1, #1
 80023ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2241      	movs	r2, #65	@ 0x41
 80023d4:	2124      	movs	r1, #36	@ 0x24
 80023d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2101      	movs	r1, #1
 80023e4:	438a      	bics	r2, r1
 80023e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4a11      	ldr	r2, [pc, #68]	@ (8002438 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80023f4:	4013      	ands	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	021b      	lsls	r3, r3, #8
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	4313      	orrs	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2101      	movs	r1, #1
 8002416:	430a      	orrs	r2, r1
 8002418:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2241      	movs	r2, #65	@ 0x41
 800241e:	2120      	movs	r1, #32
 8002420:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2240      	movs	r2, #64	@ 0x40
 8002426:	2100      	movs	r1, #0
 8002428:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800242a:	2300      	movs	r3, #0
 800242c:	e000      	b.n	8002430 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800242e:	2302      	movs	r3, #2
  }
}
 8002430:	0018      	movs	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	b004      	add	sp, #16
 8002436:	bd80      	pop	{r7, pc}
 8002438:	fffff0ff 	.word	0xfffff0ff

0800243c <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	000a      	movs	r2, r1
 8002446:	1cbb      	adds	r3, r7, #2
 8002448:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = 10U;
 800244a:	230a      	movs	r3, #10
 800244c:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800244e:	e002      	b.n	8002456 <PCD_GET_EP_RX_CNT+0x1a>
  {
    count--;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	3b01      	subs	r3, #1
 8002454:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1f9      	bne.n	8002450 <PCD_GET_EP_RX_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 800245c:	1cbb      	adds	r3, r7, #2
 800245e:	881b      	ldrh	r3, [r3, #0]
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	4a06      	ldr	r2, [pc, #24]	@ (800247c <PCD_GET_EP_RX_CNT+0x40>)
 8002464:	4694      	mov	ip, r2
 8002466:	4463      	add	r3, ip
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	0c1b      	lsrs	r3, r3, #16
 800246c:	b29b      	uxth	r3, r3
 800246e:	059b      	lsls	r3, r3, #22
 8002470:	0d9b      	lsrs	r3, r3, #22
 8002472:	b29b      	uxth	r3, r3
}
 8002474:	0018      	movs	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	b004      	add	sp, #16
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40009800 	.word	0x40009800

08002480 <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	000a      	movs	r2, r1
 800248a:	1cbb      	adds	r3, r7, #2
 800248c:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = 10U;
 800248e:	230a      	movs	r3, #10
 8002490:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8002492:	e002      	b.n	800249a <PCD_GET_EP_DBUF0_CNT+0x1a>
  {
    count--;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	3b01      	subs	r3, #1
 8002498:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1f9      	bne.n	8002494 <PCD_GET_EP_DBUF0_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 80024a0:	1cbb      	adds	r3, r7, #2
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4a06      	ldr	r2, [pc, #24]	@ (80024c0 <PCD_GET_EP_DBUF0_CNT+0x40>)
 80024a8:	4694      	mov	ip, r2
 80024aa:	4463      	add	r3, ip
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	0c1b      	lsrs	r3, r3, #16
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	059b      	lsls	r3, r3, #22
 80024b4:	0d9b      	lsrs	r3, r3, #22
 80024b6:	b29b      	uxth	r3, r3
}
 80024b8:	0018      	movs	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	b004      	add	sp, #16
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40009800 	.word	0x40009800

080024c4 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	000a      	movs	r2, r1
 80024ce:	1cbb      	adds	r3, r7, #2
 80024d0:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = 10U;
 80024d2:	230a      	movs	r3, #10
 80024d4:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80024d6:	e002      	b.n	80024de <PCD_GET_EP_DBUF1_CNT+0x1a>
  {
    count--;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	3b01      	subs	r3, #1
 80024dc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1f9      	bne.n	80024d8 <PCD_GET_EP_DBUF1_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 80024e4:	1cbb      	adds	r3, r7, #2
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4a06      	ldr	r2, [pc, #24]	@ (8002504 <PCD_GET_EP_DBUF1_CNT+0x40>)
 80024ec:	4694      	mov	ip, r2
 80024ee:	4463      	add	r3, ip
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	0c1b      	lsrs	r3, r3, #16
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	059b      	lsls	r3, r3, #22
 80024f8:	0d9b      	lsrs	r3, r3, #22
 80024fa:	b29b      	uxth	r3, r3
}
 80024fc:	0018      	movs	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	b004      	add	sp, #16
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40009800 	.word	0x40009800

08002508 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800250a:	b08f      	sub	sp, #60	@ 0x3c
 800250c:	af0a      	add	r7, sp, #40	@ 0x28
 800250e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e10a      	b.n	8002730 <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a86      	ldr	r2, [pc, #536]	@ (8002738 <HAL_PCD_Init+0x230>)
 800251e:	5c9b      	ldrb	r3, [r3, r2]
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d108      	bne.n	8002538 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	23af      	movs	r3, #175	@ 0xaf
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	2100      	movs	r1, #0
 800252e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	0018      	movs	r0, r3
 8002534:	f008 f920 	bl	800a778 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a7f      	ldr	r2, [pc, #508]	@ (8002738 <HAL_PCD_Init+0x230>)
 800253c:	2103      	movs	r1, #3
 800253e:	5499      	strb	r1, [r3, r2]

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	611a      	str	r2, [r3, #16]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	0018      	movs	r0, r3
 800254c:	f003 fd5e 	bl	800600c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002550:	230f      	movs	r3, #15
 8002552:	18fb      	adds	r3, r7, r3
 8002554:	2200      	movs	r2, #0
 8002556:	701a      	strb	r2, [r3, #0]
 8002558:	e05b      	b.n	8002612 <HAL_PCD_Init+0x10a>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800255a:	240f      	movs	r4, #15
 800255c:	193b      	adds	r3, r7, r4
 800255e:	781a      	ldrb	r2, [r3, #0]
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	203d      	movs	r0, #61	@ 0x3d
 8002564:	0013      	movs	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	189b      	adds	r3, r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	18cb      	adds	r3, r1, r3
 800256e:	181b      	adds	r3, r3, r0
 8002570:	2201      	movs	r2, #1
 8002572:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002574:	193b      	adds	r3, r7, r4
 8002576:	781a      	ldrb	r2, [r3, #0]
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	203c      	movs	r0, #60	@ 0x3c
 800257c:	0013      	movs	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	189b      	adds	r3, r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	18cb      	adds	r3, r1, r3
 8002586:	181b      	adds	r3, r3, r0
 8002588:	193a      	adds	r2, r7, r4
 800258a:	7812      	ldrb	r2, [r2, #0]
 800258c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800258e:	0025      	movs	r5, r4
 8002590:	193b      	adds	r3, r7, r4
 8002592:	781a      	ldrb	r2, [r3, #0]
 8002594:	197b      	adds	r3, r7, r5
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	b29c      	uxth	r4, r3
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	2048      	movs	r0, #72	@ 0x48
 800259e:	0013      	movs	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	189b      	adds	r3, r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	18cb      	adds	r3, r1, r3
 80025a8:	181b      	adds	r3, r3, r0
 80025aa:	1c22      	adds	r2, r4, #0
 80025ac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025ae:	197b      	adds	r3, r7, r5
 80025b0:	781a      	ldrb	r2, [r3, #0]
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	203f      	movs	r0, #63	@ 0x3f
 80025b6:	0013      	movs	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	189b      	adds	r3, r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	18cb      	adds	r3, r1, r3
 80025c0:	181b      	adds	r3, r3, r0
 80025c2:	2200      	movs	r2, #0
 80025c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025c6:	197b      	adds	r3, r7, r5
 80025c8:	781a      	ldrb	r2, [r3, #0]
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	0013      	movs	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	189b      	adds	r3, r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	18cb      	adds	r3, r1, r3
 80025d6:	334c      	adds	r3, #76	@ 0x4c
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025dc:	197b      	adds	r3, r7, r5
 80025de:	781a      	ldrb	r2, [r3, #0]
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	0013      	movs	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	189b      	adds	r3, r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	18cb      	adds	r3, r1, r3
 80025ec:	3350      	adds	r3, #80	@ 0x50
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025f2:	197b      	adds	r3, r7, r5
 80025f4:	781a      	ldrb	r2, [r3, #0]
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	0013      	movs	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	189b      	adds	r3, r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	18cb      	adds	r3, r1, r3
 8002602:	3354      	adds	r3, #84	@ 0x54
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002608:	197b      	adds	r3, r7, r5
 800260a:	781a      	ldrb	r2, [r3, #0]
 800260c:	197b      	adds	r3, r7, r5
 800260e:	3201      	adds	r2, #1
 8002610:	701a      	strb	r2, [r3, #0]
 8002612:	210f      	movs	r1, #15
 8002614:	187b      	adds	r3, r7, r1
 8002616:	781a      	ldrb	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	429a      	cmp	r2, r3
 800261e:	d39c      	bcc.n	800255a <HAL_PCD_Init+0x52>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002620:	187b      	adds	r3, r7, r1
 8002622:	2200      	movs	r2, #0
 8002624:	701a      	strb	r2, [r3, #0]
 8002626:	e056      	b.n	80026d6 <HAL_PCD_Init+0x1ce>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002628:	240f      	movs	r4, #15
 800262a:	193b      	adds	r3, r7, r4
 800262c:	781a      	ldrb	r2, [r3, #0]
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	237e      	movs	r3, #126	@ 0x7e
 8002632:	33ff      	adds	r3, #255	@ 0xff
 8002634:	0019      	movs	r1, r3
 8002636:	0013      	movs	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	189b      	adds	r3, r3, r2
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	18c3      	adds	r3, r0, r3
 8002640:	185b      	adds	r3, r3, r1
 8002642:	2200      	movs	r2, #0
 8002644:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002646:	193b      	adds	r3, r7, r4
 8002648:	781a      	ldrb	r2, [r3, #0]
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	23be      	movs	r3, #190	@ 0xbe
 800264e:	0059      	lsls	r1, r3, #1
 8002650:	0013      	movs	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	189b      	adds	r3, r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	18c3      	adds	r3, r0, r3
 800265a:	185b      	adds	r3, r3, r1
 800265c:	193a      	adds	r2, r7, r4
 800265e:	7812      	ldrb	r2, [r2, #0]
 8002660:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002662:	193b      	adds	r3, r7, r4
 8002664:	781a      	ldrb	r2, [r3, #0]
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	2380      	movs	r3, #128	@ 0x80
 800266a:	33ff      	adds	r3, #255	@ 0xff
 800266c:	0019      	movs	r1, r3
 800266e:	0013      	movs	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	189b      	adds	r3, r3, r2
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	18c3      	adds	r3, r0, r3
 8002678:	185b      	adds	r3, r3, r1
 800267a:	2200      	movs	r2, #0
 800267c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800267e:	193b      	adds	r3, r7, r4
 8002680:	781a      	ldrb	r2, [r3, #0]
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	23c6      	movs	r3, #198	@ 0xc6
 8002686:	0059      	lsls	r1, r3, #1
 8002688:	0013      	movs	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	189b      	adds	r3, r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	18c3      	adds	r3, r0, r3
 8002692:	185b      	adds	r3, r3, r1
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002698:	193b      	adds	r3, r7, r4
 800269a:	781a      	ldrb	r2, [r3, #0]
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	23c8      	movs	r3, #200	@ 0xc8
 80026a0:	0059      	lsls	r1, r3, #1
 80026a2:	0013      	movs	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	189b      	adds	r3, r3, r2
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	18c3      	adds	r3, r0, r3
 80026ac:	185b      	adds	r3, r3, r1
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026b2:	193b      	adds	r3, r7, r4
 80026b4:	781a      	ldrb	r2, [r3, #0]
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	23ca      	movs	r3, #202	@ 0xca
 80026ba:	0059      	lsls	r1, r3, #1
 80026bc:	0013      	movs	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	189b      	adds	r3, r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	18c3      	adds	r3, r0, r3
 80026c6:	185b      	adds	r3, r3, r1
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026cc:	193b      	adds	r3, r7, r4
 80026ce:	781a      	ldrb	r2, [r3, #0]
 80026d0:	193b      	adds	r3, r7, r4
 80026d2:	3201      	adds	r2, #1
 80026d4:	701a      	strb	r2, [r3, #0]
 80026d6:	230f      	movs	r3, #15
 80026d8:	18fb      	adds	r3, r7, r3
 80026da:	781a      	ldrb	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d3a1      	bcc.n	8002628 <HAL_PCD_Init+0x120>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681c      	ldr	r4, [r3, #0]
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	466b      	mov	r3, sp
 80026ec:	001a      	movs	r2, r3
 80026ee:	0003      	movs	r3, r0
 80026f0:	3310      	adds	r3, #16
 80026f2:	cb62      	ldmia	r3!, {r1, r5, r6}
 80026f4:	c262      	stmia	r2!, {r1, r5, r6}
 80026f6:	cb62      	ldmia	r3!, {r1, r5, r6}
 80026f8:	c262      	stmia	r2!, {r1, r5, r6}
 80026fa:	cb62      	ldmia	r3!, {r1, r5, r6}
 80026fc:	c262      	stmia	r2!, {r1, r5, r6}
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	6841      	ldr	r1, [r0, #4]
 8002704:	6882      	ldr	r2, [r0, #8]
 8002706:	68c3      	ldr	r3, [r0, #12]
 8002708:	0020      	movs	r0, r4
 800270a:	f003 fcb1 	bl	8006070 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2238      	movs	r2, #56	@ 0x38
 8002712:	2100      	movs	r1, #0
 8002714:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a07      	ldr	r2, [pc, #28]	@ (8002738 <HAL_PCD_Init+0x230>)
 800271a:	2101      	movs	r1, #1
 800271c:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002722:	2b01      	cmp	r3, #1
 8002724:	d103      	bne.n	800272e <HAL_PCD_Init+0x226>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	0018      	movs	r0, r3
 800272a:	f001 fca9 	bl	8004080 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	0018      	movs	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	b005      	add	sp, #20
 8002736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002738:	000002bd 	.word	0x000002bd

0800273c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	23af      	movs	r3, #175	@ 0xaf
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	5cd3      	ldrb	r3, [r2, r3]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d101      	bne.n	8002754 <HAL_PCD_Start+0x18>
 8002750:	2302      	movs	r3, #2
 8002752:	e014      	b.n	800277e <HAL_PCD_Start+0x42>
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	23af      	movs	r3, #175	@ 0xaf
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	2101      	movs	r1, #1
 800275c:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	0018      	movs	r0, r3
 8002764:	f003 fc3e 	bl	8005fe4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	0018      	movs	r0, r3
 800276e:	f005 fb0e 	bl	8007d8e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	23af      	movs	r3, #175	@ 0xaf
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	2100      	movs	r1, #0
 800277a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	0018      	movs	r0, r3
 8002780:	46bd      	mov	sp, r7
 8002782:	b002      	add	sp, #8
 8002784:	bd80      	pop	{r7, pc}
	...

08002788 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	0018      	movs	r0, r3
 8002796:	f005 fb0a 	bl	8007dae <USB_ReadInterrupts>
 800279a:	0003      	movs	r3, r0
 800279c:	60fb      	str	r3, [r7, #12]

  /* check if this is an USB pending IT */
  if ((SYSCFG->IT_LINE_SR[8] & (0x1U << 2)) == 0U)
 800279e:	4a7c      	ldr	r2, [pc, #496]	@ (8002990 <HAL_PCD_IRQHandler+0x208>)
 80027a0:	23a0      	movs	r3, #160	@ 0xa0
 80027a2:	58d3      	ldr	r3, [r2, r3]
 80027a4:	2204      	movs	r2, #4
 80027a6:	4013      	ands	r3, r2
 80027a8:	d100      	bne.n	80027ac <HAL_PCD_IRQHandler+0x24>
 80027aa:	e0ed      	b.n	8002988 <HAL_PCD_IRQHandler+0x200>
  {
    return;
  }

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	2380      	movs	r3, #128	@ 0x80
 80027b0:	021b      	lsls	r3, r3, #8
 80027b2:	4013      	ands	r3, r2
 80027b4:	d004      	beq.n	80027c0 <HAL_PCD_IRQHandler+0x38>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	0018      	movs	r0, r3
 80027ba:	f000 fb59 	bl	8002e70 <PCD_EP_ISR_Handler>

    return;
 80027be:	e0e4      	b.n	800298a <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	2380      	movs	r3, #128	@ 0x80
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	4013      	ands	r3, r2
 80027c8:	d011      	beq.n	80027ee <HAL_PCD_IRQHandler+0x66>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	496f      	ldr	r1, [pc, #444]	@ (8002994 <HAL_PCD_IRQHandler+0x20c>)
 80027d6:	400a      	ands	r2, r1
 80027d8:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	0018      	movs	r0, r3
 80027de:	f008 f88e 	bl	800a8fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2100      	movs	r1, #0
 80027e6:	0018      	movs	r0, r3
 80027e8:	f000 f8e4 	bl	80029b4 <HAL_PCD_SetAddress>

    return;
 80027ec:	e0cd      	b.n	800298a <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	2380      	movs	r3, #128	@ 0x80
 80027f2:	01db      	lsls	r3, r3, #7
 80027f4:	4013      	ands	r3, r2
 80027f6:	d008      	beq.n	800280a <HAL_PCD_IRQHandler+0x82>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4965      	ldr	r1, [pc, #404]	@ (8002998 <HAL_PCD_IRQHandler+0x210>)
 8002804:	400a      	ands	r2, r1
 8002806:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8002808:	e0bf      	b.n	800298a <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	2380      	movs	r3, #128	@ 0x80
 800280e:	019b      	lsls	r3, r3, #6
 8002810:	4013      	ands	r3, r2
 8002812:	d008      	beq.n	8002826 <HAL_PCD_IRQHandler+0x9e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	495f      	ldr	r1, [pc, #380]	@ (800299c <HAL_PCD_IRQHandler+0x214>)
 8002820:	400a      	ands	r2, r1
 8002822:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8002824:	e0b1      	b.n	800298a <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	2380      	movs	r3, #128	@ 0x80
 800282a:	015b      	lsls	r3, r3, #5
 800282c:	4013      	ands	r3, r2
 800282e:	d02c      	beq.n	800288a <HAL_PCD_IRQHandler+0x102>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2104      	movs	r1, #4
 800283c:	438a      	bics	r2, r1
 800283e:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2108      	movs	r1, #8
 800284c:	438a      	bics	r2, r1
 800284e:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	23bd      	movs	r3, #189	@ 0xbd
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	5cd3      	ldrb	r3, [r2, r3]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d109      	bne.n	8002870 <HAL_PCD_IRQHandler+0xe8>
    {
      hpcd->LPM_State = LPM_L0;
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	23bd      	movs	r3, #189	@ 0xbd
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	2100      	movs	r1, #0
 8002864:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2100      	movs	r1, #0
 800286a:	0018      	movs	r0, r3
 800286c:	f001 fc2a 	bl	80040c4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	0018      	movs	r0, r3
 8002874:	f008 f884 	bl	800a980 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4947      	ldr	r1, [pc, #284]	@ (80029a0 <HAL_PCD_IRQHandler+0x218>)
 8002884:	400a      	ands	r2, r1
 8002886:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8002888:	e07f      	b.n	800298a <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	2380      	movs	r3, #128	@ 0x80
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	4013      	ands	r3, r2
 8002892:	d01c      	beq.n	80028ce <HAL_PCD_IRQHandler+0x146>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2108      	movs	r1, #8
 80028a0:	430a      	orrs	r2, r1
 80028a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	493d      	ldr	r1, [pc, #244]	@ (80029a4 <HAL_PCD_IRQHandler+0x21c>)
 80028b0:	400a      	ands	r2, r1
 80028b2:	645a      	str	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2104      	movs	r1, #4
 80028c0:	430a      	orrs	r2, r1
 80028c2:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	0018      	movs	r0, r3
 80028c8:	f008 f83e 	bl	800a948 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80028cc:	e05d      	b.n	800298a <HAL_PCD_IRQHandler+0x202>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2280      	movs	r2, #128	@ 0x80
 80028d2:	4013      	ands	r3, r2
 80028d4:	d038      	beq.n	8002948 <HAL_PCD_IRQHandler+0x1c0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4931      	ldr	r1, [pc, #196]	@ (80029a8 <HAL_PCD_IRQHandler+0x220>)
 80028e2:	400a      	ands	r2, r1
 80028e4:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	23bd      	movs	r3, #189	@ 0xbd
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	5cd3      	ldrb	r3, [r2, r3]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d125      	bne.n	800293e <HAL_PCD_IRQHandler+0x1b6>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2104      	movs	r1, #4
 80028fe:	430a      	orrs	r2, r1
 8002900:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2108      	movs	r1, #8
 800290e:	430a      	orrs	r2, r1
 8002910:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	23bd      	movs	r3, #189	@ 0xbd
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	2101      	movs	r1, #1
 800291a:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002922:	089b      	lsrs	r3, r3, #2
 8002924:	223c      	movs	r2, #60	@ 0x3c
 8002926:	4013      	ands	r3, r2
 8002928:	0019      	movs	r1, r3
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	23be      	movs	r3, #190	@ 0xbe
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2101      	movs	r1, #1
 8002936:	0018      	movs	r0, r3
 8002938:	f001 fbc4 	bl	80040c4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800293c:	e025      	b.n	800298a <HAL_PCD_IRQHandler+0x202>
      HAL_PCD_SuspendCallback(hpcd);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	0018      	movs	r0, r3
 8002942:	f008 f801 	bl	800a948 <HAL_PCD_SuspendCallback>
    return;
 8002946:	e020      	b.n	800298a <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	2380      	movs	r3, #128	@ 0x80
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4013      	ands	r3, r2
 8002950:	d00c      	beq.n	800296c <HAL_PCD_IRQHandler+0x1e4>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4913      	ldr	r1, [pc, #76]	@ (80029ac <HAL_PCD_IRQHandler+0x224>)
 800295e:	400a      	ands	r2, r1
 8002960:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	0018      	movs	r0, r3
 8002966:	f007 ffbb 	bl	800a8e0 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800296a:	e00e      	b.n	800298a <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	2380      	movs	r3, #128	@ 0x80
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	4013      	ands	r3, r2
 8002974:	d009      	beq.n	800298a <HAL_PCD_IRQHandler+0x202>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	490b      	ldr	r1, [pc, #44]	@ (80029b0 <HAL_PCD_IRQHandler+0x228>)
 8002982:	400a      	ands	r2, r1
 8002984:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8002986:	e000      	b.n	800298a <HAL_PCD_IRQHandler+0x202>
    return;
 8002988:	46c0      	nop			@ (mov r8, r8)
  }
}
 800298a:	46bd      	mov	sp, r7
 800298c:	b004      	add	sp, #16
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40010000 	.word	0x40010000
 8002994:	0000fbff 	.word	0x0000fbff
 8002998:	0000bfff 	.word	0x0000bfff
 800299c:	0000dfff 	.word	0x0000dfff
 80029a0:	0000efff 	.word	0x0000efff
 80029a4:	0000f7ff 	.word	0x0000f7ff
 80029a8:	0000ff7f 	.word	0x0000ff7f
 80029ac:	0000fdff 	.word	0x0000fdff
 80029b0:	0000feff 	.word	0x0000feff

080029b4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	000a      	movs	r2, r1
 80029be:	1cfb      	adds	r3, r7, #3
 80029c0:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	23af      	movs	r3, #175	@ 0xaf
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	5cd3      	ldrb	r3, [r2, r3]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d101      	bne.n	80029d2 <HAL_PCD_SetAddress+0x1e>
 80029ce:	2302      	movs	r3, #2
 80029d0:	e017      	b.n	8002a02 <HAL_PCD_SetAddress+0x4e>
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	23af      	movs	r3, #175	@ 0xaf
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	2101      	movs	r1, #1
 80029da:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	1cfa      	adds	r2, r7, #3
 80029e0:	2138      	movs	r1, #56	@ 0x38
 80029e2:	7812      	ldrb	r2, [r2, #0]
 80029e4:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	1cfb      	adds	r3, r7, #3
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	0019      	movs	r1, r3
 80029f0:	0010      	movs	r0, r2
 80029f2:	f005 f9b9 	bl	8007d68 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	23af      	movs	r3, #175	@ 0xaf
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	2100      	movs	r1, #0
 80029fe:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	0018      	movs	r0, r3
 8002a04:	46bd      	mov	sp, r7
 8002a06:	b002      	add	sp, #8
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a0a:	b590      	push	{r4, r7, lr}
 8002a0c:	b085      	sub	sp, #20
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
 8002a12:	000c      	movs	r4, r1
 8002a14:	0010      	movs	r0, r2
 8002a16:	0019      	movs	r1, r3
 8002a18:	1cfb      	adds	r3, r7, #3
 8002a1a:	1c22      	adds	r2, r4, #0
 8002a1c:	701a      	strb	r2, [r3, #0]
 8002a1e:	003b      	movs	r3, r7
 8002a20:	1c02      	adds	r2, r0, #0
 8002a22:	801a      	strh	r2, [r3, #0]
 8002a24:	1cbb      	adds	r3, r7, #2
 8002a26:	1c0a      	adds	r2, r1, #0
 8002a28:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a2a:	230b      	movs	r3, #11
 8002a2c:	18fb      	adds	r3, r7, r3
 8002a2e:	2200      	movs	r2, #0
 8002a30:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a32:	1cfb      	adds	r3, r7, #3
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	b25b      	sxtb	r3, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	da10      	bge.n	8002a5e <HAL_PCD_EP_Open+0x54>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a3c:	1cfb      	adds	r3, r7, #3
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2207      	movs	r2, #7
 8002a42:	401a      	ands	r2, r3
 8002a44:	0013      	movs	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	189b      	adds	r3, r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	3338      	adds	r3, #56	@ 0x38
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	18d3      	adds	r3, r2, r3
 8002a52:	3304      	adds	r3, #4
 8002a54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	705a      	strb	r2, [r3, #1]
 8002a5c:	e010      	b.n	8002a80 <HAL_PCD_EP_Open+0x76>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a5e:	1cfb      	adds	r3, r7, #3
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2207      	movs	r2, #7
 8002a64:	401a      	ands	r2, r3
 8002a66:	0013      	movs	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	189b      	adds	r3, r3, r2
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	3379      	adds	r3, #121	@ 0x79
 8002a70:	33ff      	adds	r3, #255	@ 0xff
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	18d3      	adds	r3, r2, r3
 8002a76:	3304      	adds	r3, #4
 8002a78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002a80:	1cfb      	adds	r3, r7, #3
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2207      	movs	r2, #7
 8002a86:	4013      	ands	r3, r2
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002a8e:	003b      	movs	r3, r7
 8002a90:	881a      	ldrh	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	1cba      	adds	r2, r7, #2
 8002a9a:	7812      	ldrb	r2, [r2, #0]
 8002a9c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	785b      	ldrb	r3, [r3, #1]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d004      	beq.n	8002ab0 <HAL_PCD_EP_Open+0xa6>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	001a      	movs	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	819a      	strh	r2, [r3, #12]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ab0:	1cbb      	adds	r3, r7, #2
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d102      	bne.n	8002abe <HAL_PCD_EP_Open+0xb4>
  {
    ep->data_pid_start = 0U;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	72da      	strb	r2, [r3, #11]
  }

  __HAL_LOCK(hpcd);
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	23af      	movs	r3, #175	@ 0xaf
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	5cd3      	ldrb	r3, [r2, r3]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d101      	bne.n	8002ace <HAL_PCD_EP_Open+0xc4>
 8002aca:	2302      	movs	r3, #2
 8002acc:	e013      	b.n	8002af6 <HAL_PCD_EP_Open+0xec>
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	23af      	movs	r3, #175	@ 0xaf
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	0011      	movs	r1, r2
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	f003 faef 	bl	80060c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	23af      	movs	r3, #175	@ 0xaf
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	2100      	movs	r1, #0
 8002aee:	54d1      	strb	r1, [r2, r3]

  return ret;
 8002af0:	230b      	movs	r3, #11
 8002af2:	18fb      	adds	r3, r7, r3
 8002af4:	781b      	ldrb	r3, [r3, #0]
}
 8002af6:	0018      	movs	r0, r3
 8002af8:	46bd      	mov	sp, r7
 8002afa:	b005      	add	sp, #20
 8002afc:	bd90      	pop	{r4, r7, pc}

08002afe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b084      	sub	sp, #16
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
 8002b06:	000a      	movs	r2, r1
 8002b08:	1cfb      	adds	r3, r7, #3
 8002b0a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b0c:	1cfb      	adds	r3, r7, #3
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	b25b      	sxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	da10      	bge.n	8002b38 <HAL_PCD_EP_Close+0x3a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b16:	1cfb      	adds	r3, r7, #3
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2207      	movs	r2, #7
 8002b1c:	401a      	ands	r2, r3
 8002b1e:	0013      	movs	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	189b      	adds	r3, r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	3338      	adds	r3, #56	@ 0x38
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	18d3      	adds	r3, r2, r3
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2201      	movs	r2, #1
 8002b34:	705a      	strb	r2, [r3, #1]
 8002b36:	e010      	b.n	8002b5a <HAL_PCD_EP_Close+0x5c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b38:	1cfb      	adds	r3, r7, #3
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2207      	movs	r2, #7
 8002b3e:	401a      	ands	r2, r3
 8002b40:	0013      	movs	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	189b      	adds	r3, r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	3379      	adds	r3, #121	@ 0x79
 8002b4a:	33ff      	adds	r3, #255	@ 0xff
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	18d3      	adds	r3, r2, r3
 8002b50:	3304      	adds	r3, #4
 8002b52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002b5a:	1cfb      	adds	r3, r7, #3
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2207      	movs	r2, #7
 8002b60:	4013      	ands	r3, r2
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	23af      	movs	r3, #175	@ 0xaf
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	5cd3      	ldrb	r3, [r2, r3]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d101      	bne.n	8002b78 <HAL_PCD_EP_Close+0x7a>
 8002b74:	2302      	movs	r3, #2
 8002b76:	e011      	b.n	8002b9c <HAL_PCD_EP_Close+0x9e>
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	23af      	movs	r3, #175	@ 0xaf
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	2101      	movs	r1, #1
 8002b80:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	0011      	movs	r1, r2
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	f003 fdde 	bl	800674c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	23af      	movs	r3, #175	@ 0xaf
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	2100      	movs	r1, #0
 8002b98:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	b004      	add	sp, #16
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	607a      	str	r2, [r7, #4]
 8002bae:	603b      	str	r3, [r7, #0]
 8002bb0:	200b      	movs	r0, #11
 8002bb2:	183b      	adds	r3, r7, r0
 8002bb4:	1c0a      	adds	r2, r1, #0
 8002bb6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bb8:	0001      	movs	r1, r0
 8002bba:	187b      	adds	r3, r7, r1
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	2207      	movs	r2, #7
 8002bc0:	401a      	ands	r2, r3
 8002bc2:	0013      	movs	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	189b      	adds	r3, r3, r2
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	3379      	adds	r3, #121	@ 0x79
 8002bcc:	33ff      	adds	r3, #255	@ 0xff
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	18d3      	adds	r3, r2, r3
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	2200      	movs	r2, #0
 8002be6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	2200      	movs	r2, #0
 8002bec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bee:	187b      	adds	r3, r7, r1
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2207      	movs	r2, #7
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bfc:	187b      	adds	r3, r7, r1
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2207      	movs	r2, #7
 8002c02:	4013      	ands	r3, r2
 8002c04:	d107      	bne.n	8002c16 <HAL_PCD_EP_Receive+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	0011      	movs	r1, r2
 8002c0e:	0018      	movs	r0, r3
 8002c10:	f003 ff02 	bl	8006a18 <USB_EPStartXfer>
 8002c14:	e006      	b.n	8002c24 <HAL_PCD_EP_Receive+0x80>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	0011      	movs	r1, r2
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f003 fefa 	bl	8006a18 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	0018      	movs	r0, r3
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	b006      	add	sp, #24
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b082      	sub	sp, #8
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
 8002c36:	000a      	movs	r2, r1
 8002c38:	1cfb      	adds	r3, r7, #3
 8002c3a:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002c3c:	1cfb      	adds	r3, r7, #3
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2207      	movs	r2, #7
 8002c42:	401a      	ands	r2, r3
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	23cc      	movs	r3, #204	@ 0xcc
 8002c48:	0059      	lsls	r1, r3, #1
 8002c4a:	0013      	movs	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	189b      	adds	r3, r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	18c3      	adds	r3, r0, r3
 8002c54:	185b      	adds	r3, r3, r1
 8002c56:	681b      	ldr	r3, [r3, #0]
}
 8002c58:	0018      	movs	r0, r3
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	b002      	add	sp, #8
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	607a      	str	r2, [r7, #4]
 8002c6a:	603b      	str	r3, [r7, #0]
 8002c6c:	200b      	movs	r0, #11
 8002c6e:	183b      	adds	r3, r7, r0
 8002c70:	1c0a      	adds	r2, r1, #0
 8002c72:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c74:	183b      	adds	r3, r7, r0
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2207      	movs	r2, #7
 8002c7a:	401a      	ands	r2, r3
 8002c7c:	0013      	movs	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	189b      	adds	r3, r3, r2
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	3338      	adds	r3, #56	@ 0x38
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	18d3      	adds	r3, r2, r3
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	2224      	movs	r2, #36	@ 0x24
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	2200      	movs	r2, #0
 8002cac:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cb4:	183b      	adds	r3, r7, r0
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2207      	movs	r2, #7
 8002cba:	4013      	ands	r3, r2
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cc2:	183b      	adds	r3, r7, r0
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2207      	movs	r2, #7
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d107      	bne.n	8002cdc <HAL_PCD_EP_Transmit+0x7c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	0011      	movs	r1, r2
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	f003 fe9f 	bl	8006a18 <USB_EPStartXfer>
 8002cda:	e006      	b.n	8002cea <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	0011      	movs	r1, r2
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f003 fe97 	bl	8006a18 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	0018      	movs	r0, r3
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	b006      	add	sp, #24
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	000a      	movs	r2, r1
 8002cfe:	1cfb      	adds	r3, r7, #3
 8002d00:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d02:	1cfb      	adds	r3, r7, #3
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2207      	movs	r2, #7
 8002d08:	401a      	ands	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d901      	bls.n	8002d16 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e048      	b.n	8002da8 <HAL_PCD_EP_SetStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d16:	1cfb      	adds	r3, r7, #3
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	b25b      	sxtb	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	da10      	bge.n	8002d42 <HAL_PCD_EP_SetStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d20:	1cfb      	adds	r3, r7, #3
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2207      	movs	r2, #7
 8002d26:	401a      	ands	r2, r3
 8002d28:	0013      	movs	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	189b      	adds	r3, r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	3338      	adds	r3, #56	@ 0x38
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	18d3      	adds	r3, r2, r3
 8002d36:	3304      	adds	r3, #4
 8002d38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	705a      	strb	r2, [r3, #1]
 8002d40:	e00e      	b.n	8002d60 <HAL_PCD_EP_SetStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d42:	1cfb      	adds	r3, r7, #3
 8002d44:	781a      	ldrb	r2, [r3, #0]
 8002d46:	0013      	movs	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	189b      	adds	r3, r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	3379      	adds	r3, #121	@ 0x79
 8002d50:	33ff      	adds	r3, #255	@ 0xff
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	18d3      	adds	r3, r2, r3
 8002d56:	3304      	adds	r3, #4
 8002d58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2201      	movs	r2, #1
 8002d64:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d66:	1cfb      	adds	r3, r7, #3
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2207      	movs	r2, #7
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	23af      	movs	r3, #175	@ 0xaf
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	5cd3      	ldrb	r3, [r2, r3]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d101      	bne.n	8002d84 <HAL_PCD_EP_SetStall+0x90>
 8002d80:	2302      	movs	r3, #2
 8002d82:	e011      	b.n	8002da8 <HAL_PCD_EP_SetStall+0xb4>
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	23af      	movs	r3, #175	@ 0xaf
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	0011      	movs	r1, r2
 8002d96:	0018      	movs	r0, r3
 8002d98:	f004 ff12 	bl	8007bc0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	23af      	movs	r3, #175	@ 0xaf
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	2100      	movs	r1, #0
 8002da4:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	0018      	movs	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	b004      	add	sp, #16
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	000a      	movs	r2, r1
 8002dba:	1cfb      	adds	r3, r7, #3
 8002dbc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002dbe:	1cfb      	adds	r3, r7, #3
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	220f      	movs	r2, #15
 8002dc4:	401a      	ands	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d901      	bls.n	8002dd2 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e04a      	b.n	8002e68 <HAL_PCD_EP_ClrStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002dd2:	1cfb      	adds	r3, r7, #3
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	b25b      	sxtb	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	da10      	bge.n	8002dfe <HAL_PCD_EP_ClrStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ddc:	1cfb      	adds	r3, r7, #3
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2207      	movs	r2, #7
 8002de2:	401a      	ands	r2, r3
 8002de4:	0013      	movs	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	189b      	adds	r3, r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	3338      	adds	r3, #56	@ 0x38
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	18d3      	adds	r3, r2, r3
 8002df2:	3304      	adds	r3, #4
 8002df4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	705a      	strb	r2, [r3, #1]
 8002dfc:	e010      	b.n	8002e20 <HAL_PCD_EP_ClrStall+0x70>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dfe:	1cfb      	adds	r3, r7, #3
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	2207      	movs	r2, #7
 8002e04:	401a      	ands	r2, r3
 8002e06:	0013      	movs	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	189b      	adds	r3, r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	3379      	adds	r3, #121	@ 0x79
 8002e10:	33ff      	adds	r3, #255	@ 0xff
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	18d3      	adds	r3, r2, r3
 8002e16:	3304      	adds	r3, #4
 8002e18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e26:	1cfb      	adds	r3, r7, #3
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	2207      	movs	r2, #7
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	23af      	movs	r3, #175	@ 0xaf
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	5cd3      	ldrb	r3, [r2, r3]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d101      	bne.n	8002e44 <HAL_PCD_EP_ClrStall+0x94>
 8002e40:	2302      	movs	r3, #2
 8002e42:	e011      	b.n	8002e68 <HAL_PCD_EP_ClrStall+0xb8>
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	23af      	movs	r3, #175	@ 0xaf
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	0011      	movs	r1, r2
 8002e56:	0018      	movs	r0, r3
 8002e58:	f004 fef4 	bl	8007c44 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	23af      	movs	r3, #175	@ 0xaf
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	2100      	movs	r1, #0
 8002e64:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	0018      	movs	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	b004      	add	sp, #16
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002e70:	b5b0      	push	{r4, r5, r7, lr}
 8002e72:	b08e      	sub	sp, #56	@ 0x38
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002e78:	e38a      	b.n	8003590 <PCD_EP_ISR_Handler+0x720>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e80:	202a      	movs	r0, #42	@ 0x2a
 8002e82:	183b      	adds	r3, r7, r0
 8002e84:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 8002e86:	183b      	adds	r3, r7, r0
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	2429      	movs	r4, #41	@ 0x29
 8002e8e:	193b      	adds	r3, r7, r4
 8002e90:	210f      	movs	r1, #15
 8002e92:	400a      	ands	r2, r1
 8002e94:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8002e96:	193b      	adds	r3, r7, r4
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d000      	beq.n	8002ea0 <PCD_EP_ISR_Handler+0x30>
 8002e9e:	e134      	b.n	800310a <PCD_EP_ISR_Handler+0x29a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002ea0:	183b      	adds	r3, r7, r0
 8002ea2:	881b      	ldrh	r3, [r3, #0]
 8002ea4:	2210      	movs	r2, #16
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	d143      	bne.n	8002f32 <PCD_EP_ISR_Handler+0xc2>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4ac9      	ldr	r2, [pc, #804]	@ (80031d8 <PCD_EP_ISR_Handler+0x368>)
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	60bb      	str	r3, [r7, #8]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	2180      	movs	r1, #128	@ 0x80
 8002ebe:	0209      	lsls	r1, r1, #8
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	333c      	adds	r3, #60	@ 0x3c
 8002ec8:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	4ac2      	ldr	r2, [pc, #776]	@ (80031dc <PCD_EP_ISR_Handler+0x36c>)
 8002ed2:	4694      	mov	ip, r2
 8002ed4:	4463      	add	r3, ip
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	0c1b      	lsrs	r3, r3, #16
 8002eda:	059b      	lsls	r3, r3, #22
 8002edc:	0d9a      	lsrs	r2, r3, #22
 8002ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ee0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ee4:	695a      	ldr	r2, [r3, #20]
 8002ee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	18d2      	adds	r2, r2, r3
 8002eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eee:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	f007 fcd5 	bl	800a8a4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2238      	movs	r2, #56	@ 0x38
 8002efe:	5c9b      	ldrb	r3, [r3, r2]
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d100      	bne.n	8002f08 <PCD_EP_ISR_Handler+0x98>
 8002f06:	e343      	b.n	8003590 <PCD_EP_ISR_Handler+0x720>
 8002f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d000      	beq.n	8002f12 <PCD_EP_ISR_Handler+0xa2>
 8002f10:	e33e      	b.n	8003590 <PCD_EP_ISR_Handler+0x720>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2238      	movs	r2, #56	@ 0x38
 8002f16:	5c9b      	ldrb	r3, [r3, r2]
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2280      	movs	r2, #128	@ 0x80
 8002f1c:	4252      	negs	r2, r2
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2238      	movs	r2, #56	@ 0x38
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	5499      	strb	r1, [r3, r2]
 8002f30:	e32e      	b.n	8003590 <PCD_EP_ISR_Handler+0x720>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	337d      	adds	r3, #125	@ 0x7d
 8002f36:	33ff      	adds	r3, #255	@ 0xff
 8002f38:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	2126      	movs	r1, #38	@ 0x26
 8002f42:	187b      	adds	r3, r7, r1
 8002f44:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002f46:	187b      	adds	r3, r7, r1
 8002f48:	881a      	ldrh	r2, [r3, #0]
 8002f4a:	2380      	movs	r3, #128	@ 0x80
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	4013      	ands	r3, r2
 8002f50:	d029      	beq.n	8002fa6 <PCD_EP_ISR_Handler+0x136>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	0019      	movs	r1, r3
 8002f5c:	0010      	movs	r0, r2
 8002f5e:	f7ff fa6d 	bl	800243c <PCD_GET_EP_RX_CNT>
 8002f62:	0003      	movs	r3, r0
 8002f64:	001a      	movs	r2, r3
 8002f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f68:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6818      	ldr	r0, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	22b1      	movs	r2, #177	@ 0xb1
 8002f72:	0092      	lsls	r2, r2, #2
 8002f74:	1899      	adds	r1, r3, r2
 8002f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f78:	889a      	ldrh	r2, [r3, #4]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f7c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	f004 ff98 	bl	8007eb4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a95      	ldr	r2, [pc, #596]	@ (80031e0 <PCD_EP_ISR_Handler+0x370>)
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	2180      	movs	r1, #128	@ 0x80
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	f007 fc4a 	bl	800a838 <HAL_PCD_SetupStageCallback>
 8002fa4:	e2f4      	b.n	8003590 <PCD_EP_ISR_Handler+0x720>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 8002fa6:	2326      	movs	r3, #38	@ 0x26
 8002fa8:	18fb      	adds	r3, r7, r3
 8002faa:	2200      	movs	r2, #0
 8002fac:	5e9b      	ldrsh	r3, [r3, r2]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	db00      	blt.n	8002fb4 <PCD_EP_ISR_Handler+0x144>
 8002fb2:	e2ed      	b.n	8003590 <PCD_EP_ISR_Handler+0x720>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a89      	ldr	r2, [pc, #548]	@ (80031e0 <PCD_EP_ISR_Handler+0x370>)
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	617b      	str	r3, [r7, #20]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	2180      	movs	r1, #128	@ 0x80
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	0019      	movs	r1, r3
 8002fd6:	0010      	movs	r0, r2
 8002fd8:	f7ff fa30 	bl	800243c <PCD_GET_EP_RX_CNT>
 8002fdc:	0003      	movs	r3, r0
 8002fde:	001a      	movs	r2, r3
 8002fe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fe2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fe6:	69db      	ldr	r3, [r3, #28]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d01a      	beq.n	8003022 <PCD_EP_ISR_Handler+0x1b2>
 8002fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d016      	beq.n	8003022 <PCD_EP_ISR_Handler+0x1b2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6818      	ldr	r0, [r3, #0]
 8002ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ffa:	6959      	ldr	r1, [r3, #20]
 8002ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ffe:	889a      	ldrh	r2, [r3, #4]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003002:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003004:	b29b      	uxth	r3, r3
 8003006:	f004 ff55 	bl	8007eb4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800300a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800300c:	695a      	ldr	r2, [r3, #20]
 800300e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	18d2      	adds	r2, r2, r3
 8003014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003016:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2100      	movs	r1, #0
 800301c:	0018      	movs	r0, r3
 800301e:	f007 fc20 	bl	800a862 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	2126      	movs	r1, #38	@ 0x26
 800302a:	187b      	adds	r3, r7, r1
 800302c:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800302e:	187b      	adds	r3, r7, r1
 8003030:	881a      	ldrh	r2, [r3, #0]
 8003032:	2380      	movs	r3, #128	@ 0x80
 8003034:	011b      	lsls	r3, r3, #4
 8003036:	4013      	ands	r3, r2
 8003038:	d000      	beq.n	800303c <PCD_EP_ISR_Handler+0x1cc>
 800303a:	e2a9      	b.n	8003590 <PCD_EP_ISR_Handler+0x720>
 800303c:	187b      	adds	r3, r7, r1
 800303e:	881a      	ldrh	r2, [r3, #0]
 8003040:	23c0      	movs	r3, #192	@ 0xc0
 8003042:	019b      	lsls	r3, r3, #6
 8003044:	401a      	ands	r2, r3
 8003046:	23c0      	movs	r3, #192	@ 0xc0
 8003048:	019b      	lsls	r3, r3, #6
 800304a:	429a      	cmp	r2, r3
 800304c:	d100      	bne.n	8003050 <PCD_EP_ISR_Handler+0x1e0>
 800304e:	e29f      	b.n	8003590 <PCD_EP_ISR_Handler+0x720>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003050:	4b62      	ldr	r3, [pc, #392]	@ (80031dc <PCD_EP_ISR_Handler+0x36c>)
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	4b61      	ldr	r3, [pc, #388]	@ (80031dc <PCD_EP_ISR_Handler+0x36c>)
 8003056:	0412      	lsls	r2, r2, #16
 8003058:	0c12      	lsrs	r2, r2, #16
 800305a:	605a      	str	r2, [r3, #4]
 800305c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	2b3e      	cmp	r3, #62	@ 0x3e
 8003062:	d916      	bls.n	8003092 <PCD_EP_ISR_Handler+0x222>
 8003064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	095b      	lsrs	r3, r3, #5
 800306a:	61bb      	str	r3, [r7, #24]
 800306c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	221f      	movs	r2, #31
 8003072:	4013      	ands	r3, r2
 8003074:	d102      	bne.n	800307c <PCD_EP_ISR_Handler+0x20c>
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	3b01      	subs	r3, #1
 800307a:	61bb      	str	r3, [r7, #24]
 800307c:	4b57      	ldr	r3, [pc, #348]	@ (80031dc <PCD_EP_ISR_Handler+0x36c>)
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	069b      	lsls	r3, r3, #26
 8003084:	431a      	orrs	r2, r3
 8003086:	4b55      	ldr	r3, [pc, #340]	@ (80031dc <PCD_EP_ISR_Handler+0x36c>)
 8003088:	2180      	movs	r1, #128	@ 0x80
 800308a:	0609      	lsls	r1, r1, #24
 800308c:	430a      	orrs	r2, r1
 800308e:	605a      	str	r2, [r3, #4]
 8003090:	e024      	b.n	80030dc <PCD_EP_ISR_Handler+0x26c>
 8003092:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10d      	bne.n	80030b6 <PCD_EP_ISR_Handler+0x246>
 800309a:	4b50      	ldr	r3, [pc, #320]	@ (80031dc <PCD_EP_ISR_Handler+0x36c>)
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	4b4f      	ldr	r3, [pc, #316]	@ (80031dc <PCD_EP_ISR_Handler+0x36c>)
 80030a0:	4950      	ldr	r1, [pc, #320]	@ (80031e4 <PCD_EP_ISR_Handler+0x374>)
 80030a2:	400a      	ands	r2, r1
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	4b4d      	ldr	r3, [pc, #308]	@ (80031dc <PCD_EP_ISR_Handler+0x36c>)
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	4b4c      	ldr	r3, [pc, #304]	@ (80031dc <PCD_EP_ISR_Handler+0x36c>)
 80030ac:	2180      	movs	r1, #128	@ 0x80
 80030ae:	0609      	lsls	r1, r1, #24
 80030b0:	430a      	orrs	r2, r1
 80030b2:	605a      	str	r2, [r3, #4]
 80030b4:	e012      	b.n	80030dc <PCD_EP_ISR_Handler+0x26c>
 80030b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	085b      	lsrs	r3, r3, #1
 80030bc:	61bb      	str	r3, [r7, #24]
 80030be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	2201      	movs	r2, #1
 80030c4:	4013      	ands	r3, r2
 80030c6:	d002      	beq.n	80030ce <PCD_EP_ISR_Handler+0x25e>
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	3301      	adds	r3, #1
 80030cc:	61bb      	str	r3, [r7, #24]
 80030ce:	4b43      	ldr	r3, [pc, #268]	@ (80031dc <PCD_EP_ISR_Handler+0x36c>)
 80030d0:	6859      	ldr	r1, [r3, #4]
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	069a      	lsls	r2, r3, #26
 80030d6:	4b41      	ldr	r3, [pc, #260]	@ (80031dc <PCD_EP_ISR_Handler+0x36c>)
 80030d8:	430a      	orrs	r2, r1
 80030da:	605a      	str	r2, [r3, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a41      	ldr	r2, [pc, #260]	@ (80031e8 <PCD_EP_ISR_Handler+0x378>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	2280      	movs	r2, #128	@ 0x80
 80030ec:	0152      	lsls	r2, r2, #5
 80030ee:	4053      	eors	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	2280      	movs	r2, #128	@ 0x80
 80030f6:	0192      	lsls	r2, r2, #6
 80030f8:	4053      	eors	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	493a      	ldr	r1, [pc, #232]	@ (80031ec <PCD_EP_ISR_Handler+0x37c>)
 8003104:	430a      	orrs	r2, r1
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	e242      	b.n	8003590 <PCD_EP_ISR_Handler+0x720>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	001a      	movs	r2, r3
 8003110:	2129      	movs	r1, #41	@ 0x29
 8003112:	187b      	adds	r3, r7, r1
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	18d3      	adds	r3, r2, r3
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	2026      	movs	r0, #38	@ 0x26
 800311e:	183b      	adds	r3, r7, r0
 8003120:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_VTRX) != 0U)
 8003122:	183b      	adds	r3, r7, r0
 8003124:	2200      	movs	r2, #0
 8003126:	5e9b      	ldrsh	r3, [r3, r2]
 8003128:	2b00      	cmp	r3, #0
 800312a:	db00      	blt.n	800312e <PCD_EP_ISR_Handler+0x2be>
 800312c:	e0e1      	b.n	80032f2 <PCD_EP_ISR_Handler+0x482>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	001a      	movs	r2, r3
 8003134:	187b      	adds	r3, r7, r1
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	18d3      	adds	r3, r2, r3
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a28      	ldr	r2, [pc, #160]	@ (80031e0 <PCD_EP_ISR_Handler+0x370>)
 8003140:	4013      	ands	r3, r2
 8003142:	623b      	str	r3, [r7, #32]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	001a      	movs	r2, r3
 800314a:	0008      	movs	r0, r1
 800314c:	187b      	adds	r3, r7, r1
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	18d3      	adds	r3, r2, r3
 8003154:	6a3a      	ldr	r2, [r7, #32]
 8003156:	2180      	movs	r1, #128	@ 0x80
 8003158:	430a      	orrs	r2, r1
 800315a:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800315c:	183b      	adds	r3, r7, r0
 800315e:	781a      	ldrb	r2, [r3, #0]
 8003160:	0013      	movs	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	189b      	adds	r3, r3, r2
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	3379      	adds	r3, #121	@ 0x79
 800316a:	33ff      	adds	r3, #255	@ 0xff
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	18d3      	adds	r3, r2, r3
 8003170:	3304      	adds	r3, #4
 8003172:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003176:	7a9b      	ldrb	r3, [r3, #10]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d11c      	bne.n	80031b6 <PCD_EP_ISR_Handler+0x346>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	252c      	movs	r5, #44	@ 0x2c
 8003186:	197c      	adds	r4, r7, r5
 8003188:	0019      	movs	r1, r3
 800318a:	0010      	movs	r0, r2
 800318c:	f7ff f956 	bl	800243c <PCD_GET_EP_RX_CNT>
 8003190:	0003      	movs	r3, r0
 8003192:	8023      	strh	r3, [r4, #0]

          if (count != 0U)
 8003194:	002c      	movs	r4, r5
 8003196:	193b      	adds	r3, r7, r4
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d100      	bne.n	80031a0 <PCD_EP_ISR_Handler+0x330>
 800319e:	e080      	b.n	80032a2 <PCD_EP_ISR_Handler+0x432>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6818      	ldr	r0, [r3, #0]
 80031a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031a6:	6959      	ldr	r1, [r3, #20]
 80031a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031aa:	889a      	ldrh	r2, [r3, #4]
 80031ac:	193b      	adds	r3, r7, r4
 80031ae:	881b      	ldrh	r3, [r3, #0]
 80031b0:	f004 fe80 	bl	8007eb4 <USB_ReadPMA>
 80031b4:	e075      	b.n	80032a2 <PCD_EP_ISR_Handler+0x432>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80031b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031b8:	78db      	ldrb	r3, [r3, #3]
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d118      	bne.n	80031f0 <PCD_EP_ISR_Handler+0x380>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80031be:	232c      	movs	r3, #44	@ 0x2c
 80031c0:	18fc      	adds	r4, r7, r3
 80031c2:	2326      	movs	r3, #38	@ 0x26
 80031c4:	18fb      	adds	r3, r7, r3
 80031c6:	881a      	ldrh	r2, [r3, #0]
 80031c8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	0018      	movs	r0, r3
 80031ce:	f000 f9ed 	bl	80035ac <HAL_PCD_EP_DB_Receive>
 80031d2:	0003      	movs	r3, r0
 80031d4:	8023      	strh	r3, [r4, #0]
 80031d6:	e064      	b.n	80032a2 <PCD_EP_ISR_Handler+0x432>
 80031d8:	07ff8f0f 	.word	0x07ff8f0f
 80031dc:	40009800 	.word	0x40009800
 80031e0:	07ff0f8f 	.word	0x07ff0f8f
 80031e4:	83ffffff 	.word	0x83ffffff
 80031e8:	07ffbf8f 	.word	0x07ffbf8f
 80031ec:	00008080 	.word	0x00008080
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	001a      	movs	r2, r3
 80031f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	18d3      	adds	r3, r2, r3
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4ada      	ldr	r2, [pc, #872]	@ (800356c <PCD_EP_ISR_Handler+0x6fc>)
 8003202:	4013      	ands	r3, r2
 8003204:	61fb      	str	r3, [r7, #28]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	001a      	movs	r2, r3
 800320c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	18d3      	adds	r3, r2, r3
 8003214:	69fa      	ldr	r2, [r7, #28]
 8003216:	49d6      	ldr	r1, [pc, #856]	@ (8003570 <PCD_EP_ISR_Handler+0x700>)
 8003218:	430a      	orrs	r2, r1
 800321a:	601a      	str	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	001a      	movs	r2, r3
 8003222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	18d3      	adds	r3, r2, r3
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	2380      	movs	r3, #128	@ 0x80
 800322e:	01db      	lsls	r3, r3, #7
 8003230:	4013      	ands	r3, r2
 8003232:	d01b      	beq.n	800326c <PCD_EP_ISR_Handler+0x3fc>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	252c      	movs	r5, #44	@ 0x2c
 800323e:	197c      	adds	r4, r7, r5
 8003240:	0019      	movs	r1, r3
 8003242:	0010      	movs	r0, r2
 8003244:	f7ff f91c 	bl	8002480 <PCD_GET_EP_DBUF0_CNT>
 8003248:	0003      	movs	r3, r0
 800324a:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 800324c:	002c      	movs	r4, r5
 800324e:	193b      	adds	r3, r7, r4
 8003250:	881b      	ldrh	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d025      	beq.n	80032a2 <PCD_EP_ISR_Handler+0x432>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6818      	ldr	r0, [r3, #0]
 800325a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800325c:	6959      	ldr	r1, [r3, #20]
 800325e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003260:	88da      	ldrh	r2, [r3, #6]
 8003262:	193b      	adds	r3, r7, r4
 8003264:	881b      	ldrh	r3, [r3, #0]
 8003266:	f004 fe25 	bl	8007eb4 <USB_ReadPMA>
 800326a:	e01a      	b.n	80032a2 <PCD_EP_ISR_Handler+0x432>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	252c      	movs	r5, #44	@ 0x2c
 8003276:	197c      	adds	r4, r7, r5
 8003278:	0019      	movs	r1, r3
 800327a:	0010      	movs	r0, r2
 800327c:	f7ff f922 	bl	80024c4 <PCD_GET_EP_DBUF1_CNT>
 8003280:	0003      	movs	r3, r0
 8003282:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 8003284:	002c      	movs	r4, r5
 8003286:	193b      	adds	r3, r7, r4
 8003288:	881b      	ldrh	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d009      	beq.n	80032a2 <PCD_EP_ISR_Handler+0x432>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6818      	ldr	r0, [r3, #0]
 8003292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003294:	6959      	ldr	r1, [r3, #20]
 8003296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003298:	891a      	ldrh	r2, [r3, #8]
 800329a:	193b      	adds	r3, r7, r4
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	f004 fe09 	bl	8007eb4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80032a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032a4:	69da      	ldr	r2, [r3, #28]
 80032a6:	212c      	movs	r1, #44	@ 0x2c
 80032a8:	187b      	adds	r3, r7, r1
 80032aa:	881b      	ldrh	r3, [r3, #0]
 80032ac:	18d2      	adds	r2, r2, r3
 80032ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032b0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80032b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032b4:	695a      	ldr	r2, [r3, #20]
 80032b6:	187b      	adds	r3, r7, r1
 80032b8:	881b      	ldrh	r3, [r3, #0]
 80032ba:	18d2      	adds	r2, r2, r3
 80032bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032be:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80032c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d005      	beq.n	80032d4 <PCD_EP_ISR_Handler+0x464>
 80032c8:	187b      	adds	r3, r7, r1
 80032ca:	881a      	ldrh	r2, [r3, #0]
 80032cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d207      	bcs.n	80032e4 <PCD_EP_ISR_Handler+0x474>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80032d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032d6:	781a      	ldrb	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	0011      	movs	r1, r2
 80032dc:	0018      	movs	r0, r3
 80032de:	f007 fac0 	bl	800a862 <HAL_PCD_DataOutStageCallback>
 80032e2:	e006      	b.n	80032f2 <PCD_EP_ISR_Handler+0x482>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80032ea:	0011      	movs	r1, r2
 80032ec:	0018      	movs	r0, r3
 80032ee:	f003 fb93 	bl	8006a18 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 80032f2:	2026      	movs	r0, #38	@ 0x26
 80032f4:	183b      	adds	r3, r7, r0
 80032f6:	881b      	ldrh	r3, [r3, #0]
 80032f8:	2280      	movs	r2, #128	@ 0x80
 80032fa:	4013      	ands	r3, r2
 80032fc:	d100      	bne.n	8003300 <PCD_EP_ISR_Handler+0x490>
 80032fe:	e147      	b.n	8003590 <PCD_EP_ISR_Handler+0x720>
      {
        ep = &hpcd->IN_ep[epindex];
 8003300:	2129      	movs	r1, #41	@ 0x29
 8003302:	187b      	adds	r3, r7, r1
 8003304:	781a      	ldrb	r2, [r3, #0]
 8003306:	0013      	movs	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	189b      	adds	r3, r3, r2
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	3338      	adds	r3, #56	@ 0x38
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	18d3      	adds	r3, r2, r3
 8003314:	3304      	adds	r3, #4
 8003316:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	001a      	movs	r2, r3
 800331e:	187b      	adds	r3, r7, r1
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	18d3      	adds	r3, r2, r3
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a92      	ldr	r2, [pc, #584]	@ (8003574 <PCD_EP_ISR_Handler+0x704>)
 800332a:	4013      	ands	r3, r2
 800332c:	633b      	str	r3, [r7, #48]	@ 0x30
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	001a      	movs	r2, r3
 8003334:	187b      	adds	r3, r7, r1
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	18d3      	adds	r3, r2, r3
 800333c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800333e:	2180      	movs	r1, #128	@ 0x80
 8003340:	0209      	lsls	r1, r1, #8
 8003342:	430a      	orrs	r2, r1
 8003344:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003348:	78db      	ldrb	r3, [r3, #3]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d000      	beq.n	8003350 <PCD_EP_ISR_Handler+0x4e0>
 800334e:	e0c3      	b.n	80034d8 <PCD_EP_ISR_Handler+0x668>
        {
          ep->xfer_len = 0U;
 8003350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003352:	2200      	movs	r2, #0
 8003354:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003358:	7a9b      	ldrb	r3, [r3, #10]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d100      	bne.n	8003360 <PCD_EP_ISR_Handler+0x4f0>
 800335e:	e0b3      	b.n	80034c8 <PCD_EP_ISR_Handler+0x658>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003360:	183b      	adds	r3, r7, r0
 8003362:	881b      	ldrh	r3, [r3, #0]
 8003364:	2240      	movs	r2, #64	@ 0x40
 8003366:	4013      	ands	r3, r2
 8003368:	d057      	beq.n	800341a <PCD_EP_ISR_Handler+0x5aa>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800336a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800336c:	785b      	ldrb	r3, [r3, #1]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d131      	bne.n	80033d6 <PCD_EP_ISR_Handler+0x566>
 8003372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	4a7f      	ldr	r2, [pc, #508]	@ (8003578 <PCD_EP_ISR_Handler+0x708>)
 800337a:	4694      	mov	ip, r2
 800337c:	4463      	add	r3, ip
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	497c      	ldr	r1, [pc, #496]	@ (8003578 <PCD_EP_ISR_Handler+0x708>)
 8003388:	468c      	mov	ip, r1
 800338a:	4463      	add	r3, ip
 800338c:	0412      	lsls	r2, r2, #16
 800338e:	0c12      	lsrs	r2, r2, #16
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	4a77      	ldr	r2, [pc, #476]	@ (8003578 <PCD_EP_ISR_Handler+0x708>)
 800339a:	4694      	mov	ip, r2
 800339c:	4463      	add	r3, ip
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	4974      	ldr	r1, [pc, #464]	@ (8003578 <PCD_EP_ISR_Handler+0x708>)
 80033a8:	468c      	mov	ip, r1
 80033aa:	4463      	add	r3, ip
 80033ac:	4973      	ldr	r1, [pc, #460]	@ (800357c <PCD_EP_ISR_Handler+0x70c>)
 80033ae:	400a      	ands	r2, r1
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	4a6f      	ldr	r2, [pc, #444]	@ (8003578 <PCD_EP_ISR_Handler+0x708>)
 80033ba:	4694      	mov	ip, r2
 80033bc:	4463      	add	r3, ip
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	496c      	ldr	r1, [pc, #432]	@ (8003578 <PCD_EP_ISR_Handler+0x708>)
 80033c8:	468c      	mov	ip, r1
 80033ca:	4463      	add	r3, ip
 80033cc:	2180      	movs	r1, #128	@ 0x80
 80033ce:	0609      	lsls	r1, r1, #24
 80033d0:	430a      	orrs	r2, r1
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	e078      	b.n	80034c8 <PCD_EP_ISR_Handler+0x658>
 80033d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033d8:	785b      	ldrb	r3, [r3, #1]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d174      	bne.n	80034c8 <PCD_EP_ISR_Handler+0x658>
 80033de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	4a64      	ldr	r2, [pc, #400]	@ (8003578 <PCD_EP_ISR_Handler+0x708>)
 80033e6:	4694      	mov	ip, r2
 80033e8:	4463      	add	r3, ip
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	4961      	ldr	r1, [pc, #388]	@ (8003578 <PCD_EP_ISR_Handler+0x708>)
 80033f4:	468c      	mov	ip, r1
 80033f6:	4463      	add	r3, ip
 80033f8:	0412      	lsls	r2, r2, #16
 80033fa:	0c12      	lsrs	r2, r2, #16
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	4a5c      	ldr	r2, [pc, #368]	@ (8003578 <PCD_EP_ISR_Handler+0x708>)
 8003406:	189a      	adds	r2, r3, r2
 8003408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	495a      	ldr	r1, [pc, #360]	@ (8003578 <PCD_EP_ISR_Handler+0x708>)
 8003410:	468c      	mov	ip, r1
 8003412:	4463      	add	r3, ip
 8003414:	6812      	ldr	r2, [r2, #0]
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	e056      	b.n	80034c8 <PCD_EP_ISR_Handler+0x658>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800341a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800341c:	785b      	ldrb	r3, [r3, #1]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d131      	bne.n	8003486 <PCD_EP_ISR_Handler+0x616>
 8003422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	4a53      	ldr	r2, [pc, #332]	@ (8003578 <PCD_EP_ISR_Handler+0x708>)
 800342a:	4694      	mov	ip, r2
 800342c:	4463      	add	r3, ip
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	4950      	ldr	r1, [pc, #320]	@ (8003578 <PCD_EP_ISR_Handler+0x708>)
 8003438:	468c      	mov	ip, r1
 800343a:	4463      	add	r3, ip
 800343c:	0412      	lsls	r2, r2, #16
 800343e:	0c12      	lsrs	r2, r2, #16
 8003440:	605a      	str	r2, [r3, #4]
 8003442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	4a4b      	ldr	r2, [pc, #300]	@ (8003578 <PCD_EP_ISR_Handler+0x708>)
 800344a:	4694      	mov	ip, r2
 800344c:	4463      	add	r3, ip
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	4948      	ldr	r1, [pc, #288]	@ (8003578 <PCD_EP_ISR_Handler+0x708>)
 8003458:	468c      	mov	ip, r1
 800345a:	4463      	add	r3, ip
 800345c:	4947      	ldr	r1, [pc, #284]	@ (800357c <PCD_EP_ISR_Handler+0x70c>)
 800345e:	400a      	ands	r2, r1
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	4a43      	ldr	r2, [pc, #268]	@ (8003578 <PCD_EP_ISR_Handler+0x708>)
 800346a:	4694      	mov	ip, r2
 800346c:	4463      	add	r3, ip
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	4940      	ldr	r1, [pc, #256]	@ (8003578 <PCD_EP_ISR_Handler+0x708>)
 8003478:	468c      	mov	ip, r1
 800347a:	4463      	add	r3, ip
 800347c:	2180      	movs	r1, #128	@ 0x80
 800347e:	0609      	lsls	r1, r1, #24
 8003480:	430a      	orrs	r2, r1
 8003482:	605a      	str	r2, [r3, #4]
 8003484:	e020      	b.n	80034c8 <PCD_EP_ISR_Handler+0x658>
 8003486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003488:	785b      	ldrb	r3, [r3, #1]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d11c      	bne.n	80034c8 <PCD_EP_ISR_Handler+0x658>
 800348e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	4a38      	ldr	r2, [pc, #224]	@ (8003578 <PCD_EP_ISR_Handler+0x708>)
 8003496:	4694      	mov	ip, r2
 8003498:	4463      	add	r3, ip
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	4935      	ldr	r1, [pc, #212]	@ (8003578 <PCD_EP_ISR_Handler+0x708>)
 80034a4:	468c      	mov	ip, r1
 80034a6:	4463      	add	r3, ip
 80034a8:	0412      	lsls	r2, r2, #16
 80034aa:	0c12      	lsrs	r2, r2, #16
 80034ac:	605a      	str	r2, [r3, #4]
 80034ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	4a30      	ldr	r2, [pc, #192]	@ (8003578 <PCD_EP_ISR_Handler+0x708>)
 80034b6:	189a      	adds	r2, r3, r2
 80034b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	492e      	ldr	r1, [pc, #184]	@ (8003578 <PCD_EP_ISR_Handler+0x708>)
 80034c0:	468c      	mov	ip, r1
 80034c2:	4463      	add	r3, ip
 80034c4:	6852      	ldr	r2, [r2, #4]
 80034c6:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80034c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ca:	781a      	ldrb	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	0011      	movs	r1, r2
 80034d0:	0018      	movs	r0, r3
 80034d2:	f007 f9e7 	bl	800a8a4 <HAL_PCD_DataInStageCallback>
 80034d6:	e05b      	b.n	8003590 <PCD_EP_ISR_Handler+0x720>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80034d8:	2326      	movs	r3, #38	@ 0x26
 80034da:	18fb      	adds	r3, r7, r3
 80034dc:	881a      	ldrh	r2, [r3, #0]
 80034de:	2380      	movs	r3, #128	@ 0x80
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	4013      	ands	r3, r2
 80034e4:	d14c      	bne.n	8003580 <PCD_EP_ISR_Handler+0x710>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80034e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	4a22      	ldr	r2, [pc, #136]	@ (8003578 <PCD_EP_ISR_Handler+0x708>)
 80034ee:	4694      	mov	ip, r2
 80034f0:	4463      	add	r3, ip
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	0c1b      	lsrs	r3, r3, #16
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	212e      	movs	r1, #46	@ 0x2e
 80034fa:	187b      	adds	r3, r7, r1
 80034fc:	0592      	lsls	r2, r2, #22
 80034fe:	0d92      	lsrs	r2, r2, #22
 8003500:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8003502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003504:	699a      	ldr	r2, [r3, #24]
 8003506:	187b      	adds	r3, r7, r1
 8003508:	881b      	ldrh	r3, [r3, #0]
 800350a:	429a      	cmp	r2, r3
 800350c:	d907      	bls.n	800351e <PCD_EP_ISR_Handler+0x6ae>
            {
              ep->xfer_len -= TxPctSize;
 800350e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003510:	699a      	ldr	r2, [r3, #24]
 8003512:	187b      	adds	r3, r7, r1
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	1ad2      	subs	r2, r2, r3
 8003518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800351a:	619a      	str	r2, [r3, #24]
 800351c:	e002      	b.n	8003524 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              ep->xfer_len = 0U;
 800351e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003520:	2200      	movs	r2, #0
 8003522:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d107      	bne.n	800353c <PCD_EP_ISR_Handler+0x6cc>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800352c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800352e:	781a      	ldrb	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	0011      	movs	r1, r2
 8003534:	0018      	movs	r0, r3
 8003536:	f007 f9b5 	bl	800a8a4 <HAL_PCD_DataInStageCallback>
 800353a:	e029      	b.n	8003590 <PCD_EP_ISR_Handler+0x720>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800353c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800353e:	695a      	ldr	r2, [r3, #20]
 8003540:	212e      	movs	r1, #46	@ 0x2e
 8003542:	187b      	adds	r3, r7, r1
 8003544:	881b      	ldrh	r3, [r3, #0]
 8003546:	18d2      	adds	r2, r2, r3
 8003548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800354a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800354c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800354e:	69da      	ldr	r2, [r3, #28]
 8003550:	187b      	adds	r3, r7, r1
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	18d2      	adds	r2, r2, r3
 8003556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003558:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003560:	0011      	movs	r1, r2
 8003562:	0018      	movs	r0, r3
 8003564:	f003 fa58 	bl	8006a18 <USB_EPStartXfer>
 8003568:	e012      	b.n	8003590 <PCD_EP_ISR_Handler+0x720>
 800356a:	46c0      	nop			@ (mov r8, r8)
 800356c:	07ff8f8f 	.word	0x07ff8f8f
 8003570:	000080c0 	.word	0x000080c0
 8003574:	07ff8f0f 	.word	0x07ff8f0f
 8003578:	40009800 	.word	0x40009800
 800357c:	83ffffff 	.word	0x83ffffff
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003580:	2326      	movs	r3, #38	@ 0x26
 8003582:	18fb      	adds	r3, r7, r3
 8003584:	881a      	ldrh	r2, [r3, #0]
 8003586:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	0018      	movs	r0, r3
 800358c:	f000 f8f8 	bl	8003780 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003596:	2380      	movs	r3, #128	@ 0x80
 8003598:	021b      	lsls	r3, r3, #8
 800359a:	4013      	ands	r3, r2
 800359c:	d000      	beq.n	80035a0 <PCD_EP_ISR_Handler+0x730>
 800359e:	e46c      	b.n	8002e7a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	0018      	movs	r0, r3
 80035a4:	46bd      	mov	sp, r7
 80035a6:	b00e      	add	sp, #56	@ 0x38
 80035a8:	bdb0      	pop	{r4, r5, r7, pc}
 80035aa:	46c0      	nop			@ (mov r8, r8)

080035ac <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80035ac:	b5b0      	push	{r4, r5, r7, lr}
 80035ae:	b08a      	sub	sp, #40	@ 0x28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	1dbb      	adds	r3, r7, #6
 80035b8:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80035ba:	1dbb      	adds	r3, r7, #6
 80035bc:	881a      	ldrh	r2, [r3, #0]
 80035be:	2380      	movs	r3, #128	@ 0x80
 80035c0:	01db      	lsls	r3, r3, #7
 80035c2:	4013      	ands	r3, r2
 80035c4:	d067      	beq.n	8003696 <HAL_PCD_EP_DB_Receive+0xea>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	251e      	movs	r5, #30
 80035d0:	197c      	adds	r4, r7, r5
 80035d2:	0019      	movs	r1, r3
 80035d4:	0010      	movs	r0, r2
 80035d6:	f7fe ff53 	bl	8002480 <PCD_GET_EP_DBUF0_CNT>
 80035da:	0003      	movs	r3, r0
 80035dc:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	699a      	ldr	r2, [r3, #24]
 80035e2:	197b      	adds	r3, r7, r5
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d307      	bcc.n	80035fa <HAL_PCD_EP_DB_Receive+0x4e>
    {
      ep->xfer_len -= count;
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	699a      	ldr	r2, [r3, #24]
 80035ee:	197b      	adds	r3, r7, r5
 80035f0:	881b      	ldrh	r3, [r3, #0]
 80035f2:	1ad2      	subs	r2, r2, r3
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	619a      	str	r2, [r3, #24]
 80035f8:	e002      	b.n	8003600 <HAL_PCD_EP_DB_Receive+0x54>
    }
    else
    {
      ep->xfer_len = 0U;
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	2200      	movs	r2, #0
 80035fe:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d11a      	bne.n	800363e <HAL_PCD_EP_DB_Receive+0x92>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	001a      	movs	r2, r3
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	18d3      	adds	r3, r2, r3
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a55      	ldr	r2, [pc, #340]	@ (8003770 <HAL_PCD_EP_DB_Receive+0x1c4>)
 800361a:	4013      	ands	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	2280      	movs	r2, #128	@ 0x80
 8003622:	0192      	lsls	r2, r2, #6
 8003624:	4053      	eors	r3, r2
 8003626:	61bb      	str	r3, [r7, #24]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	001a      	movs	r2, r3
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	18d3      	adds	r3, r2, r3
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	494e      	ldr	r1, [pc, #312]	@ (8003774 <HAL_PCD_EP_DB_Receive+0x1c8>)
 800363a:	430a      	orrs	r2, r1
 800363c:	601a      	str	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800363e:	1dbb      	adds	r3, r7, #6
 8003640:	881b      	ldrh	r3, [r3, #0]
 8003642:	2240      	movs	r2, #64	@ 0x40
 8003644:	4013      	ands	r3, r2
 8003646:	d015      	beq.n	8003674 <HAL_PCD_EP_DB_Receive+0xc8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	001a      	movs	r2, r3
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	18d3      	adds	r3, r2, r3
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a47      	ldr	r2, [pc, #284]	@ (8003778 <HAL_PCD_EP_DB_Receive+0x1cc>)
 800365a:	4013      	ands	r3, r2
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	001a      	movs	r2, r3
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	18d3      	adds	r3, r2, r3
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	4943      	ldr	r1, [pc, #268]	@ (800377c <HAL_PCD_EP_DB_Receive+0x1d0>)
 8003670:	430a      	orrs	r2, r1
 8003672:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 8003674:	241e      	movs	r4, #30
 8003676:	193b      	adds	r3, r7, r4
 8003678:	881b      	ldrh	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d100      	bne.n	8003680 <HAL_PCD_EP_DB_Receive+0xd4>
 800367e:	e070      	b.n	8003762 <HAL_PCD_EP_DB_Receive+0x1b6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6818      	ldr	r0, [r3, #0]
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	6959      	ldr	r1, [r3, #20]
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	88da      	ldrh	r2, [r3, #6]
 800368c:	193b      	adds	r3, r7, r4
 800368e:	881b      	ldrh	r3, [r3, #0]
 8003690:	f004 fc10 	bl	8007eb4 <USB_ReadPMA>
 8003694:	e065      	b.n	8003762 <HAL_PCD_EP_DB_Receive+0x1b6>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	251e      	movs	r5, #30
 80036a0:	197c      	adds	r4, r7, r5
 80036a2:	0019      	movs	r1, r3
 80036a4:	0010      	movs	r0, r2
 80036a6:	f7fe ff0d 	bl	80024c4 <PCD_GET_EP_DBUF1_CNT>
 80036aa:	0003      	movs	r3, r0
 80036ac:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	699a      	ldr	r2, [r3, #24]
 80036b2:	197b      	adds	r3, r7, r5
 80036b4:	881b      	ldrh	r3, [r3, #0]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d307      	bcc.n	80036ca <HAL_PCD_EP_DB_Receive+0x11e>
    {
      ep->xfer_len -= count;
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	699a      	ldr	r2, [r3, #24]
 80036be:	197b      	adds	r3, r7, r5
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	1ad2      	subs	r2, r2, r3
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	619a      	str	r2, [r3, #24]
 80036c8:	e002      	b.n	80036d0 <HAL_PCD_EP_DB_Receive+0x124>
    }
    else
    {
      ep->xfer_len = 0U;
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2200      	movs	r2, #0
 80036ce:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d11a      	bne.n	800370e <HAL_PCD_EP_DB_Receive+0x162>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	001a      	movs	r2, r3
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	18d3      	adds	r3, r2, r3
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a21      	ldr	r2, [pc, #132]	@ (8003770 <HAL_PCD_EP_DB_Receive+0x1c4>)
 80036ea:	4013      	ands	r3, r2
 80036ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80036ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f0:	2280      	movs	r2, #128	@ 0x80
 80036f2:	0192      	lsls	r2, r2, #6
 80036f4:	4053      	eors	r3, r2
 80036f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	001a      	movs	r2, r3
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	18d3      	adds	r3, r2, r3
 8003706:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003708:	491a      	ldr	r1, [pc, #104]	@ (8003774 <HAL_PCD_EP_DB_Receive+0x1c8>)
 800370a:	430a      	orrs	r2, r1
 800370c:	601a      	str	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800370e:	1dbb      	adds	r3, r7, #6
 8003710:	881b      	ldrh	r3, [r3, #0]
 8003712:	2240      	movs	r2, #64	@ 0x40
 8003714:	4013      	ands	r3, r2
 8003716:	d115      	bne.n	8003744 <HAL_PCD_EP_DB_Receive+0x198>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	001a      	movs	r2, r3
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	18d3      	adds	r3, r2, r3
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a13      	ldr	r2, [pc, #76]	@ (8003778 <HAL_PCD_EP_DB_Receive+0x1cc>)
 800372a:	4013      	ands	r3, r2
 800372c:	623b      	str	r3, [r7, #32]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	001a      	movs	r2, r3
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	18d3      	adds	r3, r2, r3
 800373c:	6a3a      	ldr	r2, [r7, #32]
 800373e:	490f      	ldr	r1, [pc, #60]	@ (800377c <HAL_PCD_EP_DB_Receive+0x1d0>)
 8003740:	430a      	orrs	r2, r1
 8003742:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 8003744:	241e      	movs	r4, #30
 8003746:	193b      	adds	r3, r7, r4
 8003748:	881b      	ldrh	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d009      	beq.n	8003762 <HAL_PCD_EP_DB_Receive+0x1b6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6818      	ldr	r0, [r3, #0]
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	6959      	ldr	r1, [r3, #20]
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	891a      	ldrh	r2, [r3, #8]
 800375a:	193b      	adds	r3, r7, r4
 800375c:	881b      	ldrh	r3, [r3, #0]
 800375e:	f004 fba9 	bl	8007eb4 <USB_ReadPMA>
    }
  }

  return count;
 8003762:	231e      	movs	r3, #30
 8003764:	18fb      	adds	r3, r7, r3
 8003766:	881b      	ldrh	r3, [r3, #0]
}
 8003768:	0018      	movs	r0, r3
 800376a:	46bd      	mov	sp, r7
 800376c:	b00a      	add	sp, #40	@ 0x28
 800376e:	bdb0      	pop	{r4, r5, r7, pc}
 8003770:	07ffbf8f 	.word	0x07ffbf8f
 8003774:	00008080 	.word	0x00008080
 8003778:	07ff8f8f 	.word	0x07ff8f8f
 800377c:	000080c0 	.word	0x000080c0

08003780 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003780:	b5b0      	push	{r4, r5, r7, lr}
 8003782:	b08e      	sub	sp, #56	@ 0x38
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	1dbb      	adds	r3, r7, #6
 800378c:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800378e:	1dbb      	adds	r3, r7, #6
 8003790:	881b      	ldrh	r3, [r3, #0]
 8003792:	2240      	movs	r2, #64	@ 0x40
 8003794:	4013      	ands	r3, r2
 8003796:	d100      	bne.n	800379a <HAL_PCD_EP_DB_Transmit+0x1a>
 8003798:	e1fc      	b.n	8003b94 <HAL_PCD_EP_DB_Transmit+0x414>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	2526      	movs	r5, #38	@ 0x26
 80037a4:	197c      	adds	r4, r7, r5
 80037a6:	0019      	movs	r1, r3
 80037a8:	0010      	movs	r0, r2
 80037aa:	f7fe fe69 	bl	8002480 <PCD_GET_EP_DBUF0_CNT>
 80037ae:	0003      	movs	r3, r0
 80037b0:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len > TxPctSize)
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	699a      	ldr	r2, [r3, #24]
 80037b6:	197b      	adds	r3, r7, r5
 80037b8:	881b      	ldrh	r3, [r3, #0]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d907      	bls.n	80037ce <HAL_PCD_EP_DB_Transmit+0x4e>
    {
      ep->xfer_len -= TxPctSize;
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	699a      	ldr	r2, [r3, #24]
 80037c2:	197b      	adds	r3, r7, r5
 80037c4:	881b      	ldrh	r3, [r3, #0]
 80037c6:	1ad2      	subs	r2, r2, r3
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	619a      	str	r2, [r3, #24]
 80037cc:	e002      	b.n	80037d4 <HAL_PCD_EP_DB_Transmit+0x54>
    }
    else
    {
      ep->xfer_len = 0U;
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2200      	movs	r2, #0
 80037d2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d000      	beq.n	80037de <HAL_PCD_EP_DB_Transmit+0x5e>
 80037dc:	e0d2      	b.n	8003984 <HAL_PCD_EP_DB_Transmit+0x204>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	785b      	ldrb	r3, [r3, #1]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d131      	bne.n	800384a <HAL_PCD_EP_DB_Transmit+0xca>
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	4ae5      	ldr	r2, [pc, #916]	@ (8003b84 <HAL_PCD_EP_DB_Transmit+0x404>)
 80037ee:	4694      	mov	ip, r2
 80037f0:	4463      	add	r3, ip
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	49e2      	ldr	r1, [pc, #904]	@ (8003b84 <HAL_PCD_EP_DB_Transmit+0x404>)
 80037fc:	468c      	mov	ip, r1
 80037fe:	4463      	add	r3, ip
 8003800:	0412      	lsls	r2, r2, #16
 8003802:	0c12      	lsrs	r2, r2, #16
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	4add      	ldr	r2, [pc, #884]	@ (8003b84 <HAL_PCD_EP_DB_Transmit+0x404>)
 800380e:	4694      	mov	ip, r2
 8003810:	4463      	add	r3, ip
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	49da      	ldr	r1, [pc, #872]	@ (8003b84 <HAL_PCD_EP_DB_Transmit+0x404>)
 800381c:	468c      	mov	ip, r1
 800381e:	4463      	add	r3, ip
 8003820:	49d9      	ldr	r1, [pc, #868]	@ (8003b88 <HAL_PCD_EP_DB_Transmit+0x408>)
 8003822:	400a      	ands	r2, r1
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	4ad5      	ldr	r2, [pc, #852]	@ (8003b84 <HAL_PCD_EP_DB_Transmit+0x404>)
 800382e:	4694      	mov	ip, r2
 8003830:	4463      	add	r3, ip
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	49d2      	ldr	r1, [pc, #840]	@ (8003b84 <HAL_PCD_EP_DB_Transmit+0x404>)
 800383c:	468c      	mov	ip, r1
 800383e:	4463      	add	r3, ip
 8003840:	2180      	movs	r1, #128	@ 0x80
 8003842:	0609      	lsls	r1, r1, #24
 8003844:	430a      	orrs	r2, r1
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	e020      	b.n	800388c <HAL_PCD_EP_DB_Transmit+0x10c>
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	785b      	ldrb	r3, [r3, #1]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d11c      	bne.n	800388c <HAL_PCD_EP_DB_Transmit+0x10c>
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	4aca      	ldr	r2, [pc, #808]	@ (8003b84 <HAL_PCD_EP_DB_Transmit+0x404>)
 800385a:	4694      	mov	ip, r2
 800385c:	4463      	add	r3, ip
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	49c7      	ldr	r1, [pc, #796]	@ (8003b84 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003868:	468c      	mov	ip, r1
 800386a:	4463      	add	r3, ip
 800386c:	0412      	lsls	r2, r2, #16
 800386e:	0c12      	lsrs	r2, r2, #16
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	4ac2      	ldr	r2, [pc, #776]	@ (8003b84 <HAL_PCD_EP_DB_Transmit+0x404>)
 800387a:	189a      	adds	r2, r3, r2
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	00db      	lsls	r3, r3, #3
 8003882:	49c0      	ldr	r1, [pc, #768]	@ (8003b84 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003884:	468c      	mov	ip, r1
 8003886:	4463      	add	r3, ip
 8003888:	6812      	ldr	r2, [r2, #0]
 800388a:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	785b      	ldrb	r3, [r3, #1]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d131      	bne.n	80038f8 <HAL_PCD_EP_DB_Transmit+0x178>
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	4aba      	ldr	r2, [pc, #744]	@ (8003b84 <HAL_PCD_EP_DB_Transmit+0x404>)
 800389c:	4694      	mov	ip, r2
 800389e:	4463      	add	r3, ip
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	49b6      	ldr	r1, [pc, #728]	@ (8003b84 <HAL_PCD_EP_DB_Transmit+0x404>)
 80038aa:	468c      	mov	ip, r1
 80038ac:	4463      	add	r3, ip
 80038ae:	0412      	lsls	r2, r2, #16
 80038b0:	0c12      	lsrs	r2, r2, #16
 80038b2:	605a      	str	r2, [r3, #4]
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	4ab2      	ldr	r2, [pc, #712]	@ (8003b84 <HAL_PCD_EP_DB_Transmit+0x404>)
 80038bc:	4694      	mov	ip, r2
 80038be:	4463      	add	r3, ip
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	49ae      	ldr	r1, [pc, #696]	@ (8003b84 <HAL_PCD_EP_DB_Transmit+0x404>)
 80038ca:	468c      	mov	ip, r1
 80038cc:	4463      	add	r3, ip
 80038ce:	49ae      	ldr	r1, [pc, #696]	@ (8003b88 <HAL_PCD_EP_DB_Transmit+0x408>)
 80038d0:	400a      	ands	r2, r1
 80038d2:	605a      	str	r2, [r3, #4]
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	4aaa      	ldr	r2, [pc, #680]	@ (8003b84 <HAL_PCD_EP_DB_Transmit+0x404>)
 80038dc:	4694      	mov	ip, r2
 80038de:	4463      	add	r3, ip
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	49a6      	ldr	r1, [pc, #664]	@ (8003b84 <HAL_PCD_EP_DB_Transmit+0x404>)
 80038ea:	468c      	mov	ip, r1
 80038ec:	4463      	add	r3, ip
 80038ee:	2180      	movs	r1, #128	@ 0x80
 80038f0:	0609      	lsls	r1, r1, #24
 80038f2:	430a      	orrs	r2, r1
 80038f4:	605a      	str	r2, [r3, #4]
 80038f6:	e020      	b.n	800393a <HAL_PCD_EP_DB_Transmit+0x1ba>
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	785b      	ldrb	r3, [r3, #1]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d11c      	bne.n	800393a <HAL_PCD_EP_DB_Transmit+0x1ba>
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	4a9f      	ldr	r2, [pc, #636]	@ (8003b84 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003908:	4694      	mov	ip, r2
 800390a:	4463      	add	r3, ip
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	499b      	ldr	r1, [pc, #620]	@ (8003b84 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003916:	468c      	mov	ip, r1
 8003918:	4463      	add	r3, ip
 800391a:	0412      	lsls	r2, r2, #16
 800391c:	0c12      	lsrs	r2, r2, #16
 800391e:	605a      	str	r2, [r3, #4]
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	00db      	lsls	r3, r3, #3
 8003926:	4a97      	ldr	r2, [pc, #604]	@ (8003b84 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003928:	189a      	adds	r2, r3, r2
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	4994      	ldr	r1, [pc, #592]	@ (8003b84 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003932:	468c      	mov	ip, r1
 8003934:	4463      	add	r3, ip
 8003936:	6852      	ldr	r2, [r2, #4]
 8003938:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	781a      	ldrb	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	0011      	movs	r1, r2
 8003942:	0018      	movs	r0, r3
 8003944:	f006 ffae 	bl	800a8a4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003948:	1dbb      	adds	r3, r7, #6
 800394a:	881a      	ldrh	r2, [r3, #0]
 800394c:	2380      	movs	r3, #128	@ 0x80
 800394e:	01db      	lsls	r3, r3, #7
 8003950:	4013      	ands	r3, r2
 8003952:	d100      	bne.n	8003956 <HAL_PCD_EP_DB_Transmit+0x1d6>
 8003954:	e31b      	b.n	8003f8e <HAL_PCD_EP_DB_Transmit+0x80e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	001a      	movs	r2, r3
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	18d3      	adds	r3, r2, r3
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a89      	ldr	r2, [pc, #548]	@ (8003b8c <HAL_PCD_EP_DB_Transmit+0x40c>)
 8003968:	4013      	ands	r3, r2
 800396a:	633b      	str	r3, [r7, #48]	@ 0x30
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	001a      	movs	r2, r3
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	18d3      	adds	r3, r2, r3
 800397a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800397c:	4984      	ldr	r1, [pc, #528]	@ (8003b90 <HAL_PCD_EP_DB_Transmit+0x410>)
 800397e:	430a      	orrs	r2, r1
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	e304      	b.n	8003f8e <HAL_PCD_EP_DB_Transmit+0x80e>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003984:	1dbb      	adds	r3, r7, #6
 8003986:	881a      	ldrh	r2, [r3, #0]
 8003988:	2380      	movs	r3, #128	@ 0x80
 800398a:	01db      	lsls	r3, r3, #7
 800398c:	4013      	ands	r3, r2
 800398e:	d015      	beq.n	80039bc <HAL_PCD_EP_DB_Transmit+0x23c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	001a      	movs	r2, r3
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	18d3      	adds	r3, r2, r3
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a7a      	ldr	r2, [pc, #488]	@ (8003b8c <HAL_PCD_EP_DB_Transmit+0x40c>)
 80039a2:	4013      	ands	r3, r2
 80039a4:	623b      	str	r3, [r7, #32]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	001a      	movs	r2, r3
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	18d3      	adds	r3, r2, r3
 80039b4:	6a3a      	ldr	r2, [r7, #32]
 80039b6:	4976      	ldr	r1, [pc, #472]	@ (8003b90 <HAL_PCD_EP_DB_Transmit+0x410>)
 80039b8:	430a      	orrs	r2, r1
 80039ba:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2224      	movs	r2, #36	@ 0x24
 80039c0:	5c9b      	ldrb	r3, [r3, r2]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d000      	beq.n	80039c8 <HAL_PCD_EP_DB_Transmit+0x248>
 80039c6:	e2e2      	b.n	8003f8e <HAL_PCD_EP_DB_Transmit+0x80e>
      {
        ep->xfer_buff += TxPctSize;
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	695a      	ldr	r2, [r3, #20]
 80039cc:	2126      	movs	r1, #38	@ 0x26
 80039ce:	187b      	adds	r3, r7, r1
 80039d0:	881b      	ldrh	r3, [r3, #0]
 80039d2:	18d2      	adds	r2, r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	69da      	ldr	r2, [r3, #28]
 80039dc:	187b      	adds	r3, r7, r1
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	18d2      	adds	r2, r2, r3
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	6a1a      	ldr	r2, [r3, #32]
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d309      	bcc.n	8003a06 <HAL_PCD_EP_DB_Transmit+0x286>
        {
          len = ep->maxpacket;
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
          ep->xfer_len_db -= len;
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	6a1a      	ldr	r2, [r3, #32]
 80039fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039fe:	1ad2      	subs	r2, r2, r3
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	621a      	str	r2, [r3, #32]
 8003a04:	e016      	b.n	8003a34 <HAL_PCD_EP_DB_Transmit+0x2b4>
        }
        else if (ep->xfer_len_db == 0U)
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d108      	bne.n	8003a20 <HAL_PCD_EP_DB_Transmit+0x2a0>
        {
          len = TxPctSize;
 8003a0e:	2326      	movs	r3, #38	@ 0x26
 8003a10:	18fb      	adds	r3, r7, r3
 8003a12:	881b      	ldrh	r3, [r3, #0]
 8003a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
          ep->xfer_fill_db = 0U;
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	2224      	movs	r2, #36	@ 0x24
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	5499      	strb	r1, [r3, r2]
 8003a1e:	e009      	b.n	8003a34 <HAL_PCD_EP_DB_Transmit+0x2b4>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	2224      	movs	r2, #36	@ 0x24
 8003a24:	2100      	movs	r1, #0
 8003a26:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          ep->xfer_len_db = 0U;
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	2200      	movs	r2, #0
 8003a32:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	785b      	ldrb	r3, [r3, #1]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d172      	bne.n	8003b22 <HAL_PCD_EP_DB_Transmit+0x3a2>
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	4a50      	ldr	r2, [pc, #320]	@ (8003b84 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003a44:	4694      	mov	ip, r2
 8003a46:	4463      	add	r3, ip
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	494c      	ldr	r1, [pc, #304]	@ (8003b84 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003a52:	468c      	mov	ip, r1
 8003a54:	4463      	add	r3, ip
 8003a56:	0412      	lsls	r2, r2, #16
 8003a58:	0c12      	lsrs	r2, r2, #16
 8003a5a:	601a      	str	r2, [r3, #0]
 8003a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a5e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003a60:	d91e      	bls.n	8003aa0 <HAL_PCD_EP_DB_Transmit+0x320>
 8003a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a64:	095b      	lsrs	r3, r3, #5
 8003a66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a6a:	221f      	movs	r2, #31
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	d102      	bne.n	8003a76 <HAL_PCD_EP_DB_Transmit+0x2f6>
 8003a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a72:	3b01      	subs	r3, #1
 8003a74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	4a41      	ldr	r2, [pc, #260]	@ (8003b84 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003a7e:	4694      	mov	ip, r2
 8003a80:	4463      	add	r3, ip
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a86:	069b      	lsls	r3, r3, #26
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	493c      	ldr	r1, [pc, #240]	@ (8003b84 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003a92:	468c      	mov	ip, r1
 8003a94:	4463      	add	r3, ip
 8003a96:	2180      	movs	r1, #128	@ 0x80
 8003a98:	0609      	lsls	r1, r1, #24
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	e065      	b.n	8003b6c <HAL_PCD_EP_DB_Transmit+0x3ec>
 8003aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d121      	bne.n	8003aea <HAL_PCD_EP_DB_Transmit+0x36a>
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	4a35      	ldr	r2, [pc, #212]	@ (8003b84 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003aae:	4694      	mov	ip, r2
 8003ab0:	4463      	add	r3, ip
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	4932      	ldr	r1, [pc, #200]	@ (8003b84 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003abc:	468c      	mov	ip, r1
 8003abe:	4463      	add	r3, ip
 8003ac0:	4931      	ldr	r1, [pc, #196]	@ (8003b88 <HAL_PCD_EP_DB_Transmit+0x408>)
 8003ac2:	400a      	ands	r2, r1
 8003ac4:	601a      	str	r2, [r3, #0]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	4a2d      	ldr	r2, [pc, #180]	@ (8003b84 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003ace:	4694      	mov	ip, r2
 8003ad0:	4463      	add	r3, ip
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	492a      	ldr	r1, [pc, #168]	@ (8003b84 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003adc:	468c      	mov	ip, r1
 8003ade:	4463      	add	r3, ip
 8003ae0:	2180      	movs	r1, #128	@ 0x80
 8003ae2:	0609      	lsls	r1, r1, #24
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	601a      	str	r2, [r3, #0]
 8003ae8:	e040      	b.n	8003b6c <HAL_PCD_EP_DB_Transmit+0x3ec>
 8003aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aec:	085b      	lsrs	r3, r3, #1
 8003aee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003af2:	2201      	movs	r2, #1
 8003af4:	4013      	ands	r3, r2
 8003af6:	d002      	beq.n	8003afe <HAL_PCD_EP_DB_Transmit+0x37e>
 8003af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003afa:	3301      	adds	r3, #1
 8003afc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	4a1f      	ldr	r2, [pc, #124]	@ (8003b84 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003b06:	4694      	mov	ip, r2
 8003b08:	4463      	add	r3, ip
 8003b0a:	6819      	ldr	r1, [r3, #0]
 8003b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b0e:	069a      	lsls	r2, r3, #26
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	481b      	ldr	r0, [pc, #108]	@ (8003b84 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003b18:	4684      	mov	ip, r0
 8003b1a:	4463      	add	r3, ip
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	e024      	b.n	8003b6c <HAL_PCD_EP_DB_Transmit+0x3ec>
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	785b      	ldrb	r3, [r3, #1]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d120      	bne.n	8003b6c <HAL_PCD_EP_DB_Transmit+0x3ec>
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	4a14      	ldr	r2, [pc, #80]	@ (8003b84 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003b32:	4694      	mov	ip, r2
 8003b34:	4463      	add	r3, ip
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	4911      	ldr	r1, [pc, #68]	@ (8003b84 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003b40:	468c      	mov	ip, r1
 8003b42:	4463      	add	r3, ip
 8003b44:	0412      	lsls	r2, r2, #16
 8003b46:	0c12      	lsrs	r2, r2, #16
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	4a0c      	ldr	r2, [pc, #48]	@ (8003b84 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003b52:	4694      	mov	ip, r2
 8003b54:	4463      	add	r3, ip
 8003b56:	6819      	ldr	r1, [r3, #0]
 8003b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b5a:	041a      	lsls	r2, r3, #16
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	4808      	ldr	r0, [pc, #32]	@ (8003b84 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003b64:	4684      	mov	ip, r0
 8003b66:	4463      	add	r3, ip
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6818      	ldr	r0, [r3, #0]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	6959      	ldr	r1, [r3, #20]
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	88da      	ldrh	r2, [r3, #6]
 8003b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	f004 f924 	bl	8007dc8 <USB_WritePMA>
 8003b80:	e205      	b.n	8003f8e <HAL_PCD_EP_DB_Transmit+0x80e>
 8003b82:	46c0      	nop			@ (mov r8, r8)
 8003b84:	40009800 	.word	0x40009800
 8003b88:	83ffffff 	.word	0x83ffffff
 8003b8c:	07ff8f8f 	.word	0x07ff8f8f
 8003b90:	0000c080 	.word	0x0000c080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	2526      	movs	r5, #38	@ 0x26
 8003b9e:	197c      	adds	r4, r7, r5
 8003ba0:	0019      	movs	r1, r3
 8003ba2:	0010      	movs	r0, r2
 8003ba4:	f7fe fc8e 	bl	80024c4 <PCD_GET_EP_DBUF1_CNT>
 8003ba8:	0003      	movs	r3, r0
 8003baa:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= TxPctSize)
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	699a      	ldr	r2, [r3, #24]
 8003bb0:	197b      	adds	r3, r7, r5
 8003bb2:	881b      	ldrh	r3, [r3, #0]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d307      	bcc.n	8003bc8 <HAL_PCD_EP_DB_Transmit+0x448>
    {
      ep->xfer_len -= TxPctSize;
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	699a      	ldr	r2, [r3, #24]
 8003bbc:	197b      	adds	r3, r7, r5
 8003bbe:	881b      	ldrh	r3, [r3, #0]
 8003bc0:	1ad2      	subs	r2, r2, r3
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	619a      	str	r2, [r3, #24]
 8003bc6:	e002      	b.n	8003bce <HAL_PCD_EP_DB_Transmit+0x44e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d000      	beq.n	8003bd8 <HAL_PCD_EP_DB_Transmit+0x458>
 8003bd6:	e0d2      	b.n	8003d7e <HAL_PCD_EP_DB_Transmit+0x5fe>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	785b      	ldrb	r3, [r3, #1]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d131      	bne.n	8003c44 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	4ace      	ldr	r2, [pc, #824]	@ (8003f20 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003be8:	4694      	mov	ip, r2
 8003bea:	4463      	add	r3, ip
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	49ca      	ldr	r1, [pc, #808]	@ (8003f20 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003bf6:	468c      	mov	ip, r1
 8003bf8:	4463      	add	r3, ip
 8003bfa:	0412      	lsls	r2, r2, #16
 8003bfc:	0c12      	lsrs	r2, r2, #16
 8003bfe:	601a      	str	r2, [r3, #0]
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	4ac6      	ldr	r2, [pc, #792]	@ (8003f20 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003c08:	4694      	mov	ip, r2
 8003c0a:	4463      	add	r3, ip
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	49c2      	ldr	r1, [pc, #776]	@ (8003f20 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003c16:	468c      	mov	ip, r1
 8003c18:	4463      	add	r3, ip
 8003c1a:	49c2      	ldr	r1, [pc, #776]	@ (8003f24 <HAL_PCD_EP_DB_Transmit+0x7a4>)
 8003c1c:	400a      	ands	r2, r1
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	4abe      	ldr	r2, [pc, #760]	@ (8003f20 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003c28:	4694      	mov	ip, r2
 8003c2a:	4463      	add	r3, ip
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	49ba      	ldr	r1, [pc, #744]	@ (8003f20 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003c36:	468c      	mov	ip, r1
 8003c38:	4463      	add	r3, ip
 8003c3a:	2180      	movs	r1, #128	@ 0x80
 8003c3c:	0609      	lsls	r1, r1, #24
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	e020      	b.n	8003c86 <HAL_PCD_EP_DB_Transmit+0x506>
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	785b      	ldrb	r3, [r3, #1]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d11c      	bne.n	8003c86 <HAL_PCD_EP_DB_Transmit+0x506>
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	00db      	lsls	r3, r3, #3
 8003c52:	4ab3      	ldr	r2, [pc, #716]	@ (8003f20 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003c54:	4694      	mov	ip, r2
 8003c56:	4463      	add	r3, ip
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	49af      	ldr	r1, [pc, #700]	@ (8003f20 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003c62:	468c      	mov	ip, r1
 8003c64:	4463      	add	r3, ip
 8003c66:	0412      	lsls	r2, r2, #16
 8003c68:	0c12      	lsrs	r2, r2, #16
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	4aab      	ldr	r2, [pc, #684]	@ (8003f20 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003c74:	189a      	adds	r2, r3, r2
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	49a8      	ldr	r1, [pc, #672]	@ (8003f20 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003c7e:	468c      	mov	ip, r1
 8003c80:	4463      	add	r3, ip
 8003c82:	6812      	ldr	r2, [r2, #0]
 8003c84:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	785b      	ldrb	r3, [r3, #1]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d131      	bne.n	8003cf2 <HAL_PCD_EP_DB_Transmit+0x572>
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	00db      	lsls	r3, r3, #3
 8003c94:	4aa2      	ldr	r2, [pc, #648]	@ (8003f20 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003c96:	4694      	mov	ip, r2
 8003c98:	4463      	add	r3, ip
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	00db      	lsls	r3, r3, #3
 8003ca2:	499f      	ldr	r1, [pc, #636]	@ (8003f20 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003ca4:	468c      	mov	ip, r1
 8003ca6:	4463      	add	r3, ip
 8003ca8:	0412      	lsls	r2, r2, #16
 8003caa:	0c12      	lsrs	r2, r2, #16
 8003cac:	605a      	str	r2, [r3, #4]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	4a9a      	ldr	r2, [pc, #616]	@ (8003f20 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003cb6:	4694      	mov	ip, r2
 8003cb8:	4463      	add	r3, ip
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	4997      	ldr	r1, [pc, #604]	@ (8003f20 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003cc4:	468c      	mov	ip, r1
 8003cc6:	4463      	add	r3, ip
 8003cc8:	4996      	ldr	r1, [pc, #600]	@ (8003f24 <HAL_PCD_EP_DB_Transmit+0x7a4>)
 8003cca:	400a      	ands	r2, r1
 8003ccc:	605a      	str	r2, [r3, #4]
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	4a92      	ldr	r2, [pc, #584]	@ (8003f20 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003cd6:	4694      	mov	ip, r2
 8003cd8:	4463      	add	r3, ip
 8003cda:	685a      	ldr	r2, [r3, #4]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	00db      	lsls	r3, r3, #3
 8003ce2:	498f      	ldr	r1, [pc, #572]	@ (8003f20 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003ce4:	468c      	mov	ip, r1
 8003ce6:	4463      	add	r3, ip
 8003ce8:	2180      	movs	r1, #128	@ 0x80
 8003cea:	0609      	lsls	r1, r1, #24
 8003cec:	430a      	orrs	r2, r1
 8003cee:	605a      	str	r2, [r3, #4]
 8003cf0:	e020      	b.n	8003d34 <HAL_PCD_EP_DB_Transmit+0x5b4>
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	785b      	ldrb	r3, [r3, #1]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d11c      	bne.n	8003d34 <HAL_PCD_EP_DB_Transmit+0x5b4>
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	00db      	lsls	r3, r3, #3
 8003d00:	4a87      	ldr	r2, [pc, #540]	@ (8003f20 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003d02:	4694      	mov	ip, r2
 8003d04:	4463      	add	r3, ip
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	4984      	ldr	r1, [pc, #528]	@ (8003f20 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003d10:	468c      	mov	ip, r1
 8003d12:	4463      	add	r3, ip
 8003d14:	0412      	lsls	r2, r2, #16
 8003d16:	0c12      	lsrs	r2, r2, #16
 8003d18:	605a      	str	r2, [r3, #4]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	4a7f      	ldr	r2, [pc, #508]	@ (8003f20 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003d22:	189a      	adds	r2, r3, r2
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	497d      	ldr	r1, [pc, #500]	@ (8003f20 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003d2c:	468c      	mov	ip, r1
 8003d2e:	4463      	add	r3, ip
 8003d30:	6852      	ldr	r2, [r2, #4]
 8003d32:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	781a      	ldrb	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	0011      	movs	r1, r2
 8003d3c:	0018      	movs	r0, r3
 8003d3e:	f006 fdb1 	bl	800a8a4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003d42:	1dbb      	adds	r3, r7, #6
 8003d44:	881a      	ldrh	r2, [r3, #0]
 8003d46:	2380      	movs	r3, #128	@ 0x80
 8003d48:	01db      	lsls	r3, r3, #7
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	d000      	beq.n	8003d50 <HAL_PCD_EP_DB_Transmit+0x5d0>
 8003d4e:	e11e      	b.n	8003f8e <HAL_PCD_EP_DB_Transmit+0x80e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	001a      	movs	r2, r3
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	18d3      	adds	r3, r2, r3
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a71      	ldr	r2, [pc, #452]	@ (8003f28 <HAL_PCD_EP_DB_Transmit+0x7a8>)
 8003d62:	4013      	ands	r3, r2
 8003d64:	61fb      	str	r3, [r7, #28]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	001a      	movs	r2, r3
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	18d3      	adds	r3, r2, r3
 8003d74:	69fa      	ldr	r2, [r7, #28]
 8003d76:	496d      	ldr	r1, [pc, #436]	@ (8003f2c <HAL_PCD_EP_DB_Transmit+0x7ac>)
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	e107      	b.n	8003f8e <HAL_PCD_EP_DB_Transmit+0x80e>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003d7e:	1dbb      	adds	r3, r7, #6
 8003d80:	881a      	ldrh	r2, [r3, #0]
 8003d82:	2380      	movs	r3, #128	@ 0x80
 8003d84:	01db      	lsls	r3, r3, #7
 8003d86:	4013      	ands	r3, r2
 8003d88:	d115      	bne.n	8003db6 <HAL_PCD_EP_DB_Transmit+0x636>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	001a      	movs	r2, r3
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	18d3      	adds	r3, r2, r3
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a63      	ldr	r2, [pc, #396]	@ (8003f28 <HAL_PCD_EP_DB_Transmit+0x7a8>)
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	617b      	str	r3, [r7, #20]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	001a      	movs	r2, r3
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	18d3      	adds	r3, r2, r3
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	495e      	ldr	r1, [pc, #376]	@ (8003f2c <HAL_PCD_EP_DB_Transmit+0x7ac>)
 8003db2:	430a      	orrs	r2, r1
 8003db4:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	2224      	movs	r2, #36	@ 0x24
 8003dba:	5c9b      	ldrb	r3, [r3, r2]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d000      	beq.n	8003dc2 <HAL_PCD_EP_DB_Transmit+0x642>
 8003dc0:	e0e5      	b.n	8003f8e <HAL_PCD_EP_DB_Transmit+0x80e>
      {
        ep->xfer_buff += TxPctSize;
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	695a      	ldr	r2, [r3, #20]
 8003dc6:	2126      	movs	r1, #38	@ 0x26
 8003dc8:	187b      	adds	r3, r7, r1
 8003dca:	881b      	ldrh	r3, [r3, #0]
 8003dcc:	18d2      	adds	r2, r2, r3
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	69da      	ldr	r2, [r3, #28]
 8003dd6:	187b      	adds	r3, r7, r1
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	18d2      	adds	r2, r2, r3
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	6a1a      	ldr	r2, [r3, #32]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d309      	bcc.n	8003e00 <HAL_PCD_EP_DB_Transmit+0x680>
        {
          len = ep->maxpacket;
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
          ep->xfer_len_db -= len;
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	6a1a      	ldr	r2, [r3, #32]
 8003df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003df8:	1ad2      	subs	r2, r2, r3
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	621a      	str	r2, [r3, #32]
 8003dfe:	e016      	b.n	8003e2e <HAL_PCD_EP_DB_Transmit+0x6ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d108      	bne.n	8003e1a <HAL_PCD_EP_DB_Transmit+0x69a>
        {
          len = TxPctSize;
 8003e08:	2326      	movs	r3, #38	@ 0x26
 8003e0a:	18fb      	adds	r3, r7, r3
 8003e0c:	881b      	ldrh	r3, [r3, #0]
 8003e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
          ep->xfer_fill_db = 0U;
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	2224      	movs	r2, #36	@ 0x24
 8003e14:	2100      	movs	r1, #0
 8003e16:	5499      	strb	r1, [r3, r2]
 8003e18:	e009      	b.n	8003e2e <HAL_PCD_EP_DB_Transmit+0x6ae>
        }
        else
        {
          len = ep->xfer_len_db;
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
          ep->xfer_len_db = 0U;
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2200      	movs	r2, #0
 8003e24:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	2224      	movs	r2, #36	@ 0x24
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	785b      	ldrb	r3, [r3, #1]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d000      	beq.n	8003e38 <HAL_PCD_EP_DB_Transmit+0x6b8>
 8003e36:	e07b      	b.n	8003f30 <HAL_PCD_EP_DB_Transmit+0x7b0>
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	4a38      	ldr	r2, [pc, #224]	@ (8003f20 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003e40:	4694      	mov	ip, r2
 8003e42:	4463      	add	r3, ip
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	4934      	ldr	r1, [pc, #208]	@ (8003f20 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003e4e:	468c      	mov	ip, r1
 8003e50:	4463      	add	r3, ip
 8003e52:	0412      	lsls	r2, r2, #16
 8003e54:	0c12      	lsrs	r2, r2, #16
 8003e56:	605a      	str	r2, [r3, #4]
 8003e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e5a:	2b3e      	cmp	r3, #62	@ 0x3e
 8003e5c:	d91e      	bls.n	8003e9c <HAL_PCD_EP_DB_Transmit+0x71c>
 8003e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e60:	095b      	lsrs	r3, r3, #5
 8003e62:	61bb      	str	r3, [r7, #24]
 8003e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e66:	221f      	movs	r2, #31
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d102      	bne.n	8003e72 <HAL_PCD_EP_DB_Transmit+0x6f2>
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	61bb      	str	r3, [r7, #24]
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	4a29      	ldr	r2, [pc, #164]	@ (8003f20 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003e7a:	4694      	mov	ip, r2
 8003e7c:	4463      	add	r3, ip
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	069b      	lsls	r3, r3, #26
 8003e84:	431a      	orrs	r2, r3
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	4924      	ldr	r1, [pc, #144]	@ (8003f20 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003e8e:	468c      	mov	ip, r1
 8003e90:	4463      	add	r3, ip
 8003e92:	2180      	movs	r1, #128	@ 0x80
 8003e94:	0609      	lsls	r1, r1, #24
 8003e96:	430a      	orrs	r2, r1
 8003e98:	605a      	str	r2, [r3, #4]
 8003e9a:	e06e      	b.n	8003f7a <HAL_PCD_EP_DB_Transmit+0x7fa>
 8003e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d121      	bne.n	8003ee6 <HAL_PCD_EP_DB_Transmit+0x766>
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8003f20 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003eaa:	4694      	mov	ip, r2
 8003eac:	4463      	add	r3, ip
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	491a      	ldr	r1, [pc, #104]	@ (8003f20 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003eb8:	468c      	mov	ip, r1
 8003eba:	4463      	add	r3, ip
 8003ebc:	4919      	ldr	r1, [pc, #100]	@ (8003f24 <HAL_PCD_EP_DB_Transmit+0x7a4>)
 8003ebe:	400a      	ands	r2, r1
 8003ec0:	605a      	str	r2, [r3, #4]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	4a15      	ldr	r2, [pc, #84]	@ (8003f20 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003eca:	4694      	mov	ip, r2
 8003ecc:	4463      	add	r3, ip
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	4912      	ldr	r1, [pc, #72]	@ (8003f20 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003ed8:	468c      	mov	ip, r1
 8003eda:	4463      	add	r3, ip
 8003edc:	2180      	movs	r1, #128	@ 0x80
 8003ede:	0609      	lsls	r1, r1, #24
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	605a      	str	r2, [r3, #4]
 8003ee4:	e049      	b.n	8003f7a <HAL_PCD_EP_DB_Transmit+0x7fa>
 8003ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ee8:	085b      	lsrs	r3, r3, #1
 8003eea:	61bb      	str	r3, [r7, #24]
 8003eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eee:	2201      	movs	r2, #1
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	d002      	beq.n	8003efa <HAL_PCD_EP_DB_Transmit+0x77a>
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	61bb      	str	r3, [r7, #24]
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	4a07      	ldr	r2, [pc, #28]	@ (8003f20 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003f02:	4694      	mov	ip, r2
 8003f04:	4463      	add	r3, ip
 8003f06:	6859      	ldr	r1, [r3, #4]
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	069a      	lsls	r2, r3, #26
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	4803      	ldr	r0, [pc, #12]	@ (8003f20 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003f14:	4684      	mov	ip, r0
 8003f16:	4463      	add	r3, ip
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	605a      	str	r2, [r3, #4]
 8003f1c:	e02d      	b.n	8003f7a <HAL_PCD_EP_DB_Transmit+0x7fa>
 8003f1e:	46c0      	nop			@ (mov r8, r8)
 8003f20:	40009800 	.word	0x40009800
 8003f24:	83ffffff 	.word	0x83ffffff
 8003f28:	07ff8f8f 	.word	0x07ff8f8f
 8003f2c:	0000c080 	.word	0x0000c080
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	785b      	ldrb	r3, [r3, #1]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d120      	bne.n	8003f7a <HAL_PCD_EP_DB_Transmit+0x7fa>
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	4a25      	ldr	r2, [pc, #148]	@ (8003fd4 <HAL_PCD_EP_DB_Transmit+0x854>)
 8003f40:	4694      	mov	ip, r2
 8003f42:	4463      	add	r3, ip
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	4921      	ldr	r1, [pc, #132]	@ (8003fd4 <HAL_PCD_EP_DB_Transmit+0x854>)
 8003f4e:	468c      	mov	ip, r1
 8003f50:	4463      	add	r3, ip
 8003f52:	0412      	lsls	r2, r2, #16
 8003f54:	0c12      	lsrs	r2, r2, #16
 8003f56:	605a      	str	r2, [r3, #4]
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	4a1d      	ldr	r2, [pc, #116]	@ (8003fd4 <HAL_PCD_EP_DB_Transmit+0x854>)
 8003f60:	4694      	mov	ip, r2
 8003f62:	4463      	add	r3, ip
 8003f64:	6859      	ldr	r1, [r3, #4]
 8003f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f68:	041a      	lsls	r2, r3, #16
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	4818      	ldr	r0, [pc, #96]	@ (8003fd4 <HAL_PCD_EP_DB_Transmit+0x854>)
 8003f72:	4684      	mov	ip, r0
 8003f74:	4463      	add	r3, ip
 8003f76:	430a      	orrs	r2, r1
 8003f78:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6818      	ldr	r0, [r3, #0]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	6959      	ldr	r1, [r3, #20]
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	891a      	ldrh	r2, [r3, #8]
 8003f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	f003 ff1d 	bl	8007dc8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	001a      	movs	r2, r3
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	18d3      	adds	r3, r2, r3
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a0e      	ldr	r2, [pc, #56]	@ (8003fd8 <HAL_PCD_EP_DB_Transmit+0x858>)
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fa6:	2210      	movs	r2, #16
 8003fa8:	4053      	eors	r3, r2
 8003faa:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fae:	2220      	movs	r2, #32
 8003fb0:	4053      	eors	r3, r2
 8003fb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	001a      	movs	r2, r3
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	18d3      	adds	r3, r2, r3
 8003fc2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003fc4:	4905      	ldr	r1, [pc, #20]	@ (8003fdc <HAL_PCD_EP_DB_Transmit+0x85c>)
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	0018      	movs	r0, r3
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	b00e      	add	sp, #56	@ 0x38
 8003fd2:	bdb0      	pop	{r4, r5, r7, pc}
 8003fd4:	40009800 	.word	0x40009800
 8003fd8:	07ff8fbf 	.word	0x07ff8fbf
 8003fdc:	00008080 	.word	0x00008080

08003fe0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003fe0:	b590      	push	{r4, r7, lr}
 8003fe2:	b087      	sub	sp, #28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	0008      	movs	r0, r1
 8003fea:	0011      	movs	r1, r2
 8003fec:	607b      	str	r3, [r7, #4]
 8003fee:	240a      	movs	r4, #10
 8003ff0:	193b      	adds	r3, r7, r4
 8003ff2:	1c02      	adds	r2, r0, #0
 8003ff4:	801a      	strh	r2, [r3, #0]
 8003ff6:	2308      	movs	r3, #8
 8003ff8:	18fb      	adds	r3, r7, r3
 8003ffa:	1c0a      	adds	r2, r1, #0
 8003ffc:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003ffe:	0021      	movs	r1, r4
 8004000:	187b      	adds	r3, r7, r1
 8004002:	881b      	ldrh	r3, [r3, #0]
 8004004:	2280      	movs	r2, #128	@ 0x80
 8004006:	4013      	ands	r3, r2
 8004008:	b29b      	uxth	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00d      	beq.n	800402a <HAL_PCDEx_PMAConfig+0x4a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800400e:	187b      	adds	r3, r7, r1
 8004010:	881b      	ldrh	r3, [r3, #0]
 8004012:	2207      	movs	r2, #7
 8004014:	401a      	ands	r2, r3
 8004016:	0013      	movs	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	189b      	adds	r3, r3, r2
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	3338      	adds	r3, #56	@ 0x38
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	18d3      	adds	r3, r2, r3
 8004024:	3304      	adds	r3, #4
 8004026:	617b      	str	r3, [r7, #20]
 8004028:	e00c      	b.n	8004044 <HAL_PCDEx_PMAConfig+0x64>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800402a:	230a      	movs	r3, #10
 800402c:	18fb      	adds	r3, r7, r3
 800402e:	881a      	ldrh	r2, [r3, #0]
 8004030:	0013      	movs	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	189b      	adds	r3, r3, r2
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	3379      	adds	r3, #121	@ 0x79
 800403a:	33ff      	adds	r3, #255	@ 0xff
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	18d3      	adds	r3, r2, r3
 8004040:	3304      	adds	r3, #4
 8004042:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004044:	2308      	movs	r3, #8
 8004046:	18fb      	adds	r3, r7, r3
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d107      	bne.n	800405e <HAL_PCDEx_PMAConfig+0x7e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	2200      	movs	r2, #0
 8004052:	729a      	strb	r2, [r3, #10]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	b29a      	uxth	r2, r3
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	809a      	strh	r2, [r3, #4]
 800405c:	e00b      	b.n	8004076 <HAL_PCDEx_PMAConfig+0x96>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2201      	movs	r2, #1
 8004062:	729a      	strb	r2, [r3, #10]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	b29a      	uxth	r2, r3
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	0c1b      	lsrs	r3, r3, #16
 8004070:	b29a      	uxth	r2, r3
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	811a      	strh	r2, [r3, #8]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	0018      	movs	r0, r3
 800407a:	46bd      	mov	sp, r7
 800407c:	b007      	add	sp, #28
 800407e:	bd90      	pop	{r4, r7, pc}

08004080 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	23bf      	movs	r3, #191	@ 0xbf
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	2101      	movs	r1, #1
 8004096:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	23bd      	movs	r3, #189	@ 0xbd
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	2100      	movs	r1, #0
 80040a0:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a6:	2201      	movs	r2, #1
 80040a8:	431a      	orrs	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b2:	2202      	movs	r2, #2
 80040b4:	431a      	orrs	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	0018      	movs	r0, r3
 80040be:	46bd      	mov	sp, r7
 80040c0:	b004      	add	sp, #16
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	000a      	movs	r2, r1
 80040ce:	1cfb      	adds	r3, r7, #3
 80040d0:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80040d2:	46c0      	nop			@ (mov r8, r8)
 80040d4:	46bd      	mov	sp, r7
 80040d6:	b002      	add	sp, #8
 80040d8:	bd80      	pop	{r7, pc}
	...

080040dc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80040e0:	4b04      	ldr	r3, [pc, #16]	@ (80040f4 <HAL_PWREx_EnableVddUSB+0x18>)
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	4b03      	ldr	r3, [pc, #12]	@ (80040f4 <HAL_PWREx_EnableVddUSB+0x18>)
 80040e6:	2180      	movs	r1, #128	@ 0x80
 80040e8:	00c9      	lsls	r1, r1, #3
 80040ea:	430a      	orrs	r2, r1
 80040ec:	605a      	str	r2, [r3, #4]
}
 80040ee:	46c0      	nop			@ (mov r8, r8)
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40007000 	.word	0x40007000

080040f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004100:	4b19      	ldr	r3, [pc, #100]	@ (8004168 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a19      	ldr	r2, [pc, #100]	@ (800416c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004106:	4013      	ands	r3, r2
 8004108:	0019      	movs	r1, r3
 800410a:	4b17      	ldr	r3, [pc, #92]	@ (8004168 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	430a      	orrs	r2, r1
 8004110:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	2380      	movs	r3, #128	@ 0x80
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	429a      	cmp	r2, r3
 800411a:	d11f      	bne.n	800415c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800411c:	4b14      	ldr	r3, [pc, #80]	@ (8004170 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	0013      	movs	r3, r2
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	189b      	adds	r3, r3, r2
 8004126:	005b      	lsls	r3, r3, #1
 8004128:	4912      	ldr	r1, [pc, #72]	@ (8004174 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800412a:	0018      	movs	r0, r3
 800412c:	f7fb fffc 	bl	8000128 <__udivsi3>
 8004130:	0003      	movs	r3, r0
 8004132:	3301      	adds	r3, #1
 8004134:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004136:	e008      	b.n	800414a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	3b01      	subs	r3, #1
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	e001      	b.n	800414a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e009      	b.n	800415e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800414a:	4b07      	ldr	r3, [pc, #28]	@ (8004168 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800414c:	695a      	ldr	r2, [r3, #20]
 800414e:	2380      	movs	r3, #128	@ 0x80
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	401a      	ands	r2, r3
 8004154:	2380      	movs	r3, #128	@ 0x80
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	429a      	cmp	r2, r3
 800415a:	d0ed      	beq.n	8004138 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	0018      	movs	r0, r3
 8004160:	46bd      	mov	sp, r7
 8004162:	b004      	add	sp, #16
 8004164:	bd80      	pop	{r7, pc}
 8004166:	46c0      	nop			@ (mov r8, r8)
 8004168:	40007000 	.word	0x40007000
 800416c:	fffff9ff 	.word	0xfffff9ff
 8004170:	20000030 	.word	0x20000030
 8004174:	000f4240 	.word	0x000f4240

08004178 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800417c:	4b03      	ldr	r3, [pc, #12]	@ (800418c <LL_RCC_GetAPB1Prescaler+0x14>)
 800417e:	689a      	ldr	r2, [r3, #8]
 8004180:	23e0      	movs	r3, #224	@ 0xe0
 8004182:	01db      	lsls	r3, r3, #7
 8004184:	4013      	ands	r3, r2
}
 8004186:	0018      	movs	r0, r3
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	40021000 	.word	0x40021000

08004190 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b088      	sub	sp, #32
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d102      	bne.n	80041a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	f000 fb50 	bl	8004844 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2201      	movs	r2, #1
 80041aa:	4013      	ands	r3, r2
 80041ac:	d100      	bne.n	80041b0 <HAL_RCC_OscConfig+0x20>
 80041ae:	e07c      	b.n	80042aa <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041b0:	4bc3      	ldr	r3, [pc, #780]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	2238      	movs	r2, #56	@ 0x38
 80041b6:	4013      	ands	r3, r2
 80041b8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041ba:	4bc1      	ldr	r3, [pc, #772]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	2203      	movs	r2, #3
 80041c0:	4013      	ands	r3, r2
 80041c2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	2b10      	cmp	r3, #16
 80041c8:	d102      	bne.n	80041d0 <HAL_RCC_OscConfig+0x40>
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	2b03      	cmp	r3, #3
 80041ce:	d002      	beq.n	80041d6 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	2b08      	cmp	r3, #8
 80041d4:	d10b      	bne.n	80041ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d6:	4bba      	ldr	r3, [pc, #744]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	2380      	movs	r3, #128	@ 0x80
 80041dc:	029b      	lsls	r3, r3, #10
 80041de:	4013      	ands	r3, r2
 80041e0:	d062      	beq.n	80042a8 <HAL_RCC_OscConfig+0x118>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d15e      	bne.n	80042a8 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e32a      	b.n	8004844 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	2380      	movs	r3, #128	@ 0x80
 80041f4:	025b      	lsls	r3, r3, #9
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d107      	bne.n	800420a <HAL_RCC_OscConfig+0x7a>
 80041fa:	4bb1      	ldr	r3, [pc, #708]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	4bb0      	ldr	r3, [pc, #704]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 8004200:	2180      	movs	r1, #128	@ 0x80
 8004202:	0249      	lsls	r1, r1, #9
 8004204:	430a      	orrs	r2, r1
 8004206:	601a      	str	r2, [r3, #0]
 8004208:	e020      	b.n	800424c <HAL_RCC_OscConfig+0xbc>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	23a0      	movs	r3, #160	@ 0xa0
 8004210:	02db      	lsls	r3, r3, #11
 8004212:	429a      	cmp	r2, r3
 8004214:	d10e      	bne.n	8004234 <HAL_RCC_OscConfig+0xa4>
 8004216:	4baa      	ldr	r3, [pc, #680]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	4ba9      	ldr	r3, [pc, #676]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 800421c:	2180      	movs	r1, #128	@ 0x80
 800421e:	02c9      	lsls	r1, r1, #11
 8004220:	430a      	orrs	r2, r1
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	4ba6      	ldr	r3, [pc, #664]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	4ba5      	ldr	r3, [pc, #660]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 800422a:	2180      	movs	r1, #128	@ 0x80
 800422c:	0249      	lsls	r1, r1, #9
 800422e:	430a      	orrs	r2, r1
 8004230:	601a      	str	r2, [r3, #0]
 8004232:	e00b      	b.n	800424c <HAL_RCC_OscConfig+0xbc>
 8004234:	4ba2      	ldr	r3, [pc, #648]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	4ba1      	ldr	r3, [pc, #644]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 800423a:	49a2      	ldr	r1, [pc, #648]	@ (80044c4 <HAL_RCC_OscConfig+0x334>)
 800423c:	400a      	ands	r2, r1
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	4b9f      	ldr	r3, [pc, #636]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	4b9e      	ldr	r3, [pc, #632]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 8004246:	49a0      	ldr	r1, [pc, #640]	@ (80044c8 <HAL_RCC_OscConfig+0x338>)
 8004248:	400a      	ands	r2, r1
 800424a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d014      	beq.n	800427e <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004254:	f7fd fa42 	bl	80016dc <HAL_GetTick>
 8004258:	0003      	movs	r3, r0
 800425a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800425c:	e008      	b.n	8004270 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800425e:	f7fd fa3d 	bl	80016dc <HAL_GetTick>
 8004262:	0002      	movs	r2, r0
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b64      	cmp	r3, #100	@ 0x64
 800426a:	d901      	bls.n	8004270 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e2e9      	b.n	8004844 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004270:	4b93      	ldr	r3, [pc, #588]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	2380      	movs	r3, #128	@ 0x80
 8004276:	029b      	lsls	r3, r3, #10
 8004278:	4013      	ands	r3, r2
 800427a:	d0f0      	beq.n	800425e <HAL_RCC_OscConfig+0xce>
 800427c:	e015      	b.n	80042aa <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427e:	f7fd fa2d 	bl	80016dc <HAL_GetTick>
 8004282:	0003      	movs	r3, r0
 8004284:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004288:	f7fd fa28 	bl	80016dc <HAL_GetTick>
 800428c:	0002      	movs	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b64      	cmp	r3, #100	@ 0x64
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e2d4      	b.n	8004844 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800429a:	4b89      	ldr	r3, [pc, #548]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	2380      	movs	r3, #128	@ 0x80
 80042a0:	029b      	lsls	r3, r3, #10
 80042a2:	4013      	ands	r3, r2
 80042a4:	d1f0      	bne.n	8004288 <HAL_RCC_OscConfig+0xf8>
 80042a6:	e000      	b.n	80042aa <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042a8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2202      	movs	r2, #2
 80042b0:	4013      	ands	r3, r2
 80042b2:	d100      	bne.n	80042b6 <HAL_RCC_OscConfig+0x126>
 80042b4:	e099      	b.n	80043ea <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042b6:	4b82      	ldr	r3, [pc, #520]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	2238      	movs	r2, #56	@ 0x38
 80042bc:	4013      	ands	r3, r2
 80042be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042c0:	4b7f      	ldr	r3, [pc, #508]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	2203      	movs	r2, #3
 80042c6:	4013      	ands	r3, r2
 80042c8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	2b10      	cmp	r3, #16
 80042ce:	d102      	bne.n	80042d6 <HAL_RCC_OscConfig+0x146>
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d002      	beq.n	80042dc <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d135      	bne.n	8004348 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042dc:	4b78      	ldr	r3, [pc, #480]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	2380      	movs	r3, #128	@ 0x80
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	4013      	ands	r3, r2
 80042e6:	d005      	beq.n	80042f4 <HAL_RCC_OscConfig+0x164>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e2a7      	b.n	8004844 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f4:	4b72      	ldr	r3, [pc, #456]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	4a74      	ldr	r2, [pc, #464]	@ (80044cc <HAL_RCC_OscConfig+0x33c>)
 80042fa:	4013      	ands	r3, r2
 80042fc:	0019      	movs	r1, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	021a      	lsls	r2, r3, #8
 8004304:	4b6e      	ldr	r3, [pc, #440]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 8004306:	430a      	orrs	r2, r1
 8004308:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d112      	bne.n	8004336 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004310:	4b6b      	ldr	r3, [pc, #428]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a6e      	ldr	r2, [pc, #440]	@ (80044d0 <HAL_RCC_OscConfig+0x340>)
 8004316:	4013      	ands	r3, r2
 8004318:	0019      	movs	r1, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691a      	ldr	r2, [r3, #16]
 800431e:	4b68      	ldr	r3, [pc, #416]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 8004320:	430a      	orrs	r2, r1
 8004322:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004324:	4b66      	ldr	r3, [pc, #408]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	0adb      	lsrs	r3, r3, #11
 800432a:	2207      	movs	r2, #7
 800432c:	4013      	ands	r3, r2
 800432e:	4a69      	ldr	r2, [pc, #420]	@ (80044d4 <HAL_RCC_OscConfig+0x344>)
 8004330:	40da      	lsrs	r2, r3
 8004332:	4b69      	ldr	r3, [pc, #420]	@ (80044d8 <HAL_RCC_OscConfig+0x348>)
 8004334:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004336:	4b69      	ldr	r3, [pc, #420]	@ (80044dc <HAL_RCC_OscConfig+0x34c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	0018      	movs	r0, r3
 800433c:	f7fd f972 	bl	8001624 <HAL_InitTick>
 8004340:	1e03      	subs	r3, r0, #0
 8004342:	d051      	beq.n	80043e8 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e27d      	b.n	8004844 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d030      	beq.n	80043b2 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004350:	4b5b      	ldr	r3, [pc, #364]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a5e      	ldr	r2, [pc, #376]	@ (80044d0 <HAL_RCC_OscConfig+0x340>)
 8004356:	4013      	ands	r3, r2
 8004358:	0019      	movs	r1, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691a      	ldr	r2, [r3, #16]
 800435e:	4b58      	ldr	r3, [pc, #352]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 8004360:	430a      	orrs	r2, r1
 8004362:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004364:	4b56      	ldr	r3, [pc, #344]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	4b55      	ldr	r3, [pc, #340]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 800436a:	2180      	movs	r1, #128	@ 0x80
 800436c:	0049      	lsls	r1, r1, #1
 800436e:	430a      	orrs	r2, r1
 8004370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004372:	f7fd f9b3 	bl	80016dc <HAL_GetTick>
 8004376:	0003      	movs	r3, r0
 8004378:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800437c:	f7fd f9ae 	bl	80016dc <HAL_GetTick>
 8004380:	0002      	movs	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e25a      	b.n	8004844 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800438e:	4b4c      	ldr	r3, [pc, #304]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	2380      	movs	r3, #128	@ 0x80
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	4013      	ands	r3, r2
 8004398:	d0f0      	beq.n	800437c <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800439a:	4b49      	ldr	r3, [pc, #292]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	4a4b      	ldr	r2, [pc, #300]	@ (80044cc <HAL_RCC_OscConfig+0x33c>)
 80043a0:	4013      	ands	r3, r2
 80043a2:	0019      	movs	r1, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	021a      	lsls	r2, r3, #8
 80043aa:	4b45      	ldr	r3, [pc, #276]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 80043ac:	430a      	orrs	r2, r1
 80043ae:	605a      	str	r2, [r3, #4]
 80043b0:	e01b      	b.n	80043ea <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80043b2:	4b43      	ldr	r3, [pc, #268]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	4b42      	ldr	r3, [pc, #264]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 80043b8:	4949      	ldr	r1, [pc, #292]	@ (80044e0 <HAL_RCC_OscConfig+0x350>)
 80043ba:	400a      	ands	r2, r1
 80043bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043be:	f7fd f98d 	bl	80016dc <HAL_GetTick>
 80043c2:	0003      	movs	r3, r0
 80043c4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043c8:	f7fd f988 	bl	80016dc <HAL_GetTick>
 80043cc:	0002      	movs	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e234      	b.n	8004844 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043da:	4b39      	ldr	r3, [pc, #228]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	2380      	movs	r3, #128	@ 0x80
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	4013      	ands	r3, r2
 80043e4:	d1f0      	bne.n	80043c8 <HAL_RCC_OscConfig+0x238>
 80043e6:	e000      	b.n	80043ea <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043e8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2208      	movs	r2, #8
 80043f0:	4013      	ands	r3, r2
 80043f2:	d047      	beq.n	8004484 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80043f4:	4b32      	ldr	r3, [pc, #200]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	2238      	movs	r2, #56	@ 0x38
 80043fa:	4013      	ands	r3, r2
 80043fc:	2b18      	cmp	r3, #24
 80043fe:	d10a      	bne.n	8004416 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004400:	4b2f      	ldr	r3, [pc, #188]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 8004402:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004404:	2202      	movs	r2, #2
 8004406:	4013      	ands	r3, r2
 8004408:	d03c      	beq.n	8004484 <HAL_RCC_OscConfig+0x2f4>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d138      	bne.n	8004484 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e216      	b.n	8004844 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d019      	beq.n	8004452 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800441e:	4b28      	ldr	r3, [pc, #160]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 8004420:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004422:	4b27      	ldr	r3, [pc, #156]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 8004424:	2101      	movs	r1, #1
 8004426:	430a      	orrs	r2, r1
 8004428:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442a:	f7fd f957 	bl	80016dc <HAL_GetTick>
 800442e:	0003      	movs	r3, r0
 8004430:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004434:	f7fd f952 	bl	80016dc <HAL_GetTick>
 8004438:	0002      	movs	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e1fe      	b.n	8004844 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004446:	4b1e      	ldr	r3, [pc, #120]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 8004448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800444a:	2202      	movs	r2, #2
 800444c:	4013      	ands	r3, r2
 800444e:	d0f1      	beq.n	8004434 <HAL_RCC_OscConfig+0x2a4>
 8004450:	e018      	b.n	8004484 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004452:	4b1b      	ldr	r3, [pc, #108]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 8004454:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004456:	4b1a      	ldr	r3, [pc, #104]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 8004458:	2101      	movs	r1, #1
 800445a:	438a      	bics	r2, r1
 800445c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445e:	f7fd f93d 	bl	80016dc <HAL_GetTick>
 8004462:	0003      	movs	r3, r0
 8004464:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004468:	f7fd f938 	bl	80016dc <HAL_GetTick>
 800446c:	0002      	movs	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e1e4      	b.n	8004844 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800447a:	4b11      	ldr	r3, [pc, #68]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 800447c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800447e:	2202      	movs	r2, #2
 8004480:	4013      	ands	r3, r2
 8004482:	d1f1      	bne.n	8004468 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2204      	movs	r2, #4
 800448a:	4013      	ands	r3, r2
 800448c:	d100      	bne.n	8004490 <HAL_RCC_OscConfig+0x300>
 800448e:	e0c7      	b.n	8004620 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004490:	231f      	movs	r3, #31
 8004492:	18fb      	adds	r3, r7, r3
 8004494:	2200      	movs	r2, #0
 8004496:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004498:	4b09      	ldr	r3, [pc, #36]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	2238      	movs	r2, #56	@ 0x38
 800449e:	4013      	ands	r3, r2
 80044a0:	2b20      	cmp	r3, #32
 80044a2:	d11f      	bne.n	80044e4 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80044a4:	4b06      	ldr	r3, [pc, #24]	@ (80044c0 <HAL_RCC_OscConfig+0x330>)
 80044a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044a8:	2202      	movs	r2, #2
 80044aa:	4013      	ands	r3, r2
 80044ac:	d100      	bne.n	80044b0 <HAL_RCC_OscConfig+0x320>
 80044ae:	e0b7      	b.n	8004620 <HAL_RCC_OscConfig+0x490>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d000      	beq.n	80044ba <HAL_RCC_OscConfig+0x32a>
 80044b8:	e0b2      	b.n	8004620 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e1c2      	b.n	8004844 <HAL_RCC_OscConfig+0x6b4>
 80044be:	46c0      	nop			@ (mov r8, r8)
 80044c0:	40021000 	.word	0x40021000
 80044c4:	fffeffff 	.word	0xfffeffff
 80044c8:	fffbffff 	.word	0xfffbffff
 80044cc:	ffff80ff 	.word	0xffff80ff
 80044d0:	ffffc7ff 	.word	0xffffc7ff
 80044d4:	00f42400 	.word	0x00f42400
 80044d8:	20000030 	.word	0x20000030
 80044dc:	20000034 	.word	0x20000034
 80044e0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044e4:	4bb5      	ldr	r3, [pc, #724]	@ (80047bc <HAL_RCC_OscConfig+0x62c>)
 80044e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044e8:	2380      	movs	r3, #128	@ 0x80
 80044ea:	055b      	lsls	r3, r3, #21
 80044ec:	4013      	ands	r3, r2
 80044ee:	d101      	bne.n	80044f4 <HAL_RCC_OscConfig+0x364>
 80044f0:	2301      	movs	r3, #1
 80044f2:	e000      	b.n	80044f6 <HAL_RCC_OscConfig+0x366>
 80044f4:	2300      	movs	r3, #0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d011      	beq.n	800451e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80044fa:	4bb0      	ldr	r3, [pc, #704]	@ (80047bc <HAL_RCC_OscConfig+0x62c>)
 80044fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044fe:	4baf      	ldr	r3, [pc, #700]	@ (80047bc <HAL_RCC_OscConfig+0x62c>)
 8004500:	2180      	movs	r1, #128	@ 0x80
 8004502:	0549      	lsls	r1, r1, #21
 8004504:	430a      	orrs	r2, r1
 8004506:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004508:	4bac      	ldr	r3, [pc, #688]	@ (80047bc <HAL_RCC_OscConfig+0x62c>)
 800450a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800450c:	2380      	movs	r3, #128	@ 0x80
 800450e:	055b      	lsls	r3, r3, #21
 8004510:	4013      	ands	r3, r2
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004516:	231f      	movs	r3, #31
 8004518:	18fb      	adds	r3, r7, r3
 800451a:	2201      	movs	r2, #1
 800451c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800451e:	4ba8      	ldr	r3, [pc, #672]	@ (80047c0 <HAL_RCC_OscConfig+0x630>)
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	2380      	movs	r3, #128	@ 0x80
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	4013      	ands	r3, r2
 8004528:	d11a      	bne.n	8004560 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800452a:	4ba5      	ldr	r3, [pc, #660]	@ (80047c0 <HAL_RCC_OscConfig+0x630>)
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	4ba4      	ldr	r3, [pc, #656]	@ (80047c0 <HAL_RCC_OscConfig+0x630>)
 8004530:	2180      	movs	r1, #128	@ 0x80
 8004532:	0049      	lsls	r1, r1, #1
 8004534:	430a      	orrs	r2, r1
 8004536:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004538:	f7fd f8d0 	bl	80016dc <HAL_GetTick>
 800453c:	0003      	movs	r3, r0
 800453e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004540:	e008      	b.n	8004554 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004542:	f7fd f8cb 	bl	80016dc <HAL_GetTick>
 8004546:	0002      	movs	r2, r0
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e177      	b.n	8004844 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004554:	4b9a      	ldr	r3, [pc, #616]	@ (80047c0 <HAL_RCC_OscConfig+0x630>)
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	2380      	movs	r3, #128	@ 0x80
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	4013      	ands	r3, r2
 800455e:	d0f0      	beq.n	8004542 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d106      	bne.n	8004576 <HAL_RCC_OscConfig+0x3e6>
 8004568:	4b94      	ldr	r3, [pc, #592]	@ (80047bc <HAL_RCC_OscConfig+0x62c>)
 800456a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800456c:	4b93      	ldr	r3, [pc, #588]	@ (80047bc <HAL_RCC_OscConfig+0x62c>)
 800456e:	2101      	movs	r1, #1
 8004570:	430a      	orrs	r2, r1
 8004572:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004574:	e01c      	b.n	80045b0 <HAL_RCC_OscConfig+0x420>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	2b05      	cmp	r3, #5
 800457c:	d10c      	bne.n	8004598 <HAL_RCC_OscConfig+0x408>
 800457e:	4b8f      	ldr	r3, [pc, #572]	@ (80047bc <HAL_RCC_OscConfig+0x62c>)
 8004580:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004582:	4b8e      	ldr	r3, [pc, #568]	@ (80047bc <HAL_RCC_OscConfig+0x62c>)
 8004584:	2104      	movs	r1, #4
 8004586:	430a      	orrs	r2, r1
 8004588:	65da      	str	r2, [r3, #92]	@ 0x5c
 800458a:	4b8c      	ldr	r3, [pc, #560]	@ (80047bc <HAL_RCC_OscConfig+0x62c>)
 800458c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800458e:	4b8b      	ldr	r3, [pc, #556]	@ (80047bc <HAL_RCC_OscConfig+0x62c>)
 8004590:	2101      	movs	r1, #1
 8004592:	430a      	orrs	r2, r1
 8004594:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004596:	e00b      	b.n	80045b0 <HAL_RCC_OscConfig+0x420>
 8004598:	4b88      	ldr	r3, [pc, #544]	@ (80047bc <HAL_RCC_OscConfig+0x62c>)
 800459a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800459c:	4b87      	ldr	r3, [pc, #540]	@ (80047bc <HAL_RCC_OscConfig+0x62c>)
 800459e:	2101      	movs	r1, #1
 80045a0:	438a      	bics	r2, r1
 80045a2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80045a4:	4b85      	ldr	r3, [pc, #532]	@ (80047bc <HAL_RCC_OscConfig+0x62c>)
 80045a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80045a8:	4b84      	ldr	r3, [pc, #528]	@ (80047bc <HAL_RCC_OscConfig+0x62c>)
 80045aa:	2104      	movs	r1, #4
 80045ac:	438a      	bics	r2, r1
 80045ae:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d014      	beq.n	80045e2 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b8:	f7fd f890 	bl	80016dc <HAL_GetTick>
 80045bc:	0003      	movs	r3, r0
 80045be:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045c0:	e009      	b.n	80045d6 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045c2:	f7fd f88b 	bl	80016dc <HAL_GetTick>
 80045c6:	0002      	movs	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	4a7d      	ldr	r2, [pc, #500]	@ (80047c4 <HAL_RCC_OscConfig+0x634>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e136      	b.n	8004844 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045d6:	4b79      	ldr	r3, [pc, #484]	@ (80047bc <HAL_RCC_OscConfig+0x62c>)
 80045d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045da:	2202      	movs	r2, #2
 80045dc:	4013      	ands	r3, r2
 80045de:	d0f0      	beq.n	80045c2 <HAL_RCC_OscConfig+0x432>
 80045e0:	e013      	b.n	800460a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e2:	f7fd f87b 	bl	80016dc <HAL_GetTick>
 80045e6:	0003      	movs	r3, r0
 80045e8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045ea:	e009      	b.n	8004600 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ec:	f7fd f876 	bl	80016dc <HAL_GetTick>
 80045f0:	0002      	movs	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	4a73      	ldr	r2, [pc, #460]	@ (80047c4 <HAL_RCC_OscConfig+0x634>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e121      	b.n	8004844 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004600:	4b6e      	ldr	r3, [pc, #440]	@ (80047bc <HAL_RCC_OscConfig+0x62c>)
 8004602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004604:	2202      	movs	r2, #2
 8004606:	4013      	ands	r3, r2
 8004608:	d1f0      	bne.n	80045ec <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800460a:	231f      	movs	r3, #31
 800460c:	18fb      	adds	r3, r7, r3
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d105      	bne.n	8004620 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004614:	4b69      	ldr	r3, [pc, #420]	@ (80047bc <HAL_RCC_OscConfig+0x62c>)
 8004616:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004618:	4b68      	ldr	r3, [pc, #416]	@ (80047bc <HAL_RCC_OscConfig+0x62c>)
 800461a:	496b      	ldr	r1, [pc, #428]	@ (80047c8 <HAL_RCC_OscConfig+0x638>)
 800461c:	400a      	ands	r2, r1
 800461e:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2220      	movs	r2, #32
 8004626:	4013      	ands	r3, r2
 8004628:	d039      	beq.n	800469e <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d01b      	beq.n	800466a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004632:	4b62      	ldr	r3, [pc, #392]	@ (80047bc <HAL_RCC_OscConfig+0x62c>)
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	4b61      	ldr	r3, [pc, #388]	@ (80047bc <HAL_RCC_OscConfig+0x62c>)
 8004638:	2180      	movs	r1, #128	@ 0x80
 800463a:	03c9      	lsls	r1, r1, #15
 800463c:	430a      	orrs	r2, r1
 800463e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004640:	f7fd f84c 	bl	80016dc <HAL_GetTick>
 8004644:	0003      	movs	r3, r0
 8004646:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004648:	e008      	b.n	800465c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800464a:	f7fd f847 	bl	80016dc <HAL_GetTick>
 800464e:	0002      	movs	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e0f3      	b.n	8004844 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800465c:	4b57      	ldr	r3, [pc, #348]	@ (80047bc <HAL_RCC_OscConfig+0x62c>)
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	2380      	movs	r3, #128	@ 0x80
 8004662:	041b      	lsls	r3, r3, #16
 8004664:	4013      	ands	r3, r2
 8004666:	d0f0      	beq.n	800464a <HAL_RCC_OscConfig+0x4ba>
 8004668:	e019      	b.n	800469e <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800466a:	4b54      	ldr	r3, [pc, #336]	@ (80047bc <HAL_RCC_OscConfig+0x62c>)
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	4b53      	ldr	r3, [pc, #332]	@ (80047bc <HAL_RCC_OscConfig+0x62c>)
 8004670:	4956      	ldr	r1, [pc, #344]	@ (80047cc <HAL_RCC_OscConfig+0x63c>)
 8004672:	400a      	ands	r2, r1
 8004674:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004676:	f7fd f831 	bl	80016dc <HAL_GetTick>
 800467a:	0003      	movs	r3, r0
 800467c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004680:	f7fd f82c 	bl	80016dc <HAL_GetTick>
 8004684:	0002      	movs	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e0d8      	b.n	8004844 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004692:	4b4a      	ldr	r3, [pc, #296]	@ (80047bc <HAL_RCC_OscConfig+0x62c>)
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	2380      	movs	r3, #128	@ 0x80
 8004698:	041b      	lsls	r3, r3, #16
 800469a:	4013      	ands	r3, r2
 800469c:	d1f0      	bne.n	8004680 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d100      	bne.n	80046a8 <HAL_RCC_OscConfig+0x518>
 80046a6:	e0cc      	b.n	8004842 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046a8:	4b44      	ldr	r3, [pc, #272]	@ (80047bc <HAL_RCC_OscConfig+0x62c>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	2238      	movs	r2, #56	@ 0x38
 80046ae:	4013      	ands	r3, r2
 80046b0:	2b10      	cmp	r3, #16
 80046b2:	d100      	bne.n	80046b6 <HAL_RCC_OscConfig+0x526>
 80046b4:	e07b      	b.n	80047ae <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d156      	bne.n	800476c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046be:	4b3f      	ldr	r3, [pc, #252]	@ (80047bc <HAL_RCC_OscConfig+0x62c>)
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	4b3e      	ldr	r3, [pc, #248]	@ (80047bc <HAL_RCC_OscConfig+0x62c>)
 80046c4:	4942      	ldr	r1, [pc, #264]	@ (80047d0 <HAL_RCC_OscConfig+0x640>)
 80046c6:	400a      	ands	r2, r1
 80046c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ca:	f7fd f807 	bl	80016dc <HAL_GetTick>
 80046ce:	0003      	movs	r3, r0
 80046d0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d4:	f7fd f802 	bl	80016dc <HAL_GetTick>
 80046d8:	0002      	movs	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e0ae      	b.n	8004844 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046e6:	4b35      	ldr	r3, [pc, #212]	@ (80047bc <HAL_RCC_OscConfig+0x62c>)
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	2380      	movs	r3, #128	@ 0x80
 80046ec:	049b      	lsls	r3, r3, #18
 80046ee:	4013      	ands	r3, r2
 80046f0:	d1f0      	bne.n	80046d4 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046f2:	4b32      	ldr	r3, [pc, #200]	@ (80047bc <HAL_RCC_OscConfig+0x62c>)
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	4a37      	ldr	r2, [pc, #220]	@ (80047d4 <HAL_RCC_OscConfig+0x644>)
 80046f8:	4013      	ands	r3, r2
 80046fa:	0019      	movs	r1, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004704:	431a      	orrs	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470a:	021b      	lsls	r3, r3, #8
 800470c:	431a      	orrs	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004718:	431a      	orrs	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800471e:	431a      	orrs	r2, r3
 8004720:	4b26      	ldr	r3, [pc, #152]	@ (80047bc <HAL_RCC_OscConfig+0x62c>)
 8004722:	430a      	orrs	r2, r1
 8004724:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004726:	4b25      	ldr	r3, [pc, #148]	@ (80047bc <HAL_RCC_OscConfig+0x62c>)
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	4b24      	ldr	r3, [pc, #144]	@ (80047bc <HAL_RCC_OscConfig+0x62c>)
 800472c:	2180      	movs	r1, #128	@ 0x80
 800472e:	0449      	lsls	r1, r1, #17
 8004730:	430a      	orrs	r2, r1
 8004732:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004734:	4b21      	ldr	r3, [pc, #132]	@ (80047bc <HAL_RCC_OscConfig+0x62c>)
 8004736:	68da      	ldr	r2, [r3, #12]
 8004738:	4b20      	ldr	r3, [pc, #128]	@ (80047bc <HAL_RCC_OscConfig+0x62c>)
 800473a:	2180      	movs	r1, #128	@ 0x80
 800473c:	0549      	lsls	r1, r1, #21
 800473e:	430a      	orrs	r2, r1
 8004740:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004742:	f7fc ffcb 	bl	80016dc <HAL_GetTick>
 8004746:	0003      	movs	r3, r0
 8004748:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800474c:	f7fc ffc6 	bl	80016dc <HAL_GetTick>
 8004750:	0002      	movs	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e072      	b.n	8004844 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800475e:	4b17      	ldr	r3, [pc, #92]	@ (80047bc <HAL_RCC_OscConfig+0x62c>)
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	2380      	movs	r3, #128	@ 0x80
 8004764:	049b      	lsls	r3, r3, #18
 8004766:	4013      	ands	r3, r2
 8004768:	d0f0      	beq.n	800474c <HAL_RCC_OscConfig+0x5bc>
 800476a:	e06a      	b.n	8004842 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800476c:	4b13      	ldr	r3, [pc, #76]	@ (80047bc <HAL_RCC_OscConfig+0x62c>)
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	4b12      	ldr	r3, [pc, #72]	@ (80047bc <HAL_RCC_OscConfig+0x62c>)
 8004772:	4917      	ldr	r1, [pc, #92]	@ (80047d0 <HAL_RCC_OscConfig+0x640>)
 8004774:	400a      	ands	r2, r1
 8004776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004778:	f7fc ffb0 	bl	80016dc <HAL_GetTick>
 800477c:	0003      	movs	r3, r0
 800477e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004780:	e008      	b.n	8004794 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004782:	f7fc ffab 	bl	80016dc <HAL_GetTick>
 8004786:	0002      	movs	r2, r0
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d901      	bls.n	8004794 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e057      	b.n	8004844 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004794:	4b09      	ldr	r3, [pc, #36]	@ (80047bc <HAL_RCC_OscConfig+0x62c>)
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	2380      	movs	r3, #128	@ 0x80
 800479a:	049b      	lsls	r3, r3, #18
 800479c:	4013      	ands	r3, r2
 800479e:	d1f0      	bne.n	8004782 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80047a0:	4b06      	ldr	r3, [pc, #24]	@ (80047bc <HAL_RCC_OscConfig+0x62c>)
 80047a2:	68da      	ldr	r2, [r3, #12]
 80047a4:	4b05      	ldr	r3, [pc, #20]	@ (80047bc <HAL_RCC_OscConfig+0x62c>)
 80047a6:	490c      	ldr	r1, [pc, #48]	@ (80047d8 <HAL_RCC_OscConfig+0x648>)
 80047a8:	400a      	ands	r2, r1
 80047aa:	60da      	str	r2, [r3, #12]
 80047ac:	e049      	b.n	8004842 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d112      	bne.n	80047dc <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e044      	b.n	8004844 <HAL_RCC_OscConfig+0x6b4>
 80047ba:	46c0      	nop			@ (mov r8, r8)
 80047bc:	40021000 	.word	0x40021000
 80047c0:	40007000 	.word	0x40007000
 80047c4:	00001388 	.word	0x00001388
 80047c8:	efffffff 	.word	0xefffffff
 80047cc:	ffbfffff 	.word	0xffbfffff
 80047d0:	feffffff 	.word	0xfeffffff
 80047d4:	11c1808c 	.word	0x11c1808c
 80047d8:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80047dc:	4b1b      	ldr	r3, [pc, #108]	@ (800484c <HAL_RCC_OscConfig+0x6bc>)
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	2203      	movs	r2, #3
 80047e6:	401a      	ands	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d126      	bne.n	800483e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	2270      	movs	r2, #112	@ 0x70
 80047f4:	401a      	ands	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d11f      	bne.n	800483e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	23fe      	movs	r3, #254	@ 0xfe
 8004802:	01db      	lsls	r3, r3, #7
 8004804:	401a      	ands	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800480a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800480c:	429a      	cmp	r2, r3
 800480e:	d116      	bne.n	800483e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	23f8      	movs	r3, #248	@ 0xf8
 8004814:	039b      	lsls	r3, r3, #14
 8004816:	401a      	ands	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800481c:	429a      	cmp	r2, r3
 800481e:	d10e      	bne.n	800483e <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	23e0      	movs	r3, #224	@ 0xe0
 8004824:	051b      	lsls	r3, r3, #20
 8004826:	401a      	ands	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800482c:	429a      	cmp	r2, r3
 800482e:	d106      	bne.n	800483e <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	0f5b      	lsrs	r3, r3, #29
 8004834:	075a      	lsls	r2, r3, #29
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800483a:	429a      	cmp	r2, r3
 800483c:	d001      	beq.n	8004842 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e000      	b.n	8004844 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	0018      	movs	r0, r3
 8004846:	46bd      	mov	sp, r7
 8004848:	b008      	add	sp, #32
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40021000 	.word	0x40021000

08004850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d101      	bne.n	8004864 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e0e9      	b.n	8004a38 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004864:	4b76      	ldr	r3, [pc, #472]	@ (8004a40 <HAL_RCC_ClockConfig+0x1f0>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2207      	movs	r2, #7
 800486a:	4013      	ands	r3, r2
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	429a      	cmp	r2, r3
 8004870:	d91e      	bls.n	80048b0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004872:	4b73      	ldr	r3, [pc, #460]	@ (8004a40 <HAL_RCC_ClockConfig+0x1f0>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2207      	movs	r2, #7
 8004878:	4393      	bics	r3, r2
 800487a:	0019      	movs	r1, r3
 800487c:	4b70      	ldr	r3, [pc, #448]	@ (8004a40 <HAL_RCC_ClockConfig+0x1f0>)
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004884:	f7fc ff2a 	bl	80016dc <HAL_GetTick>
 8004888:	0003      	movs	r3, r0
 800488a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800488c:	e009      	b.n	80048a2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800488e:	f7fc ff25 	bl	80016dc <HAL_GetTick>
 8004892:	0002      	movs	r2, r0
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	4a6a      	ldr	r2, [pc, #424]	@ (8004a44 <HAL_RCC_ClockConfig+0x1f4>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e0ca      	b.n	8004a38 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80048a2:	4b67      	ldr	r3, [pc, #412]	@ (8004a40 <HAL_RCC_ClockConfig+0x1f0>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2207      	movs	r2, #7
 80048a8:	4013      	ands	r3, r2
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d1ee      	bne.n	800488e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2202      	movs	r2, #2
 80048b6:	4013      	ands	r3, r2
 80048b8:	d015      	beq.n	80048e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2204      	movs	r2, #4
 80048c0:	4013      	ands	r3, r2
 80048c2:	d006      	beq.n	80048d2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80048c4:	4b60      	ldr	r3, [pc, #384]	@ (8004a48 <HAL_RCC_ClockConfig+0x1f8>)
 80048c6:	689a      	ldr	r2, [r3, #8]
 80048c8:	4b5f      	ldr	r3, [pc, #380]	@ (8004a48 <HAL_RCC_ClockConfig+0x1f8>)
 80048ca:	21e0      	movs	r1, #224	@ 0xe0
 80048cc:	01c9      	lsls	r1, r1, #7
 80048ce:	430a      	orrs	r2, r1
 80048d0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048d2:	4b5d      	ldr	r3, [pc, #372]	@ (8004a48 <HAL_RCC_ClockConfig+0x1f8>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	4a5d      	ldr	r2, [pc, #372]	@ (8004a4c <HAL_RCC_ClockConfig+0x1fc>)
 80048d8:	4013      	ands	r3, r2
 80048da:	0019      	movs	r1, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689a      	ldr	r2, [r3, #8]
 80048e0:	4b59      	ldr	r3, [pc, #356]	@ (8004a48 <HAL_RCC_ClockConfig+0x1f8>)
 80048e2:	430a      	orrs	r2, r1
 80048e4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2201      	movs	r2, #1
 80048ec:	4013      	ands	r3, r2
 80048ee:	d057      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d107      	bne.n	8004908 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048f8:	4b53      	ldr	r3, [pc, #332]	@ (8004a48 <HAL_RCC_ClockConfig+0x1f8>)
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	2380      	movs	r3, #128	@ 0x80
 80048fe:	029b      	lsls	r3, r3, #10
 8004900:	4013      	ands	r3, r2
 8004902:	d12b      	bne.n	800495c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e097      	b.n	8004a38 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	2b02      	cmp	r3, #2
 800490e:	d107      	bne.n	8004920 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004910:	4b4d      	ldr	r3, [pc, #308]	@ (8004a48 <HAL_RCC_ClockConfig+0x1f8>)
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	2380      	movs	r3, #128	@ 0x80
 8004916:	049b      	lsls	r3, r3, #18
 8004918:	4013      	ands	r3, r2
 800491a:	d11f      	bne.n	800495c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e08b      	b.n	8004a38 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d107      	bne.n	8004938 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004928:	4b47      	ldr	r3, [pc, #284]	@ (8004a48 <HAL_RCC_ClockConfig+0x1f8>)
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	2380      	movs	r3, #128	@ 0x80
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	4013      	ands	r3, r2
 8004932:	d113      	bne.n	800495c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e07f      	b.n	8004a38 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	2b03      	cmp	r3, #3
 800493e:	d106      	bne.n	800494e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004940:	4b41      	ldr	r3, [pc, #260]	@ (8004a48 <HAL_RCC_ClockConfig+0x1f8>)
 8004942:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004944:	2202      	movs	r2, #2
 8004946:	4013      	ands	r3, r2
 8004948:	d108      	bne.n	800495c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e074      	b.n	8004a38 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800494e:	4b3e      	ldr	r3, [pc, #248]	@ (8004a48 <HAL_RCC_ClockConfig+0x1f8>)
 8004950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004952:	2202      	movs	r2, #2
 8004954:	4013      	ands	r3, r2
 8004956:	d101      	bne.n	800495c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e06d      	b.n	8004a38 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800495c:	4b3a      	ldr	r3, [pc, #232]	@ (8004a48 <HAL_RCC_ClockConfig+0x1f8>)
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	2207      	movs	r2, #7
 8004962:	4393      	bics	r3, r2
 8004964:	0019      	movs	r1, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	4b37      	ldr	r3, [pc, #220]	@ (8004a48 <HAL_RCC_ClockConfig+0x1f8>)
 800496c:	430a      	orrs	r2, r1
 800496e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004970:	f7fc feb4 	bl	80016dc <HAL_GetTick>
 8004974:	0003      	movs	r3, r0
 8004976:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004978:	e009      	b.n	800498e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800497a:	f7fc feaf 	bl	80016dc <HAL_GetTick>
 800497e:	0002      	movs	r2, r0
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	4a2f      	ldr	r2, [pc, #188]	@ (8004a44 <HAL_RCC_ClockConfig+0x1f4>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d901      	bls.n	800498e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e054      	b.n	8004a38 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800498e:	4b2e      	ldr	r3, [pc, #184]	@ (8004a48 <HAL_RCC_ClockConfig+0x1f8>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	2238      	movs	r2, #56	@ 0x38
 8004994:	401a      	ands	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	429a      	cmp	r2, r3
 800499e:	d1ec      	bne.n	800497a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049a0:	4b27      	ldr	r3, [pc, #156]	@ (8004a40 <HAL_RCC_ClockConfig+0x1f0>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2207      	movs	r2, #7
 80049a6:	4013      	ands	r3, r2
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d21e      	bcs.n	80049ec <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ae:	4b24      	ldr	r3, [pc, #144]	@ (8004a40 <HAL_RCC_ClockConfig+0x1f0>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2207      	movs	r2, #7
 80049b4:	4393      	bics	r3, r2
 80049b6:	0019      	movs	r1, r3
 80049b8:	4b21      	ldr	r3, [pc, #132]	@ (8004a40 <HAL_RCC_ClockConfig+0x1f0>)
 80049ba:	683a      	ldr	r2, [r7, #0]
 80049bc:	430a      	orrs	r2, r1
 80049be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80049c0:	f7fc fe8c 	bl	80016dc <HAL_GetTick>
 80049c4:	0003      	movs	r3, r0
 80049c6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80049c8:	e009      	b.n	80049de <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049ca:	f7fc fe87 	bl	80016dc <HAL_GetTick>
 80049ce:	0002      	movs	r2, r0
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	4a1b      	ldr	r2, [pc, #108]	@ (8004a44 <HAL_RCC_ClockConfig+0x1f4>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e02c      	b.n	8004a38 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80049de:	4b18      	ldr	r3, [pc, #96]	@ (8004a40 <HAL_RCC_ClockConfig+0x1f0>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2207      	movs	r2, #7
 80049e4:	4013      	ands	r3, r2
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d1ee      	bne.n	80049ca <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2204      	movs	r2, #4
 80049f2:	4013      	ands	r3, r2
 80049f4:	d009      	beq.n	8004a0a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80049f6:	4b14      	ldr	r3, [pc, #80]	@ (8004a48 <HAL_RCC_ClockConfig+0x1f8>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	4a15      	ldr	r2, [pc, #84]	@ (8004a50 <HAL_RCC_ClockConfig+0x200>)
 80049fc:	4013      	ands	r3, r2
 80049fe:	0019      	movs	r1, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68da      	ldr	r2, [r3, #12]
 8004a04:	4b10      	ldr	r3, [pc, #64]	@ (8004a48 <HAL_RCC_ClockConfig+0x1f8>)
 8004a06:	430a      	orrs	r2, r1
 8004a08:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004a0a:	f000 f829 	bl	8004a60 <HAL_RCC_GetSysClockFreq>
 8004a0e:	0001      	movs	r1, r0
 8004a10:	4b0d      	ldr	r3, [pc, #52]	@ (8004a48 <HAL_RCC_ClockConfig+0x1f8>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	0a1b      	lsrs	r3, r3, #8
 8004a16:	220f      	movs	r2, #15
 8004a18:	401a      	ands	r2, r3
 8004a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8004a54 <HAL_RCC_ClockConfig+0x204>)
 8004a1c:	0092      	lsls	r2, r2, #2
 8004a1e:	58d3      	ldr	r3, [r2, r3]
 8004a20:	221f      	movs	r2, #31
 8004a22:	4013      	ands	r3, r2
 8004a24:	000a      	movs	r2, r1
 8004a26:	40da      	lsrs	r2, r3
 8004a28:	4b0b      	ldr	r3, [pc, #44]	@ (8004a58 <HAL_RCC_ClockConfig+0x208>)
 8004a2a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a5c <HAL_RCC_ClockConfig+0x20c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	0018      	movs	r0, r3
 8004a32:	f7fc fdf7 	bl	8001624 <HAL_InitTick>
 8004a36:	0003      	movs	r3, r0
}
 8004a38:	0018      	movs	r0, r3
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	b004      	add	sp, #16
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	40022000 	.word	0x40022000
 8004a44:	00001388 	.word	0x00001388
 8004a48:	40021000 	.word	0x40021000
 8004a4c:	fffff0ff 	.word	0xfffff0ff
 8004a50:	ffff8fff 	.word	0xffff8fff
 8004a54:	0800b890 	.word	0x0800b890
 8004a58:	20000030 	.word	0x20000030
 8004a5c:	20000034 	.word	0x20000034

08004a60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a66:	4b3c      	ldr	r3, [pc, #240]	@ (8004b58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	2238      	movs	r2, #56	@ 0x38
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	d10f      	bne.n	8004a90 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004a70:	4b39      	ldr	r3, [pc, #228]	@ (8004b58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	0adb      	lsrs	r3, r3, #11
 8004a76:	2207      	movs	r2, #7
 8004a78:	4013      	ands	r3, r2
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	409a      	lsls	r2, r3
 8004a7e:	0013      	movs	r3, r2
 8004a80:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004a82:	6839      	ldr	r1, [r7, #0]
 8004a84:	4835      	ldr	r0, [pc, #212]	@ (8004b5c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004a86:	f7fb fb4f 	bl	8000128 <__udivsi3>
 8004a8a:	0003      	movs	r3, r0
 8004a8c:	613b      	str	r3, [r7, #16]
 8004a8e:	e05d      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a90:	4b31      	ldr	r3, [pc, #196]	@ (8004b58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	2238      	movs	r2, #56	@ 0x38
 8004a96:	4013      	ands	r3, r2
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d102      	bne.n	8004aa2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a9c:	4b30      	ldr	r3, [pc, #192]	@ (8004b60 <HAL_RCC_GetSysClockFreq+0x100>)
 8004a9e:	613b      	str	r3, [r7, #16]
 8004aa0:	e054      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004aa2:	4b2d      	ldr	r3, [pc, #180]	@ (8004b58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	2238      	movs	r2, #56	@ 0x38
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	2b10      	cmp	r3, #16
 8004aac:	d138      	bne.n	8004b20 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004aae:	4b2a      	ldr	r3, [pc, #168]	@ (8004b58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	2203      	movs	r2, #3
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ab8:	4b27      	ldr	r3, [pc, #156]	@ (8004b58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	091b      	lsrs	r3, r3, #4
 8004abe:	2207      	movs	r2, #7
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2b03      	cmp	r3, #3
 8004aca:	d10d      	bne.n	8004ae8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004acc:	68b9      	ldr	r1, [r7, #8]
 8004ace:	4824      	ldr	r0, [pc, #144]	@ (8004b60 <HAL_RCC_GetSysClockFreq+0x100>)
 8004ad0:	f7fb fb2a 	bl	8000128 <__udivsi3>
 8004ad4:	0003      	movs	r3, r0
 8004ad6:	0019      	movs	r1, r3
 8004ad8:	4b1f      	ldr	r3, [pc, #124]	@ (8004b58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	0a1b      	lsrs	r3, r3, #8
 8004ade:	227f      	movs	r2, #127	@ 0x7f
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	434b      	muls	r3, r1
 8004ae4:	617b      	str	r3, [r7, #20]
        break;
 8004ae6:	e00d      	b.n	8004b04 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004ae8:	68b9      	ldr	r1, [r7, #8]
 8004aea:	481c      	ldr	r0, [pc, #112]	@ (8004b5c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004aec:	f7fb fb1c 	bl	8000128 <__udivsi3>
 8004af0:	0003      	movs	r3, r0
 8004af2:	0019      	movs	r1, r3
 8004af4:	4b18      	ldr	r3, [pc, #96]	@ (8004b58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	0a1b      	lsrs	r3, r3, #8
 8004afa:	227f      	movs	r2, #127	@ 0x7f
 8004afc:	4013      	ands	r3, r2
 8004afe:	434b      	muls	r3, r1
 8004b00:	617b      	str	r3, [r7, #20]
        break;
 8004b02:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004b04:	4b14      	ldr	r3, [pc, #80]	@ (8004b58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	0f5b      	lsrs	r3, r3, #29
 8004b0a:	2207      	movs	r2, #7
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	3301      	adds	r3, #1
 8004b10:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004b12:	6879      	ldr	r1, [r7, #4]
 8004b14:	6978      	ldr	r0, [r7, #20]
 8004b16:	f7fb fb07 	bl	8000128 <__udivsi3>
 8004b1a:	0003      	movs	r3, r0
 8004b1c:	613b      	str	r3, [r7, #16]
 8004b1e:	e015      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004b20:	4b0d      	ldr	r3, [pc, #52]	@ (8004b58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	2238      	movs	r2, #56	@ 0x38
 8004b26:	4013      	ands	r3, r2
 8004b28:	2b20      	cmp	r3, #32
 8004b2a:	d103      	bne.n	8004b34 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004b2c:	2380      	movs	r3, #128	@ 0x80
 8004b2e:	021b      	lsls	r3, r3, #8
 8004b30:	613b      	str	r3, [r7, #16]
 8004b32:	e00b      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004b34:	4b08      	ldr	r3, [pc, #32]	@ (8004b58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	2238      	movs	r2, #56	@ 0x38
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	2b18      	cmp	r3, #24
 8004b3e:	d103      	bne.n	8004b48 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004b40:	23fa      	movs	r3, #250	@ 0xfa
 8004b42:	01db      	lsls	r3, r3, #7
 8004b44:	613b      	str	r3, [r7, #16]
 8004b46:	e001      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004b4c:	693b      	ldr	r3, [r7, #16]
}
 8004b4e:	0018      	movs	r0, r3
 8004b50:	46bd      	mov	sp, r7
 8004b52:	b006      	add	sp, #24
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	46c0      	nop			@ (mov r8, r8)
 8004b58:	40021000 	.word	0x40021000
 8004b5c:	00f42400 	.word	0x00f42400
 8004b60:	007a1200 	.word	0x007a1200

08004b64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b68:	4b02      	ldr	r3, [pc, #8]	@ (8004b74 <HAL_RCC_GetHCLKFreq+0x10>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
}
 8004b6c:	0018      	movs	r0, r3
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	46c0      	nop			@ (mov r8, r8)
 8004b74:	20000030 	.word	0x20000030

08004b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b78:	b5b0      	push	{r4, r5, r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004b7c:	f7ff fff2 	bl	8004b64 <HAL_RCC_GetHCLKFreq>
 8004b80:	0004      	movs	r4, r0
 8004b82:	f7ff faf9 	bl	8004178 <LL_RCC_GetAPB1Prescaler>
 8004b86:	0003      	movs	r3, r0
 8004b88:	0b1a      	lsrs	r2, r3, #12
 8004b8a:	4b05      	ldr	r3, [pc, #20]	@ (8004ba0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b8c:	0092      	lsls	r2, r2, #2
 8004b8e:	58d3      	ldr	r3, [r2, r3]
 8004b90:	221f      	movs	r2, #31
 8004b92:	4013      	ands	r3, r2
 8004b94:	40dc      	lsrs	r4, r3
 8004b96:	0023      	movs	r3, r4
}
 8004b98:	0018      	movs	r0, r3
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bdb0      	pop	{r4, r5, r7, pc}
 8004b9e:	46c0      	nop			@ (mov r8, r8)
 8004ba0:	0800b8d0 	.word	0x0800b8d0

08004ba4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004bac:	2313      	movs	r3, #19
 8004bae:	18fb      	adds	r3, r7, r3
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bb4:	2312      	movs	r3, #18
 8004bb6:	18fb      	adds	r3, r7, r3
 8004bb8:	2200      	movs	r2, #0
 8004bba:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	2380      	movs	r3, #128	@ 0x80
 8004bc2:	029b      	lsls	r3, r3, #10
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	d100      	bne.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004bc8:	e0ad      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bca:	2011      	movs	r0, #17
 8004bcc:	183b      	adds	r3, r7, r0
 8004bce:	2200      	movs	r2, #0
 8004bd0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bd2:	4b47      	ldr	r3, [pc, #284]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004bd4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bd6:	2380      	movs	r3, #128	@ 0x80
 8004bd8:	055b      	lsls	r3, r3, #21
 8004bda:	4013      	ands	r3, r2
 8004bdc:	d110      	bne.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bde:	4b44      	ldr	r3, [pc, #272]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004be0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004be2:	4b43      	ldr	r3, [pc, #268]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004be4:	2180      	movs	r1, #128	@ 0x80
 8004be6:	0549      	lsls	r1, r1, #21
 8004be8:	430a      	orrs	r2, r1
 8004bea:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004bec:	4b40      	ldr	r3, [pc, #256]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004bee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bf0:	2380      	movs	r3, #128	@ 0x80
 8004bf2:	055b      	lsls	r3, r3, #21
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	60bb      	str	r3, [r7, #8]
 8004bf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bfa:	183b      	adds	r3, r7, r0
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c00:	4b3c      	ldr	r3, [pc, #240]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	4b3b      	ldr	r3, [pc, #236]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004c06:	2180      	movs	r1, #128	@ 0x80
 8004c08:	0049      	lsls	r1, r1, #1
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c0e:	f7fc fd65 	bl	80016dc <HAL_GetTick>
 8004c12:	0003      	movs	r3, r0
 8004c14:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c16:	e00b      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c18:	f7fc fd60 	bl	80016dc <HAL_GetTick>
 8004c1c:	0002      	movs	r2, r0
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d904      	bls.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004c26:	2313      	movs	r3, #19
 8004c28:	18fb      	adds	r3, r7, r3
 8004c2a:	2203      	movs	r2, #3
 8004c2c:	701a      	strb	r2, [r3, #0]
        break;
 8004c2e:	e005      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c30:	4b30      	ldr	r3, [pc, #192]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	2380      	movs	r3, #128	@ 0x80
 8004c36:	005b      	lsls	r3, r3, #1
 8004c38:	4013      	ands	r3, r2
 8004c3a:	d0ed      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004c3c:	2313      	movs	r3, #19
 8004c3e:	18fb      	adds	r3, r7, r3
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d15e      	bne.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c46:	4b2a      	ldr	r3, [pc, #168]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004c48:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004c4a:	23c0      	movs	r3, #192	@ 0xc0
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	4013      	ands	r3, r2
 8004c50:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d019      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d014      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c62:	4b23      	ldr	r3, [pc, #140]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c66:	4a24      	ldr	r2, [pc, #144]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004c68:	4013      	ands	r3, r2
 8004c6a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c6c:	4b20      	ldr	r3, [pc, #128]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004c6e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004c70:	4b1f      	ldr	r3, [pc, #124]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004c72:	2180      	movs	r1, #128	@ 0x80
 8004c74:	0249      	lsls	r1, r1, #9
 8004c76:	430a      	orrs	r2, r1
 8004c78:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c7a:	4b1d      	ldr	r3, [pc, #116]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004c7c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004c80:	491e      	ldr	r1, [pc, #120]	@ (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8004c82:	400a      	ands	r2, r1
 8004c84:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c86:	4b1a      	ldr	r3, [pc, #104]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	4013      	ands	r3, r2
 8004c92:	d016      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c94:	f7fc fd22 	bl	80016dc <HAL_GetTick>
 8004c98:	0003      	movs	r3, r0
 8004c9a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c9c:	e00c      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c9e:	f7fc fd1d 	bl	80016dc <HAL_GetTick>
 8004ca2:	0002      	movs	r2, r0
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	4a15      	ldr	r2, [pc, #84]	@ (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d904      	bls.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004cae:	2313      	movs	r3, #19
 8004cb0:	18fb      	adds	r3, r7, r3
 8004cb2:	2203      	movs	r2, #3
 8004cb4:	701a      	strb	r2, [r3, #0]
            break;
 8004cb6:	e004      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cb8:	4b0d      	ldr	r3, [pc, #52]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cbc:	2202      	movs	r2, #2
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	d0ed      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004cc2:	2313      	movs	r3, #19
 8004cc4:	18fb      	adds	r3, r7, r3
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d10a      	bne.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ccc:	4b08      	ldr	r3, [pc, #32]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cd0:	4a09      	ldr	r2, [pc, #36]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	0019      	movs	r1, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cda:	4b05      	ldr	r3, [pc, #20]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004ce0:	e016      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ce2:	2312      	movs	r3, #18
 8004ce4:	18fb      	adds	r3, r7, r3
 8004ce6:	2213      	movs	r2, #19
 8004ce8:	18ba      	adds	r2, r7, r2
 8004cea:	7812      	ldrb	r2, [r2, #0]
 8004cec:	701a      	strb	r2, [r3, #0]
 8004cee:	e00f      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004cf0:	40021000 	.word	0x40021000
 8004cf4:	40007000 	.word	0x40007000
 8004cf8:	fffffcff 	.word	0xfffffcff
 8004cfc:	fffeffff 	.word	0xfffeffff
 8004d00:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d04:	2312      	movs	r3, #18
 8004d06:	18fb      	adds	r3, r7, r3
 8004d08:	2213      	movs	r2, #19
 8004d0a:	18ba      	adds	r2, r7, r2
 8004d0c:	7812      	ldrb	r2, [r2, #0]
 8004d0e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d10:	2311      	movs	r3, #17
 8004d12:	18fb      	adds	r3, r7, r3
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d105      	bne.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d1a:	4bb6      	ldr	r3, [pc, #728]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d1e:	4bb5      	ldr	r3, [pc, #724]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d20:	49b5      	ldr	r1, [pc, #724]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004d22:	400a      	ands	r2, r1
 8004d24:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	d009      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d30:	4bb0      	ldr	r3, [pc, #704]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d34:	2203      	movs	r2, #3
 8004d36:	4393      	bics	r3, r2
 8004d38:	0019      	movs	r1, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	4bad      	ldr	r3, [pc, #692]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d40:	430a      	orrs	r2, r1
 8004d42:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2202      	movs	r2, #2
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	d009      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d4e:	4ba9      	ldr	r3, [pc, #676]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d52:	220c      	movs	r2, #12
 8004d54:	4393      	bics	r3, r2
 8004d56:	0019      	movs	r1, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689a      	ldr	r2, [r3, #8]
 8004d5c:	4ba5      	ldr	r3, [pc, #660]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2204      	movs	r2, #4
 8004d68:	4013      	ands	r3, r2
 8004d6a:	d009      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d6c:	4ba1      	ldr	r3, [pc, #644]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d70:	2230      	movs	r2, #48	@ 0x30
 8004d72:	4393      	bics	r3, r2
 8004d74:	0019      	movs	r1, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68da      	ldr	r2, [r3, #12]
 8004d7a:	4b9e      	ldr	r3, [pc, #632]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2210      	movs	r2, #16
 8004d86:	4013      	ands	r3, r2
 8004d88:	d009      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d8a:	4b9a      	ldr	r3, [pc, #616]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d8e:	4a9b      	ldr	r2, [pc, #620]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004d90:	4013      	ands	r3, r2
 8004d92:	0019      	movs	r1, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	691a      	ldr	r2, [r3, #16]
 8004d98:	4b96      	ldr	r3, [pc, #600]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	2380      	movs	r3, #128	@ 0x80
 8004da4:	015b      	lsls	r3, r3, #5
 8004da6:	4013      	ands	r3, r2
 8004da8:	d009      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8004daa:	4b92      	ldr	r3, [pc, #584]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dae:	4a94      	ldr	r2, [pc, #592]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004db0:	4013      	ands	r3, r2
 8004db2:	0019      	movs	r1, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	695a      	ldr	r2, [r3, #20]
 8004db8:	4b8e      	ldr	r3, [pc, #568]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	2380      	movs	r3, #128	@ 0x80
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	d009      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dca:	4b8a      	ldr	r3, [pc, #552]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dce:	4a8d      	ldr	r2, [pc, #564]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	0019      	movs	r1, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004dd8:	4b86      	ldr	r3, [pc, #536]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	2380      	movs	r3, #128	@ 0x80
 8004de4:	00db      	lsls	r3, r3, #3
 8004de6:	4013      	ands	r3, r2
 8004de8:	d009      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004dea:	4b82      	ldr	r3, [pc, #520]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dee:	4a86      	ldr	r2, [pc, #536]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8004df0:	4013      	ands	r3, r2
 8004df2:	0019      	movs	r1, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004df8:	4b7e      	ldr	r3, [pc, #504]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2220      	movs	r2, #32
 8004e04:	4013      	ands	r3, r2
 8004e06:	d009      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e08:	4b7a      	ldr	r3, [pc, #488]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e0c:	4a7f      	ldr	r2, [pc, #508]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004e0e:	4013      	ands	r3, r2
 8004e10:	0019      	movs	r1, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	699a      	ldr	r2, [r3, #24]
 8004e16:	4b77      	ldr	r3, [pc, #476]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2240      	movs	r2, #64	@ 0x40
 8004e22:	4013      	ands	r3, r2
 8004e24:	d009      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e26:	4b73      	ldr	r3, [pc, #460]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e2a:	4a79      	ldr	r2, [pc, #484]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	0019      	movs	r1, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	69da      	ldr	r2, [r3, #28]
 8004e34:	4b6f      	ldr	r3, [pc, #444]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e36:	430a      	orrs	r2, r1
 8004e38:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	2380      	movs	r3, #128	@ 0x80
 8004e40:	01db      	lsls	r3, r3, #7
 8004e42:	4013      	ands	r3, r2
 8004e44:	d015      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e46:	4b6b      	ldr	r3, [pc, #428]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	0899      	lsrs	r1, r3, #2
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e52:	4b68      	ldr	r3, [pc, #416]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e54:	430a      	orrs	r2, r1
 8004e56:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e5c:	2380      	movs	r3, #128	@ 0x80
 8004e5e:	05db      	lsls	r3, r3, #23
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d106      	bne.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004e64:	4b63      	ldr	r3, [pc, #396]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e66:	68da      	ldr	r2, [r3, #12]
 8004e68:	4b62      	ldr	r3, [pc, #392]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e6a:	2180      	movs	r1, #128	@ 0x80
 8004e6c:	0249      	lsls	r1, r1, #9
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	2380      	movs	r3, #128	@ 0x80
 8004e78:	031b      	lsls	r3, r3, #12
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	d009      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e7e:	4b5d      	ldr	r3, [pc, #372]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e82:	2240      	movs	r2, #64	@ 0x40
 8004e84:	4393      	bics	r3, r2
 8004e86:	0019      	movs	r1, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e8c:	4b59      	ldr	r3, [pc, #356]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	2380      	movs	r3, #128	@ 0x80
 8004e98:	039b      	lsls	r3, r3, #14
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	d016      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004e9e:	4b55      	ldr	r3, [pc, #340]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ea2:	4a5c      	ldr	r2, [pc, #368]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	0019      	movs	r1, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004eac:	4b51      	ldr	r3, [pc, #324]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004eb6:	2380      	movs	r3, #128	@ 0x80
 8004eb8:	03db      	lsls	r3, r3, #15
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d106      	bne.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004ebe:	4b4d      	ldr	r3, [pc, #308]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ec0:	68da      	ldr	r2, [r3, #12]
 8004ec2:	4b4c      	ldr	r3, [pc, #304]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ec4:	2180      	movs	r1, #128	@ 0x80
 8004ec6:	0449      	lsls	r1, r1, #17
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	2380      	movs	r3, #128	@ 0x80
 8004ed2:	03db      	lsls	r3, r3, #15
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	d016      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004ed8:	4b46      	ldr	r3, [pc, #280]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004edc:	4a4e      	ldr	r2, [pc, #312]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004ede:	4013      	ands	r3, r2
 8004ee0:	0019      	movs	r1, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ee6:	4b43      	ldr	r3, [pc, #268]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ef0:	2380      	movs	r3, #128	@ 0x80
 8004ef2:	045b      	lsls	r3, r3, #17
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d106      	bne.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004ef8:	4b3e      	ldr	r3, [pc, #248]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004efa:	68da      	ldr	r2, [r3, #12]
 8004efc:	4b3d      	ldr	r3, [pc, #244]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004efe:	2180      	movs	r1, #128	@ 0x80
 8004f00:	0449      	lsls	r1, r1, #17
 8004f02:	430a      	orrs	r2, r1
 8004f04:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	2380      	movs	r3, #128	@ 0x80
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	4013      	ands	r3, r2
 8004f10:	d014      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004f12:	4b38      	ldr	r3, [pc, #224]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f16:	2203      	movs	r2, #3
 8004f18:	4393      	bics	r3, r2
 8004f1a:	0019      	movs	r1, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a1a      	ldr	r2, [r3, #32]
 8004f20:	4b34      	ldr	r3, [pc, #208]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f22:	430a      	orrs	r2, r1
 8004f24:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d106      	bne.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004f2e:	4b31      	ldr	r3, [pc, #196]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	4b30      	ldr	r3, [pc, #192]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f34:	2180      	movs	r1, #128	@ 0x80
 8004f36:	0249      	lsls	r1, r1, #9
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	2380      	movs	r3, #128	@ 0x80
 8004f42:	019b      	lsls	r3, r3, #6
 8004f44:	4013      	ands	r3, r2
 8004f46:	d014      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004f48:	4b2a      	ldr	r3, [pc, #168]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f4c:	220c      	movs	r2, #12
 8004f4e:	4393      	bics	r3, r2
 8004f50:	0019      	movs	r1, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f56:	4b27      	ldr	r3, [pc, #156]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	d106      	bne.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004f64:	4b23      	ldr	r3, [pc, #140]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f66:	68da      	ldr	r2, [r3, #12]
 8004f68:	4b22      	ldr	r3, [pc, #136]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f6a:	2180      	movs	r1, #128	@ 0x80
 8004f6c:	0249      	lsls	r1, r1, #9
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	2380      	movs	r3, #128	@ 0x80
 8004f78:	045b      	lsls	r3, r3, #17
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	d016      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f82:	4a22      	ldr	r2, [pc, #136]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004f84:	4013      	ands	r3, r2
 8004f86:	0019      	movs	r1, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f8c:	4b19      	ldr	r3, [pc, #100]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f96:	2380      	movs	r3, #128	@ 0x80
 8004f98:	019b      	lsls	r3, r3, #6
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d106      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004f9e:	4b15      	ldr	r3, [pc, #84]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fa0:	68da      	ldr	r2, [r3, #12]
 8004fa2:	4b14      	ldr	r3, [pc, #80]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fa4:	2180      	movs	r1, #128	@ 0x80
 8004fa6:	0449      	lsls	r1, r1, #17
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	2380      	movs	r3, #128	@ 0x80
 8004fb2:	049b      	lsls	r3, r3, #18
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	d016      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fbc:	4a10      	ldr	r2, [pc, #64]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	0019      	movs	r1, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004fd0:	2380      	movs	r3, #128	@ 0x80
 8004fd2:	005b      	lsls	r3, r3, #1
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d106      	bne.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004fd8:	4b06      	ldr	r3, [pc, #24]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fda:	68da      	ldr	r2, [r3, #12]
 8004fdc:	4b05      	ldr	r3, [pc, #20]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fde:	2180      	movs	r1, #128	@ 0x80
 8004fe0:	0449      	lsls	r1, r1, #17
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004fe6:	2312      	movs	r3, #18
 8004fe8:	18fb      	adds	r3, r7, r3
 8004fea:	781b      	ldrb	r3, [r3, #0]
}
 8004fec:	0018      	movs	r0, r3
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	b006      	add	sp, #24
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	40021000 	.word	0x40021000
 8004ff8:	efffffff 	.word	0xefffffff
 8004ffc:	fffff3ff 	.word	0xfffff3ff
 8005000:	fffffcff 	.word	0xfffffcff
 8005004:	fff3ffff 	.word	0xfff3ffff
 8005008:	ffcfffff 	.word	0xffcfffff
 800500c:	ffffcfff 	.word	0xffffcfff
 8005010:	ffff3fff 	.word	0xffff3fff
 8005014:	ffbfffff 	.word	0xffbfffff
 8005018:	feffffff 	.word	0xfeffffff

0800501c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e0a8      	b.n	8005180 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005032:	2b00      	cmp	r3, #0
 8005034:	d109      	bne.n	800504a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685a      	ldr	r2, [r3, #4]
 800503a:	2382      	movs	r3, #130	@ 0x82
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	429a      	cmp	r2, r3
 8005040:	d009      	beq.n	8005056 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	61da      	str	r2, [r3, #28]
 8005048:	e005      	b.n	8005056 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	225d      	movs	r2, #93	@ 0x5d
 8005060:	5c9b      	ldrb	r3, [r3, r2]
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b00      	cmp	r3, #0
 8005066:	d107      	bne.n	8005078 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	225c      	movs	r2, #92	@ 0x5c
 800506c:	2100      	movs	r1, #0
 800506e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	0018      	movs	r0, r3
 8005074:	f7fb ff96 	bl	8000fa4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	225d      	movs	r2, #93	@ 0x5d
 800507c:	2102      	movs	r1, #2
 800507e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2140      	movs	r1, #64	@ 0x40
 800508c:	438a      	bics	r2, r1
 800508e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68da      	ldr	r2, [r3, #12]
 8005094:	23e0      	movs	r3, #224	@ 0xe0
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	429a      	cmp	r2, r3
 800509a:	d902      	bls.n	80050a2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800509c:	2300      	movs	r3, #0
 800509e:	60fb      	str	r3, [r7, #12]
 80050a0:	e002      	b.n	80050a8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80050a2:	2380      	movs	r3, #128	@ 0x80
 80050a4:	015b      	lsls	r3, r3, #5
 80050a6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68da      	ldr	r2, [r3, #12]
 80050ac:	23f0      	movs	r3, #240	@ 0xf0
 80050ae:	011b      	lsls	r3, r3, #4
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d008      	beq.n	80050c6 <HAL_SPI_Init+0xaa>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68da      	ldr	r2, [r3, #12]
 80050b8:	23e0      	movs	r3, #224	@ 0xe0
 80050ba:	00db      	lsls	r3, r3, #3
 80050bc:	429a      	cmp	r2, r3
 80050be:	d002      	beq.n	80050c6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	2382      	movs	r3, #130	@ 0x82
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	401a      	ands	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6899      	ldr	r1, [r3, #8]
 80050d4:	2384      	movs	r3, #132	@ 0x84
 80050d6:	021b      	lsls	r3, r3, #8
 80050d8:	400b      	ands	r3, r1
 80050da:	431a      	orrs	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	2102      	movs	r1, #2
 80050e2:	400b      	ands	r3, r1
 80050e4:	431a      	orrs	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	2101      	movs	r1, #1
 80050ec:	400b      	ands	r3, r1
 80050ee:	431a      	orrs	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6999      	ldr	r1, [r3, #24]
 80050f4:	2380      	movs	r3, #128	@ 0x80
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	400b      	ands	r3, r1
 80050fa:	431a      	orrs	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	2138      	movs	r1, #56	@ 0x38
 8005102:	400b      	ands	r3, r1
 8005104:	431a      	orrs	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	2180      	movs	r1, #128	@ 0x80
 800510c:	400b      	ands	r3, r1
 800510e:	431a      	orrs	r2, r3
 8005110:	0011      	movs	r1, r2
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005116:	2380      	movs	r3, #128	@ 0x80
 8005118:	019b      	lsls	r3, r3, #6
 800511a:	401a      	ands	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	0c1b      	lsrs	r3, r3, #16
 800512a:	2204      	movs	r2, #4
 800512c:	401a      	ands	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005132:	2110      	movs	r1, #16
 8005134:	400b      	ands	r3, r1
 8005136:	431a      	orrs	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800513c:	2108      	movs	r1, #8
 800513e:	400b      	ands	r3, r1
 8005140:	431a      	orrs	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68d9      	ldr	r1, [r3, #12]
 8005146:	23f0      	movs	r3, #240	@ 0xf0
 8005148:	011b      	lsls	r3, r3, #4
 800514a:	400b      	ands	r3, r1
 800514c:	431a      	orrs	r2, r3
 800514e:	0011      	movs	r1, r2
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	2380      	movs	r3, #128	@ 0x80
 8005154:	015b      	lsls	r3, r3, #5
 8005156:	401a      	ands	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	430a      	orrs	r2, r1
 800515e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	69da      	ldr	r2, [r3, #28]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4907      	ldr	r1, [pc, #28]	@ (8005188 <HAL_SPI_Init+0x16c>)
 800516c:	400a      	ands	r2, r1
 800516e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	225d      	movs	r2, #93	@ 0x5d
 800517a:	2101      	movs	r1, #1
 800517c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	0018      	movs	r0, r3
 8005182:	46bd      	mov	sp, r7
 8005184:	b004      	add	sp, #16
 8005186:	bd80      	pop	{r7, pc}
 8005188:	fffff7ff 	.word	0xfffff7ff

0800518c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e046      	b.n	800522c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2288      	movs	r2, #136	@ 0x88
 80051a2:	589b      	ldr	r3, [r3, r2]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d107      	bne.n	80051b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2284      	movs	r2, #132	@ 0x84
 80051ac:	2100      	movs	r1, #0
 80051ae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	0018      	movs	r0, r3
 80051b4:	f7fc f8ce 	bl	8001354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2288      	movs	r2, #136	@ 0x88
 80051bc:	2124      	movs	r1, #36	@ 0x24
 80051be:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2101      	movs	r1, #1
 80051cc:	438a      	bics	r2, r1
 80051ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	0018      	movs	r0, r3
 80051d4:	f000 f8cc 	bl	8005370 <UART_SetConfig>
 80051d8:	0003      	movs	r3, r0
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d101      	bne.n	80051e2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e024      	b.n	800522c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	0018      	movs	r0, r3
 80051ee:	f000 fc15 	bl	8005a1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	490d      	ldr	r1, [pc, #52]	@ (8005234 <HAL_UART_Init+0xa8>)
 80051fe:	400a      	ands	r2, r1
 8005200:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	212a      	movs	r1, #42	@ 0x2a
 800520e:	438a      	bics	r2, r1
 8005210:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2101      	movs	r1, #1
 800521e:	430a      	orrs	r2, r1
 8005220:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	0018      	movs	r0, r3
 8005226:	f000 fcad 	bl	8005b84 <UART_CheckIdleState>
 800522a:	0003      	movs	r3, r0
}
 800522c:	0018      	movs	r0, r3
 800522e:	46bd      	mov	sp, r7
 8005230:	b002      	add	sp, #8
 8005232:	bd80      	pop	{r7, pc}
 8005234:	ffffb7ff 	.word	0xffffb7ff

08005238 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b08a      	sub	sp, #40	@ 0x28
 800523c:	af02      	add	r7, sp, #8
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	603b      	str	r3, [r7, #0]
 8005244:	1dbb      	adds	r3, r7, #6
 8005246:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2288      	movs	r2, #136	@ 0x88
 800524c:	589b      	ldr	r3, [r3, r2]
 800524e:	2b20      	cmp	r3, #32
 8005250:	d000      	beq.n	8005254 <HAL_UART_Transmit+0x1c>
 8005252:	e088      	b.n	8005366 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_UART_Transmit+0x2a>
 800525a:	1dbb      	adds	r3, r7, #6
 800525c:	881b      	ldrh	r3, [r3, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e080      	b.n	8005368 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	689a      	ldr	r2, [r3, #8]
 800526a:	2380      	movs	r3, #128	@ 0x80
 800526c:	015b      	lsls	r3, r3, #5
 800526e:	429a      	cmp	r2, r3
 8005270:	d109      	bne.n	8005286 <HAL_UART_Transmit+0x4e>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d105      	bne.n	8005286 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	2201      	movs	r2, #1
 800527e:	4013      	ands	r3, r2
 8005280:	d001      	beq.n	8005286 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e070      	b.n	8005368 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2290      	movs	r2, #144	@ 0x90
 800528a:	2100      	movs	r1, #0
 800528c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2288      	movs	r2, #136	@ 0x88
 8005292:	2121      	movs	r1, #33	@ 0x21
 8005294:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005296:	f7fc fa21 	bl	80016dc <HAL_GetTick>
 800529a:	0003      	movs	r3, r0
 800529c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	1dba      	adds	r2, r7, #6
 80052a2:	2154      	movs	r1, #84	@ 0x54
 80052a4:	8812      	ldrh	r2, [r2, #0]
 80052a6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	1dba      	adds	r2, r7, #6
 80052ac:	2156      	movs	r1, #86	@ 0x56
 80052ae:	8812      	ldrh	r2, [r2, #0]
 80052b0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	689a      	ldr	r2, [r3, #8]
 80052b6:	2380      	movs	r3, #128	@ 0x80
 80052b8:	015b      	lsls	r3, r3, #5
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d108      	bne.n	80052d0 <HAL_UART_Transmit+0x98>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d104      	bne.n	80052d0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80052c6:	2300      	movs	r3, #0
 80052c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	61bb      	str	r3, [r7, #24]
 80052ce:	e003      	b.n	80052d8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052d4:	2300      	movs	r3, #0
 80052d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052d8:	e02c      	b.n	8005334 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	9300      	str	r3, [sp, #0]
 80052e2:	0013      	movs	r3, r2
 80052e4:	2200      	movs	r2, #0
 80052e6:	2180      	movs	r1, #128	@ 0x80
 80052e8:	f000 fc9a 	bl	8005c20 <UART_WaitOnFlagUntilTimeout>
 80052ec:	1e03      	subs	r3, r0, #0
 80052ee:	d001      	beq.n	80052f4 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e039      	b.n	8005368 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10b      	bne.n	8005312 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	881b      	ldrh	r3, [r3, #0]
 80052fe:	001a      	movs	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	05d2      	lsls	r2, r2, #23
 8005306:	0dd2      	lsrs	r2, r2, #23
 8005308:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	3302      	adds	r3, #2
 800530e:	61bb      	str	r3, [r7, #24]
 8005310:	e007      	b.n	8005322 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	781a      	ldrb	r2, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	3301      	adds	r3, #1
 8005320:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2256      	movs	r2, #86	@ 0x56
 8005326:	5a9b      	ldrh	r3, [r3, r2]
 8005328:	b29b      	uxth	r3, r3
 800532a:	3b01      	subs	r3, #1
 800532c:	b299      	uxth	r1, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2256      	movs	r2, #86	@ 0x56
 8005332:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2256      	movs	r2, #86	@ 0x56
 8005338:	5a9b      	ldrh	r3, [r3, r2]
 800533a:	b29b      	uxth	r3, r3
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1cc      	bne.n	80052da <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	0013      	movs	r3, r2
 800534a:	2200      	movs	r2, #0
 800534c:	2140      	movs	r1, #64	@ 0x40
 800534e:	f000 fc67 	bl	8005c20 <UART_WaitOnFlagUntilTimeout>
 8005352:	1e03      	subs	r3, r0, #0
 8005354:	d001      	beq.n	800535a <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e006      	b.n	8005368 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2288      	movs	r2, #136	@ 0x88
 800535e:	2120      	movs	r1, #32
 8005360:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005362:	2300      	movs	r3, #0
 8005364:	e000      	b.n	8005368 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8005366:	2302      	movs	r3, #2
  }
}
 8005368:	0018      	movs	r0, r3
 800536a:	46bd      	mov	sp, r7
 800536c:	b008      	add	sp, #32
 800536e:	bd80      	pop	{r7, pc}

08005370 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005370:	b5b0      	push	{r4, r5, r7, lr}
 8005372:	b090      	sub	sp, #64	@ 0x40
 8005374:	af00      	add	r7, sp, #0
 8005376:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005378:	231a      	movs	r3, #26
 800537a:	2220      	movs	r2, #32
 800537c:	189b      	adds	r3, r3, r2
 800537e:	19db      	adds	r3, r3, r7
 8005380:	2200      	movs	r2, #0
 8005382:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005386:	689a      	ldr	r2, [r3, #8]
 8005388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	431a      	orrs	r2, r3
 800538e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	431a      	orrs	r2, r3
 8005394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005396:	69db      	ldr	r3, [r3, #28]
 8005398:	4313      	orrs	r3, r2
 800539a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800539c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4ac1      	ldr	r2, [pc, #772]	@ (80056a8 <UART_SetConfig+0x338>)
 80053a4:	4013      	ands	r3, r2
 80053a6:	0019      	movs	r1, r3
 80053a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053ae:	430b      	orrs	r3, r1
 80053b0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	4abc      	ldr	r2, [pc, #752]	@ (80056ac <UART_SetConfig+0x33c>)
 80053ba:	4013      	ands	r3, r2
 80053bc:	0018      	movs	r0, r3
 80053be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c0:	68d9      	ldr	r1, [r3, #12]
 80053c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	0003      	movs	r3, r0
 80053c8:	430b      	orrs	r3, r1
 80053ca:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4ab6      	ldr	r2, [pc, #728]	@ (80056b0 <UART_SetConfig+0x340>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d009      	beq.n	80053f0 <UART_SetConfig+0x80>
 80053dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4ab4      	ldr	r2, [pc, #720]	@ (80056b4 <UART_SetConfig+0x344>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d004      	beq.n	80053f0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80053ec:	4313      	orrs	r3, r2
 80053ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	4ab0      	ldr	r2, [pc, #704]	@ (80056b8 <UART_SetConfig+0x348>)
 80053f8:	4013      	ands	r3, r2
 80053fa:	0019      	movs	r1, r3
 80053fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005402:	430b      	orrs	r3, r1
 8005404:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540c:	220f      	movs	r2, #15
 800540e:	4393      	bics	r3, r2
 8005410:	0018      	movs	r0, r3
 8005412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005414:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	0003      	movs	r3, r0
 800541c:	430b      	orrs	r3, r1
 800541e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4aa5      	ldr	r2, [pc, #660]	@ (80056bc <UART_SetConfig+0x34c>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d131      	bne.n	800548e <UART_SetConfig+0x11e>
 800542a:	4ba5      	ldr	r3, [pc, #660]	@ (80056c0 <UART_SetConfig+0x350>)
 800542c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800542e:	2203      	movs	r2, #3
 8005430:	4013      	ands	r3, r2
 8005432:	2b03      	cmp	r3, #3
 8005434:	d01d      	beq.n	8005472 <UART_SetConfig+0x102>
 8005436:	d823      	bhi.n	8005480 <UART_SetConfig+0x110>
 8005438:	2b02      	cmp	r3, #2
 800543a:	d00c      	beq.n	8005456 <UART_SetConfig+0xe6>
 800543c:	d820      	bhi.n	8005480 <UART_SetConfig+0x110>
 800543e:	2b00      	cmp	r3, #0
 8005440:	d002      	beq.n	8005448 <UART_SetConfig+0xd8>
 8005442:	2b01      	cmp	r3, #1
 8005444:	d00e      	beq.n	8005464 <UART_SetConfig+0xf4>
 8005446:	e01b      	b.n	8005480 <UART_SetConfig+0x110>
 8005448:	231b      	movs	r3, #27
 800544a:	2220      	movs	r2, #32
 800544c:	189b      	adds	r3, r3, r2
 800544e:	19db      	adds	r3, r3, r7
 8005450:	2200      	movs	r2, #0
 8005452:	701a      	strb	r2, [r3, #0]
 8005454:	e154      	b.n	8005700 <UART_SetConfig+0x390>
 8005456:	231b      	movs	r3, #27
 8005458:	2220      	movs	r2, #32
 800545a:	189b      	adds	r3, r3, r2
 800545c:	19db      	adds	r3, r3, r7
 800545e:	2202      	movs	r2, #2
 8005460:	701a      	strb	r2, [r3, #0]
 8005462:	e14d      	b.n	8005700 <UART_SetConfig+0x390>
 8005464:	231b      	movs	r3, #27
 8005466:	2220      	movs	r2, #32
 8005468:	189b      	adds	r3, r3, r2
 800546a:	19db      	adds	r3, r3, r7
 800546c:	2204      	movs	r2, #4
 800546e:	701a      	strb	r2, [r3, #0]
 8005470:	e146      	b.n	8005700 <UART_SetConfig+0x390>
 8005472:	231b      	movs	r3, #27
 8005474:	2220      	movs	r2, #32
 8005476:	189b      	adds	r3, r3, r2
 8005478:	19db      	adds	r3, r3, r7
 800547a:	2208      	movs	r2, #8
 800547c:	701a      	strb	r2, [r3, #0]
 800547e:	e13f      	b.n	8005700 <UART_SetConfig+0x390>
 8005480:	231b      	movs	r3, #27
 8005482:	2220      	movs	r2, #32
 8005484:	189b      	adds	r3, r3, r2
 8005486:	19db      	adds	r3, r3, r7
 8005488:	2210      	movs	r2, #16
 800548a:	701a      	strb	r2, [r3, #0]
 800548c:	e138      	b.n	8005700 <UART_SetConfig+0x390>
 800548e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a8c      	ldr	r2, [pc, #560]	@ (80056c4 <UART_SetConfig+0x354>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d131      	bne.n	80054fc <UART_SetConfig+0x18c>
 8005498:	4b89      	ldr	r3, [pc, #548]	@ (80056c0 <UART_SetConfig+0x350>)
 800549a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800549c:	220c      	movs	r2, #12
 800549e:	4013      	ands	r3, r2
 80054a0:	2b0c      	cmp	r3, #12
 80054a2:	d01d      	beq.n	80054e0 <UART_SetConfig+0x170>
 80054a4:	d823      	bhi.n	80054ee <UART_SetConfig+0x17e>
 80054a6:	2b08      	cmp	r3, #8
 80054a8:	d00c      	beq.n	80054c4 <UART_SetConfig+0x154>
 80054aa:	d820      	bhi.n	80054ee <UART_SetConfig+0x17e>
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d002      	beq.n	80054b6 <UART_SetConfig+0x146>
 80054b0:	2b04      	cmp	r3, #4
 80054b2:	d00e      	beq.n	80054d2 <UART_SetConfig+0x162>
 80054b4:	e01b      	b.n	80054ee <UART_SetConfig+0x17e>
 80054b6:	231b      	movs	r3, #27
 80054b8:	2220      	movs	r2, #32
 80054ba:	189b      	adds	r3, r3, r2
 80054bc:	19db      	adds	r3, r3, r7
 80054be:	2200      	movs	r2, #0
 80054c0:	701a      	strb	r2, [r3, #0]
 80054c2:	e11d      	b.n	8005700 <UART_SetConfig+0x390>
 80054c4:	231b      	movs	r3, #27
 80054c6:	2220      	movs	r2, #32
 80054c8:	189b      	adds	r3, r3, r2
 80054ca:	19db      	adds	r3, r3, r7
 80054cc:	2202      	movs	r2, #2
 80054ce:	701a      	strb	r2, [r3, #0]
 80054d0:	e116      	b.n	8005700 <UART_SetConfig+0x390>
 80054d2:	231b      	movs	r3, #27
 80054d4:	2220      	movs	r2, #32
 80054d6:	189b      	adds	r3, r3, r2
 80054d8:	19db      	adds	r3, r3, r7
 80054da:	2204      	movs	r2, #4
 80054dc:	701a      	strb	r2, [r3, #0]
 80054de:	e10f      	b.n	8005700 <UART_SetConfig+0x390>
 80054e0:	231b      	movs	r3, #27
 80054e2:	2220      	movs	r2, #32
 80054e4:	189b      	adds	r3, r3, r2
 80054e6:	19db      	adds	r3, r3, r7
 80054e8:	2208      	movs	r2, #8
 80054ea:	701a      	strb	r2, [r3, #0]
 80054ec:	e108      	b.n	8005700 <UART_SetConfig+0x390>
 80054ee:	231b      	movs	r3, #27
 80054f0:	2220      	movs	r2, #32
 80054f2:	189b      	adds	r3, r3, r2
 80054f4:	19db      	adds	r3, r3, r7
 80054f6:	2210      	movs	r2, #16
 80054f8:	701a      	strb	r2, [r3, #0]
 80054fa:	e101      	b.n	8005700 <UART_SetConfig+0x390>
 80054fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a71      	ldr	r2, [pc, #452]	@ (80056c8 <UART_SetConfig+0x358>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d131      	bne.n	800556a <UART_SetConfig+0x1fa>
 8005506:	4b6e      	ldr	r3, [pc, #440]	@ (80056c0 <UART_SetConfig+0x350>)
 8005508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800550a:	2230      	movs	r2, #48	@ 0x30
 800550c:	4013      	ands	r3, r2
 800550e:	2b30      	cmp	r3, #48	@ 0x30
 8005510:	d01d      	beq.n	800554e <UART_SetConfig+0x1de>
 8005512:	d823      	bhi.n	800555c <UART_SetConfig+0x1ec>
 8005514:	2b20      	cmp	r3, #32
 8005516:	d00c      	beq.n	8005532 <UART_SetConfig+0x1c2>
 8005518:	d820      	bhi.n	800555c <UART_SetConfig+0x1ec>
 800551a:	2b00      	cmp	r3, #0
 800551c:	d002      	beq.n	8005524 <UART_SetConfig+0x1b4>
 800551e:	2b10      	cmp	r3, #16
 8005520:	d00e      	beq.n	8005540 <UART_SetConfig+0x1d0>
 8005522:	e01b      	b.n	800555c <UART_SetConfig+0x1ec>
 8005524:	231b      	movs	r3, #27
 8005526:	2220      	movs	r2, #32
 8005528:	189b      	adds	r3, r3, r2
 800552a:	19db      	adds	r3, r3, r7
 800552c:	2200      	movs	r2, #0
 800552e:	701a      	strb	r2, [r3, #0]
 8005530:	e0e6      	b.n	8005700 <UART_SetConfig+0x390>
 8005532:	231b      	movs	r3, #27
 8005534:	2220      	movs	r2, #32
 8005536:	189b      	adds	r3, r3, r2
 8005538:	19db      	adds	r3, r3, r7
 800553a:	2202      	movs	r2, #2
 800553c:	701a      	strb	r2, [r3, #0]
 800553e:	e0df      	b.n	8005700 <UART_SetConfig+0x390>
 8005540:	231b      	movs	r3, #27
 8005542:	2220      	movs	r2, #32
 8005544:	189b      	adds	r3, r3, r2
 8005546:	19db      	adds	r3, r3, r7
 8005548:	2204      	movs	r2, #4
 800554a:	701a      	strb	r2, [r3, #0]
 800554c:	e0d8      	b.n	8005700 <UART_SetConfig+0x390>
 800554e:	231b      	movs	r3, #27
 8005550:	2220      	movs	r2, #32
 8005552:	189b      	adds	r3, r3, r2
 8005554:	19db      	adds	r3, r3, r7
 8005556:	2208      	movs	r2, #8
 8005558:	701a      	strb	r2, [r3, #0]
 800555a:	e0d1      	b.n	8005700 <UART_SetConfig+0x390>
 800555c:	231b      	movs	r3, #27
 800555e:	2220      	movs	r2, #32
 8005560:	189b      	adds	r3, r3, r2
 8005562:	19db      	adds	r3, r3, r7
 8005564:	2210      	movs	r2, #16
 8005566:	701a      	strb	r2, [r3, #0]
 8005568:	e0ca      	b.n	8005700 <UART_SetConfig+0x390>
 800556a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a57      	ldr	r2, [pc, #348]	@ (80056cc <UART_SetConfig+0x35c>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d106      	bne.n	8005582 <UART_SetConfig+0x212>
 8005574:	231b      	movs	r3, #27
 8005576:	2220      	movs	r2, #32
 8005578:	189b      	adds	r3, r3, r2
 800557a:	19db      	adds	r3, r3, r7
 800557c:	2200      	movs	r2, #0
 800557e:	701a      	strb	r2, [r3, #0]
 8005580:	e0be      	b.n	8005700 <UART_SetConfig+0x390>
 8005582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a52      	ldr	r2, [pc, #328]	@ (80056d0 <UART_SetConfig+0x360>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d106      	bne.n	800559a <UART_SetConfig+0x22a>
 800558c:	231b      	movs	r3, #27
 800558e:	2220      	movs	r2, #32
 8005590:	189b      	adds	r3, r3, r2
 8005592:	19db      	adds	r3, r3, r7
 8005594:	2200      	movs	r2, #0
 8005596:	701a      	strb	r2, [r3, #0]
 8005598:	e0b2      	b.n	8005700 <UART_SetConfig+0x390>
 800559a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a4d      	ldr	r2, [pc, #308]	@ (80056d4 <UART_SetConfig+0x364>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d106      	bne.n	80055b2 <UART_SetConfig+0x242>
 80055a4:	231b      	movs	r3, #27
 80055a6:	2220      	movs	r2, #32
 80055a8:	189b      	adds	r3, r3, r2
 80055aa:	19db      	adds	r3, r3, r7
 80055ac:	2200      	movs	r2, #0
 80055ae:	701a      	strb	r2, [r3, #0]
 80055b0:	e0a6      	b.n	8005700 <UART_SetConfig+0x390>
 80055b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a3e      	ldr	r2, [pc, #248]	@ (80056b0 <UART_SetConfig+0x340>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d13e      	bne.n	800563a <UART_SetConfig+0x2ca>
 80055bc:	4b40      	ldr	r3, [pc, #256]	@ (80056c0 <UART_SetConfig+0x350>)
 80055be:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80055c0:	23c0      	movs	r3, #192	@ 0xc0
 80055c2:	011b      	lsls	r3, r3, #4
 80055c4:	4013      	ands	r3, r2
 80055c6:	22c0      	movs	r2, #192	@ 0xc0
 80055c8:	0112      	lsls	r2, r2, #4
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d027      	beq.n	800561e <UART_SetConfig+0x2ae>
 80055ce:	22c0      	movs	r2, #192	@ 0xc0
 80055d0:	0112      	lsls	r2, r2, #4
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d82a      	bhi.n	800562c <UART_SetConfig+0x2bc>
 80055d6:	2280      	movs	r2, #128	@ 0x80
 80055d8:	0112      	lsls	r2, r2, #4
 80055da:	4293      	cmp	r3, r2
 80055dc:	d011      	beq.n	8005602 <UART_SetConfig+0x292>
 80055de:	2280      	movs	r2, #128	@ 0x80
 80055e0:	0112      	lsls	r2, r2, #4
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d822      	bhi.n	800562c <UART_SetConfig+0x2bc>
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d004      	beq.n	80055f4 <UART_SetConfig+0x284>
 80055ea:	2280      	movs	r2, #128	@ 0x80
 80055ec:	00d2      	lsls	r2, r2, #3
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d00e      	beq.n	8005610 <UART_SetConfig+0x2a0>
 80055f2:	e01b      	b.n	800562c <UART_SetConfig+0x2bc>
 80055f4:	231b      	movs	r3, #27
 80055f6:	2220      	movs	r2, #32
 80055f8:	189b      	adds	r3, r3, r2
 80055fa:	19db      	adds	r3, r3, r7
 80055fc:	2200      	movs	r2, #0
 80055fe:	701a      	strb	r2, [r3, #0]
 8005600:	e07e      	b.n	8005700 <UART_SetConfig+0x390>
 8005602:	231b      	movs	r3, #27
 8005604:	2220      	movs	r2, #32
 8005606:	189b      	adds	r3, r3, r2
 8005608:	19db      	adds	r3, r3, r7
 800560a:	2202      	movs	r2, #2
 800560c:	701a      	strb	r2, [r3, #0]
 800560e:	e077      	b.n	8005700 <UART_SetConfig+0x390>
 8005610:	231b      	movs	r3, #27
 8005612:	2220      	movs	r2, #32
 8005614:	189b      	adds	r3, r3, r2
 8005616:	19db      	adds	r3, r3, r7
 8005618:	2204      	movs	r2, #4
 800561a:	701a      	strb	r2, [r3, #0]
 800561c:	e070      	b.n	8005700 <UART_SetConfig+0x390>
 800561e:	231b      	movs	r3, #27
 8005620:	2220      	movs	r2, #32
 8005622:	189b      	adds	r3, r3, r2
 8005624:	19db      	adds	r3, r3, r7
 8005626:	2208      	movs	r2, #8
 8005628:	701a      	strb	r2, [r3, #0]
 800562a:	e069      	b.n	8005700 <UART_SetConfig+0x390>
 800562c:	231b      	movs	r3, #27
 800562e:	2220      	movs	r2, #32
 8005630:	189b      	adds	r3, r3, r2
 8005632:	19db      	adds	r3, r3, r7
 8005634:	2210      	movs	r2, #16
 8005636:	701a      	strb	r2, [r3, #0]
 8005638:	e062      	b.n	8005700 <UART_SetConfig+0x390>
 800563a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a1d      	ldr	r2, [pc, #116]	@ (80056b4 <UART_SetConfig+0x344>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d157      	bne.n	80056f4 <UART_SetConfig+0x384>
 8005644:	4b1e      	ldr	r3, [pc, #120]	@ (80056c0 <UART_SetConfig+0x350>)
 8005646:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005648:	23c0      	movs	r3, #192	@ 0xc0
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	4013      	ands	r3, r2
 800564e:	22c0      	movs	r2, #192	@ 0xc0
 8005650:	0092      	lsls	r2, r2, #2
 8005652:	4293      	cmp	r3, r2
 8005654:	d040      	beq.n	80056d8 <UART_SetConfig+0x368>
 8005656:	22c0      	movs	r2, #192	@ 0xc0
 8005658:	0092      	lsls	r2, r2, #2
 800565a:	4293      	cmp	r3, r2
 800565c:	d843      	bhi.n	80056e6 <UART_SetConfig+0x376>
 800565e:	2280      	movs	r2, #128	@ 0x80
 8005660:	0092      	lsls	r2, r2, #2
 8005662:	4293      	cmp	r3, r2
 8005664:	d011      	beq.n	800568a <UART_SetConfig+0x31a>
 8005666:	2280      	movs	r2, #128	@ 0x80
 8005668:	0092      	lsls	r2, r2, #2
 800566a:	4293      	cmp	r3, r2
 800566c:	d83b      	bhi.n	80056e6 <UART_SetConfig+0x376>
 800566e:	2b00      	cmp	r3, #0
 8005670:	d004      	beq.n	800567c <UART_SetConfig+0x30c>
 8005672:	2280      	movs	r2, #128	@ 0x80
 8005674:	0052      	lsls	r2, r2, #1
 8005676:	4293      	cmp	r3, r2
 8005678:	d00e      	beq.n	8005698 <UART_SetConfig+0x328>
 800567a:	e034      	b.n	80056e6 <UART_SetConfig+0x376>
 800567c:	231b      	movs	r3, #27
 800567e:	2220      	movs	r2, #32
 8005680:	189b      	adds	r3, r3, r2
 8005682:	19db      	adds	r3, r3, r7
 8005684:	2200      	movs	r2, #0
 8005686:	701a      	strb	r2, [r3, #0]
 8005688:	e03a      	b.n	8005700 <UART_SetConfig+0x390>
 800568a:	231b      	movs	r3, #27
 800568c:	2220      	movs	r2, #32
 800568e:	189b      	adds	r3, r3, r2
 8005690:	19db      	adds	r3, r3, r7
 8005692:	2202      	movs	r2, #2
 8005694:	701a      	strb	r2, [r3, #0]
 8005696:	e033      	b.n	8005700 <UART_SetConfig+0x390>
 8005698:	231b      	movs	r3, #27
 800569a:	2220      	movs	r2, #32
 800569c:	189b      	adds	r3, r3, r2
 800569e:	19db      	adds	r3, r3, r7
 80056a0:	2204      	movs	r2, #4
 80056a2:	701a      	strb	r2, [r3, #0]
 80056a4:	e02c      	b.n	8005700 <UART_SetConfig+0x390>
 80056a6:	46c0      	nop			@ (mov r8, r8)
 80056a8:	cfff69f3 	.word	0xcfff69f3
 80056ac:	ffffcfff 	.word	0xffffcfff
 80056b0:	40008000 	.word	0x40008000
 80056b4:	40008400 	.word	0x40008400
 80056b8:	11fff4ff 	.word	0x11fff4ff
 80056bc:	40013800 	.word	0x40013800
 80056c0:	40021000 	.word	0x40021000
 80056c4:	40004400 	.word	0x40004400
 80056c8:	40004800 	.word	0x40004800
 80056cc:	40004c00 	.word	0x40004c00
 80056d0:	40005000 	.word	0x40005000
 80056d4:	40013c00 	.word	0x40013c00
 80056d8:	231b      	movs	r3, #27
 80056da:	2220      	movs	r2, #32
 80056dc:	189b      	adds	r3, r3, r2
 80056de:	19db      	adds	r3, r3, r7
 80056e0:	2208      	movs	r2, #8
 80056e2:	701a      	strb	r2, [r3, #0]
 80056e4:	e00c      	b.n	8005700 <UART_SetConfig+0x390>
 80056e6:	231b      	movs	r3, #27
 80056e8:	2220      	movs	r2, #32
 80056ea:	189b      	adds	r3, r3, r2
 80056ec:	19db      	adds	r3, r3, r7
 80056ee:	2210      	movs	r2, #16
 80056f0:	701a      	strb	r2, [r3, #0]
 80056f2:	e005      	b.n	8005700 <UART_SetConfig+0x390>
 80056f4:	231b      	movs	r3, #27
 80056f6:	2220      	movs	r2, #32
 80056f8:	189b      	adds	r3, r3, r2
 80056fa:	19db      	adds	r3, r3, r7
 80056fc:	2210      	movs	r2, #16
 80056fe:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4ac1      	ldr	r2, [pc, #772]	@ (8005a0c <UART_SetConfig+0x69c>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d005      	beq.n	8005716 <UART_SetConfig+0x3a6>
 800570a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4ac0      	ldr	r2, [pc, #768]	@ (8005a10 <UART_SetConfig+0x6a0>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d000      	beq.n	8005716 <UART_SetConfig+0x3a6>
 8005714:	e093      	b.n	800583e <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005716:	231b      	movs	r3, #27
 8005718:	2220      	movs	r2, #32
 800571a:	189b      	adds	r3, r3, r2
 800571c:	19db      	adds	r3, r3, r7
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	2b08      	cmp	r3, #8
 8005722:	d015      	beq.n	8005750 <UART_SetConfig+0x3e0>
 8005724:	dc18      	bgt.n	8005758 <UART_SetConfig+0x3e8>
 8005726:	2b04      	cmp	r3, #4
 8005728:	d00d      	beq.n	8005746 <UART_SetConfig+0x3d6>
 800572a:	dc15      	bgt.n	8005758 <UART_SetConfig+0x3e8>
 800572c:	2b00      	cmp	r3, #0
 800572e:	d002      	beq.n	8005736 <UART_SetConfig+0x3c6>
 8005730:	2b02      	cmp	r3, #2
 8005732:	d005      	beq.n	8005740 <UART_SetConfig+0x3d0>
 8005734:	e010      	b.n	8005758 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005736:	f7ff fa1f 	bl	8004b78 <HAL_RCC_GetPCLK1Freq>
 800573a:	0003      	movs	r3, r0
 800573c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800573e:	e014      	b.n	800576a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005740:	4bb4      	ldr	r3, [pc, #720]	@ (8005a14 <UART_SetConfig+0x6a4>)
 8005742:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005744:	e011      	b.n	800576a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005746:	f7ff f98b 	bl	8004a60 <HAL_RCC_GetSysClockFreq>
 800574a:	0003      	movs	r3, r0
 800574c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800574e:	e00c      	b.n	800576a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005750:	2380      	movs	r3, #128	@ 0x80
 8005752:	021b      	lsls	r3, r3, #8
 8005754:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005756:	e008      	b.n	800576a <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8005758:	2300      	movs	r3, #0
 800575a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800575c:	231a      	movs	r3, #26
 800575e:	2220      	movs	r2, #32
 8005760:	189b      	adds	r3, r3, r2
 8005762:	19db      	adds	r3, r3, r7
 8005764:	2201      	movs	r2, #1
 8005766:	701a      	strb	r2, [r3, #0]
        break;
 8005768:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800576a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800576c:	2b00      	cmp	r3, #0
 800576e:	d100      	bne.n	8005772 <UART_SetConfig+0x402>
 8005770:	e135      	b.n	80059de <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005774:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005776:	4ba8      	ldr	r3, [pc, #672]	@ (8005a18 <UART_SetConfig+0x6a8>)
 8005778:	0052      	lsls	r2, r2, #1
 800577a:	5ad3      	ldrh	r3, [r2, r3]
 800577c:	0019      	movs	r1, r3
 800577e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005780:	f7fa fcd2 	bl	8000128 <__udivsi3>
 8005784:	0003      	movs	r3, r0
 8005786:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578a:	685a      	ldr	r2, [r3, #4]
 800578c:	0013      	movs	r3, r2
 800578e:	005b      	lsls	r3, r3, #1
 8005790:	189b      	adds	r3, r3, r2
 8005792:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005794:	429a      	cmp	r2, r3
 8005796:	d305      	bcc.n	80057a4 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800579e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d906      	bls.n	80057b2 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80057a4:	231a      	movs	r3, #26
 80057a6:	2220      	movs	r2, #32
 80057a8:	189b      	adds	r3, r3, r2
 80057aa:	19db      	adds	r3, r3, r7
 80057ac:	2201      	movs	r2, #1
 80057ae:	701a      	strb	r2, [r3, #0]
 80057b0:	e044      	b.n	800583c <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057b4:	61bb      	str	r3, [r7, #24]
 80057b6:	2300      	movs	r3, #0
 80057b8:	61fb      	str	r3, [r7, #28]
 80057ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80057be:	4b96      	ldr	r3, [pc, #600]	@ (8005a18 <UART_SetConfig+0x6a8>)
 80057c0:	0052      	lsls	r2, r2, #1
 80057c2:	5ad3      	ldrh	r3, [r2, r3]
 80057c4:	613b      	str	r3, [r7, #16]
 80057c6:	2300      	movs	r3, #0
 80057c8:	617b      	str	r3, [r7, #20]
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	69b8      	ldr	r0, [r7, #24]
 80057d0:	69f9      	ldr	r1, [r7, #28]
 80057d2:	f7fa fe1f 	bl	8000414 <__aeabi_uldivmod>
 80057d6:	0002      	movs	r2, r0
 80057d8:	000b      	movs	r3, r1
 80057da:	0e11      	lsrs	r1, r2, #24
 80057dc:	021d      	lsls	r5, r3, #8
 80057de:	430d      	orrs	r5, r1
 80057e0:	0214      	lsls	r4, r2, #8
 80057e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	085b      	lsrs	r3, r3, #1
 80057e8:	60bb      	str	r3, [r7, #8]
 80057ea:	2300      	movs	r3, #0
 80057ec:	60fb      	str	r3, [r7, #12]
 80057ee:	68b8      	ldr	r0, [r7, #8]
 80057f0:	68f9      	ldr	r1, [r7, #12]
 80057f2:	1900      	adds	r0, r0, r4
 80057f4:	4169      	adcs	r1, r5
 80057f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	603b      	str	r3, [r7, #0]
 80057fc:	2300      	movs	r3, #0
 80057fe:	607b      	str	r3, [r7, #4]
 8005800:	683a      	ldr	r2, [r7, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f7fa fe06 	bl	8000414 <__aeabi_uldivmod>
 8005808:	0002      	movs	r2, r0
 800580a:	000b      	movs	r3, r1
 800580c:	0013      	movs	r3, r2
 800580e:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005810:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005812:	23c0      	movs	r3, #192	@ 0xc0
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	429a      	cmp	r2, r3
 8005818:	d309      	bcc.n	800582e <UART_SetConfig+0x4be>
 800581a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800581c:	2380      	movs	r3, #128	@ 0x80
 800581e:	035b      	lsls	r3, r3, #13
 8005820:	429a      	cmp	r2, r3
 8005822:	d204      	bcs.n	800582e <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8005824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800582a:	60da      	str	r2, [r3, #12]
 800582c:	e006      	b.n	800583c <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800582e:	231a      	movs	r3, #26
 8005830:	2220      	movs	r2, #32
 8005832:	189b      	adds	r3, r3, r2
 8005834:	19db      	adds	r3, r3, r7
 8005836:	2201      	movs	r2, #1
 8005838:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800583a:	e0d0      	b.n	80059de <UART_SetConfig+0x66e>
 800583c:	e0cf      	b.n	80059de <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800583e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005840:	69da      	ldr	r2, [r3, #28]
 8005842:	2380      	movs	r3, #128	@ 0x80
 8005844:	021b      	lsls	r3, r3, #8
 8005846:	429a      	cmp	r2, r3
 8005848:	d000      	beq.n	800584c <UART_SetConfig+0x4dc>
 800584a:	e070      	b.n	800592e <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 800584c:	231b      	movs	r3, #27
 800584e:	2220      	movs	r2, #32
 8005850:	189b      	adds	r3, r3, r2
 8005852:	19db      	adds	r3, r3, r7
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	2b08      	cmp	r3, #8
 8005858:	d015      	beq.n	8005886 <UART_SetConfig+0x516>
 800585a:	dc18      	bgt.n	800588e <UART_SetConfig+0x51e>
 800585c:	2b04      	cmp	r3, #4
 800585e:	d00d      	beq.n	800587c <UART_SetConfig+0x50c>
 8005860:	dc15      	bgt.n	800588e <UART_SetConfig+0x51e>
 8005862:	2b00      	cmp	r3, #0
 8005864:	d002      	beq.n	800586c <UART_SetConfig+0x4fc>
 8005866:	2b02      	cmp	r3, #2
 8005868:	d005      	beq.n	8005876 <UART_SetConfig+0x506>
 800586a:	e010      	b.n	800588e <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800586c:	f7ff f984 	bl	8004b78 <HAL_RCC_GetPCLK1Freq>
 8005870:	0003      	movs	r3, r0
 8005872:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005874:	e014      	b.n	80058a0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005876:	4b67      	ldr	r3, [pc, #412]	@ (8005a14 <UART_SetConfig+0x6a4>)
 8005878:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800587a:	e011      	b.n	80058a0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800587c:	f7ff f8f0 	bl	8004a60 <HAL_RCC_GetSysClockFreq>
 8005880:	0003      	movs	r3, r0
 8005882:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005884:	e00c      	b.n	80058a0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005886:	2380      	movs	r3, #128	@ 0x80
 8005888:	021b      	lsls	r3, r3, #8
 800588a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800588c:	e008      	b.n	80058a0 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800588e:	2300      	movs	r3, #0
 8005890:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8005892:	231a      	movs	r3, #26
 8005894:	2220      	movs	r2, #32
 8005896:	189b      	adds	r3, r3, r2
 8005898:	19db      	adds	r3, r3, r7
 800589a:	2201      	movs	r2, #1
 800589c:	701a      	strb	r2, [r3, #0]
        break;
 800589e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d100      	bne.n	80058a8 <UART_SetConfig+0x538>
 80058a6:	e09a      	b.n	80059de <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058ac:	4b5a      	ldr	r3, [pc, #360]	@ (8005a18 <UART_SetConfig+0x6a8>)
 80058ae:	0052      	lsls	r2, r2, #1
 80058b0:	5ad3      	ldrh	r3, [r2, r3]
 80058b2:	0019      	movs	r1, r3
 80058b4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80058b6:	f7fa fc37 	bl	8000128 <__udivsi3>
 80058ba:	0003      	movs	r3, r0
 80058bc:	005a      	lsls	r2, r3, #1
 80058be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	085b      	lsrs	r3, r3, #1
 80058c4:	18d2      	adds	r2, r2, r3
 80058c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	0019      	movs	r1, r3
 80058cc:	0010      	movs	r0, r2
 80058ce:	f7fa fc2b 	bl	8000128 <__udivsi3>
 80058d2:	0003      	movs	r3, r0
 80058d4:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d8:	2b0f      	cmp	r3, #15
 80058da:	d921      	bls.n	8005920 <UART_SetConfig+0x5b0>
 80058dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058de:	2380      	movs	r3, #128	@ 0x80
 80058e0:	025b      	lsls	r3, r3, #9
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d21c      	bcs.n	8005920 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	200e      	movs	r0, #14
 80058ec:	2420      	movs	r4, #32
 80058ee:	1903      	adds	r3, r0, r4
 80058f0:	19db      	adds	r3, r3, r7
 80058f2:	210f      	movs	r1, #15
 80058f4:	438a      	bics	r2, r1
 80058f6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fa:	085b      	lsrs	r3, r3, #1
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	2207      	movs	r2, #7
 8005900:	4013      	ands	r3, r2
 8005902:	b299      	uxth	r1, r3
 8005904:	1903      	adds	r3, r0, r4
 8005906:	19db      	adds	r3, r3, r7
 8005908:	1902      	adds	r2, r0, r4
 800590a:	19d2      	adds	r2, r2, r7
 800590c:	8812      	ldrh	r2, [r2, #0]
 800590e:	430a      	orrs	r2, r1
 8005910:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	1902      	adds	r2, r0, r4
 8005918:	19d2      	adds	r2, r2, r7
 800591a:	8812      	ldrh	r2, [r2, #0]
 800591c:	60da      	str	r2, [r3, #12]
 800591e:	e05e      	b.n	80059de <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8005920:	231a      	movs	r3, #26
 8005922:	2220      	movs	r2, #32
 8005924:	189b      	adds	r3, r3, r2
 8005926:	19db      	adds	r3, r3, r7
 8005928:	2201      	movs	r2, #1
 800592a:	701a      	strb	r2, [r3, #0]
 800592c:	e057      	b.n	80059de <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800592e:	231b      	movs	r3, #27
 8005930:	2220      	movs	r2, #32
 8005932:	189b      	adds	r3, r3, r2
 8005934:	19db      	adds	r3, r3, r7
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	2b08      	cmp	r3, #8
 800593a:	d015      	beq.n	8005968 <UART_SetConfig+0x5f8>
 800593c:	dc18      	bgt.n	8005970 <UART_SetConfig+0x600>
 800593e:	2b04      	cmp	r3, #4
 8005940:	d00d      	beq.n	800595e <UART_SetConfig+0x5ee>
 8005942:	dc15      	bgt.n	8005970 <UART_SetConfig+0x600>
 8005944:	2b00      	cmp	r3, #0
 8005946:	d002      	beq.n	800594e <UART_SetConfig+0x5de>
 8005948:	2b02      	cmp	r3, #2
 800594a:	d005      	beq.n	8005958 <UART_SetConfig+0x5e8>
 800594c:	e010      	b.n	8005970 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800594e:	f7ff f913 	bl	8004b78 <HAL_RCC_GetPCLK1Freq>
 8005952:	0003      	movs	r3, r0
 8005954:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005956:	e014      	b.n	8005982 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005958:	4b2e      	ldr	r3, [pc, #184]	@ (8005a14 <UART_SetConfig+0x6a4>)
 800595a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800595c:	e011      	b.n	8005982 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800595e:	f7ff f87f 	bl	8004a60 <HAL_RCC_GetSysClockFreq>
 8005962:	0003      	movs	r3, r0
 8005964:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005966:	e00c      	b.n	8005982 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005968:	2380      	movs	r3, #128	@ 0x80
 800596a:	021b      	lsls	r3, r3, #8
 800596c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800596e:	e008      	b.n	8005982 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8005970:	2300      	movs	r3, #0
 8005972:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8005974:	231a      	movs	r3, #26
 8005976:	2220      	movs	r2, #32
 8005978:	189b      	adds	r3, r3, r2
 800597a:	19db      	adds	r3, r3, r7
 800597c:	2201      	movs	r2, #1
 800597e:	701a      	strb	r2, [r3, #0]
        break;
 8005980:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005984:	2b00      	cmp	r3, #0
 8005986:	d02a      	beq.n	80059de <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800598c:	4b22      	ldr	r3, [pc, #136]	@ (8005a18 <UART_SetConfig+0x6a8>)
 800598e:	0052      	lsls	r2, r2, #1
 8005990:	5ad3      	ldrh	r3, [r2, r3]
 8005992:	0019      	movs	r1, r3
 8005994:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005996:	f7fa fbc7 	bl	8000128 <__udivsi3>
 800599a:	0003      	movs	r3, r0
 800599c:	001a      	movs	r2, r3
 800599e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	085b      	lsrs	r3, r3, #1
 80059a4:	18d2      	adds	r2, r2, r3
 80059a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	0019      	movs	r1, r3
 80059ac:	0010      	movs	r0, r2
 80059ae:	f7fa fbbb 	bl	8000128 <__udivsi3>
 80059b2:	0003      	movs	r3, r0
 80059b4:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b8:	2b0f      	cmp	r3, #15
 80059ba:	d90a      	bls.n	80059d2 <UART_SetConfig+0x662>
 80059bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059be:	2380      	movs	r3, #128	@ 0x80
 80059c0:	025b      	lsls	r3, r3, #9
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d205      	bcs.n	80059d2 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	60da      	str	r2, [r3, #12]
 80059d0:	e005      	b.n	80059de <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80059d2:	231a      	movs	r3, #26
 80059d4:	2220      	movs	r2, #32
 80059d6:	189b      	adds	r3, r3, r2
 80059d8:	19db      	adds	r3, r3, r7
 80059da:	2201      	movs	r2, #1
 80059dc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80059de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e0:	226a      	movs	r2, #106	@ 0x6a
 80059e2:	2101      	movs	r1, #1
 80059e4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80059e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e8:	2268      	movs	r2, #104	@ 0x68
 80059ea:	2101      	movs	r1, #1
 80059ec:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f0:	2200      	movs	r2, #0
 80059f2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80059f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f6:	2200      	movs	r2, #0
 80059f8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80059fa:	231a      	movs	r3, #26
 80059fc:	2220      	movs	r2, #32
 80059fe:	189b      	adds	r3, r3, r2
 8005a00:	19db      	adds	r3, r3, r7
 8005a02:	781b      	ldrb	r3, [r3, #0]
}
 8005a04:	0018      	movs	r0, r3
 8005a06:	46bd      	mov	sp, r7
 8005a08:	b010      	add	sp, #64	@ 0x40
 8005a0a:	bdb0      	pop	{r4, r5, r7, pc}
 8005a0c:	40008000 	.word	0x40008000
 8005a10:	40008400 	.word	0x40008400
 8005a14:	00f42400 	.word	0x00f42400
 8005a18:	0800b900 	.word	0x0800b900

08005a1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a28:	2201      	movs	r2, #1
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	d00b      	beq.n	8005a46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	4a4a      	ldr	r2, [pc, #296]	@ (8005b60 <UART_AdvFeatureConfig+0x144>)
 8005a36:	4013      	ands	r3, r2
 8005a38:	0019      	movs	r1, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	430a      	orrs	r2, r1
 8005a44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	d00b      	beq.n	8005a68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	4a43      	ldr	r2, [pc, #268]	@ (8005b64 <UART_AdvFeatureConfig+0x148>)
 8005a58:	4013      	ands	r3, r2
 8005a5a:	0019      	movs	r1, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	430a      	orrs	r2, r1
 8005a66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a6c:	2204      	movs	r2, #4
 8005a6e:	4013      	ands	r3, r2
 8005a70:	d00b      	beq.n	8005a8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	4a3b      	ldr	r2, [pc, #236]	@ (8005b68 <UART_AdvFeatureConfig+0x14c>)
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	0019      	movs	r1, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a8e:	2208      	movs	r2, #8
 8005a90:	4013      	ands	r3, r2
 8005a92:	d00b      	beq.n	8005aac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	4a34      	ldr	r2, [pc, #208]	@ (8005b6c <UART_AdvFeatureConfig+0x150>)
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	0019      	movs	r1, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab0:	2210      	movs	r2, #16
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	d00b      	beq.n	8005ace <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	4a2c      	ldr	r2, [pc, #176]	@ (8005b70 <UART_AdvFeatureConfig+0x154>)
 8005abe:	4013      	ands	r3, r2
 8005ac0:	0019      	movs	r1, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad2:	2220      	movs	r2, #32
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	d00b      	beq.n	8005af0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	4a25      	ldr	r2, [pc, #148]	@ (8005b74 <UART_AdvFeatureConfig+0x158>)
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	0019      	movs	r1, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af4:	2240      	movs	r2, #64	@ 0x40
 8005af6:	4013      	ands	r3, r2
 8005af8:	d01d      	beq.n	8005b36 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	4a1d      	ldr	r2, [pc, #116]	@ (8005b78 <UART_AdvFeatureConfig+0x15c>)
 8005b02:	4013      	ands	r3, r2
 8005b04:	0019      	movs	r1, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b16:	2380      	movs	r3, #128	@ 0x80
 8005b18:	035b      	lsls	r3, r3, #13
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d10b      	bne.n	8005b36 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	4a15      	ldr	r2, [pc, #84]	@ (8005b7c <UART_AdvFeatureConfig+0x160>)
 8005b26:	4013      	ands	r3, r2
 8005b28:	0019      	movs	r1, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	430a      	orrs	r2, r1
 8005b34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b3a:	2280      	movs	r2, #128	@ 0x80
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	d00b      	beq.n	8005b58 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	4a0e      	ldr	r2, [pc, #56]	@ (8005b80 <UART_AdvFeatureConfig+0x164>)
 8005b48:	4013      	ands	r3, r2
 8005b4a:	0019      	movs	r1, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	430a      	orrs	r2, r1
 8005b56:	605a      	str	r2, [r3, #4]
  }
}
 8005b58:	46c0      	nop			@ (mov r8, r8)
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	b002      	add	sp, #8
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	fffdffff 	.word	0xfffdffff
 8005b64:	fffeffff 	.word	0xfffeffff
 8005b68:	fffbffff 	.word	0xfffbffff
 8005b6c:	ffff7fff 	.word	0xffff7fff
 8005b70:	ffffefff 	.word	0xffffefff
 8005b74:	ffffdfff 	.word	0xffffdfff
 8005b78:	ffefffff 	.word	0xffefffff
 8005b7c:	ff9fffff 	.word	0xff9fffff
 8005b80:	fff7ffff 	.word	0xfff7ffff

08005b84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af02      	add	r7, sp, #8
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2290      	movs	r2, #144	@ 0x90
 8005b90:	2100      	movs	r1, #0
 8005b92:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b94:	f7fb fda2 	bl	80016dc <HAL_GetTick>
 8005b98:	0003      	movs	r3, r0
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2208      	movs	r2, #8
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	2b08      	cmp	r3, #8
 8005ba8:	d10c      	bne.n	8005bc4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2280      	movs	r2, #128	@ 0x80
 8005bae:	0391      	lsls	r1, r2, #14
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	4a1a      	ldr	r2, [pc, #104]	@ (8005c1c <UART_CheckIdleState+0x98>)
 8005bb4:	9200      	str	r2, [sp, #0]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f000 f832 	bl	8005c20 <UART_WaitOnFlagUntilTimeout>
 8005bbc:	1e03      	subs	r3, r0, #0
 8005bbe:	d001      	beq.n	8005bc4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e026      	b.n	8005c12 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2204      	movs	r2, #4
 8005bcc:	4013      	ands	r3, r2
 8005bce:	2b04      	cmp	r3, #4
 8005bd0:	d10c      	bne.n	8005bec <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2280      	movs	r2, #128	@ 0x80
 8005bd6:	03d1      	lsls	r1, r2, #15
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	4a10      	ldr	r2, [pc, #64]	@ (8005c1c <UART_CheckIdleState+0x98>)
 8005bdc:	9200      	str	r2, [sp, #0]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f000 f81e 	bl	8005c20 <UART_WaitOnFlagUntilTimeout>
 8005be4:	1e03      	subs	r3, r0, #0
 8005be6:	d001      	beq.n	8005bec <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e012      	b.n	8005c12 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2288      	movs	r2, #136	@ 0x88
 8005bf0:	2120      	movs	r1, #32
 8005bf2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	228c      	movs	r2, #140	@ 0x8c
 8005bf8:	2120      	movs	r1, #32
 8005bfa:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2284      	movs	r2, #132	@ 0x84
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	0018      	movs	r0, r3
 8005c14:	46bd      	mov	sp, r7
 8005c16:	b004      	add	sp, #16
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	46c0      	nop			@ (mov r8, r8)
 8005c1c:	01ffffff 	.word	0x01ffffff

08005c20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b094      	sub	sp, #80	@ 0x50
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	603b      	str	r3, [r7, #0]
 8005c2c:	1dfb      	adds	r3, r7, #7
 8005c2e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c30:	e0a7      	b.n	8005d82 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005c34:	3301      	adds	r3, #1
 8005c36:	d100      	bne.n	8005c3a <UART_WaitOnFlagUntilTimeout+0x1a>
 8005c38:	e0a3      	b.n	8005d82 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c3a:	f7fb fd4f 	bl	80016dc <HAL_GetTick>
 8005c3e:	0002      	movs	r2, r0
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d302      	bcc.n	8005c50 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d13f      	bne.n	8005cd0 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c50:	f3ef 8310 	mrs	r3, PRIMASK
 8005c54:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8005c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005c58:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c60:	f383 8810 	msr	PRIMASK, r3
}
 8005c64:	46c0      	nop			@ (mov r8, r8)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	494e      	ldr	r1, [pc, #312]	@ (8005dac <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005c72:	400a      	ands	r2, r1
 8005c74:	601a      	str	r2, [r3, #0]
 8005c76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c78:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c7c:	f383 8810 	msr	PRIMASK, r3
}
 8005c80:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c82:	f3ef 8310 	mrs	r3, PRIMASK
 8005c86:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8005c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c92:	f383 8810 	msr	PRIMASK, r3
}
 8005c96:	46c0      	nop			@ (mov r8, r8)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	689a      	ldr	r2, [r3, #8]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2101      	movs	r1, #1
 8005ca4:	438a      	bics	r2, r1
 8005ca6:	609a      	str	r2, [r3, #8]
 8005ca8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cae:	f383 8810 	msr	PRIMASK, r3
}
 8005cb2:	46c0      	nop			@ (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2288      	movs	r2, #136	@ 0x88
 8005cb8:	2120      	movs	r1, #32
 8005cba:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	228c      	movs	r2, #140	@ 0x8c
 8005cc0:	2120      	movs	r1, #32
 8005cc2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2284      	movs	r2, #132	@ 0x84
 8005cc8:	2100      	movs	r1, #0
 8005cca:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	e069      	b.n	8005da4 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2204      	movs	r2, #4
 8005cd8:	4013      	ands	r3, r2
 8005cda:	d052      	beq.n	8005d82 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	69da      	ldr	r2, [r3, #28]
 8005ce2:	2380      	movs	r3, #128	@ 0x80
 8005ce4:	011b      	lsls	r3, r3, #4
 8005ce6:	401a      	ands	r2, r3
 8005ce8:	2380      	movs	r3, #128	@ 0x80
 8005cea:	011b      	lsls	r3, r3, #4
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d148      	bne.n	8005d82 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2280      	movs	r2, #128	@ 0x80
 8005cf6:	0112      	lsls	r2, r2, #4
 8005cf8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cfa:	f3ef 8310 	mrs	r3, PRIMASK
 8005cfe:	613b      	str	r3, [r7, #16]
  return(result);
 8005d00:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005d02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d04:	2301      	movs	r3, #1
 8005d06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	f383 8810 	msr	PRIMASK, r3
}
 8005d0e:	46c0      	nop			@ (mov r8, r8)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4924      	ldr	r1, [pc, #144]	@ (8005dac <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005d1c:	400a      	ands	r2, r1
 8005d1e:	601a      	str	r2, [r3, #0]
 8005d20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d22:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	f383 8810 	msr	PRIMASK, r3
}
 8005d2a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d2c:	f3ef 8310 	mrs	r3, PRIMASK
 8005d30:	61fb      	str	r3, [r7, #28]
  return(result);
 8005d32:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d36:	2301      	movs	r3, #1
 8005d38:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	f383 8810 	msr	PRIMASK, r3
}
 8005d40:	46c0      	nop			@ (mov r8, r8)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	689a      	ldr	r2, [r3, #8]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2101      	movs	r1, #1
 8005d4e:	438a      	bics	r2, r1
 8005d50:	609a      	str	r2, [r3, #8]
 8005d52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d54:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d58:	f383 8810 	msr	PRIMASK, r3
}
 8005d5c:	46c0      	nop			@ (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2288      	movs	r2, #136	@ 0x88
 8005d62:	2120      	movs	r1, #32
 8005d64:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	228c      	movs	r2, #140	@ 0x8c
 8005d6a:	2120      	movs	r1, #32
 8005d6c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2290      	movs	r2, #144	@ 0x90
 8005d72:	2120      	movs	r1, #32
 8005d74:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2284      	movs	r2, #132	@ 0x84
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e010      	b.n	8005da4 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	69db      	ldr	r3, [r3, #28]
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	425a      	negs	r2, r3
 8005d92:	4153      	adcs	r3, r2
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	001a      	movs	r2, r3
 8005d98:	1dfb      	adds	r3, r7, #7
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d100      	bne.n	8005da2 <UART_WaitOnFlagUntilTimeout+0x182>
 8005da0:	e747      	b.n	8005c32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	0018      	movs	r0, r3
 8005da6:	46bd      	mov	sp, r7
 8005da8:	b014      	add	sp, #80	@ 0x50
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	fffffe5f 	.word	0xfffffe5f

08005db0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2284      	movs	r2, #132	@ 0x84
 8005dbc:	5c9b      	ldrb	r3, [r3, r2]
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d101      	bne.n	8005dc6 <HAL_UARTEx_DisableFifoMode+0x16>
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	e027      	b.n	8005e16 <HAL_UARTEx_DisableFifoMode+0x66>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2284      	movs	r2, #132	@ 0x84
 8005dca:	2101      	movs	r1, #1
 8005dcc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2288      	movs	r2, #136	@ 0x88
 8005dd2:	2124      	movs	r1, #36	@ 0x24
 8005dd4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2101      	movs	r1, #1
 8005dea:	438a      	bics	r2, r1
 8005dec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	4a0b      	ldr	r2, [pc, #44]	@ (8005e20 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005df2:	4013      	ands	r3, r2
 8005df4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2288      	movs	r2, #136	@ 0x88
 8005e08:	2120      	movs	r1, #32
 8005e0a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2284      	movs	r2, #132	@ 0x84
 8005e10:	2100      	movs	r1, #0
 8005e12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	0018      	movs	r0, r3
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	b004      	add	sp, #16
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	46c0      	nop			@ (mov r8, r8)
 8005e20:	dfffffff 	.word	0xdfffffff

08005e24 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2284      	movs	r2, #132	@ 0x84
 8005e32:	5c9b      	ldrb	r3, [r3, r2]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d101      	bne.n	8005e3c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005e38:	2302      	movs	r3, #2
 8005e3a:	e02e      	b.n	8005e9a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2284      	movs	r2, #132	@ 0x84
 8005e40:	2101      	movs	r1, #1
 8005e42:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2288      	movs	r2, #136	@ 0x88
 8005e48:	2124      	movs	r1, #36	@ 0x24
 8005e4a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2101      	movs	r1, #1
 8005e60:	438a      	bics	r2, r1
 8005e62:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	00db      	lsls	r3, r3, #3
 8005e6c:	08d9      	lsrs	r1, r3, #3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	683a      	ldr	r2, [r7, #0]
 8005e74:	430a      	orrs	r2, r1
 8005e76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	0018      	movs	r0, r3
 8005e7c:	f000 f854 	bl	8005f28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2288      	movs	r2, #136	@ 0x88
 8005e8c:	2120      	movs	r1, #32
 8005e8e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2284      	movs	r2, #132	@ 0x84
 8005e94:	2100      	movs	r1, #0
 8005e96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	0018      	movs	r0, r3
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	b004      	add	sp, #16
 8005ea0:	bd80      	pop	{r7, pc}
	...

08005ea4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2284      	movs	r2, #132	@ 0x84
 8005eb2:	5c9b      	ldrb	r3, [r3, r2]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d101      	bne.n	8005ebc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005eb8:	2302      	movs	r3, #2
 8005eba:	e02f      	b.n	8005f1c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2284      	movs	r2, #132	@ 0x84
 8005ec0:	2101      	movs	r1, #1
 8005ec2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2288      	movs	r2, #136	@ 0x88
 8005ec8:	2124      	movs	r1, #36	@ 0x24
 8005eca:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2101      	movs	r1, #1
 8005ee0:	438a      	bics	r2, r1
 8005ee2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	4a0e      	ldr	r2, [pc, #56]	@ (8005f24 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005eec:	4013      	ands	r3, r2
 8005eee:	0019      	movs	r1, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	430a      	orrs	r2, r1
 8005ef8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	0018      	movs	r0, r3
 8005efe:	f000 f813 	bl	8005f28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2288      	movs	r2, #136	@ 0x88
 8005f0e:	2120      	movs	r1, #32
 8005f10:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2284      	movs	r2, #132	@ 0x84
 8005f16:	2100      	movs	r1, #0
 8005f18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	0018      	movs	r0, r3
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	b004      	add	sp, #16
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	f1ffffff 	.word	0xf1ffffff

08005f28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d108      	bne.n	8005f4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	226a      	movs	r2, #106	@ 0x6a
 8005f3c:	2101      	movs	r1, #1
 8005f3e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2268      	movs	r2, #104	@ 0x68
 8005f44:	2101      	movs	r1, #1
 8005f46:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005f48:	e043      	b.n	8005fd2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005f4a:	260f      	movs	r6, #15
 8005f4c:	19bb      	adds	r3, r7, r6
 8005f4e:	2208      	movs	r2, #8
 8005f50:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005f52:	200e      	movs	r0, #14
 8005f54:	183b      	adds	r3, r7, r0
 8005f56:	2208      	movs	r2, #8
 8005f58:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	0e5b      	lsrs	r3, r3, #25
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	240d      	movs	r4, #13
 8005f66:	193b      	adds	r3, r7, r4
 8005f68:	2107      	movs	r1, #7
 8005f6a:	400a      	ands	r2, r1
 8005f6c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	0f5b      	lsrs	r3, r3, #29
 8005f76:	b2da      	uxtb	r2, r3
 8005f78:	250c      	movs	r5, #12
 8005f7a:	197b      	adds	r3, r7, r5
 8005f7c:	2107      	movs	r1, #7
 8005f7e:	400a      	ands	r2, r1
 8005f80:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f82:	183b      	adds	r3, r7, r0
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	197a      	adds	r2, r7, r5
 8005f88:	7812      	ldrb	r2, [r2, #0]
 8005f8a:	4914      	ldr	r1, [pc, #80]	@ (8005fdc <UARTEx_SetNbDataToProcess+0xb4>)
 8005f8c:	5c8a      	ldrb	r2, [r1, r2]
 8005f8e:	435a      	muls	r2, r3
 8005f90:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005f92:	197b      	adds	r3, r7, r5
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	4a12      	ldr	r2, [pc, #72]	@ (8005fe0 <UARTEx_SetNbDataToProcess+0xb8>)
 8005f98:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f9a:	0019      	movs	r1, r3
 8005f9c:	f7fa f94e 	bl	800023c <__divsi3>
 8005fa0:	0003      	movs	r3, r0
 8005fa2:	b299      	uxth	r1, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	226a      	movs	r2, #106	@ 0x6a
 8005fa8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005faa:	19bb      	adds	r3, r7, r6
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	193a      	adds	r2, r7, r4
 8005fb0:	7812      	ldrb	r2, [r2, #0]
 8005fb2:	490a      	ldr	r1, [pc, #40]	@ (8005fdc <UARTEx_SetNbDataToProcess+0xb4>)
 8005fb4:	5c8a      	ldrb	r2, [r1, r2]
 8005fb6:	435a      	muls	r2, r3
 8005fb8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005fba:	193b      	adds	r3, r7, r4
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	4a08      	ldr	r2, [pc, #32]	@ (8005fe0 <UARTEx_SetNbDataToProcess+0xb8>)
 8005fc0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fc2:	0019      	movs	r1, r3
 8005fc4:	f7fa f93a 	bl	800023c <__divsi3>
 8005fc8:	0003      	movs	r3, r0
 8005fca:	b299      	uxth	r1, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2268      	movs	r2, #104	@ 0x68
 8005fd0:	5299      	strh	r1, [r3, r2]
}
 8005fd2:	46c0      	nop			@ (mov r8, r8)
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	b005      	add	sp, #20
 8005fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fda:	46c0      	nop			@ (mov r8, r8)
 8005fdc:	0800b918 	.word	0x0800b918
 8005fe0:	0800b920 	.word	0x0800b920

08005fe4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005ff2:	4b05      	ldr	r3, [pc, #20]	@ (8006008 <USB_EnableGlobalInt+0x24>)
 8005ff4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	0018      	movs	r0, r3
 8006000:	46bd      	mov	sp, r7
 8006002:	b004      	add	sp, #16
 8006004:	bd80      	pop	{r7, pc}
 8006006:	46c0      	nop			@ (mov r8, r8)
 8006008:	0000bf80 	.word	0x0000bf80

0800600c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006014:	4b06      	ldr	r3, [pc, #24]	@ (8006030 <USB_DisableGlobalInt+0x24>)
 8006016:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	43d2      	mvns	r2, r2
 8006020:	401a      	ands	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	0018      	movs	r0, r3
 800602a:	46bd      	mov	sp, r7
 800602c:	b004      	add	sp, #16
 800602e:	bd80      	pop	{r7, pc}
 8006030:	0000bf80 	.word	0x0000bf80

08006034 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	000a      	movs	r2, r1
 800603e:	1cfb      	adds	r3, r7, #3
 8006040:	701a      	strb	r2, [r3, #0]
  if (mode == USB_DEVICE_MODE)
 8006042:	1cfb      	adds	r3, r7, #3
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d106      	bne.n	8006058 <USB_SetCurrentMode+0x24>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800604e:	005b      	lsls	r3, r3, #1
 8006050:	085a      	lsrs	r2, r3, #1
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	641a      	str	r2, [r3, #64]	@ 0x40
 8006056:	e006      	b.n	8006066 <USB_SetCurrentMode+0x32>
  }
  else
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800605c:	2280      	movs	r2, #128	@ 0x80
 800605e:	0612      	lsls	r2, r2, #24
 8006060:	431a      	orrs	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	0018      	movs	r0, r3
 800606a:	46bd      	mov	sp, r7
 800606c:	b002      	add	sp, #8
 800606e:	bd80      	pop	{r7, pc}

08006070 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8006070:	b084      	sub	sp, #16
 8006072:	b590      	push	{r4, r7, lr}
 8006074:	b083      	sub	sp, #12
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
 800607a:	2004      	movs	r0, #4
 800607c:	2410      	movs	r4, #16
 800607e:	1900      	adds	r0, r0, r4
 8006080:	2408      	movs	r4, #8
 8006082:	46a4      	mov	ip, r4
 8006084:	44bc      	add	ip, r7
 8006086:	4460      	add	r0, ip
 8006088:	6001      	str	r1, [r0, #0]
 800608a:	6042      	str	r2, [r0, #4]
 800608c:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);
  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006098:	2201      	movs	r2, #1
 800609a:	4393      	bics	r3, r2
 800609c:	001a      	movs	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  (void)USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2100      	movs	r1, #0
 80060a6:	0018      	movs	r0, r3
 80060a8:	f7ff ffc4 	bl	8006034 <USB_SetCurrentMode>

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	645a      	str	r2, [r3, #68]	@ 0x44

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	0018      	movs	r0, r3
 80060b6:	46bd      	mov	sp, r7
 80060b8:	b003      	add	sp, #12
 80060ba:	bc90      	pop	{r4, r7}
 80060bc:	bc08      	pop	{r3}
 80060be:	b004      	add	sp, #16
 80060c0:	4718      	bx	r3
	...

080060c4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b09e      	sub	sp, #120	@ 0x78
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80060ce:	2377      	movs	r3, #119	@ 0x77
 80060d0:	18fb      	adds	r3, r7, r3
 80060d2:	2200      	movs	r2, #0
 80060d4:	701a      	strb	r2, [r3, #0]
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	18d3      	adds	r3, r2, r3
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4ad8      	ldr	r2, [pc, #864]	@ (8006444 <USB_ActivateEndpoint+0x380>)
 80060e4:	4013      	ands	r3, r2
 80060e6:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	78db      	ldrb	r3, [r3, #3]
 80060ec:	2b03      	cmp	r3, #3
 80060ee:	d00e      	beq.n	800610e <USB_ActivateEndpoint+0x4a>
 80060f0:	dc19      	bgt.n	8006126 <USB_ActivateEndpoint+0x62>
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d01c      	beq.n	8006130 <USB_ActivateEndpoint+0x6c>
 80060f6:	dc16      	bgt.n	8006126 <USB_ActivateEndpoint+0x62>
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d002      	beq.n	8006102 <USB_ActivateEndpoint+0x3e>
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d00c      	beq.n	800611a <USB_ActivateEndpoint+0x56>
 8006100:	e011      	b.n	8006126 <USB_ActivateEndpoint+0x62>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006102:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006104:	2280      	movs	r2, #128	@ 0x80
 8006106:	0092      	lsls	r2, r2, #2
 8006108:	4313      	orrs	r3, r2
 800610a:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800610c:	e011      	b.n	8006132 <USB_ActivateEndpoint+0x6e>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800610e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006110:	22c0      	movs	r2, #192	@ 0xc0
 8006112:	00d2      	lsls	r2, r2, #3
 8006114:	4313      	orrs	r3, r2
 8006116:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 8006118:	e00b      	b.n	8006132 <USB_ActivateEndpoint+0x6e>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800611a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800611c:	2280      	movs	r2, #128	@ 0x80
 800611e:	00d2      	lsls	r2, r2, #3
 8006120:	4313      	orrs	r3, r2
 8006122:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 8006124:	e005      	b.n	8006132 <USB_ActivateEndpoint+0x6e>

    default:
      ret = HAL_ERROR;
 8006126:	2377      	movs	r3, #119	@ 0x77
 8006128:	18fb      	adds	r3, r7, r3
 800612a:	2201      	movs	r2, #1
 800612c:	701a      	strb	r2, [r3, #0]
      break;
 800612e:	e000      	b.n	8006132 <USB_ActivateEndpoint+0x6e>
      break;
 8006130:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	18d3      	adds	r3, r2, r3
 800613c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800613e:	49c2      	ldr	r1, [pc, #776]	@ (8006448 <USB_ActivateEndpoint+0x384>)
 8006140:	430a      	orrs	r2, r1
 8006142:	601a      	str	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	18d3      	adds	r3, r2, r3
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4abe      	ldr	r2, [pc, #760]	@ (800644c <USB_ActivateEndpoint+0x388>)
 8006152:	4013      	ands	r3, r2
 8006154:	683a      	ldr	r2, [r7, #0]
 8006156:	7812      	ldrb	r2, [r2, #0]
 8006158:	4313      	orrs	r3, r2
 800615a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	18d3      	adds	r3, r2, r3
 8006166:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006168:	49b7      	ldr	r1, [pc, #732]	@ (8006448 <USB_ActivateEndpoint+0x384>)
 800616a:	430a      	orrs	r2, r1
 800616c:	601a      	str	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	7a9b      	ldrb	r3, [r3, #10]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d000      	beq.n	8006178 <USB_ActivateEndpoint+0xb4>
 8006176:	e177      	b.n	8006468 <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	785b      	ldrb	r3, [r3, #1]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d06e      	beq.n	800625e <USB_ActivateEndpoint+0x19a>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	00db      	lsls	r3, r3, #3
 8006186:	4ab2      	ldr	r2, [pc, #712]	@ (8006450 <USB_ActivateEndpoint+0x38c>)
 8006188:	4694      	mov	ip, r2
 800618a:	4463      	add	r3, ip
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	00db      	lsls	r3, r3, #3
 8006194:	49ae      	ldr	r1, [pc, #696]	@ (8006450 <USB_ActivateEndpoint+0x38c>)
 8006196:	468c      	mov	ip, r1
 8006198:	4463      	add	r3, ip
 800619a:	0c12      	lsrs	r2, r2, #16
 800619c:	0412      	lsls	r2, r2, #16
 800619e:	601a      	str	r2, [r3, #0]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	00db      	lsls	r3, r3, #3
 80061a6:	4aaa      	ldr	r2, [pc, #680]	@ (8006450 <USB_ActivateEndpoint+0x38c>)
 80061a8:	4694      	mov	ip, r2
 80061aa:	4463      	add	r3, ip
 80061ac:	6819      	ldr	r1, [r3, #0]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	889b      	ldrh	r3, [r3, #4]
 80061b2:	089b      	lsrs	r3, r3, #2
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	009a      	lsls	r2, r3, #2
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	00db      	lsls	r3, r3, #3
 80061be:	48a4      	ldr	r0, [pc, #656]	@ (8006450 <USB_ActivateEndpoint+0x38c>)
 80061c0:	4684      	mov	ip, r0
 80061c2:	4463      	add	r3, ip
 80061c4:	430a      	orrs	r2, r1
 80061c6:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	18d3      	adds	r3, r2, r3
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	61bb      	str	r3, [r7, #24]
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	2240      	movs	r2, #64	@ 0x40
 80061da:	4013      	ands	r3, r2
 80061dc:	d011      	beq.n	8006202 <USB_ActivateEndpoint+0x13e>
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	18d3      	adds	r3, r2, r3
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a98      	ldr	r2, [pc, #608]	@ (800644c <USB_ActivateEndpoint+0x388>)
 80061ec:	4013      	ands	r3, r2
 80061ee:	617b      	str	r3, [r7, #20]
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	18d3      	adds	r3, r2, r3
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	4995      	ldr	r1, [pc, #596]	@ (8006454 <USB_ActivateEndpoint+0x390>)
 80061fe:	430a      	orrs	r2, r1
 8006200:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	78db      	ldrb	r3, [r3, #3]
 8006206:	2b01      	cmp	r3, #1
 8006208:	d016      	beq.n	8006238 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	18d3      	adds	r3, r2, r3
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a90      	ldr	r2, [pc, #576]	@ (8006458 <USB_ActivateEndpoint+0x394>)
 8006218:	4013      	ands	r3, r2
 800621a:	60fb      	str	r3, [r7, #12]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2220      	movs	r2, #32
 8006220:	4053      	eors	r3, r2
 8006222:	60fb      	str	r3, [r7, #12]
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	18d3      	adds	r3, r2, r3
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	4985      	ldr	r1, [pc, #532]	@ (8006448 <USB_ActivateEndpoint+0x384>)
 8006232:	430a      	orrs	r2, r1
 8006234:	601a      	str	r2, [r3, #0]
 8006236:	e270      	b.n	800671a <USB_ActivateEndpoint+0x656>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	18d3      	adds	r3, r2, r3
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a84      	ldr	r2, [pc, #528]	@ (8006458 <USB_ActivateEndpoint+0x394>)
 8006246:	4013      	ands	r3, r2
 8006248:	613b      	str	r3, [r7, #16]
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	18d3      	adds	r3, r2, r3
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	497c      	ldr	r1, [pc, #496]	@ (8006448 <USB_ActivateEndpoint+0x384>)
 8006258:	430a      	orrs	r2, r1
 800625a:	601a      	str	r2, [r3, #0]
 800625c:	e25d      	b.n	800671a <USB_ActivateEndpoint+0x656>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	00db      	lsls	r3, r3, #3
 8006264:	4a7a      	ldr	r2, [pc, #488]	@ (8006450 <USB_ActivateEndpoint+0x38c>)
 8006266:	4694      	mov	ip, r2
 8006268:	4463      	add	r3, ip
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	00db      	lsls	r3, r3, #3
 8006272:	4977      	ldr	r1, [pc, #476]	@ (8006450 <USB_ActivateEndpoint+0x38c>)
 8006274:	468c      	mov	ip, r1
 8006276:	4463      	add	r3, ip
 8006278:	0c12      	lsrs	r2, r2, #16
 800627a:	0412      	lsls	r2, r2, #16
 800627c:	605a      	str	r2, [r3, #4]
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	00db      	lsls	r3, r3, #3
 8006284:	4a72      	ldr	r2, [pc, #456]	@ (8006450 <USB_ActivateEndpoint+0x38c>)
 8006286:	4694      	mov	ip, r2
 8006288:	4463      	add	r3, ip
 800628a:	6859      	ldr	r1, [r3, #4]
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	889b      	ldrh	r3, [r3, #4]
 8006290:	089b      	lsrs	r3, r3, #2
 8006292:	b29b      	uxth	r3, r3
 8006294:	009a      	lsls	r2, r3, #2
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	00db      	lsls	r3, r3, #3
 800629c:	486c      	ldr	r0, [pc, #432]	@ (8006450 <USB_ActivateEndpoint+0x38c>)
 800629e:	4684      	mov	ip, r0
 80062a0:	4463      	add	r3, ip
 80062a2:	430a      	orrs	r2, r1
 80062a4:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	00db      	lsls	r3, r3, #3
 80062ac:	4a68      	ldr	r2, [pc, #416]	@ (8006450 <USB_ActivateEndpoint+0x38c>)
 80062ae:	4694      	mov	ip, r2
 80062b0:	4463      	add	r3, ip
 80062b2:	685a      	ldr	r2, [r3, #4]
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	00db      	lsls	r3, r3, #3
 80062ba:	4965      	ldr	r1, [pc, #404]	@ (8006450 <USB_ActivateEndpoint+0x38c>)
 80062bc:	468c      	mov	ip, r1
 80062be:	4463      	add	r3, ip
 80062c0:	0412      	lsls	r2, r2, #16
 80062c2:	0c12      	lsrs	r2, r2, #16
 80062c4:	605a      	str	r2, [r3, #4]
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	2b3e      	cmp	r3, #62	@ 0x3e
 80062cc:	d920      	bls.n	8006310 <USB_ActivateEndpoint+0x24c>
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	095b      	lsrs	r3, r3, #5
 80062d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	221f      	movs	r2, #31
 80062dc:	4013      	ands	r3, r2
 80062de:	d102      	bne.n	80062e6 <USB_ActivateEndpoint+0x222>
 80062e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80062e2:	3b01      	subs	r3, #1
 80062e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	00db      	lsls	r3, r3, #3
 80062ec:	4a58      	ldr	r2, [pc, #352]	@ (8006450 <USB_ActivateEndpoint+0x38c>)
 80062ee:	4694      	mov	ip, r2
 80062f0:	4463      	add	r3, ip
 80062f2:	685a      	ldr	r2, [r3, #4]
 80062f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80062f6:	069b      	lsls	r3, r3, #26
 80062f8:	431a      	orrs	r2, r3
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	00db      	lsls	r3, r3, #3
 8006300:	4953      	ldr	r1, [pc, #332]	@ (8006450 <USB_ActivateEndpoint+0x38c>)
 8006302:	468c      	mov	ip, r1
 8006304:	4463      	add	r3, ip
 8006306:	2180      	movs	r1, #128	@ 0x80
 8006308:	0609      	lsls	r1, r1, #24
 800630a:	430a      	orrs	r2, r1
 800630c:	605a      	str	r2, [r3, #4]
 800630e:	e042      	b.n	8006396 <USB_ActivateEndpoint+0x2d2>
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d121      	bne.n	800635c <USB_ActivateEndpoint+0x298>
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	00db      	lsls	r3, r3, #3
 800631e:	4a4c      	ldr	r2, [pc, #304]	@ (8006450 <USB_ActivateEndpoint+0x38c>)
 8006320:	4694      	mov	ip, r2
 8006322:	4463      	add	r3, ip
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	00db      	lsls	r3, r3, #3
 800632c:	4948      	ldr	r1, [pc, #288]	@ (8006450 <USB_ActivateEndpoint+0x38c>)
 800632e:	468c      	mov	ip, r1
 8006330:	4463      	add	r3, ip
 8006332:	494a      	ldr	r1, [pc, #296]	@ (800645c <USB_ActivateEndpoint+0x398>)
 8006334:	400a      	ands	r2, r1
 8006336:	605a      	str	r2, [r3, #4]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	00db      	lsls	r3, r3, #3
 800633e:	4a44      	ldr	r2, [pc, #272]	@ (8006450 <USB_ActivateEndpoint+0x38c>)
 8006340:	4694      	mov	ip, r2
 8006342:	4463      	add	r3, ip
 8006344:	685a      	ldr	r2, [r3, #4]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	00db      	lsls	r3, r3, #3
 800634c:	4940      	ldr	r1, [pc, #256]	@ (8006450 <USB_ActivateEndpoint+0x38c>)
 800634e:	468c      	mov	ip, r1
 8006350:	4463      	add	r3, ip
 8006352:	2180      	movs	r1, #128	@ 0x80
 8006354:	0609      	lsls	r1, r1, #24
 8006356:	430a      	orrs	r2, r1
 8006358:	605a      	str	r2, [r3, #4]
 800635a:	e01c      	b.n	8006396 <USB_ActivateEndpoint+0x2d2>
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	085b      	lsrs	r3, r3, #1
 8006362:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	2201      	movs	r2, #1
 800636a:	4013      	ands	r3, r2
 800636c:	d002      	beq.n	8006374 <USB_ActivateEndpoint+0x2b0>
 800636e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006370:	3301      	adds	r3, #1
 8006372:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	00db      	lsls	r3, r3, #3
 800637a:	4a35      	ldr	r2, [pc, #212]	@ (8006450 <USB_ActivateEndpoint+0x38c>)
 800637c:	4694      	mov	ip, r2
 800637e:	4463      	add	r3, ip
 8006380:	6859      	ldr	r1, [r3, #4]
 8006382:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006384:	069a      	lsls	r2, r3, #26
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	4830      	ldr	r0, [pc, #192]	@ (8006450 <USB_ActivateEndpoint+0x38c>)
 800638e:	4684      	mov	ip, r0
 8006390:	4463      	add	r3, ip
 8006392:	430a      	orrs	r2, r1
 8006394:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	18d3      	adds	r3, r2, r3
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063a6:	2380      	movs	r3, #128	@ 0x80
 80063a8:	01db      	lsls	r3, r3, #7
 80063aa:	4013      	ands	r3, r2
 80063ac:	d011      	beq.n	80063d2 <USB_ActivateEndpoint+0x30e>
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	18d3      	adds	r3, r2, r3
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a24      	ldr	r2, [pc, #144]	@ (800644c <USB_ActivateEndpoint+0x388>)
 80063bc:	4013      	ands	r3, r2
 80063be:	627b      	str	r3, [r7, #36]	@ 0x24
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	18d3      	adds	r3, r2, r3
 80063ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063cc:	4924      	ldr	r1, [pc, #144]	@ (8006460 <USB_ActivateEndpoint+0x39c>)
 80063ce:	430a      	orrs	r2, r1
 80063d0:	601a      	str	r2, [r3, #0]

      if (ep->num == 0U)
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d11c      	bne.n	8006414 <USB_ActivateEndpoint+0x350>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	18d3      	adds	r3, r2, r3
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a1f      	ldr	r2, [pc, #124]	@ (8006464 <USB_ActivateEndpoint+0x3a0>)
 80063e8:	4013      	ands	r3, r2
 80063ea:	61fb      	str	r3, [r7, #28]
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	2280      	movs	r2, #128	@ 0x80
 80063f0:	0152      	lsls	r2, r2, #5
 80063f2:	4053      	eors	r3, r2
 80063f4:	61fb      	str	r3, [r7, #28]
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	2280      	movs	r2, #128	@ 0x80
 80063fa:	0192      	lsls	r2, r2, #6
 80063fc:	4053      	eors	r3, r2
 80063fe:	61fb      	str	r3, [r7, #28]
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	18d3      	adds	r3, r2, r3
 800640a:	69fa      	ldr	r2, [r7, #28]
 800640c:	490e      	ldr	r1, [pc, #56]	@ (8006448 <USB_ActivateEndpoint+0x384>)
 800640e:	430a      	orrs	r2, r1
 8006410:	601a      	str	r2, [r3, #0]
 8006412:	e182      	b.n	800671a <USB_ActivateEndpoint+0x656>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	18d3      	adds	r3, r2, r3
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a10      	ldr	r2, [pc, #64]	@ (8006464 <USB_ActivateEndpoint+0x3a0>)
 8006422:	4013      	ands	r3, r2
 8006424:	623b      	str	r3, [r7, #32]
 8006426:	6a3b      	ldr	r3, [r7, #32]
 8006428:	2280      	movs	r2, #128	@ 0x80
 800642a:	0192      	lsls	r2, r2, #6
 800642c:	4053      	eors	r3, r2
 800642e:	623b      	str	r3, [r7, #32]
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	18d3      	adds	r3, r2, r3
 800643a:	6a3a      	ldr	r2, [r7, #32]
 800643c:	4902      	ldr	r1, [pc, #8]	@ (8006448 <USB_ActivateEndpoint+0x384>)
 800643e:	430a      	orrs	r2, r1
 8006440:	601a      	str	r2, [r3, #0]
 8006442:	e16a      	b.n	800671a <USB_ActivateEndpoint+0x656>
 8006444:	07ff898f 	.word	0x07ff898f
 8006448:	00008080 	.word	0x00008080
 800644c:	07ff8f8f 	.word	0x07ff8f8f
 8006450:	40009800 	.word	0x40009800
 8006454:	000080c0 	.word	0x000080c0
 8006458:	07ff8fbf 	.word	0x07ff8fbf
 800645c:	83ffffff 	.word	0x83ffffff
 8006460:	0000c080 	.word	0x0000c080
 8006464:	07ffbf8f 	.word	0x07ffbf8f
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	78db      	ldrb	r3, [r3, #3]
 800646c:	2b02      	cmp	r3, #2
 800646e:	d112      	bne.n	8006496 <USB_ActivateEndpoint+0x3d2>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	18d3      	adds	r3, r2, r3
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4aaa      	ldr	r2, [pc, #680]	@ (8006728 <USB_ActivateEndpoint+0x664>)
 800647e:	4013      	ands	r3, r2
 8006480:	663b      	str	r3, [r7, #96]	@ 0x60
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	18d3      	adds	r3, r2, r3
 800648c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800648e:	49a7      	ldr	r1, [pc, #668]	@ (800672c <USB_ActivateEndpoint+0x668>)
 8006490:	430a      	orrs	r2, r1
 8006492:	601a      	str	r2, [r3, #0]
 8006494:	e011      	b.n	80064ba <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	18d3      	adds	r3, r2, r3
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4aa3      	ldr	r2, [pc, #652]	@ (8006730 <USB_ActivateEndpoint+0x66c>)
 80064a4:	4013      	ands	r3, r2
 80064a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	18d3      	adds	r3, r2, r3
 80064b2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80064b4:	499f      	ldr	r1, [pc, #636]	@ (8006734 <USB_ActivateEndpoint+0x670>)
 80064b6:	430a      	orrs	r2, r1
 80064b8:	601a      	str	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	00db      	lsls	r3, r3, #3
 80064c0:	4a9d      	ldr	r2, [pc, #628]	@ (8006738 <USB_ActivateEndpoint+0x674>)
 80064c2:	4694      	mov	ip, r2
 80064c4:	4463      	add	r3, ip
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	00db      	lsls	r3, r3, #3
 80064ce:	499a      	ldr	r1, [pc, #616]	@ (8006738 <USB_ActivateEndpoint+0x674>)
 80064d0:	468c      	mov	ip, r1
 80064d2:	4463      	add	r3, ip
 80064d4:	0c12      	lsrs	r2, r2, #16
 80064d6:	0412      	lsls	r2, r2, #16
 80064d8:	601a      	str	r2, [r3, #0]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	00db      	lsls	r3, r3, #3
 80064e0:	4a95      	ldr	r2, [pc, #596]	@ (8006738 <USB_ActivateEndpoint+0x674>)
 80064e2:	4694      	mov	ip, r2
 80064e4:	4463      	add	r3, ip
 80064e6:	6819      	ldr	r1, [r3, #0]
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	88db      	ldrh	r3, [r3, #6]
 80064ec:	089b      	lsrs	r3, r3, #2
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	009a      	lsls	r2, r3, #2
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	00db      	lsls	r3, r3, #3
 80064f8:	488f      	ldr	r0, [pc, #572]	@ (8006738 <USB_ActivateEndpoint+0x674>)
 80064fa:	4684      	mov	ip, r0
 80064fc:	4463      	add	r3, ip
 80064fe:	430a      	orrs	r2, r1
 8006500:	601a      	str	r2, [r3, #0]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	00db      	lsls	r3, r3, #3
 8006508:	4a8b      	ldr	r2, [pc, #556]	@ (8006738 <USB_ActivateEndpoint+0x674>)
 800650a:	4694      	mov	ip, r2
 800650c:	4463      	add	r3, ip
 800650e:	685a      	ldr	r2, [r3, #4]
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	00db      	lsls	r3, r3, #3
 8006516:	4988      	ldr	r1, [pc, #544]	@ (8006738 <USB_ActivateEndpoint+0x674>)
 8006518:	468c      	mov	ip, r1
 800651a:	4463      	add	r3, ip
 800651c:	0c12      	lsrs	r2, r2, #16
 800651e:	0412      	lsls	r2, r2, #16
 8006520:	605a      	str	r2, [r3, #4]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	00db      	lsls	r3, r3, #3
 8006528:	4a83      	ldr	r2, [pc, #524]	@ (8006738 <USB_ActivateEndpoint+0x674>)
 800652a:	4694      	mov	ip, r2
 800652c:	4463      	add	r3, ip
 800652e:	6859      	ldr	r1, [r3, #4]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	891b      	ldrh	r3, [r3, #8]
 8006534:	089b      	lsrs	r3, r3, #2
 8006536:	b29b      	uxth	r3, r3
 8006538:	009a      	lsls	r2, r3, #2
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	00db      	lsls	r3, r3, #3
 8006540:	487d      	ldr	r0, [pc, #500]	@ (8006738 <USB_ActivateEndpoint+0x674>)
 8006542:	4684      	mov	ip, r0
 8006544:	4463      	add	r3, ip
 8006546:	430a      	orrs	r2, r1
 8006548:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	785b      	ldrb	r3, [r3, #1]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d169      	bne.n	8006626 <USB_ActivateEndpoint+0x562>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	18d3      	adds	r3, r2, r3
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006560:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006562:	2380      	movs	r3, #128	@ 0x80
 8006564:	01db      	lsls	r3, r3, #7
 8006566:	4013      	ands	r3, r2
 8006568:	d011      	beq.n	800658e <USB_ActivateEndpoint+0x4ca>
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	18d3      	adds	r3, r2, r3
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a6c      	ldr	r2, [pc, #432]	@ (8006728 <USB_ActivateEndpoint+0x664>)
 8006578:	4013      	ands	r3, r2
 800657a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	18d3      	adds	r3, r2, r3
 8006586:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006588:	496c      	ldr	r1, [pc, #432]	@ (800673c <USB_ActivateEndpoint+0x678>)
 800658a:	430a      	orrs	r2, r1
 800658c:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	18d3      	adds	r3, r2, r3
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800659c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800659e:	2240      	movs	r2, #64	@ 0x40
 80065a0:	4013      	ands	r3, r2
 80065a2:	d011      	beq.n	80065c8 <USB_ActivateEndpoint+0x504>
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	18d3      	adds	r3, r2, r3
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a5d      	ldr	r2, [pc, #372]	@ (8006728 <USB_ActivateEndpoint+0x664>)
 80065b2:	4013      	ands	r3, r2
 80065b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	18d3      	adds	r3, r2, r3
 80065c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80065c2:	495f      	ldr	r1, [pc, #380]	@ (8006740 <USB_ActivateEndpoint+0x67c>)
 80065c4:	430a      	orrs	r2, r1
 80065c6:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	18d3      	adds	r3, r2, r3
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a5b      	ldr	r2, [pc, #364]	@ (8006744 <USB_ActivateEndpoint+0x680>)
 80065d6:	4013      	ands	r3, r2
 80065d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80065da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065dc:	2280      	movs	r2, #128	@ 0x80
 80065de:	0152      	lsls	r2, r2, #5
 80065e0:	4053      	eors	r3, r2
 80065e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80065e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e6:	2280      	movs	r2, #128	@ 0x80
 80065e8:	0192      	lsls	r2, r2, #6
 80065ea:	4053      	eors	r3, r2
 80065ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	18d3      	adds	r3, r2, r3
 80065f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065fa:	494e      	ldr	r1, [pc, #312]	@ (8006734 <USB_ActivateEndpoint+0x670>)
 80065fc:	430a      	orrs	r2, r1
 80065fe:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	18d3      	adds	r3, r2, r3
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a4e      	ldr	r2, [pc, #312]	@ (8006748 <USB_ActivateEndpoint+0x684>)
 800660e:	4013      	ands	r3, r2
 8006610:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	18d3      	adds	r3, r2, r3
 800661c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800661e:	4945      	ldr	r1, [pc, #276]	@ (8006734 <USB_ActivateEndpoint+0x670>)
 8006620:	430a      	orrs	r2, r1
 8006622:	601a      	str	r2, [r3, #0]
 8006624:	e079      	b.n	800671a <USB_ActivateEndpoint+0x656>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	18d3      	adds	r3, r2, r3
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006634:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006636:	2380      	movs	r3, #128	@ 0x80
 8006638:	01db      	lsls	r3, r3, #7
 800663a:	4013      	ands	r3, r2
 800663c:	d011      	beq.n	8006662 <USB_ActivateEndpoint+0x59e>
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	18d3      	adds	r3, r2, r3
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a37      	ldr	r2, [pc, #220]	@ (8006728 <USB_ActivateEndpoint+0x664>)
 800664c:	4013      	ands	r3, r2
 800664e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	18d3      	adds	r3, r2, r3
 800665a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800665c:	4937      	ldr	r1, [pc, #220]	@ (800673c <USB_ActivateEndpoint+0x678>)
 800665e:	430a      	orrs	r2, r1
 8006660:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	18d3      	adds	r3, r2, r3
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006670:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006672:	2240      	movs	r2, #64	@ 0x40
 8006674:	4013      	ands	r3, r2
 8006676:	d011      	beq.n	800669c <USB_ActivateEndpoint+0x5d8>
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	18d3      	adds	r3, r2, r3
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a28      	ldr	r2, [pc, #160]	@ (8006728 <USB_ActivateEndpoint+0x664>)
 8006686:	4013      	ands	r3, r2
 8006688:	653b      	str	r3, [r7, #80]	@ 0x50
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	18d3      	adds	r3, r2, r3
 8006694:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006696:	492a      	ldr	r1, [pc, #168]	@ (8006740 <USB_ActivateEndpoint+0x67c>)
 8006698:	430a      	orrs	r2, r1
 800669a:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	78db      	ldrb	r3, [r3, #3]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d016      	beq.n	80066d2 <USB_ActivateEndpoint+0x60e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	18d3      	adds	r3, r2, r3
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a25      	ldr	r2, [pc, #148]	@ (8006748 <USB_ActivateEndpoint+0x684>)
 80066b2:	4013      	ands	r3, r2
 80066b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066b8:	2220      	movs	r2, #32
 80066ba:	4053      	eors	r3, r2
 80066bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	18d3      	adds	r3, r2, r3
 80066c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066ca:	491a      	ldr	r1, [pc, #104]	@ (8006734 <USB_ActivateEndpoint+0x670>)
 80066cc:	430a      	orrs	r2, r1
 80066ce:	601a      	str	r2, [r3, #0]
 80066d0:	e011      	b.n	80066f6 <USB_ActivateEndpoint+0x632>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	18d3      	adds	r3, r2, r3
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a1a      	ldr	r2, [pc, #104]	@ (8006748 <USB_ActivateEndpoint+0x684>)
 80066e0:	4013      	ands	r3, r2
 80066e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	18d3      	adds	r3, r2, r3
 80066ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80066f0:	4910      	ldr	r1, [pc, #64]	@ (8006734 <USB_ActivateEndpoint+0x670>)
 80066f2:	430a      	orrs	r2, r1
 80066f4:	601a      	str	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	18d3      	adds	r3, r2, r3
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a10      	ldr	r2, [pc, #64]	@ (8006744 <USB_ActivateEndpoint+0x680>)
 8006704:	4013      	ands	r3, r2
 8006706:	647b      	str	r3, [r7, #68]	@ 0x44
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	18d3      	adds	r3, r2, r3
 8006712:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006714:	4907      	ldr	r1, [pc, #28]	@ (8006734 <USB_ActivateEndpoint+0x670>)
 8006716:	430a      	orrs	r2, r1
 8006718:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800671a:	2377      	movs	r3, #119	@ 0x77
 800671c:	18fb      	adds	r3, r7, r3
 800671e:	781b      	ldrb	r3, [r3, #0]
}
 8006720:	0018      	movs	r0, r3
 8006722:	46bd      	mov	sp, r7
 8006724:	b01e      	add	sp, #120	@ 0x78
 8006726:	bd80      	pop	{r7, pc}
 8006728:	07ff8f8f 	.word	0x07ff8f8f
 800672c:	00008180 	.word	0x00008180
 8006730:	07ff8e8f 	.word	0x07ff8e8f
 8006734:	00008080 	.word	0x00008080
 8006738:	40009800 	.word	0x40009800
 800673c:	0000c080 	.word	0x0000c080
 8006740:	000080c0 	.word	0x000080c0
 8006744:	07ffbf8f 	.word	0x07ffbf8f
 8006748:	07ff8fbf 	.word	0x07ff8fbf

0800674c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b096      	sub	sp, #88	@ 0x58
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	7a9b      	ldrb	r3, [r3, #10]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d164      	bne.n	8006828 <USB_DeactivateEndpoint+0xdc>
  {
    if (ep->is_in != 0U)
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	785b      	ldrb	r3, [r3, #1]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d02f      	beq.n	80067c6 <USB_DeactivateEndpoint+0x7a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	18d3      	adds	r3, r2, r3
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	613b      	str	r3, [r7, #16]
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	2240      	movs	r2, #64	@ 0x40
 8006778:	4013      	ands	r3, r2
 800677a:	d011      	beq.n	80067a0 <USB_DeactivateEndpoint+0x54>
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	18d3      	adds	r3, r2, r3
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a9d      	ldr	r2, [pc, #628]	@ (8006a00 <USB_DeactivateEndpoint+0x2b4>)
 800678a:	4013      	ands	r3, r2
 800678c:	60fb      	str	r3, [r7, #12]
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	18d3      	adds	r3, r2, r3
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	499a      	ldr	r1, [pc, #616]	@ (8006a04 <USB_DeactivateEndpoint+0x2b8>)
 800679c:	430a      	orrs	r2, r1
 800679e:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	18d3      	adds	r3, r2, r3
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a96      	ldr	r2, [pc, #600]	@ (8006a08 <USB_DeactivateEndpoint+0x2bc>)
 80067ae:	4013      	ands	r3, r2
 80067b0:	60bb      	str	r3, [r7, #8]
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	18d3      	adds	r3, r2, r3
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	4993      	ldr	r1, [pc, #588]	@ (8006a0c <USB_DeactivateEndpoint+0x2c0>)
 80067c0:	430a      	orrs	r2, r1
 80067c2:	601a      	str	r2, [r3, #0]
 80067c4:	e117      	b.n	80069f6 <USB_DeactivateEndpoint+0x2aa>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	18d3      	adds	r3, r2, r3
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	61fb      	str	r3, [r7, #28]
 80067d4:	69fa      	ldr	r2, [r7, #28]
 80067d6:	2380      	movs	r3, #128	@ 0x80
 80067d8:	01db      	lsls	r3, r3, #7
 80067da:	4013      	ands	r3, r2
 80067dc:	d011      	beq.n	8006802 <USB_DeactivateEndpoint+0xb6>
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	18d3      	adds	r3, r2, r3
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a85      	ldr	r2, [pc, #532]	@ (8006a00 <USB_DeactivateEndpoint+0x2b4>)
 80067ec:	4013      	ands	r3, r2
 80067ee:	61bb      	str	r3, [r7, #24]
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	18d3      	adds	r3, r2, r3
 80067fa:	69ba      	ldr	r2, [r7, #24]
 80067fc:	4984      	ldr	r1, [pc, #528]	@ (8006a10 <USB_DeactivateEndpoint+0x2c4>)
 80067fe:	430a      	orrs	r2, r1
 8006800:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	18d3      	adds	r3, r2, r3
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a81      	ldr	r2, [pc, #516]	@ (8006a14 <USB_DeactivateEndpoint+0x2c8>)
 8006810:	4013      	ands	r3, r2
 8006812:	617b      	str	r3, [r7, #20]
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	18d3      	adds	r3, r2, r3
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	497a      	ldr	r1, [pc, #488]	@ (8006a0c <USB_DeactivateEndpoint+0x2c0>)
 8006822:	430a      	orrs	r2, r1
 8006824:	601a      	str	r2, [r3, #0]
 8006826:	e0e6      	b.n	80069f6 <USB_DeactivateEndpoint+0x2aa>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	785b      	ldrb	r3, [r3, #1]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d171      	bne.n	8006914 <USB_DeactivateEndpoint+0x1c8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	18d3      	adds	r3, r2, r3
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800683e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006840:	2380      	movs	r3, #128	@ 0x80
 8006842:	01db      	lsls	r3, r3, #7
 8006844:	4013      	ands	r3, r2
 8006846:	d011      	beq.n	800686c <USB_DeactivateEndpoint+0x120>
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	18d3      	adds	r3, r2, r3
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a6a      	ldr	r2, [pc, #424]	@ (8006a00 <USB_DeactivateEndpoint+0x2b4>)
 8006856:	4013      	ands	r3, r2
 8006858:	637b      	str	r3, [r7, #52]	@ 0x34
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	18d3      	adds	r3, r2, r3
 8006864:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006866:	496a      	ldr	r1, [pc, #424]	@ (8006a10 <USB_DeactivateEndpoint+0x2c4>)
 8006868:	430a      	orrs	r2, r1
 800686a:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	18d3      	adds	r3, r2, r3
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	633b      	str	r3, [r7, #48]	@ 0x30
 800687a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800687c:	2240      	movs	r2, #64	@ 0x40
 800687e:	4013      	ands	r3, r2
 8006880:	d011      	beq.n	80068a6 <USB_DeactivateEndpoint+0x15a>
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	18d3      	adds	r3, r2, r3
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a5c      	ldr	r2, [pc, #368]	@ (8006a00 <USB_DeactivateEndpoint+0x2b4>)
 8006890:	4013      	ands	r3, r2
 8006892:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	18d3      	adds	r3, r2, r3
 800689e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068a0:	4958      	ldr	r1, [pc, #352]	@ (8006a04 <USB_DeactivateEndpoint+0x2b8>)
 80068a2:	430a      	orrs	r2, r1
 80068a4:	601a      	str	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	18d3      	adds	r3, r2, r3
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a53      	ldr	r2, [pc, #332]	@ (8006a00 <USB_DeactivateEndpoint+0x2b4>)
 80068b4:	4013      	ands	r3, r2
 80068b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	18d3      	adds	r3, r2, r3
 80068c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068c4:	494f      	ldr	r1, [pc, #316]	@ (8006a04 <USB_DeactivateEndpoint+0x2b8>)
 80068c6:	430a      	orrs	r2, r1
 80068c8:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	18d3      	adds	r3, r2, r3
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a4f      	ldr	r2, [pc, #316]	@ (8006a14 <USB_DeactivateEndpoint+0x2c8>)
 80068d8:	4013      	ands	r3, r2
 80068da:	627b      	str	r3, [r7, #36]	@ 0x24
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	18d3      	adds	r3, r2, r3
 80068e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068e8:	4948      	ldr	r1, [pc, #288]	@ (8006a0c <USB_DeactivateEndpoint+0x2c0>)
 80068ea:	430a      	orrs	r2, r1
 80068ec:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	18d3      	adds	r3, r2, r3
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a43      	ldr	r2, [pc, #268]	@ (8006a08 <USB_DeactivateEndpoint+0x2bc>)
 80068fc:	4013      	ands	r3, r2
 80068fe:	623b      	str	r3, [r7, #32]
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	18d3      	adds	r3, r2, r3
 800690a:	6a3a      	ldr	r2, [r7, #32]
 800690c:	493f      	ldr	r1, [pc, #252]	@ (8006a0c <USB_DeactivateEndpoint+0x2c0>)
 800690e:	430a      	orrs	r2, r1
 8006910:	601a      	str	r2, [r3, #0]
 8006912:	e070      	b.n	80069f6 <USB_DeactivateEndpoint+0x2aa>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	18d3      	adds	r3, r2, r3
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	657b      	str	r3, [r7, #84]	@ 0x54
 8006922:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006924:	2380      	movs	r3, #128	@ 0x80
 8006926:	01db      	lsls	r3, r3, #7
 8006928:	4013      	ands	r3, r2
 800692a:	d011      	beq.n	8006950 <USB_DeactivateEndpoint+0x204>
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	18d3      	adds	r3, r2, r3
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a31      	ldr	r2, [pc, #196]	@ (8006a00 <USB_DeactivateEndpoint+0x2b4>)
 800693a:	4013      	ands	r3, r2
 800693c:	653b      	str	r3, [r7, #80]	@ 0x50
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	18d3      	adds	r3, r2, r3
 8006948:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800694a:	4931      	ldr	r1, [pc, #196]	@ (8006a10 <USB_DeactivateEndpoint+0x2c4>)
 800694c:	430a      	orrs	r2, r1
 800694e:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	18d3      	adds	r3, r2, r3
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800695e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006960:	2240      	movs	r2, #64	@ 0x40
 8006962:	4013      	ands	r3, r2
 8006964:	d011      	beq.n	800698a <USB_DeactivateEndpoint+0x23e>
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	18d3      	adds	r3, r2, r3
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a23      	ldr	r2, [pc, #140]	@ (8006a00 <USB_DeactivateEndpoint+0x2b4>)
 8006974:	4013      	ands	r3, r2
 8006976:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	18d3      	adds	r3, r2, r3
 8006982:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006984:	491f      	ldr	r1, [pc, #124]	@ (8006a04 <USB_DeactivateEndpoint+0x2b8>)
 8006986:	430a      	orrs	r2, r1
 8006988:	601a      	str	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	18d3      	adds	r3, r2, r3
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a1a      	ldr	r2, [pc, #104]	@ (8006a00 <USB_DeactivateEndpoint+0x2b4>)
 8006998:	4013      	ands	r3, r2
 800699a:	647b      	str	r3, [r7, #68]	@ 0x44
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	18d3      	adds	r3, r2, r3
 80069a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069a8:	4919      	ldr	r1, [pc, #100]	@ (8006a10 <USB_DeactivateEndpoint+0x2c4>)
 80069aa:	430a      	orrs	r2, r1
 80069ac:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	18d3      	adds	r3, r2, r3
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a13      	ldr	r2, [pc, #76]	@ (8006a08 <USB_DeactivateEndpoint+0x2bc>)
 80069bc:	4013      	ands	r3, r2
 80069be:	643b      	str	r3, [r7, #64]	@ 0x40
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	18d3      	adds	r3, r2, r3
 80069ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80069cc:	490f      	ldr	r1, [pc, #60]	@ (8006a0c <USB_DeactivateEndpoint+0x2c0>)
 80069ce:	430a      	orrs	r2, r1
 80069d0:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	18d3      	adds	r3, r2, r3
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a0d      	ldr	r2, [pc, #52]	@ (8006a14 <USB_DeactivateEndpoint+0x2c8>)
 80069e0:	4013      	ands	r3, r2
 80069e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	18d3      	adds	r3, r2, r3
 80069ee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80069f0:	4906      	ldr	r1, [pc, #24]	@ (8006a0c <USB_DeactivateEndpoint+0x2c0>)
 80069f2:	430a      	orrs	r2, r1
 80069f4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	0018      	movs	r0, r3
 80069fa:	46bd      	mov	sp, r7
 80069fc:	b016      	add	sp, #88	@ 0x58
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	07ff8f8f 	.word	0x07ff8f8f
 8006a04:	000080c0 	.word	0x000080c0
 8006a08:	07ff8fbf 	.word	0x07ff8fbf
 8006a0c:	00008080 	.word	0x00008080
 8006a10:	0000c080 	.word	0x0000c080
 8006a14:	07ffbf8f 	.word	0x07ffbf8f

08006a18 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8006a18:	b590      	push	{r4, r7, lr}
 8006a1a:	b097      	sub	sp, #92	@ 0x5c
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	785b      	ldrb	r3, [r3, #1]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d001      	beq.n	8006a2e <USB_EPStartXfer+0x16>
 8006a2a:	f000 fd24 	bl	8007476 <USB_EPStartXfer+0xa5e>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	699a      	ldr	r2, [r3, #24]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d903      	bls.n	8006a42 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a40:	e002      	b.n	8006a48 <USB_EPStartXfer+0x30>
    }
    else
    {
      len = ep->xfer_len;
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	699b      	ldr	r3, [r3, #24]
 8006a46:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	7a9b      	ldrb	r3, [r3, #10]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d12b      	bne.n	8006aa8 <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	6959      	ldr	r1, [r3, #20]
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	889a      	ldrh	r2, [r3, #4]
 8006a58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f001 f9b3 	bl	8007dc8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	00db      	lsls	r3, r3, #3
 8006a68:	4ade      	ldr	r2, [pc, #888]	@ (8006de4 <USB_EPStartXfer+0x3cc>)
 8006a6a:	4694      	mov	ip, r2
 8006a6c:	4463      	add	r3, ip
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	00db      	lsls	r3, r3, #3
 8006a76:	49db      	ldr	r1, [pc, #876]	@ (8006de4 <USB_EPStartXfer+0x3cc>)
 8006a78:	468c      	mov	ip, r1
 8006a7a:	4463      	add	r3, ip
 8006a7c:	0412      	lsls	r2, r2, #16
 8006a7e:	0c12      	lsrs	r2, r2, #16
 8006a80:	601a      	str	r2, [r3, #0]
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	00db      	lsls	r3, r3, #3
 8006a88:	4ad6      	ldr	r2, [pc, #856]	@ (8006de4 <USB_EPStartXfer+0x3cc>)
 8006a8a:	4694      	mov	ip, r2
 8006a8c:	4463      	add	r3, ip
 8006a8e:	6819      	ldr	r1, [r3, #0]
 8006a90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a92:	041a      	lsls	r2, r3, #16
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	00db      	lsls	r3, r3, #3
 8006a9a:	48d2      	ldr	r0, [pc, #840]	@ (8006de4 <USB_EPStartXfer+0x3cc>)
 8006a9c:	4684      	mov	ip, r0
 8006a9e:	4463      	add	r3, ip
 8006aa0:	430a      	orrs	r2, r1
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	f000 fccb 	bl	800743e <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	78db      	ldrb	r3, [r3, #3]
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d000      	beq.n	8006ab2 <USB_EPStartXfer+0x9a>
 8006ab0:	e35e      	b.n	8007170 <USB_EPStartXfer+0x758>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	6a1a      	ldr	r2, [r3, #32]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d800      	bhi.n	8006ac0 <USB_EPStartXfer+0xa8>
 8006abe:	e309      	b.n	80070d4 <USB_EPStartXfer+0x6bc>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	18d3      	adds	r3, r2, r3
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4ac6      	ldr	r2, [pc, #792]	@ (8006de8 <USB_EPStartXfer+0x3d0>)
 8006ace:	4013      	ands	r3, r2
 8006ad0:	613b      	str	r3, [r7, #16]
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	18d3      	adds	r3, r2, r3
 8006adc:	693a      	ldr	r2, [r7, #16]
 8006ade:	49c3      	ldr	r1, [pc, #780]	@ (8006dec <USB_EPStartXfer+0x3d4>)
 8006ae0:	430a      	orrs	r2, r1
 8006ae2:	601a      	str	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	6a1a      	ldr	r2, [r3, #32]
 8006ae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006aea:	1ad2      	subs	r2, r2, r3
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	18d3      	adds	r3, r2, r3
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2240      	movs	r2, #64	@ 0x40
 8006afe:	4013      	ands	r3, r2
 8006b00:	d100      	bne.n	8006b04 <USB_EPStartXfer+0xec>
 8006b02:	e177      	b.n	8006df4 <USB_EPStartXfer+0x3dc>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	785b      	ldrb	r3, [r3, #1]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d172      	bne.n	8006bf2 <USB_EPStartXfer+0x1da>
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	00db      	lsls	r3, r3, #3
 8006b12:	4ab4      	ldr	r2, [pc, #720]	@ (8006de4 <USB_EPStartXfer+0x3cc>)
 8006b14:	4694      	mov	ip, r2
 8006b16:	4463      	add	r3, ip
 8006b18:	685a      	ldr	r2, [r3, #4]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	00db      	lsls	r3, r3, #3
 8006b20:	49b0      	ldr	r1, [pc, #704]	@ (8006de4 <USB_EPStartXfer+0x3cc>)
 8006b22:	468c      	mov	ip, r1
 8006b24:	4463      	add	r3, ip
 8006b26:	0412      	lsls	r2, r2, #16
 8006b28:	0c12      	lsrs	r2, r2, #16
 8006b2a:	605a      	str	r2, [r3, #4]
 8006b2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b2e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006b30:	d91e      	bls.n	8006b70 <USB_EPStartXfer+0x158>
 8006b32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b34:	095b      	lsrs	r3, r3, #5
 8006b36:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b3a:	221f      	movs	r2, #31
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	d102      	bne.n	8006b46 <USB_EPStartXfer+0x12e>
 8006b40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b42:	3b01      	subs	r3, #1
 8006b44:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	00db      	lsls	r3, r3, #3
 8006b4c:	4aa5      	ldr	r2, [pc, #660]	@ (8006de4 <USB_EPStartXfer+0x3cc>)
 8006b4e:	4694      	mov	ip, r2
 8006b50:	4463      	add	r3, ip
 8006b52:	685a      	ldr	r2, [r3, #4]
 8006b54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b56:	069b      	lsls	r3, r3, #26
 8006b58:	431a      	orrs	r2, r3
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	00db      	lsls	r3, r3, #3
 8006b60:	49a0      	ldr	r1, [pc, #640]	@ (8006de4 <USB_EPStartXfer+0x3cc>)
 8006b62:	468c      	mov	ip, r1
 8006b64:	4463      	add	r3, ip
 8006b66:	2180      	movs	r1, #128	@ 0x80
 8006b68:	0609      	lsls	r1, r1, #24
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	605a      	str	r2, [r3, #4]
 8006b6e:	e065      	b.n	8006c3c <USB_EPStartXfer+0x224>
 8006b70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d121      	bne.n	8006bba <USB_EPStartXfer+0x1a2>
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	00db      	lsls	r3, r3, #3
 8006b7c:	4a99      	ldr	r2, [pc, #612]	@ (8006de4 <USB_EPStartXfer+0x3cc>)
 8006b7e:	4694      	mov	ip, r2
 8006b80:	4463      	add	r3, ip
 8006b82:	685a      	ldr	r2, [r3, #4]
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	00db      	lsls	r3, r3, #3
 8006b8a:	4996      	ldr	r1, [pc, #600]	@ (8006de4 <USB_EPStartXfer+0x3cc>)
 8006b8c:	468c      	mov	ip, r1
 8006b8e:	4463      	add	r3, ip
 8006b90:	4997      	ldr	r1, [pc, #604]	@ (8006df0 <USB_EPStartXfer+0x3d8>)
 8006b92:	400a      	ands	r2, r1
 8006b94:	605a      	str	r2, [r3, #4]
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	00db      	lsls	r3, r3, #3
 8006b9c:	4a91      	ldr	r2, [pc, #580]	@ (8006de4 <USB_EPStartXfer+0x3cc>)
 8006b9e:	4694      	mov	ip, r2
 8006ba0:	4463      	add	r3, ip
 8006ba2:	685a      	ldr	r2, [r3, #4]
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	00db      	lsls	r3, r3, #3
 8006baa:	498e      	ldr	r1, [pc, #568]	@ (8006de4 <USB_EPStartXfer+0x3cc>)
 8006bac:	468c      	mov	ip, r1
 8006bae:	4463      	add	r3, ip
 8006bb0:	2180      	movs	r1, #128	@ 0x80
 8006bb2:	0609      	lsls	r1, r1, #24
 8006bb4:	430a      	orrs	r2, r1
 8006bb6:	605a      	str	r2, [r3, #4]
 8006bb8:	e040      	b.n	8006c3c <USB_EPStartXfer+0x224>
 8006bba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bbc:	085b      	lsrs	r3, r3, #1
 8006bbe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	d002      	beq.n	8006bce <USB_EPStartXfer+0x1b6>
 8006bc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bca:	3301      	adds	r3, #1
 8006bcc:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	00db      	lsls	r3, r3, #3
 8006bd4:	4a83      	ldr	r2, [pc, #524]	@ (8006de4 <USB_EPStartXfer+0x3cc>)
 8006bd6:	4694      	mov	ip, r2
 8006bd8:	4463      	add	r3, ip
 8006bda:	6859      	ldr	r1, [r3, #4]
 8006bdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bde:	069a      	lsls	r2, r3, #26
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	00db      	lsls	r3, r3, #3
 8006be6:	487f      	ldr	r0, [pc, #508]	@ (8006de4 <USB_EPStartXfer+0x3cc>)
 8006be8:	4684      	mov	ip, r0
 8006bea:	4463      	add	r3, ip
 8006bec:	430a      	orrs	r2, r1
 8006bee:	605a      	str	r2, [r3, #4]
 8006bf0:	e024      	b.n	8006c3c <USB_EPStartXfer+0x224>
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	785b      	ldrb	r3, [r3, #1]
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d120      	bne.n	8006c3c <USB_EPStartXfer+0x224>
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	00db      	lsls	r3, r3, #3
 8006c00:	4a78      	ldr	r2, [pc, #480]	@ (8006de4 <USB_EPStartXfer+0x3cc>)
 8006c02:	4694      	mov	ip, r2
 8006c04:	4463      	add	r3, ip
 8006c06:	685a      	ldr	r2, [r3, #4]
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	00db      	lsls	r3, r3, #3
 8006c0e:	4975      	ldr	r1, [pc, #468]	@ (8006de4 <USB_EPStartXfer+0x3cc>)
 8006c10:	468c      	mov	ip, r1
 8006c12:	4463      	add	r3, ip
 8006c14:	0412      	lsls	r2, r2, #16
 8006c16:	0c12      	lsrs	r2, r2, #16
 8006c18:	605a      	str	r2, [r3, #4]
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	00db      	lsls	r3, r3, #3
 8006c20:	4a70      	ldr	r2, [pc, #448]	@ (8006de4 <USB_EPStartXfer+0x3cc>)
 8006c22:	4694      	mov	ip, r2
 8006c24:	4463      	add	r3, ip
 8006c26:	6859      	ldr	r1, [r3, #4]
 8006c28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c2a:	041a      	lsls	r2, r3, #16
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	00db      	lsls	r3, r3, #3
 8006c32:	486c      	ldr	r0, [pc, #432]	@ (8006de4 <USB_EPStartXfer+0x3cc>)
 8006c34:	4684      	mov	ip, r0
 8006c36:	4463      	add	r3, ip
 8006c38:	430a      	orrs	r2, r1
 8006c3a:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 8006c3c:	201a      	movs	r0, #26
 8006c3e:	183b      	adds	r3, r7, r0
 8006c40:	683a      	ldr	r2, [r7, #0]
 8006c42:	8912      	ldrh	r2, [r2, #8]
 8006c44:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	6959      	ldr	r1, [r3, #20]
 8006c4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c4c:	b29c      	uxth	r4, r3
 8006c4e:	183b      	adds	r3, r7, r0
 8006c50:	881a      	ldrh	r2, [r3, #0]
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	0023      	movs	r3, r4
 8006c56:	f001 f8b7 	bl	8007dc8 <USB_WritePMA>
            ep->xfer_buff += len;
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	695a      	ldr	r2, [r3, #20]
 8006c5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c60:	18d2      	adds	r2, r2, r3
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	6a1a      	ldr	r2, [r3, #32]
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d906      	bls.n	8006c80 <USB_EPStartXfer+0x268>
            {
              ep->xfer_len_db -= len;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	6a1a      	ldr	r2, [r3, #32]
 8006c76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c78:	1ad2      	subs	r2, r2, r3
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	621a      	str	r2, [r3, #32]
 8006c7e:	e005      	b.n	8006c8c <USB_EPStartXfer+0x274>
            }
            else
            {
              len = ep->xfer_len_db;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	6a1b      	ldr	r3, [r3, #32]
 8006c84:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	785b      	ldrb	r3, [r3, #1]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d172      	bne.n	8006d7a <USB_EPStartXfer+0x362>
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	00db      	lsls	r3, r3, #3
 8006c9a:	4a52      	ldr	r2, [pc, #328]	@ (8006de4 <USB_EPStartXfer+0x3cc>)
 8006c9c:	4694      	mov	ip, r2
 8006c9e:	4463      	add	r3, ip
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	00db      	lsls	r3, r3, #3
 8006ca8:	494e      	ldr	r1, [pc, #312]	@ (8006de4 <USB_EPStartXfer+0x3cc>)
 8006caa:	468c      	mov	ip, r1
 8006cac:	4463      	add	r3, ip
 8006cae:	0412      	lsls	r2, r2, #16
 8006cb0:	0c12      	lsrs	r2, r2, #16
 8006cb2:	601a      	str	r2, [r3, #0]
 8006cb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cb6:	2b3e      	cmp	r3, #62	@ 0x3e
 8006cb8:	d91e      	bls.n	8006cf8 <USB_EPStartXfer+0x2e0>
 8006cba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cbc:	095b      	lsrs	r3, r3, #5
 8006cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cc2:	221f      	movs	r2, #31
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	d102      	bne.n	8006cce <USB_EPStartXfer+0x2b6>
 8006cc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	00db      	lsls	r3, r3, #3
 8006cd4:	4a43      	ldr	r2, [pc, #268]	@ (8006de4 <USB_EPStartXfer+0x3cc>)
 8006cd6:	4694      	mov	ip, r2
 8006cd8:	4463      	add	r3, ip
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cde:	069b      	lsls	r3, r3, #26
 8006ce0:	431a      	orrs	r2, r3
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	00db      	lsls	r3, r3, #3
 8006ce8:	493e      	ldr	r1, [pc, #248]	@ (8006de4 <USB_EPStartXfer+0x3cc>)
 8006cea:	468c      	mov	ip, r1
 8006cec:	4463      	add	r3, ip
 8006cee:	2180      	movs	r1, #128	@ 0x80
 8006cf0:	0609      	lsls	r1, r1, #24
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	601a      	str	r2, [r3, #0]
 8006cf6:	e065      	b.n	8006dc4 <USB_EPStartXfer+0x3ac>
 8006cf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d121      	bne.n	8006d42 <USB_EPStartXfer+0x32a>
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	00db      	lsls	r3, r3, #3
 8006d04:	4a37      	ldr	r2, [pc, #220]	@ (8006de4 <USB_EPStartXfer+0x3cc>)
 8006d06:	4694      	mov	ip, r2
 8006d08:	4463      	add	r3, ip
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	00db      	lsls	r3, r3, #3
 8006d12:	4934      	ldr	r1, [pc, #208]	@ (8006de4 <USB_EPStartXfer+0x3cc>)
 8006d14:	468c      	mov	ip, r1
 8006d16:	4463      	add	r3, ip
 8006d18:	4935      	ldr	r1, [pc, #212]	@ (8006df0 <USB_EPStartXfer+0x3d8>)
 8006d1a:	400a      	ands	r2, r1
 8006d1c:	601a      	str	r2, [r3, #0]
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	00db      	lsls	r3, r3, #3
 8006d24:	4a2f      	ldr	r2, [pc, #188]	@ (8006de4 <USB_EPStartXfer+0x3cc>)
 8006d26:	4694      	mov	ip, r2
 8006d28:	4463      	add	r3, ip
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	00db      	lsls	r3, r3, #3
 8006d32:	492c      	ldr	r1, [pc, #176]	@ (8006de4 <USB_EPStartXfer+0x3cc>)
 8006d34:	468c      	mov	ip, r1
 8006d36:	4463      	add	r3, ip
 8006d38:	2180      	movs	r1, #128	@ 0x80
 8006d3a:	0609      	lsls	r1, r1, #24
 8006d3c:	430a      	orrs	r2, r1
 8006d3e:	601a      	str	r2, [r3, #0]
 8006d40:	e040      	b.n	8006dc4 <USB_EPStartXfer+0x3ac>
 8006d42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d44:	085b      	lsrs	r3, r3, #1
 8006d46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	d002      	beq.n	8006d56 <USB_EPStartXfer+0x33e>
 8006d50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d52:	3301      	adds	r3, #1
 8006d54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	00db      	lsls	r3, r3, #3
 8006d5c:	4a21      	ldr	r2, [pc, #132]	@ (8006de4 <USB_EPStartXfer+0x3cc>)
 8006d5e:	4694      	mov	ip, r2
 8006d60:	4463      	add	r3, ip
 8006d62:	6819      	ldr	r1, [r3, #0]
 8006d64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d66:	069a      	lsls	r2, r3, #26
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	00db      	lsls	r3, r3, #3
 8006d6e:	481d      	ldr	r0, [pc, #116]	@ (8006de4 <USB_EPStartXfer+0x3cc>)
 8006d70:	4684      	mov	ip, r0
 8006d72:	4463      	add	r3, ip
 8006d74:	430a      	orrs	r2, r1
 8006d76:	601a      	str	r2, [r3, #0]
 8006d78:	e024      	b.n	8006dc4 <USB_EPStartXfer+0x3ac>
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	785b      	ldrb	r3, [r3, #1]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d120      	bne.n	8006dc4 <USB_EPStartXfer+0x3ac>
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	00db      	lsls	r3, r3, #3
 8006d88:	4a16      	ldr	r2, [pc, #88]	@ (8006de4 <USB_EPStartXfer+0x3cc>)
 8006d8a:	4694      	mov	ip, r2
 8006d8c:	4463      	add	r3, ip
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	00db      	lsls	r3, r3, #3
 8006d96:	4913      	ldr	r1, [pc, #76]	@ (8006de4 <USB_EPStartXfer+0x3cc>)
 8006d98:	468c      	mov	ip, r1
 8006d9a:	4463      	add	r3, ip
 8006d9c:	0412      	lsls	r2, r2, #16
 8006d9e:	0c12      	lsrs	r2, r2, #16
 8006da0:	601a      	str	r2, [r3, #0]
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	00db      	lsls	r3, r3, #3
 8006da8:	4a0e      	ldr	r2, [pc, #56]	@ (8006de4 <USB_EPStartXfer+0x3cc>)
 8006daa:	4694      	mov	ip, r2
 8006dac:	4463      	add	r3, ip
 8006dae:	6819      	ldr	r1, [r3, #0]
 8006db0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006db2:	041a      	lsls	r2, r3, #16
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	00db      	lsls	r3, r3, #3
 8006dba:	480a      	ldr	r0, [pc, #40]	@ (8006de4 <USB_EPStartXfer+0x3cc>)
 8006dbc:	4684      	mov	ip, r0
 8006dbe:	4463      	add	r3, ip
 8006dc0:	430a      	orrs	r2, r1
 8006dc2:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006dc4:	201a      	movs	r0, #26
 8006dc6:	183b      	adds	r3, r7, r0
 8006dc8:	683a      	ldr	r2, [r7, #0]
 8006dca:	88d2      	ldrh	r2, [r2, #6]
 8006dcc:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	6959      	ldr	r1, [r3, #20]
 8006dd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006dd4:	b29c      	uxth	r4, r3
 8006dd6:	183b      	adds	r3, r7, r0
 8006dd8:	881a      	ldrh	r2, [r3, #0]
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	0023      	movs	r3, r4
 8006dde:	f000 fff3 	bl	8007dc8 <USB_WritePMA>
 8006de2:	e32c      	b.n	800743e <USB_EPStartXfer+0xa26>
 8006de4:	40009800 	.word	0x40009800
 8006de8:	07ff8f8f 	.word	0x07ff8f8f
 8006dec:	00008180 	.word	0x00008180
 8006df0:	83ffffff 	.word	0x83ffffff
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	785b      	ldrb	r3, [r3, #1]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d172      	bne.n	8006ee2 <USB_EPStartXfer+0x4ca>
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	00db      	lsls	r3, r3, #3
 8006e02:	4ad7      	ldr	r2, [pc, #860]	@ (8007160 <USB_EPStartXfer+0x748>)
 8006e04:	4694      	mov	ip, r2
 8006e06:	4463      	add	r3, ip
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	00db      	lsls	r3, r3, #3
 8006e10:	49d3      	ldr	r1, [pc, #844]	@ (8007160 <USB_EPStartXfer+0x748>)
 8006e12:	468c      	mov	ip, r1
 8006e14:	4463      	add	r3, ip
 8006e16:	0412      	lsls	r2, r2, #16
 8006e18:	0c12      	lsrs	r2, r2, #16
 8006e1a:	601a      	str	r2, [r3, #0]
 8006e1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e1e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e20:	d91e      	bls.n	8006e60 <USB_EPStartXfer+0x448>
 8006e22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e24:	095b      	lsrs	r3, r3, #5
 8006e26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e2a:	221f      	movs	r2, #31
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	d102      	bne.n	8006e36 <USB_EPStartXfer+0x41e>
 8006e30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e32:	3b01      	subs	r3, #1
 8006e34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	00db      	lsls	r3, r3, #3
 8006e3c:	4ac8      	ldr	r2, [pc, #800]	@ (8007160 <USB_EPStartXfer+0x748>)
 8006e3e:	4694      	mov	ip, r2
 8006e40:	4463      	add	r3, ip
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e46:	069b      	lsls	r3, r3, #26
 8006e48:	431a      	orrs	r2, r3
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	00db      	lsls	r3, r3, #3
 8006e50:	49c3      	ldr	r1, [pc, #780]	@ (8007160 <USB_EPStartXfer+0x748>)
 8006e52:	468c      	mov	ip, r1
 8006e54:	4463      	add	r3, ip
 8006e56:	2180      	movs	r1, #128	@ 0x80
 8006e58:	0609      	lsls	r1, r1, #24
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	601a      	str	r2, [r3, #0]
 8006e5e:	e065      	b.n	8006f2c <USB_EPStartXfer+0x514>
 8006e60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d121      	bne.n	8006eaa <USB_EPStartXfer+0x492>
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	00db      	lsls	r3, r3, #3
 8006e6c:	4abc      	ldr	r2, [pc, #752]	@ (8007160 <USB_EPStartXfer+0x748>)
 8006e6e:	4694      	mov	ip, r2
 8006e70:	4463      	add	r3, ip
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	00db      	lsls	r3, r3, #3
 8006e7a:	49b9      	ldr	r1, [pc, #740]	@ (8007160 <USB_EPStartXfer+0x748>)
 8006e7c:	468c      	mov	ip, r1
 8006e7e:	4463      	add	r3, ip
 8006e80:	49b8      	ldr	r1, [pc, #736]	@ (8007164 <USB_EPStartXfer+0x74c>)
 8006e82:	400a      	ands	r2, r1
 8006e84:	601a      	str	r2, [r3, #0]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	00db      	lsls	r3, r3, #3
 8006e8c:	4ab4      	ldr	r2, [pc, #720]	@ (8007160 <USB_EPStartXfer+0x748>)
 8006e8e:	4694      	mov	ip, r2
 8006e90:	4463      	add	r3, ip
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	00db      	lsls	r3, r3, #3
 8006e9a:	49b1      	ldr	r1, [pc, #708]	@ (8007160 <USB_EPStartXfer+0x748>)
 8006e9c:	468c      	mov	ip, r1
 8006e9e:	4463      	add	r3, ip
 8006ea0:	2180      	movs	r1, #128	@ 0x80
 8006ea2:	0609      	lsls	r1, r1, #24
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	601a      	str	r2, [r3, #0]
 8006ea8:	e040      	b.n	8006f2c <USB_EPStartXfer+0x514>
 8006eaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006eac:	085b      	lsrs	r3, r3, #1
 8006eae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006eb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	d002      	beq.n	8006ebe <USB_EPStartXfer+0x4a6>
 8006eb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006eba:	3301      	adds	r3, #1
 8006ebc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	00db      	lsls	r3, r3, #3
 8006ec4:	4aa6      	ldr	r2, [pc, #664]	@ (8007160 <USB_EPStartXfer+0x748>)
 8006ec6:	4694      	mov	ip, r2
 8006ec8:	4463      	add	r3, ip
 8006eca:	6819      	ldr	r1, [r3, #0]
 8006ecc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ece:	069a      	lsls	r2, r3, #26
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	00db      	lsls	r3, r3, #3
 8006ed6:	48a2      	ldr	r0, [pc, #648]	@ (8007160 <USB_EPStartXfer+0x748>)
 8006ed8:	4684      	mov	ip, r0
 8006eda:	4463      	add	r3, ip
 8006edc:	430a      	orrs	r2, r1
 8006ede:	601a      	str	r2, [r3, #0]
 8006ee0:	e024      	b.n	8006f2c <USB_EPStartXfer+0x514>
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	785b      	ldrb	r3, [r3, #1]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d120      	bne.n	8006f2c <USB_EPStartXfer+0x514>
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	4a9b      	ldr	r2, [pc, #620]	@ (8007160 <USB_EPStartXfer+0x748>)
 8006ef2:	4694      	mov	ip, r2
 8006ef4:	4463      	add	r3, ip
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	00db      	lsls	r3, r3, #3
 8006efe:	4998      	ldr	r1, [pc, #608]	@ (8007160 <USB_EPStartXfer+0x748>)
 8006f00:	468c      	mov	ip, r1
 8006f02:	4463      	add	r3, ip
 8006f04:	0412      	lsls	r2, r2, #16
 8006f06:	0c12      	lsrs	r2, r2, #16
 8006f08:	601a      	str	r2, [r3, #0]
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	00db      	lsls	r3, r3, #3
 8006f10:	4a93      	ldr	r2, [pc, #588]	@ (8007160 <USB_EPStartXfer+0x748>)
 8006f12:	4694      	mov	ip, r2
 8006f14:	4463      	add	r3, ip
 8006f16:	6819      	ldr	r1, [r3, #0]
 8006f18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f1a:	041a      	lsls	r2, r3, #16
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	00db      	lsls	r3, r3, #3
 8006f22:	488f      	ldr	r0, [pc, #572]	@ (8007160 <USB_EPStartXfer+0x748>)
 8006f24:	4684      	mov	ip, r0
 8006f26:	4463      	add	r3, ip
 8006f28:	430a      	orrs	r2, r1
 8006f2a:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006f2c:	201a      	movs	r0, #26
 8006f2e:	183b      	adds	r3, r7, r0
 8006f30:	683a      	ldr	r2, [r7, #0]
 8006f32:	88d2      	ldrh	r2, [r2, #6]
 8006f34:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	6959      	ldr	r1, [r3, #20]
 8006f3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f3c:	b29c      	uxth	r4, r3
 8006f3e:	183b      	adds	r3, r7, r0
 8006f40:	881a      	ldrh	r2, [r3, #0]
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	0023      	movs	r3, r4
 8006f46:	f000 ff3f 	bl	8007dc8 <USB_WritePMA>
            ep->xfer_buff += len;
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	695a      	ldr	r2, [r3, #20]
 8006f4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f50:	18d2      	adds	r2, r2, r3
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	6a1a      	ldr	r2, [r3, #32]
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d906      	bls.n	8006f70 <USB_EPStartXfer+0x558>
            {
              ep->xfer_len_db -= len;
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	6a1a      	ldr	r2, [r3, #32]
 8006f66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f68:	1ad2      	subs	r2, r2, r3
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	621a      	str	r2, [r3, #32]
 8006f6e:	e005      	b.n	8006f7c <USB_EPStartXfer+0x564>
            }
            else
            {
              len = ep->xfer_len_db;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	6a1b      	ldr	r3, [r3, #32]
 8006f74:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	785b      	ldrb	r3, [r3, #1]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d172      	bne.n	800706a <USB_EPStartXfer+0x652>
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	00db      	lsls	r3, r3, #3
 8006f8a:	4a75      	ldr	r2, [pc, #468]	@ (8007160 <USB_EPStartXfer+0x748>)
 8006f8c:	4694      	mov	ip, r2
 8006f8e:	4463      	add	r3, ip
 8006f90:	685a      	ldr	r2, [r3, #4]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	00db      	lsls	r3, r3, #3
 8006f98:	4971      	ldr	r1, [pc, #452]	@ (8007160 <USB_EPStartXfer+0x748>)
 8006f9a:	468c      	mov	ip, r1
 8006f9c:	4463      	add	r3, ip
 8006f9e:	0412      	lsls	r2, r2, #16
 8006fa0:	0c12      	lsrs	r2, r2, #16
 8006fa2:	605a      	str	r2, [r3, #4]
 8006fa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fa6:	2b3e      	cmp	r3, #62	@ 0x3e
 8006fa8:	d91e      	bls.n	8006fe8 <USB_EPStartXfer+0x5d0>
 8006faa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fac:	095b      	lsrs	r3, r3, #5
 8006fae:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fb2:	221f      	movs	r2, #31
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	d102      	bne.n	8006fbe <USB_EPStartXfer+0x5a6>
 8006fb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	00db      	lsls	r3, r3, #3
 8006fc4:	4a66      	ldr	r2, [pc, #408]	@ (8007160 <USB_EPStartXfer+0x748>)
 8006fc6:	4694      	mov	ip, r2
 8006fc8:	4463      	add	r3, ip
 8006fca:	685a      	ldr	r2, [r3, #4]
 8006fcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fce:	069b      	lsls	r3, r3, #26
 8006fd0:	431a      	orrs	r2, r3
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	00db      	lsls	r3, r3, #3
 8006fd8:	4961      	ldr	r1, [pc, #388]	@ (8007160 <USB_EPStartXfer+0x748>)
 8006fda:	468c      	mov	ip, r1
 8006fdc:	4463      	add	r3, ip
 8006fde:	2180      	movs	r1, #128	@ 0x80
 8006fe0:	0609      	lsls	r1, r1, #24
 8006fe2:	430a      	orrs	r2, r1
 8006fe4:	605a      	str	r2, [r3, #4]
 8006fe6:	e065      	b.n	80070b4 <USB_EPStartXfer+0x69c>
 8006fe8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d121      	bne.n	8007032 <USB_EPStartXfer+0x61a>
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	00db      	lsls	r3, r3, #3
 8006ff4:	4a5a      	ldr	r2, [pc, #360]	@ (8007160 <USB_EPStartXfer+0x748>)
 8006ff6:	4694      	mov	ip, r2
 8006ff8:	4463      	add	r3, ip
 8006ffa:	685a      	ldr	r2, [r3, #4]
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	00db      	lsls	r3, r3, #3
 8007002:	4957      	ldr	r1, [pc, #348]	@ (8007160 <USB_EPStartXfer+0x748>)
 8007004:	468c      	mov	ip, r1
 8007006:	4463      	add	r3, ip
 8007008:	4956      	ldr	r1, [pc, #344]	@ (8007164 <USB_EPStartXfer+0x74c>)
 800700a:	400a      	ands	r2, r1
 800700c:	605a      	str	r2, [r3, #4]
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	00db      	lsls	r3, r3, #3
 8007014:	4a52      	ldr	r2, [pc, #328]	@ (8007160 <USB_EPStartXfer+0x748>)
 8007016:	4694      	mov	ip, r2
 8007018:	4463      	add	r3, ip
 800701a:	685a      	ldr	r2, [r3, #4]
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	00db      	lsls	r3, r3, #3
 8007022:	494f      	ldr	r1, [pc, #316]	@ (8007160 <USB_EPStartXfer+0x748>)
 8007024:	468c      	mov	ip, r1
 8007026:	4463      	add	r3, ip
 8007028:	2180      	movs	r1, #128	@ 0x80
 800702a:	0609      	lsls	r1, r1, #24
 800702c:	430a      	orrs	r2, r1
 800702e:	605a      	str	r2, [r3, #4]
 8007030:	e040      	b.n	80070b4 <USB_EPStartXfer+0x69c>
 8007032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007034:	085b      	lsrs	r3, r3, #1
 8007036:	647b      	str	r3, [r7, #68]	@ 0x44
 8007038:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800703a:	2201      	movs	r2, #1
 800703c:	4013      	ands	r3, r2
 800703e:	d002      	beq.n	8007046 <USB_EPStartXfer+0x62e>
 8007040:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007042:	3301      	adds	r3, #1
 8007044:	647b      	str	r3, [r7, #68]	@ 0x44
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	00db      	lsls	r3, r3, #3
 800704c:	4a44      	ldr	r2, [pc, #272]	@ (8007160 <USB_EPStartXfer+0x748>)
 800704e:	4694      	mov	ip, r2
 8007050:	4463      	add	r3, ip
 8007052:	6859      	ldr	r1, [r3, #4]
 8007054:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007056:	069a      	lsls	r2, r3, #26
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	00db      	lsls	r3, r3, #3
 800705e:	4840      	ldr	r0, [pc, #256]	@ (8007160 <USB_EPStartXfer+0x748>)
 8007060:	4684      	mov	ip, r0
 8007062:	4463      	add	r3, ip
 8007064:	430a      	orrs	r2, r1
 8007066:	605a      	str	r2, [r3, #4]
 8007068:	e024      	b.n	80070b4 <USB_EPStartXfer+0x69c>
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	785b      	ldrb	r3, [r3, #1]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d120      	bne.n	80070b4 <USB_EPStartXfer+0x69c>
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	00db      	lsls	r3, r3, #3
 8007078:	4a39      	ldr	r2, [pc, #228]	@ (8007160 <USB_EPStartXfer+0x748>)
 800707a:	4694      	mov	ip, r2
 800707c:	4463      	add	r3, ip
 800707e:	685a      	ldr	r2, [r3, #4]
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	00db      	lsls	r3, r3, #3
 8007086:	4936      	ldr	r1, [pc, #216]	@ (8007160 <USB_EPStartXfer+0x748>)
 8007088:	468c      	mov	ip, r1
 800708a:	4463      	add	r3, ip
 800708c:	0412      	lsls	r2, r2, #16
 800708e:	0c12      	lsrs	r2, r2, #16
 8007090:	605a      	str	r2, [r3, #4]
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	00db      	lsls	r3, r3, #3
 8007098:	4a31      	ldr	r2, [pc, #196]	@ (8007160 <USB_EPStartXfer+0x748>)
 800709a:	4694      	mov	ip, r2
 800709c:	4463      	add	r3, ip
 800709e:	6859      	ldr	r1, [r3, #4]
 80070a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070a2:	041a      	lsls	r2, r3, #16
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	00db      	lsls	r3, r3, #3
 80070aa:	482d      	ldr	r0, [pc, #180]	@ (8007160 <USB_EPStartXfer+0x748>)
 80070ac:	4684      	mov	ip, r0
 80070ae:	4463      	add	r3, ip
 80070b0:	430a      	orrs	r2, r1
 80070b2:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 80070b4:	201a      	movs	r0, #26
 80070b6:	183b      	adds	r3, r7, r0
 80070b8:	683a      	ldr	r2, [r7, #0]
 80070ba:	8912      	ldrh	r2, [r2, #8]
 80070bc:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	6959      	ldr	r1, [r3, #20]
 80070c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070c4:	b29c      	uxth	r4, r3
 80070c6:	183b      	adds	r3, r7, r0
 80070c8:	881a      	ldrh	r2, [r3, #0]
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	0023      	movs	r3, r4
 80070ce:	f000 fe7b 	bl	8007dc8 <USB_WritePMA>
 80070d2:	e1b4      	b.n	800743e <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	6a1b      	ldr	r3, [r3, #32]
 80070d8:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	18d3      	adds	r3, r2, r3
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a20      	ldr	r2, [pc, #128]	@ (8007168 <USB_EPStartXfer+0x750>)
 80070e8:	4013      	ands	r3, r2
 80070ea:	617b      	str	r3, [r7, #20]
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	18d3      	adds	r3, r2, r3
 80070f6:	697a      	ldr	r2, [r7, #20]
 80070f8:	491c      	ldr	r1, [pc, #112]	@ (800716c <USB_EPStartXfer+0x754>)
 80070fa:	430a      	orrs	r2, r1
 80070fc:	601a      	str	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	00db      	lsls	r3, r3, #3
 8007104:	4a16      	ldr	r2, [pc, #88]	@ (8007160 <USB_EPStartXfer+0x748>)
 8007106:	4694      	mov	ip, r2
 8007108:	4463      	add	r3, ip
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	00db      	lsls	r3, r3, #3
 8007112:	4913      	ldr	r1, [pc, #76]	@ (8007160 <USB_EPStartXfer+0x748>)
 8007114:	468c      	mov	ip, r1
 8007116:	4463      	add	r3, ip
 8007118:	0412      	lsls	r2, r2, #16
 800711a:	0c12      	lsrs	r2, r2, #16
 800711c:	601a      	str	r2, [r3, #0]
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	00db      	lsls	r3, r3, #3
 8007124:	4a0e      	ldr	r2, [pc, #56]	@ (8007160 <USB_EPStartXfer+0x748>)
 8007126:	4694      	mov	ip, r2
 8007128:	4463      	add	r3, ip
 800712a:	6819      	ldr	r1, [r3, #0]
 800712c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800712e:	041a      	lsls	r2, r3, #16
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	00db      	lsls	r3, r3, #3
 8007136:	480a      	ldr	r0, [pc, #40]	@ (8007160 <USB_EPStartXfer+0x748>)
 8007138:	4684      	mov	ip, r0
 800713a:	4463      	add	r3, ip
 800713c:	430a      	orrs	r2, r1
 800713e:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007140:	201a      	movs	r0, #26
 8007142:	183b      	adds	r3, r7, r0
 8007144:	683a      	ldr	r2, [r7, #0]
 8007146:	88d2      	ldrh	r2, [r2, #6]
 8007148:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	6959      	ldr	r1, [r3, #20]
 800714e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007150:	b29c      	uxth	r4, r3
 8007152:	183b      	adds	r3, r7, r0
 8007154:	881a      	ldrh	r2, [r3, #0]
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	0023      	movs	r3, r4
 800715a:	f000 fe35 	bl	8007dc8 <USB_WritePMA>
 800715e:	e16e      	b.n	800743e <USB_EPStartXfer+0xa26>
 8007160:	40009800 	.word	0x40009800
 8007164:	83ffffff 	.word	0x83ffffff
 8007168:	07ff8e8f 	.word	0x07ff8e8f
 800716c:	00008080 	.word	0x00008080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	6a1a      	ldr	r2, [r3, #32]
 8007174:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007176:	1ad2      	subs	r2, r2, r3
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	18d3      	adds	r3, r2, r3
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2240      	movs	r2, #64	@ 0x40
 800718a:	4013      	ands	r3, r2
 800718c:	d100      	bne.n	8007190 <USB_EPStartXfer+0x778>
 800718e:	e0ab      	b.n	80072e8 <USB_EPStartXfer+0x8d0>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	785b      	ldrb	r3, [r3, #1]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d172      	bne.n	800727e <USB_EPStartXfer+0x866>
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	00db      	lsls	r3, r3, #3
 800719e:	4adc      	ldr	r2, [pc, #880]	@ (8007510 <USB_EPStartXfer+0xaf8>)
 80071a0:	4694      	mov	ip, r2
 80071a2:	4463      	add	r3, ip
 80071a4:	685a      	ldr	r2, [r3, #4]
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	00db      	lsls	r3, r3, #3
 80071ac:	49d8      	ldr	r1, [pc, #864]	@ (8007510 <USB_EPStartXfer+0xaf8>)
 80071ae:	468c      	mov	ip, r1
 80071b0:	4463      	add	r3, ip
 80071b2:	0412      	lsls	r2, r2, #16
 80071b4:	0c12      	lsrs	r2, r2, #16
 80071b6:	605a      	str	r2, [r3, #4]
 80071b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071ba:	2b3e      	cmp	r3, #62	@ 0x3e
 80071bc:	d91e      	bls.n	80071fc <USB_EPStartXfer+0x7e4>
 80071be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071c0:	095b      	lsrs	r3, r3, #5
 80071c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80071c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071c6:	221f      	movs	r2, #31
 80071c8:	4013      	ands	r3, r2
 80071ca:	d102      	bne.n	80071d2 <USB_EPStartXfer+0x7ba>
 80071cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071ce:	3b01      	subs	r3, #1
 80071d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	00db      	lsls	r3, r3, #3
 80071d8:	4acd      	ldr	r2, [pc, #820]	@ (8007510 <USB_EPStartXfer+0xaf8>)
 80071da:	4694      	mov	ip, r2
 80071dc:	4463      	add	r3, ip
 80071de:	685a      	ldr	r2, [r3, #4]
 80071e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071e2:	069b      	lsls	r3, r3, #26
 80071e4:	431a      	orrs	r2, r3
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	00db      	lsls	r3, r3, #3
 80071ec:	49c8      	ldr	r1, [pc, #800]	@ (8007510 <USB_EPStartXfer+0xaf8>)
 80071ee:	468c      	mov	ip, r1
 80071f0:	4463      	add	r3, ip
 80071f2:	2180      	movs	r1, #128	@ 0x80
 80071f4:	0609      	lsls	r1, r1, #24
 80071f6:	430a      	orrs	r2, r1
 80071f8:	605a      	str	r2, [r3, #4]
 80071fa:	e065      	b.n	80072c8 <USB_EPStartXfer+0x8b0>
 80071fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d121      	bne.n	8007246 <USB_EPStartXfer+0x82e>
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	00db      	lsls	r3, r3, #3
 8007208:	4ac1      	ldr	r2, [pc, #772]	@ (8007510 <USB_EPStartXfer+0xaf8>)
 800720a:	4694      	mov	ip, r2
 800720c:	4463      	add	r3, ip
 800720e:	685a      	ldr	r2, [r3, #4]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	00db      	lsls	r3, r3, #3
 8007216:	49be      	ldr	r1, [pc, #760]	@ (8007510 <USB_EPStartXfer+0xaf8>)
 8007218:	468c      	mov	ip, r1
 800721a:	4463      	add	r3, ip
 800721c:	49bd      	ldr	r1, [pc, #756]	@ (8007514 <USB_EPStartXfer+0xafc>)
 800721e:	400a      	ands	r2, r1
 8007220:	605a      	str	r2, [r3, #4]
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	00db      	lsls	r3, r3, #3
 8007228:	4ab9      	ldr	r2, [pc, #740]	@ (8007510 <USB_EPStartXfer+0xaf8>)
 800722a:	4694      	mov	ip, r2
 800722c:	4463      	add	r3, ip
 800722e:	685a      	ldr	r2, [r3, #4]
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	00db      	lsls	r3, r3, #3
 8007236:	49b6      	ldr	r1, [pc, #728]	@ (8007510 <USB_EPStartXfer+0xaf8>)
 8007238:	468c      	mov	ip, r1
 800723a:	4463      	add	r3, ip
 800723c:	2180      	movs	r1, #128	@ 0x80
 800723e:	0609      	lsls	r1, r1, #24
 8007240:	430a      	orrs	r2, r1
 8007242:	605a      	str	r2, [r3, #4]
 8007244:	e040      	b.n	80072c8 <USB_EPStartXfer+0x8b0>
 8007246:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007248:	085b      	lsrs	r3, r3, #1
 800724a:	643b      	str	r3, [r7, #64]	@ 0x40
 800724c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800724e:	2201      	movs	r2, #1
 8007250:	4013      	ands	r3, r2
 8007252:	d002      	beq.n	800725a <USB_EPStartXfer+0x842>
 8007254:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007256:	3301      	adds	r3, #1
 8007258:	643b      	str	r3, [r7, #64]	@ 0x40
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	00db      	lsls	r3, r3, #3
 8007260:	4aab      	ldr	r2, [pc, #684]	@ (8007510 <USB_EPStartXfer+0xaf8>)
 8007262:	4694      	mov	ip, r2
 8007264:	4463      	add	r3, ip
 8007266:	6859      	ldr	r1, [r3, #4]
 8007268:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800726a:	069a      	lsls	r2, r3, #26
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	00db      	lsls	r3, r3, #3
 8007272:	48a7      	ldr	r0, [pc, #668]	@ (8007510 <USB_EPStartXfer+0xaf8>)
 8007274:	4684      	mov	ip, r0
 8007276:	4463      	add	r3, ip
 8007278:	430a      	orrs	r2, r1
 800727a:	605a      	str	r2, [r3, #4]
 800727c:	e024      	b.n	80072c8 <USB_EPStartXfer+0x8b0>
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	785b      	ldrb	r3, [r3, #1]
 8007282:	2b01      	cmp	r3, #1
 8007284:	d120      	bne.n	80072c8 <USB_EPStartXfer+0x8b0>
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	00db      	lsls	r3, r3, #3
 800728c:	4aa0      	ldr	r2, [pc, #640]	@ (8007510 <USB_EPStartXfer+0xaf8>)
 800728e:	4694      	mov	ip, r2
 8007290:	4463      	add	r3, ip
 8007292:	685a      	ldr	r2, [r3, #4]
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	00db      	lsls	r3, r3, #3
 800729a:	499d      	ldr	r1, [pc, #628]	@ (8007510 <USB_EPStartXfer+0xaf8>)
 800729c:	468c      	mov	ip, r1
 800729e:	4463      	add	r3, ip
 80072a0:	0412      	lsls	r2, r2, #16
 80072a2:	0c12      	lsrs	r2, r2, #16
 80072a4:	605a      	str	r2, [r3, #4]
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	00db      	lsls	r3, r3, #3
 80072ac:	4a98      	ldr	r2, [pc, #608]	@ (8007510 <USB_EPStartXfer+0xaf8>)
 80072ae:	4694      	mov	ip, r2
 80072b0:	4463      	add	r3, ip
 80072b2:	6859      	ldr	r1, [r3, #4]
 80072b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072b6:	041a      	lsls	r2, r3, #16
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	00db      	lsls	r3, r3, #3
 80072be:	4894      	ldr	r0, [pc, #592]	@ (8007510 <USB_EPStartXfer+0xaf8>)
 80072c0:	4684      	mov	ip, r0
 80072c2:	4463      	add	r3, ip
 80072c4:	430a      	orrs	r2, r1
 80072c6:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 80072c8:	201a      	movs	r0, #26
 80072ca:	183b      	adds	r3, r7, r0
 80072cc:	683a      	ldr	r2, [r7, #0]
 80072ce:	8912      	ldrh	r2, [r2, #8]
 80072d0:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	6959      	ldr	r1, [r3, #20]
 80072d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072d8:	b29c      	uxth	r4, r3
 80072da:	183b      	adds	r3, r7, r0
 80072dc:	881a      	ldrh	r2, [r3, #0]
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	0023      	movs	r3, r4
 80072e2:	f000 fd71 	bl	8007dc8 <USB_WritePMA>
 80072e6:	e0aa      	b.n	800743e <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	785b      	ldrb	r3, [r3, #1]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d172      	bne.n	80073d6 <USB_EPStartXfer+0x9be>
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	00db      	lsls	r3, r3, #3
 80072f6:	4a86      	ldr	r2, [pc, #536]	@ (8007510 <USB_EPStartXfer+0xaf8>)
 80072f8:	4694      	mov	ip, r2
 80072fa:	4463      	add	r3, ip
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	00db      	lsls	r3, r3, #3
 8007304:	4982      	ldr	r1, [pc, #520]	@ (8007510 <USB_EPStartXfer+0xaf8>)
 8007306:	468c      	mov	ip, r1
 8007308:	4463      	add	r3, ip
 800730a:	0412      	lsls	r2, r2, #16
 800730c:	0c12      	lsrs	r2, r2, #16
 800730e:	601a      	str	r2, [r3, #0]
 8007310:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007312:	2b3e      	cmp	r3, #62	@ 0x3e
 8007314:	d91e      	bls.n	8007354 <USB_EPStartXfer+0x93c>
 8007316:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007318:	095b      	lsrs	r3, r3, #5
 800731a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800731c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800731e:	221f      	movs	r2, #31
 8007320:	4013      	ands	r3, r2
 8007322:	d102      	bne.n	800732a <USB_EPStartXfer+0x912>
 8007324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007326:	3b01      	subs	r3, #1
 8007328:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	00db      	lsls	r3, r3, #3
 8007330:	4a77      	ldr	r2, [pc, #476]	@ (8007510 <USB_EPStartXfer+0xaf8>)
 8007332:	4694      	mov	ip, r2
 8007334:	4463      	add	r3, ip
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800733a:	069b      	lsls	r3, r3, #26
 800733c:	431a      	orrs	r2, r3
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	00db      	lsls	r3, r3, #3
 8007344:	4972      	ldr	r1, [pc, #456]	@ (8007510 <USB_EPStartXfer+0xaf8>)
 8007346:	468c      	mov	ip, r1
 8007348:	4463      	add	r3, ip
 800734a:	2180      	movs	r1, #128	@ 0x80
 800734c:	0609      	lsls	r1, r1, #24
 800734e:	430a      	orrs	r2, r1
 8007350:	601a      	str	r2, [r3, #0]
 8007352:	e065      	b.n	8007420 <USB_EPStartXfer+0xa08>
 8007354:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007356:	2b00      	cmp	r3, #0
 8007358:	d121      	bne.n	800739e <USB_EPStartXfer+0x986>
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	00db      	lsls	r3, r3, #3
 8007360:	4a6b      	ldr	r2, [pc, #428]	@ (8007510 <USB_EPStartXfer+0xaf8>)
 8007362:	4694      	mov	ip, r2
 8007364:	4463      	add	r3, ip
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	00db      	lsls	r3, r3, #3
 800736e:	4968      	ldr	r1, [pc, #416]	@ (8007510 <USB_EPStartXfer+0xaf8>)
 8007370:	468c      	mov	ip, r1
 8007372:	4463      	add	r3, ip
 8007374:	4967      	ldr	r1, [pc, #412]	@ (8007514 <USB_EPStartXfer+0xafc>)
 8007376:	400a      	ands	r2, r1
 8007378:	601a      	str	r2, [r3, #0]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	00db      	lsls	r3, r3, #3
 8007380:	4a63      	ldr	r2, [pc, #396]	@ (8007510 <USB_EPStartXfer+0xaf8>)
 8007382:	4694      	mov	ip, r2
 8007384:	4463      	add	r3, ip
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	00db      	lsls	r3, r3, #3
 800738e:	4960      	ldr	r1, [pc, #384]	@ (8007510 <USB_EPStartXfer+0xaf8>)
 8007390:	468c      	mov	ip, r1
 8007392:	4463      	add	r3, ip
 8007394:	2180      	movs	r1, #128	@ 0x80
 8007396:	0609      	lsls	r1, r1, #24
 8007398:	430a      	orrs	r2, r1
 800739a:	601a      	str	r2, [r3, #0]
 800739c:	e040      	b.n	8007420 <USB_EPStartXfer+0xa08>
 800739e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073a0:	085b      	lsrs	r3, r3, #1
 80073a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073a6:	2201      	movs	r2, #1
 80073a8:	4013      	ands	r3, r2
 80073aa:	d002      	beq.n	80073b2 <USB_EPStartXfer+0x99a>
 80073ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073ae:	3301      	adds	r3, #1
 80073b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	00db      	lsls	r3, r3, #3
 80073b8:	4a55      	ldr	r2, [pc, #340]	@ (8007510 <USB_EPStartXfer+0xaf8>)
 80073ba:	4694      	mov	ip, r2
 80073bc:	4463      	add	r3, ip
 80073be:	6819      	ldr	r1, [r3, #0]
 80073c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073c2:	069a      	lsls	r2, r3, #26
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	00db      	lsls	r3, r3, #3
 80073ca:	4851      	ldr	r0, [pc, #324]	@ (8007510 <USB_EPStartXfer+0xaf8>)
 80073cc:	4684      	mov	ip, r0
 80073ce:	4463      	add	r3, ip
 80073d0:	430a      	orrs	r2, r1
 80073d2:	601a      	str	r2, [r3, #0]
 80073d4:	e024      	b.n	8007420 <USB_EPStartXfer+0xa08>
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	785b      	ldrb	r3, [r3, #1]
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d120      	bne.n	8007420 <USB_EPStartXfer+0xa08>
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	00db      	lsls	r3, r3, #3
 80073e4:	4a4a      	ldr	r2, [pc, #296]	@ (8007510 <USB_EPStartXfer+0xaf8>)
 80073e6:	4694      	mov	ip, r2
 80073e8:	4463      	add	r3, ip
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	00db      	lsls	r3, r3, #3
 80073f2:	4947      	ldr	r1, [pc, #284]	@ (8007510 <USB_EPStartXfer+0xaf8>)
 80073f4:	468c      	mov	ip, r1
 80073f6:	4463      	add	r3, ip
 80073f8:	0412      	lsls	r2, r2, #16
 80073fa:	0c12      	lsrs	r2, r2, #16
 80073fc:	601a      	str	r2, [r3, #0]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	00db      	lsls	r3, r3, #3
 8007404:	4a42      	ldr	r2, [pc, #264]	@ (8007510 <USB_EPStartXfer+0xaf8>)
 8007406:	4694      	mov	ip, r2
 8007408:	4463      	add	r3, ip
 800740a:	6819      	ldr	r1, [r3, #0]
 800740c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800740e:	041a      	lsls	r2, r3, #16
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	00db      	lsls	r3, r3, #3
 8007416:	483e      	ldr	r0, [pc, #248]	@ (8007510 <USB_EPStartXfer+0xaf8>)
 8007418:	4684      	mov	ip, r0
 800741a:	4463      	add	r3, ip
 800741c:	430a      	orrs	r2, r1
 800741e:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007420:	201a      	movs	r0, #26
 8007422:	183b      	adds	r3, r7, r0
 8007424:	683a      	ldr	r2, [r7, #0]
 8007426:	88d2      	ldrh	r2, [r2, #6]
 8007428:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	6959      	ldr	r1, [r3, #20]
 800742e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007430:	b29c      	uxth	r4, r3
 8007432:	183b      	adds	r3, r7, r0
 8007434:	881a      	ldrh	r2, [r3, #0]
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	0023      	movs	r3, r4
 800743a:	f000 fcc5 	bl	8007dc8 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	18d3      	adds	r3, r2, r3
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a33      	ldr	r2, [pc, #204]	@ (8007518 <USB_EPStartXfer+0xb00>)
 800744c:	4013      	ands	r3, r2
 800744e:	60fb      	str	r3, [r7, #12]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2210      	movs	r2, #16
 8007454:	4053      	eors	r3, r2
 8007456:	60fb      	str	r3, [r7, #12]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2220      	movs	r2, #32
 800745c:	4053      	eors	r3, r2
 800745e:	60fb      	str	r3, [r7, #12]
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	18d3      	adds	r3, r2, r3
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	492b      	ldr	r1, [pc, #172]	@ (800751c <USB_EPStartXfer+0xb04>)
 800746e:	430a      	orrs	r2, r1
 8007470:	601a      	str	r2, [r3, #0]
 8007472:	f000 fb97 	bl	8007ba4 <USB_EPStartXfer+0x118c>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	7a9b      	ldrb	r3, [r3, #10]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d000      	beq.n	8007480 <USB_EPStartXfer+0xa68>
 800747e:	e090      	b.n	80075a2 <USB_EPStartXfer+0xb8a>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	699a      	ldr	r2, [r3, #24]
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	429a      	cmp	r2, r3
 800748a:	d909      	bls.n	80074a0 <USB_EPStartXfer+0xa88>
      {
        len = ep->maxpacket;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	699a      	ldr	r2, [r3, #24]
 8007496:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007498:	1ad2      	subs	r2, r2, r3
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	619a      	str	r2, [r3, #24]
 800749e:	e005      	b.n	80074ac <USB_EPStartXfer+0xa94>
      }
      else
      {
        len = ep->xfer_len;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	2200      	movs	r2, #0
 80074aa:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	00db      	lsls	r3, r3, #3
 80074b2:	4a17      	ldr	r2, [pc, #92]	@ (8007510 <USB_EPStartXfer+0xaf8>)
 80074b4:	4694      	mov	ip, r2
 80074b6:	4463      	add	r3, ip
 80074b8:	685a      	ldr	r2, [r3, #4]
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	00db      	lsls	r3, r3, #3
 80074c0:	4913      	ldr	r1, [pc, #76]	@ (8007510 <USB_EPStartXfer+0xaf8>)
 80074c2:	468c      	mov	ip, r1
 80074c4:	4463      	add	r3, ip
 80074c6:	0412      	lsls	r2, r2, #16
 80074c8:	0c12      	lsrs	r2, r2, #16
 80074ca:	605a      	str	r2, [r3, #4]
 80074cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80074d0:	d926      	bls.n	8007520 <USB_EPStartXfer+0xb08>
 80074d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074d4:	095b      	lsrs	r3, r3, #5
 80074d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80074d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074da:	221f      	movs	r2, #31
 80074dc:	4013      	ands	r3, r2
 80074de:	d102      	bne.n	80074e6 <USB_EPStartXfer+0xace>
 80074e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074e2:	3b01      	subs	r3, #1
 80074e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	00db      	lsls	r3, r3, #3
 80074ec:	4a08      	ldr	r2, [pc, #32]	@ (8007510 <USB_EPStartXfer+0xaf8>)
 80074ee:	4694      	mov	ip, r2
 80074f0:	4463      	add	r3, ip
 80074f2:	685a      	ldr	r2, [r3, #4]
 80074f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074f6:	069b      	lsls	r3, r3, #26
 80074f8:	431a      	orrs	r2, r3
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	00db      	lsls	r3, r3, #3
 8007500:	4903      	ldr	r1, [pc, #12]	@ (8007510 <USB_EPStartXfer+0xaf8>)
 8007502:	468c      	mov	ip, r1
 8007504:	4463      	add	r3, ip
 8007506:	2180      	movs	r1, #128	@ 0x80
 8007508:	0609      	lsls	r1, r1, #24
 800750a:	430a      	orrs	r2, r1
 800750c:	605a      	str	r2, [r3, #4]
 800750e:	e32d      	b.n	8007b6c <USB_EPStartXfer+0x1154>
 8007510:	40009800 	.word	0x40009800
 8007514:	83ffffff 	.word	0x83ffffff
 8007518:	07ff8fbf 	.word	0x07ff8fbf
 800751c:	00008080 	.word	0x00008080
 8007520:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007522:	2b00      	cmp	r3, #0
 8007524:	d121      	bne.n	800756a <USB_EPStartXfer+0xb52>
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	00db      	lsls	r3, r3, #3
 800752c:	4ae0      	ldr	r2, [pc, #896]	@ (80078b0 <USB_EPStartXfer+0xe98>)
 800752e:	4694      	mov	ip, r2
 8007530:	4463      	add	r3, ip
 8007532:	685a      	ldr	r2, [r3, #4]
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	00db      	lsls	r3, r3, #3
 800753a:	49dd      	ldr	r1, [pc, #884]	@ (80078b0 <USB_EPStartXfer+0xe98>)
 800753c:	468c      	mov	ip, r1
 800753e:	4463      	add	r3, ip
 8007540:	49dc      	ldr	r1, [pc, #880]	@ (80078b4 <USB_EPStartXfer+0xe9c>)
 8007542:	400a      	ands	r2, r1
 8007544:	605a      	str	r2, [r3, #4]
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	00db      	lsls	r3, r3, #3
 800754c:	4ad8      	ldr	r2, [pc, #864]	@ (80078b0 <USB_EPStartXfer+0xe98>)
 800754e:	4694      	mov	ip, r2
 8007550:	4463      	add	r3, ip
 8007552:	685a      	ldr	r2, [r3, #4]
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	00db      	lsls	r3, r3, #3
 800755a:	49d5      	ldr	r1, [pc, #852]	@ (80078b0 <USB_EPStartXfer+0xe98>)
 800755c:	468c      	mov	ip, r1
 800755e:	4463      	add	r3, ip
 8007560:	2180      	movs	r1, #128	@ 0x80
 8007562:	0609      	lsls	r1, r1, #24
 8007564:	430a      	orrs	r2, r1
 8007566:	605a      	str	r2, [r3, #4]
 8007568:	e300      	b.n	8007b6c <USB_EPStartXfer+0x1154>
 800756a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800756c:	085b      	lsrs	r3, r3, #1
 800756e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007570:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007572:	2201      	movs	r2, #1
 8007574:	4013      	ands	r3, r2
 8007576:	d002      	beq.n	800757e <USB_EPStartXfer+0xb66>
 8007578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800757a:	3301      	adds	r3, #1
 800757c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	00db      	lsls	r3, r3, #3
 8007584:	4aca      	ldr	r2, [pc, #808]	@ (80078b0 <USB_EPStartXfer+0xe98>)
 8007586:	4694      	mov	ip, r2
 8007588:	4463      	add	r3, ip
 800758a:	6859      	ldr	r1, [r3, #4]
 800758c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800758e:	069a      	lsls	r2, r3, #26
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	00db      	lsls	r3, r3, #3
 8007596:	48c6      	ldr	r0, [pc, #792]	@ (80078b0 <USB_EPStartXfer+0xe98>)
 8007598:	4684      	mov	ip, r0
 800759a:	4463      	add	r3, ip
 800759c:	430a      	orrs	r2, r1
 800759e:	605a      	str	r2, [r3, #4]
 80075a0:	e2e4      	b.n	8007b6c <USB_EPStartXfer+0x1154>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	78db      	ldrb	r3, [r3, #3]
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d000      	beq.n	80075ac <USB_EPStartXfer+0xb94>
 80075aa:	e189      	b.n	80078c0 <USB_EPStartXfer+0xea8>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	785b      	ldrb	r3, [r3, #1]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d000      	beq.n	80075b6 <USB_EPStartXfer+0xb9e>
 80075b4:	e078      	b.n	80076a8 <USB_EPStartXfer+0xc90>
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	00db      	lsls	r3, r3, #3
 80075bc:	4abc      	ldr	r2, [pc, #752]	@ (80078b0 <USB_EPStartXfer+0xe98>)
 80075be:	4694      	mov	ip, r2
 80075c0:	4463      	add	r3, ip
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	00db      	lsls	r3, r3, #3
 80075ca:	49b9      	ldr	r1, [pc, #740]	@ (80078b0 <USB_EPStartXfer+0xe98>)
 80075cc:	468c      	mov	ip, r1
 80075ce:	4463      	add	r3, ip
 80075d0:	0412      	lsls	r2, r2, #16
 80075d2:	0c12      	lsrs	r2, r2, #16
 80075d4:	601a      	str	r2, [r3, #0]
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	2b3e      	cmp	r3, #62	@ 0x3e
 80075dc:	d920      	bls.n	8007620 <USB_EPStartXfer+0xc08>
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	095b      	lsrs	r3, r3, #5
 80075e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	221f      	movs	r2, #31
 80075ec:	4013      	ands	r3, r2
 80075ee:	d102      	bne.n	80075f6 <USB_EPStartXfer+0xbde>
 80075f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075f2:	3b01      	subs	r3, #1
 80075f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	00db      	lsls	r3, r3, #3
 80075fc:	4aac      	ldr	r2, [pc, #688]	@ (80078b0 <USB_EPStartXfer+0xe98>)
 80075fe:	4694      	mov	ip, r2
 8007600:	4463      	add	r3, ip
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007606:	069b      	lsls	r3, r3, #26
 8007608:	431a      	orrs	r2, r3
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	00db      	lsls	r3, r3, #3
 8007610:	49a7      	ldr	r1, [pc, #668]	@ (80078b0 <USB_EPStartXfer+0xe98>)
 8007612:	468c      	mov	ip, r1
 8007614:	4463      	add	r3, ip
 8007616:	2180      	movs	r1, #128	@ 0x80
 8007618:	0609      	lsls	r1, r1, #24
 800761a:	430a      	orrs	r2, r1
 800761c:	601a      	str	r2, [r3, #0]
 800761e:	e069      	b.n	80076f4 <USB_EPStartXfer+0xcdc>
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d121      	bne.n	800766c <USB_EPStartXfer+0xc54>
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	00db      	lsls	r3, r3, #3
 800762e:	4aa0      	ldr	r2, [pc, #640]	@ (80078b0 <USB_EPStartXfer+0xe98>)
 8007630:	4694      	mov	ip, r2
 8007632:	4463      	add	r3, ip
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	00db      	lsls	r3, r3, #3
 800763c:	499c      	ldr	r1, [pc, #624]	@ (80078b0 <USB_EPStartXfer+0xe98>)
 800763e:	468c      	mov	ip, r1
 8007640:	4463      	add	r3, ip
 8007642:	499c      	ldr	r1, [pc, #624]	@ (80078b4 <USB_EPStartXfer+0xe9c>)
 8007644:	400a      	ands	r2, r1
 8007646:	601a      	str	r2, [r3, #0]
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	00db      	lsls	r3, r3, #3
 800764e:	4a98      	ldr	r2, [pc, #608]	@ (80078b0 <USB_EPStartXfer+0xe98>)
 8007650:	4694      	mov	ip, r2
 8007652:	4463      	add	r3, ip
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	00db      	lsls	r3, r3, #3
 800765c:	4994      	ldr	r1, [pc, #592]	@ (80078b0 <USB_EPStartXfer+0xe98>)
 800765e:	468c      	mov	ip, r1
 8007660:	4463      	add	r3, ip
 8007662:	2180      	movs	r1, #128	@ 0x80
 8007664:	0609      	lsls	r1, r1, #24
 8007666:	430a      	orrs	r2, r1
 8007668:	601a      	str	r2, [r3, #0]
 800766a:	e043      	b.n	80076f4 <USB_EPStartXfer+0xcdc>
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	085b      	lsrs	r3, r3, #1
 8007672:	637b      	str	r3, [r7, #52]	@ 0x34
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	2201      	movs	r2, #1
 800767a:	4013      	ands	r3, r2
 800767c:	d002      	beq.n	8007684 <USB_EPStartXfer+0xc6c>
 800767e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007680:	3301      	adds	r3, #1
 8007682:	637b      	str	r3, [r7, #52]	@ 0x34
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	00db      	lsls	r3, r3, #3
 800768a:	4a89      	ldr	r2, [pc, #548]	@ (80078b0 <USB_EPStartXfer+0xe98>)
 800768c:	4694      	mov	ip, r2
 800768e:	4463      	add	r3, ip
 8007690:	6819      	ldr	r1, [r3, #0]
 8007692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007694:	069a      	lsls	r2, r3, #26
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	00db      	lsls	r3, r3, #3
 800769c:	4884      	ldr	r0, [pc, #528]	@ (80078b0 <USB_EPStartXfer+0xe98>)
 800769e:	4684      	mov	ip, r0
 80076a0:	4463      	add	r3, ip
 80076a2:	430a      	orrs	r2, r1
 80076a4:	601a      	str	r2, [r3, #0]
 80076a6:	e025      	b.n	80076f4 <USB_EPStartXfer+0xcdc>
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	785b      	ldrb	r3, [r3, #1]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d121      	bne.n	80076f4 <USB_EPStartXfer+0xcdc>
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	00db      	lsls	r3, r3, #3
 80076b6:	4a7e      	ldr	r2, [pc, #504]	@ (80078b0 <USB_EPStartXfer+0xe98>)
 80076b8:	4694      	mov	ip, r2
 80076ba:	4463      	add	r3, ip
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	00db      	lsls	r3, r3, #3
 80076c4:	497a      	ldr	r1, [pc, #488]	@ (80078b0 <USB_EPStartXfer+0xe98>)
 80076c6:	468c      	mov	ip, r1
 80076c8:	4463      	add	r3, ip
 80076ca:	0412      	lsls	r2, r2, #16
 80076cc:	0c12      	lsrs	r2, r2, #16
 80076ce:	601a      	str	r2, [r3, #0]
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	00db      	lsls	r3, r3, #3
 80076d6:	4a76      	ldr	r2, [pc, #472]	@ (80078b0 <USB_EPStartXfer+0xe98>)
 80076d8:	4694      	mov	ip, r2
 80076da:	4463      	add	r3, ip
 80076dc:	6819      	ldr	r1, [r3, #0]
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	041a      	lsls	r2, r3, #16
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	00db      	lsls	r3, r3, #3
 80076ea:	4871      	ldr	r0, [pc, #452]	@ (80078b0 <USB_EPStartXfer+0xe98>)
 80076ec:	4684      	mov	ip, r0
 80076ee:	4463      	add	r3, ip
 80076f0:	430a      	orrs	r2, r1
 80076f2:	601a      	str	r2, [r3, #0]
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	785b      	ldrb	r3, [r3, #1]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d000      	beq.n	80076fe <USB_EPStartXfer+0xce6>
 80076fc:	e078      	b.n	80077f0 <USB_EPStartXfer+0xdd8>
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	00db      	lsls	r3, r3, #3
 8007704:	4a6a      	ldr	r2, [pc, #424]	@ (80078b0 <USB_EPStartXfer+0xe98>)
 8007706:	4694      	mov	ip, r2
 8007708:	4463      	add	r3, ip
 800770a:	685a      	ldr	r2, [r3, #4]
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	00db      	lsls	r3, r3, #3
 8007712:	4967      	ldr	r1, [pc, #412]	@ (80078b0 <USB_EPStartXfer+0xe98>)
 8007714:	468c      	mov	ip, r1
 8007716:	4463      	add	r3, ip
 8007718:	0412      	lsls	r2, r2, #16
 800771a:	0c12      	lsrs	r2, r2, #16
 800771c:	605a      	str	r2, [r3, #4]
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	2b3e      	cmp	r3, #62	@ 0x3e
 8007724:	d920      	bls.n	8007768 <USB_EPStartXfer+0xd50>
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	095b      	lsrs	r3, r3, #5
 800772c:	633b      	str	r3, [r7, #48]	@ 0x30
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	221f      	movs	r2, #31
 8007734:	4013      	ands	r3, r2
 8007736:	d102      	bne.n	800773e <USB_EPStartXfer+0xd26>
 8007738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773a:	3b01      	subs	r3, #1
 800773c:	633b      	str	r3, [r7, #48]	@ 0x30
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	00db      	lsls	r3, r3, #3
 8007744:	4a5a      	ldr	r2, [pc, #360]	@ (80078b0 <USB_EPStartXfer+0xe98>)
 8007746:	4694      	mov	ip, r2
 8007748:	4463      	add	r3, ip
 800774a:	685a      	ldr	r2, [r3, #4]
 800774c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800774e:	069b      	lsls	r3, r3, #26
 8007750:	431a      	orrs	r2, r3
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	00db      	lsls	r3, r3, #3
 8007758:	4955      	ldr	r1, [pc, #340]	@ (80078b0 <USB_EPStartXfer+0xe98>)
 800775a:	468c      	mov	ip, r1
 800775c:	4463      	add	r3, ip
 800775e:	2180      	movs	r1, #128	@ 0x80
 8007760:	0609      	lsls	r1, r1, #24
 8007762:	430a      	orrs	r2, r1
 8007764:	605a      	str	r2, [r3, #4]
 8007766:	e069      	b.n	800783c <USB_EPStartXfer+0xe24>
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d121      	bne.n	80077b4 <USB_EPStartXfer+0xd9c>
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	00db      	lsls	r3, r3, #3
 8007776:	4a4e      	ldr	r2, [pc, #312]	@ (80078b0 <USB_EPStartXfer+0xe98>)
 8007778:	4694      	mov	ip, r2
 800777a:	4463      	add	r3, ip
 800777c:	685a      	ldr	r2, [r3, #4]
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	00db      	lsls	r3, r3, #3
 8007784:	494a      	ldr	r1, [pc, #296]	@ (80078b0 <USB_EPStartXfer+0xe98>)
 8007786:	468c      	mov	ip, r1
 8007788:	4463      	add	r3, ip
 800778a:	494a      	ldr	r1, [pc, #296]	@ (80078b4 <USB_EPStartXfer+0xe9c>)
 800778c:	400a      	ands	r2, r1
 800778e:	605a      	str	r2, [r3, #4]
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	00db      	lsls	r3, r3, #3
 8007796:	4a46      	ldr	r2, [pc, #280]	@ (80078b0 <USB_EPStartXfer+0xe98>)
 8007798:	4694      	mov	ip, r2
 800779a:	4463      	add	r3, ip
 800779c:	685a      	ldr	r2, [r3, #4]
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	00db      	lsls	r3, r3, #3
 80077a4:	4942      	ldr	r1, [pc, #264]	@ (80078b0 <USB_EPStartXfer+0xe98>)
 80077a6:	468c      	mov	ip, r1
 80077a8:	4463      	add	r3, ip
 80077aa:	2180      	movs	r1, #128	@ 0x80
 80077ac:	0609      	lsls	r1, r1, #24
 80077ae:	430a      	orrs	r2, r1
 80077b0:	605a      	str	r2, [r3, #4]
 80077b2:	e043      	b.n	800783c <USB_EPStartXfer+0xe24>
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	085b      	lsrs	r3, r3, #1
 80077ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	691b      	ldr	r3, [r3, #16]
 80077c0:	2201      	movs	r2, #1
 80077c2:	4013      	ands	r3, r2
 80077c4:	d002      	beq.n	80077cc <USB_EPStartXfer+0xdb4>
 80077c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c8:	3301      	adds	r3, #1
 80077ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	00db      	lsls	r3, r3, #3
 80077d2:	4a37      	ldr	r2, [pc, #220]	@ (80078b0 <USB_EPStartXfer+0xe98>)
 80077d4:	4694      	mov	ip, r2
 80077d6:	4463      	add	r3, ip
 80077d8:	6859      	ldr	r1, [r3, #4]
 80077da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077dc:	069a      	lsls	r2, r3, #26
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	00db      	lsls	r3, r3, #3
 80077e4:	4832      	ldr	r0, [pc, #200]	@ (80078b0 <USB_EPStartXfer+0xe98>)
 80077e6:	4684      	mov	ip, r0
 80077e8:	4463      	add	r3, ip
 80077ea:	430a      	orrs	r2, r1
 80077ec:	605a      	str	r2, [r3, #4]
 80077ee:	e025      	b.n	800783c <USB_EPStartXfer+0xe24>
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	785b      	ldrb	r3, [r3, #1]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d121      	bne.n	800783c <USB_EPStartXfer+0xe24>
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	00db      	lsls	r3, r3, #3
 80077fe:	4a2c      	ldr	r2, [pc, #176]	@ (80078b0 <USB_EPStartXfer+0xe98>)
 8007800:	4694      	mov	ip, r2
 8007802:	4463      	add	r3, ip
 8007804:	685a      	ldr	r2, [r3, #4]
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	00db      	lsls	r3, r3, #3
 800780c:	4928      	ldr	r1, [pc, #160]	@ (80078b0 <USB_EPStartXfer+0xe98>)
 800780e:	468c      	mov	ip, r1
 8007810:	4463      	add	r3, ip
 8007812:	0412      	lsls	r2, r2, #16
 8007814:	0c12      	lsrs	r2, r2, #16
 8007816:	605a      	str	r2, [r3, #4]
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	00db      	lsls	r3, r3, #3
 800781e:	4a24      	ldr	r2, [pc, #144]	@ (80078b0 <USB_EPStartXfer+0xe98>)
 8007820:	4694      	mov	ip, r2
 8007822:	4463      	add	r3, ip
 8007824:	6859      	ldr	r1, [r3, #4]
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	041a      	lsls	r2, r3, #16
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	00db      	lsls	r3, r3, #3
 8007832:	481f      	ldr	r0, [pc, #124]	@ (80078b0 <USB_EPStartXfer+0xe98>)
 8007834:	4684      	mov	ip, r0
 8007836:	4463      	add	r3, ip
 8007838:	430a      	orrs	r2, r1
 800783a:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	69db      	ldr	r3, [r3, #28]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d100      	bne.n	8007846 <USB_EPStartXfer+0xe2e>
 8007844:	e192      	b.n	8007b6c <USB_EPStartXfer+0x1154>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	18d3      	adds	r3, r2, r3
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	2126      	movs	r1, #38	@ 0x26
 8007854:	187b      	adds	r3, r7, r1
 8007856:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007858:	187b      	adds	r3, r7, r1
 800785a:	881a      	ldrh	r2, [r3, #0]
 800785c:	2380      	movs	r3, #128	@ 0x80
 800785e:	01db      	lsls	r3, r3, #7
 8007860:	4013      	ands	r3, r2
 8007862:	d004      	beq.n	800786e <USB_EPStartXfer+0xe56>
 8007864:	187b      	adds	r3, r7, r1
 8007866:	881b      	ldrh	r3, [r3, #0]
 8007868:	2240      	movs	r2, #64	@ 0x40
 800786a:	4013      	ands	r3, r2
 800786c:	d10d      	bne.n	800788a <USB_EPStartXfer+0xe72>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800786e:	2126      	movs	r1, #38	@ 0x26
 8007870:	187b      	adds	r3, r7, r1
 8007872:	881a      	ldrh	r2, [r3, #0]
 8007874:	2380      	movs	r3, #128	@ 0x80
 8007876:	01db      	lsls	r3, r3, #7
 8007878:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800787a:	d000      	beq.n	800787e <USB_EPStartXfer+0xe66>
 800787c:	e176      	b.n	8007b6c <USB_EPStartXfer+0x1154>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800787e:	187b      	adds	r3, r7, r1
 8007880:	881b      	ldrh	r3, [r3, #0]
 8007882:	2240      	movs	r2, #64	@ 0x40
 8007884:	4013      	ands	r3, r2
 8007886:	d000      	beq.n	800788a <USB_EPStartXfer+0xe72>
 8007888:	e170      	b.n	8007b6c <USB_EPStartXfer+0x1154>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	18d3      	adds	r3, r2, r3
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a08      	ldr	r2, [pc, #32]	@ (80078b8 <USB_EPStartXfer+0xea0>)
 8007898:	4013      	ands	r3, r2
 800789a:	623b      	str	r3, [r7, #32]
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	18d3      	adds	r3, r2, r3
 80078a6:	6a3a      	ldr	r2, [r7, #32]
 80078a8:	4904      	ldr	r1, [pc, #16]	@ (80078bc <USB_EPStartXfer+0xea4>)
 80078aa:	430a      	orrs	r2, r1
 80078ac:	601a      	str	r2, [r3, #0]
 80078ae:	e15d      	b.n	8007b6c <USB_EPStartXfer+0x1154>
 80078b0:	40009800 	.word	0x40009800
 80078b4:	83ffffff 	.word	0x83ffffff
 80078b8:	07ff8f8f 	.word	0x07ff8f8f
 80078bc:	000080c0 	.word	0x000080c0
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	78db      	ldrb	r3, [r3, #3]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d000      	beq.n	80078ca <USB_EPStartXfer+0xeb2>
 80078c8:	e14e      	b.n	8007b68 <USB_EPStartXfer+0x1150>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	699a      	ldr	r2, [r3, #24]
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d909      	bls.n	80078ea <USB_EPStartXfer+0xed2>
        {
          len = ep->maxpacket;
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	699a      	ldr	r2, [r3, #24]
 80078e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078e2:	1ad2      	subs	r2, r2, r3
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	619a      	str	r2, [r3, #24]
 80078e8:	e005      	b.n	80078f6 <USB_EPStartXfer+0xede>
        }
        else
        {
          len = ep->xfer_len;
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	2200      	movs	r2, #0
 80078f4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	785b      	ldrb	r3, [r3, #1]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d172      	bne.n	80079e4 <USB_EPStartXfer+0xfcc>
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	00db      	lsls	r3, r3, #3
 8007904:	4aaa      	ldr	r2, [pc, #680]	@ (8007bb0 <USB_EPStartXfer+0x1198>)
 8007906:	4694      	mov	ip, r2
 8007908:	4463      	add	r3, ip
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	00db      	lsls	r3, r3, #3
 8007912:	49a7      	ldr	r1, [pc, #668]	@ (8007bb0 <USB_EPStartXfer+0x1198>)
 8007914:	468c      	mov	ip, r1
 8007916:	4463      	add	r3, ip
 8007918:	0412      	lsls	r2, r2, #16
 800791a:	0c12      	lsrs	r2, r2, #16
 800791c:	601a      	str	r2, [r3, #0]
 800791e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007920:	2b3e      	cmp	r3, #62	@ 0x3e
 8007922:	d91e      	bls.n	8007962 <USB_EPStartXfer+0xf4a>
 8007924:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007926:	095b      	lsrs	r3, r3, #5
 8007928:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800792a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800792c:	221f      	movs	r2, #31
 800792e:	4013      	ands	r3, r2
 8007930:	d102      	bne.n	8007938 <USB_EPStartXfer+0xf20>
 8007932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007934:	3b01      	subs	r3, #1
 8007936:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	00db      	lsls	r3, r3, #3
 800793e:	4a9c      	ldr	r2, [pc, #624]	@ (8007bb0 <USB_EPStartXfer+0x1198>)
 8007940:	4694      	mov	ip, r2
 8007942:	4463      	add	r3, ip
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007948:	069b      	lsls	r3, r3, #26
 800794a:	431a      	orrs	r2, r3
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	00db      	lsls	r3, r3, #3
 8007952:	4997      	ldr	r1, [pc, #604]	@ (8007bb0 <USB_EPStartXfer+0x1198>)
 8007954:	468c      	mov	ip, r1
 8007956:	4463      	add	r3, ip
 8007958:	2180      	movs	r1, #128	@ 0x80
 800795a:	0609      	lsls	r1, r1, #24
 800795c:	430a      	orrs	r2, r1
 800795e:	601a      	str	r2, [r3, #0]
 8007960:	e065      	b.n	8007a2e <USB_EPStartXfer+0x1016>
 8007962:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007964:	2b00      	cmp	r3, #0
 8007966:	d121      	bne.n	80079ac <USB_EPStartXfer+0xf94>
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	00db      	lsls	r3, r3, #3
 800796e:	4a90      	ldr	r2, [pc, #576]	@ (8007bb0 <USB_EPStartXfer+0x1198>)
 8007970:	4694      	mov	ip, r2
 8007972:	4463      	add	r3, ip
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	00db      	lsls	r3, r3, #3
 800797c:	498c      	ldr	r1, [pc, #560]	@ (8007bb0 <USB_EPStartXfer+0x1198>)
 800797e:	468c      	mov	ip, r1
 8007980:	4463      	add	r3, ip
 8007982:	498c      	ldr	r1, [pc, #560]	@ (8007bb4 <USB_EPStartXfer+0x119c>)
 8007984:	400a      	ands	r2, r1
 8007986:	601a      	str	r2, [r3, #0]
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	00db      	lsls	r3, r3, #3
 800798e:	4a88      	ldr	r2, [pc, #544]	@ (8007bb0 <USB_EPStartXfer+0x1198>)
 8007990:	4694      	mov	ip, r2
 8007992:	4463      	add	r3, ip
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	00db      	lsls	r3, r3, #3
 800799c:	4984      	ldr	r1, [pc, #528]	@ (8007bb0 <USB_EPStartXfer+0x1198>)
 800799e:	468c      	mov	ip, r1
 80079a0:	4463      	add	r3, ip
 80079a2:	2180      	movs	r1, #128	@ 0x80
 80079a4:	0609      	lsls	r1, r1, #24
 80079a6:	430a      	orrs	r2, r1
 80079a8:	601a      	str	r2, [r3, #0]
 80079aa:	e040      	b.n	8007a2e <USB_EPStartXfer+0x1016>
 80079ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079ae:	085b      	lsrs	r3, r3, #1
 80079b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079b4:	2201      	movs	r2, #1
 80079b6:	4013      	ands	r3, r2
 80079b8:	d002      	beq.n	80079c0 <USB_EPStartXfer+0xfa8>
 80079ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079bc:	3301      	adds	r3, #1
 80079be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	00db      	lsls	r3, r3, #3
 80079c6:	4a7a      	ldr	r2, [pc, #488]	@ (8007bb0 <USB_EPStartXfer+0x1198>)
 80079c8:	4694      	mov	ip, r2
 80079ca:	4463      	add	r3, ip
 80079cc:	6819      	ldr	r1, [r3, #0]
 80079ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079d0:	069a      	lsls	r2, r3, #26
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	00db      	lsls	r3, r3, #3
 80079d8:	4875      	ldr	r0, [pc, #468]	@ (8007bb0 <USB_EPStartXfer+0x1198>)
 80079da:	4684      	mov	ip, r0
 80079dc:	4463      	add	r3, ip
 80079de:	430a      	orrs	r2, r1
 80079e0:	601a      	str	r2, [r3, #0]
 80079e2:	e024      	b.n	8007a2e <USB_EPStartXfer+0x1016>
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	785b      	ldrb	r3, [r3, #1]
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d120      	bne.n	8007a2e <USB_EPStartXfer+0x1016>
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	00db      	lsls	r3, r3, #3
 80079f2:	4a6f      	ldr	r2, [pc, #444]	@ (8007bb0 <USB_EPStartXfer+0x1198>)
 80079f4:	4694      	mov	ip, r2
 80079f6:	4463      	add	r3, ip
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	00db      	lsls	r3, r3, #3
 8007a00:	496b      	ldr	r1, [pc, #428]	@ (8007bb0 <USB_EPStartXfer+0x1198>)
 8007a02:	468c      	mov	ip, r1
 8007a04:	4463      	add	r3, ip
 8007a06:	0412      	lsls	r2, r2, #16
 8007a08:	0c12      	lsrs	r2, r2, #16
 8007a0a:	601a      	str	r2, [r3, #0]
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	00db      	lsls	r3, r3, #3
 8007a12:	4a67      	ldr	r2, [pc, #412]	@ (8007bb0 <USB_EPStartXfer+0x1198>)
 8007a14:	4694      	mov	ip, r2
 8007a16:	4463      	add	r3, ip
 8007a18:	6819      	ldr	r1, [r3, #0]
 8007a1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a1c:	041a      	lsls	r2, r3, #16
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	00db      	lsls	r3, r3, #3
 8007a24:	4862      	ldr	r0, [pc, #392]	@ (8007bb0 <USB_EPStartXfer+0x1198>)
 8007a26:	4684      	mov	ip, r0
 8007a28:	4463      	add	r3, ip
 8007a2a:	430a      	orrs	r2, r1
 8007a2c:	601a      	str	r2, [r3, #0]
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	785b      	ldrb	r3, [r3, #1]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d172      	bne.n	8007b1c <USB_EPStartXfer+0x1104>
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	00db      	lsls	r3, r3, #3
 8007a3c:	4a5c      	ldr	r2, [pc, #368]	@ (8007bb0 <USB_EPStartXfer+0x1198>)
 8007a3e:	4694      	mov	ip, r2
 8007a40:	4463      	add	r3, ip
 8007a42:	685a      	ldr	r2, [r3, #4]
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	00db      	lsls	r3, r3, #3
 8007a4a:	4959      	ldr	r1, [pc, #356]	@ (8007bb0 <USB_EPStartXfer+0x1198>)
 8007a4c:	468c      	mov	ip, r1
 8007a4e:	4463      	add	r3, ip
 8007a50:	0412      	lsls	r2, r2, #16
 8007a52:	0c12      	lsrs	r2, r2, #16
 8007a54:	605a      	str	r2, [r3, #4]
 8007a56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a58:	2b3e      	cmp	r3, #62	@ 0x3e
 8007a5a:	d91e      	bls.n	8007a9a <USB_EPStartXfer+0x1082>
 8007a5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a5e:	095b      	lsrs	r3, r3, #5
 8007a60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a64:	221f      	movs	r2, #31
 8007a66:	4013      	ands	r3, r2
 8007a68:	d102      	bne.n	8007a70 <USB_EPStartXfer+0x1058>
 8007a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a6c:	3b01      	subs	r3, #1
 8007a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	00db      	lsls	r3, r3, #3
 8007a76:	4a4e      	ldr	r2, [pc, #312]	@ (8007bb0 <USB_EPStartXfer+0x1198>)
 8007a78:	4694      	mov	ip, r2
 8007a7a:	4463      	add	r3, ip
 8007a7c:	685a      	ldr	r2, [r3, #4]
 8007a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a80:	069b      	lsls	r3, r3, #26
 8007a82:	431a      	orrs	r2, r3
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	00db      	lsls	r3, r3, #3
 8007a8a:	4949      	ldr	r1, [pc, #292]	@ (8007bb0 <USB_EPStartXfer+0x1198>)
 8007a8c:	468c      	mov	ip, r1
 8007a8e:	4463      	add	r3, ip
 8007a90:	2180      	movs	r1, #128	@ 0x80
 8007a92:	0609      	lsls	r1, r1, #24
 8007a94:	430a      	orrs	r2, r1
 8007a96:	605a      	str	r2, [r3, #4]
 8007a98:	e068      	b.n	8007b6c <USB_EPStartXfer+0x1154>
 8007a9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d121      	bne.n	8007ae4 <USB_EPStartXfer+0x10cc>
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	00db      	lsls	r3, r3, #3
 8007aa6:	4a42      	ldr	r2, [pc, #264]	@ (8007bb0 <USB_EPStartXfer+0x1198>)
 8007aa8:	4694      	mov	ip, r2
 8007aaa:	4463      	add	r3, ip
 8007aac:	685a      	ldr	r2, [r3, #4]
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	00db      	lsls	r3, r3, #3
 8007ab4:	493e      	ldr	r1, [pc, #248]	@ (8007bb0 <USB_EPStartXfer+0x1198>)
 8007ab6:	468c      	mov	ip, r1
 8007ab8:	4463      	add	r3, ip
 8007aba:	493e      	ldr	r1, [pc, #248]	@ (8007bb4 <USB_EPStartXfer+0x119c>)
 8007abc:	400a      	ands	r2, r1
 8007abe:	605a      	str	r2, [r3, #4]
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	00db      	lsls	r3, r3, #3
 8007ac6:	4a3a      	ldr	r2, [pc, #232]	@ (8007bb0 <USB_EPStartXfer+0x1198>)
 8007ac8:	4694      	mov	ip, r2
 8007aca:	4463      	add	r3, ip
 8007acc:	685a      	ldr	r2, [r3, #4]
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	00db      	lsls	r3, r3, #3
 8007ad4:	4936      	ldr	r1, [pc, #216]	@ (8007bb0 <USB_EPStartXfer+0x1198>)
 8007ad6:	468c      	mov	ip, r1
 8007ad8:	4463      	add	r3, ip
 8007ada:	2180      	movs	r1, #128	@ 0x80
 8007adc:	0609      	lsls	r1, r1, #24
 8007ade:	430a      	orrs	r2, r1
 8007ae0:	605a      	str	r2, [r3, #4]
 8007ae2:	e043      	b.n	8007b6c <USB_EPStartXfer+0x1154>
 8007ae4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ae6:	085b      	lsrs	r3, r3, #1
 8007ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007aea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007aec:	2201      	movs	r2, #1
 8007aee:	4013      	ands	r3, r2
 8007af0:	d002      	beq.n	8007af8 <USB_EPStartXfer+0x10e0>
 8007af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007af4:	3301      	adds	r3, #1
 8007af6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	00db      	lsls	r3, r3, #3
 8007afe:	4a2c      	ldr	r2, [pc, #176]	@ (8007bb0 <USB_EPStartXfer+0x1198>)
 8007b00:	4694      	mov	ip, r2
 8007b02:	4463      	add	r3, ip
 8007b04:	6859      	ldr	r1, [r3, #4]
 8007b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b08:	069a      	lsls	r2, r3, #26
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	00db      	lsls	r3, r3, #3
 8007b10:	4827      	ldr	r0, [pc, #156]	@ (8007bb0 <USB_EPStartXfer+0x1198>)
 8007b12:	4684      	mov	ip, r0
 8007b14:	4463      	add	r3, ip
 8007b16:	430a      	orrs	r2, r1
 8007b18:	605a      	str	r2, [r3, #4]
 8007b1a:	e027      	b.n	8007b6c <USB_EPStartXfer+0x1154>
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	785b      	ldrb	r3, [r3, #1]
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d123      	bne.n	8007b6c <USB_EPStartXfer+0x1154>
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	00db      	lsls	r3, r3, #3
 8007b2a:	4a21      	ldr	r2, [pc, #132]	@ (8007bb0 <USB_EPStartXfer+0x1198>)
 8007b2c:	4694      	mov	ip, r2
 8007b2e:	4463      	add	r3, ip
 8007b30:	685a      	ldr	r2, [r3, #4]
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	00db      	lsls	r3, r3, #3
 8007b38:	491d      	ldr	r1, [pc, #116]	@ (8007bb0 <USB_EPStartXfer+0x1198>)
 8007b3a:	468c      	mov	ip, r1
 8007b3c:	4463      	add	r3, ip
 8007b3e:	0412      	lsls	r2, r2, #16
 8007b40:	0c12      	lsrs	r2, r2, #16
 8007b42:	605a      	str	r2, [r3, #4]
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	00db      	lsls	r3, r3, #3
 8007b4a:	4a19      	ldr	r2, [pc, #100]	@ (8007bb0 <USB_EPStartXfer+0x1198>)
 8007b4c:	4694      	mov	ip, r2
 8007b4e:	4463      	add	r3, ip
 8007b50:	6859      	ldr	r1, [r3, #4]
 8007b52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b54:	041a      	lsls	r2, r3, #16
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	00db      	lsls	r3, r3, #3
 8007b5c:	4814      	ldr	r0, [pc, #80]	@ (8007bb0 <USB_EPStartXfer+0x1198>)
 8007b5e:	4684      	mov	ip, r0
 8007b60:	4463      	add	r3, ip
 8007b62:	430a      	orrs	r2, r1
 8007b64:	605a      	str	r2, [r3, #4]
 8007b66:	e001      	b.n	8007b6c <USB_EPStartXfer+0x1154>
      }
      else
      {
        return HAL_ERROR;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e01c      	b.n	8007ba6 <USB_EPStartXfer+0x118e>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	18d3      	adds	r3, r2, r3
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a0f      	ldr	r2, [pc, #60]	@ (8007bb8 <USB_EPStartXfer+0x11a0>)
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	61fb      	str	r3, [r7, #28]
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	2280      	movs	r2, #128	@ 0x80
 8007b82:	0152      	lsls	r2, r2, #5
 8007b84:	4053      	eors	r3, r2
 8007b86:	61fb      	str	r3, [r7, #28]
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	2280      	movs	r2, #128	@ 0x80
 8007b8c:	0192      	lsls	r2, r2, #6
 8007b8e:	4053      	eors	r3, r2
 8007b90:	61fb      	str	r3, [r7, #28]
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	18d3      	adds	r3, r2, r3
 8007b9c:	69fa      	ldr	r2, [r7, #28]
 8007b9e:	4907      	ldr	r1, [pc, #28]	@ (8007bbc <USB_EPStartXfer+0x11a4>)
 8007ba0:	430a      	orrs	r2, r1
 8007ba2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	0018      	movs	r0, r3
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	b017      	add	sp, #92	@ 0x5c
 8007bac:	bd90      	pop	{r4, r7, pc}
 8007bae:	46c0      	nop			@ (mov r8, r8)
 8007bb0:	40009800 	.word	0x40009800
 8007bb4:	83ffffff 	.word	0x83ffffff
 8007bb8:	07ffbf8f 	.word	0x07ffbf8f
 8007bbc:	00008080 	.word	0x00008080

08007bc0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	785b      	ldrb	r3, [r3, #1]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d016      	beq.n	8007c00 <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	18d3      	adds	r3, r2, r3
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a16      	ldr	r2, [pc, #88]	@ (8007c38 <USB_EPSetStall+0x78>)
 8007be0:	4013      	ands	r3, r2
 8007be2:	60bb      	str	r3, [r7, #8]
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	2210      	movs	r2, #16
 8007be8:	4053      	eors	r3, r2
 8007bea:	60bb      	str	r3, [r7, #8]
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	18d3      	adds	r3, r2, r3
 8007bf6:	68ba      	ldr	r2, [r7, #8]
 8007bf8:	4910      	ldr	r1, [pc, #64]	@ (8007c3c <USB_EPSetStall+0x7c>)
 8007bfa:	430a      	orrs	r2, r1
 8007bfc:	601a      	str	r2, [r3, #0]
 8007bfe:	e016      	b.n	8007c2e <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	18d3      	adds	r3, r2, r3
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a0c      	ldr	r2, [pc, #48]	@ (8007c40 <USB_EPSetStall+0x80>)
 8007c0e:	4013      	ands	r3, r2
 8007c10:	60fb      	str	r3, [r7, #12]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2280      	movs	r2, #128	@ 0x80
 8007c16:	0152      	lsls	r2, r2, #5
 8007c18:	4053      	eors	r3, r2
 8007c1a:	60fb      	str	r3, [r7, #12]
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	18d3      	adds	r3, r2, r3
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	4904      	ldr	r1, [pc, #16]	@ (8007c3c <USB_EPSetStall+0x7c>)
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	0018      	movs	r0, r3
 8007c32:	46bd      	mov	sp, r7
 8007c34:	b004      	add	sp, #16
 8007c36:	bd80      	pop	{r7, pc}
 8007c38:	07ff8fbf 	.word	0x07ff8fbf
 8007c3c:	00008080 	.word	0x00008080
 8007c40:	07ffbf8f 	.word	0x07ffbf8f

08007c44 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b088      	sub	sp, #32
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	7a9b      	ldrb	r3, [r3, #10]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d000      	beq.n	8007c58 <USB_EPClearStall+0x14>
 8007c56:	e075      	b.n	8007d44 <USB_EPClearStall+0x100>
  {
    if (ep->is_in != 0U)
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	785b      	ldrb	r3, [r3, #1]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d037      	beq.n	8007cd0 <USB_EPClearStall+0x8c>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	18d3      	adds	r3, r2, r3
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	613b      	str	r3, [r7, #16]
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	2240      	movs	r2, #64	@ 0x40
 8007c72:	4013      	ands	r3, r2
 8007c74:	d011      	beq.n	8007c9a <USB_EPClearStall+0x56>
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	18d3      	adds	r3, r2, r3
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a33      	ldr	r2, [pc, #204]	@ (8007d50 <USB_EPClearStall+0x10c>)
 8007c84:	4013      	ands	r3, r2
 8007c86:	60fb      	str	r3, [r7, #12]
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	18d3      	adds	r3, r2, r3
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	492f      	ldr	r1, [pc, #188]	@ (8007d54 <USB_EPClearStall+0x110>)
 8007c96:	430a      	orrs	r2, r1
 8007c98:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	78db      	ldrb	r3, [r3, #3]
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d050      	beq.n	8007d44 <USB_EPClearStall+0x100>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	18d3      	adds	r3, r2, r3
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a2a      	ldr	r2, [pc, #168]	@ (8007d58 <USB_EPClearStall+0x114>)
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	60bb      	str	r3, [r7, #8]
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	2220      	movs	r2, #32
 8007cb8:	4053      	eors	r3, r2
 8007cba:	60bb      	str	r3, [r7, #8]
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	18d3      	adds	r3, r2, r3
 8007cc6:	68ba      	ldr	r2, [r7, #8]
 8007cc8:	4924      	ldr	r1, [pc, #144]	@ (8007d5c <USB_EPClearStall+0x118>)
 8007cca:	430a      	orrs	r2, r1
 8007ccc:	601a      	str	r2, [r3, #0]
 8007cce:	e039      	b.n	8007d44 <USB_EPClearStall+0x100>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	18d3      	adds	r3, r2, r3
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	61fb      	str	r3, [r7, #28]
 8007cde:	69fa      	ldr	r2, [r7, #28]
 8007ce0:	2380      	movs	r3, #128	@ 0x80
 8007ce2:	01db      	lsls	r3, r3, #7
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	d011      	beq.n	8007d0c <USB_EPClearStall+0xc8>
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	18d3      	adds	r3, r2, r3
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a16      	ldr	r2, [pc, #88]	@ (8007d50 <USB_EPClearStall+0x10c>)
 8007cf6:	4013      	ands	r3, r2
 8007cf8:	61bb      	str	r3, [r7, #24]
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	18d3      	adds	r3, r2, r3
 8007d04:	69ba      	ldr	r2, [r7, #24]
 8007d06:	4916      	ldr	r1, [pc, #88]	@ (8007d60 <USB_EPClearStall+0x11c>)
 8007d08:	430a      	orrs	r2, r1
 8007d0a:	601a      	str	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	18d3      	adds	r3, r2, r3
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a12      	ldr	r2, [pc, #72]	@ (8007d64 <USB_EPClearStall+0x120>)
 8007d1a:	4013      	ands	r3, r2
 8007d1c:	617b      	str	r3, [r7, #20]
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	2280      	movs	r2, #128	@ 0x80
 8007d22:	0152      	lsls	r2, r2, #5
 8007d24:	4053      	eors	r3, r2
 8007d26:	617b      	str	r3, [r7, #20]
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	2280      	movs	r2, #128	@ 0x80
 8007d2c:	0192      	lsls	r2, r2, #6
 8007d2e:	4053      	eors	r3, r2
 8007d30:	617b      	str	r3, [r7, #20]
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	18d3      	adds	r3, r2, r3
 8007d3c:	697a      	ldr	r2, [r7, #20]
 8007d3e:	4907      	ldr	r1, [pc, #28]	@ (8007d5c <USB_EPClearStall+0x118>)
 8007d40:	430a      	orrs	r2, r1
 8007d42:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	0018      	movs	r0, r3
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	b008      	add	sp, #32
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	46c0      	nop			@ (mov r8, r8)
 8007d50:	07ff8f8f 	.word	0x07ff8f8f
 8007d54:	000080c0 	.word	0x000080c0
 8007d58:	07ff8fbf 	.word	0x07ff8fbf
 8007d5c:	00008080 	.word	0x00008080
 8007d60:	0000c080 	.word	0x0000c080
 8007d64:	07ffbf8f 	.word	0x07ffbf8f

08007d68 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	000a      	movs	r2, r1
 8007d72:	1cfb      	adds	r3, r7, #3
 8007d74:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8007d76:	1cfb      	adds	r3, r7, #3
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d102      	bne.n	8007d84 <USB_SetDevAddress+0x1c>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2280      	movs	r2, #128	@ 0x80
 8007d82:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	0018      	movs	r0, r3
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	b002      	add	sp, #8
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b082      	sub	sp, #8
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d9a:	2280      	movs	r2, #128	@ 0x80
 8007d9c:	0212      	lsls	r2, r2, #8
 8007d9e:	431a      	orrs	r2, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	0018      	movs	r0, r3
 8007da8:	46bd      	mov	sp, r7
 8007daa:	b002      	add	sp, #8
 8007dac:	bd80      	pop	{r7, pc}

08007dae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef *USBx)
{
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b084      	sub	sp, #16
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dba:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
}
 8007dbe:	0018      	movs	r0, r3
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	b004      	add	sp, #16
 8007dc4:	bd80      	pop	{r7, pc}
	...

08007dc8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b08a      	sub	sp, #40	@ 0x28
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	0019      	movs	r1, r3
 8007dd4:	1dbb      	adds	r3, r7, #6
 8007dd6:	801a      	strh	r2, [r3, #0]
 8007dd8:	1d3b      	adds	r3, r7, #4
 8007dda:	1c0a      	adds	r2, r1, #0
 8007ddc:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8007dde:	1d3b      	adds	r3, r7, #4
 8007de0:	881b      	ldrh	r3, [r3, #0]
 8007de2:	3303      	adds	r3, #3
 8007de4:	089b      	lsrs	r3, r3, #2
 8007de6:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8007de8:	2016      	movs	r0, #22
 8007dea:	183b      	adds	r3, r7, r0
 8007dec:	1d3a      	adds	r2, r7, #4
 8007dee:	8812      	ldrh	r2, [r2, #0]
 8007df0:	2103      	movs	r1, #3
 8007df2:	400a      	ands	r2, r1
 8007df4:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 8007dfa:	183b      	adds	r3, r7, r0
 8007dfc:	881b      	ldrh	r3, [r3, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d002      	beq.n	8007e08 <USB_WritePMA+0x40>
  {
    NbWords--;
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	3b01      	subs	r3, #1
 8007e06:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8007e08:	1dbb      	adds	r3, r7, #6
 8007e0a:	881b      	ldrh	r3, [r3, #0]
 8007e0c:	4a28      	ldr	r2, [pc, #160]	@ (8007eb0 <USB_WritePMA+0xe8>)
 8007e0e:	4694      	mov	ip, r2
 8007e10:	4463      	add	r3, ip
 8007e12:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	623b      	str	r3, [r7, #32]
 8007e18:	e01f      	b.n	8007e5a <USB_WritePMA+0x92>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	781a      	ldrb	r2, [r3, #0]
 8007e1e:	7859      	ldrb	r1, [r3, #1]
 8007e20:	0209      	lsls	r1, r1, #8
 8007e22:	430a      	orrs	r2, r1
 8007e24:	7899      	ldrb	r1, [r3, #2]
 8007e26:	0409      	lsls	r1, r1, #16
 8007e28:	430a      	orrs	r2, r1
 8007e2a:	78db      	ldrb	r3, [r3, #3]
 8007e2c:	061b      	lsls	r3, r3, #24
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	001a      	movs	r2, r3
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	601a      	str	r2, [r3, #0]
    pdwVal++;
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	3304      	adds	r3, #4
 8007e3a:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	613b      	str	r3, [r7, #16]
    pBuf++;
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	3301      	adds	r3, #1
 8007e46:	613b      	str	r3, [r7, #16]
    pBuf++;
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	613b      	str	r3, [r7, #16]
    pBuf++;
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	3301      	adds	r3, #1
 8007e52:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 8007e54:	6a3b      	ldr	r3, [r7, #32]
 8007e56:	3b01      	subs	r3, #1
 8007e58:	623b      	str	r3, [r7, #32]
 8007e5a:	6a3b      	ldr	r3, [r7, #32]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d1dc      	bne.n	8007e1a <USB_WritePMA+0x52>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 8007e60:	2316      	movs	r3, #22
 8007e62:	18fb      	adds	r3, r7, r3
 8007e64:	881b      	ldrh	r3, [r3, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d01e      	beq.n	8007ea8 <USB_WritePMA+0xe0>
  {
    WrVal = 0U;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	001a      	movs	r2, r3
 8007e74:	6a3b      	ldr	r3, [r7, #32]
 8007e76:	00db      	lsls	r3, r3, #3
 8007e78:	409a      	lsls	r2, r3
 8007e7a:	0013      	movs	r3, r2
 8007e7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 8007e82:	6a3b      	ldr	r3, [r7, #32]
 8007e84:	3301      	adds	r3, #1
 8007e86:	623b      	str	r3, [r7, #32]
      pBuf++;
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 8007e8e:	2116      	movs	r1, #22
 8007e90:	187b      	adds	r3, r7, r1
 8007e92:	881a      	ldrh	r2, [r3, #0]
 8007e94:	187b      	adds	r3, r7, r1
 8007e96:	3a01      	subs	r2, #1
 8007e98:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 8007e9a:	187b      	adds	r3, r7, r1
 8007e9c:	881b      	ldrh	r3, [r3, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d1e5      	bne.n	8007e6e <USB_WritePMA+0xa6>

    *pdwVal = WrVal;
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ea6:	601a      	str	r2, [r3, #0]
  }
}
 8007ea8:	46c0      	nop			@ (mov r8, r8)
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	b00a      	add	sp, #40	@ 0x28
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	40009800 	.word	0x40009800

08007eb4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007eb4:	b590      	push	{r4, r7, lr}
 8007eb6:	b08b      	sub	sp, #44	@ 0x2c
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	0019      	movs	r1, r3
 8007ec0:	1dbb      	adds	r3, r7, #6
 8007ec2:	801a      	strh	r2, [r3, #0]
 8007ec4:	1d3b      	adds	r3, r7, #4
 8007ec6:	1c0a      	adds	r2, r1, #0
 8007ec8:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8007eca:	1d3b      	adds	r3, r7, #4
 8007ecc:	881b      	ldrh	r3, [r3, #0]
 8007ece:	3303      	adds	r3, #3
 8007ed0:	089b      	lsrs	r3, r3, #2
 8007ed2:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8007ed4:	201a      	movs	r0, #26
 8007ed6:	183b      	adds	r3, r7, r0
 8007ed8:	1d3a      	adds	r2, r7, #4
 8007eda:	8812      	ldrh	r2, [r2, #0]
 8007edc:	2103      	movs	r1, #3
 8007ede:	400a      	ands	r2, r1
 8007ee0:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8007ee6:	1dbb      	adds	r3, r7, #6
 8007ee8:	881b      	ldrh	r3, [r3, #0]
 8007eea:	4a39      	ldr	r2, [pc, #228]	@ (8007fd0 <USB_ReadPMA+0x11c>)
 8007eec:	4694      	mov	ip, r2
 8007eee:	4463      	add	r3, ip
 8007ef0:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 8007ef2:	183b      	adds	r3, r7, r0
 8007ef4:	881b      	ldrh	r3, [r3, #0]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d002      	beq.n	8007f00 <USB_ReadPMA+0x4c>
  {
    NbWords--;
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	3b01      	subs	r3, #1
 8007efe:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f04:	e03c      	b.n	8007f80 <USB_ReadPMA+0xcc>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 8007f06:	6a3b      	ldr	r3, [r7, #32]
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	21ff      	movs	r1, #255	@ 0xff
 8007f0e:	4011      	ands	r1, r2
 8007f10:	000c      	movs	r4, r1
 8007f12:	7819      	ldrb	r1, [r3, #0]
 8007f14:	2000      	movs	r0, #0
 8007f16:	4001      	ands	r1, r0
 8007f18:	1c08      	adds	r0, r1, #0
 8007f1a:	1c21      	adds	r1, r4, #0
 8007f1c:	4301      	orrs	r1, r0
 8007f1e:	7019      	strb	r1, [r3, #0]
 8007f20:	0a11      	lsrs	r1, r2, #8
 8007f22:	20ff      	movs	r0, #255	@ 0xff
 8007f24:	4001      	ands	r1, r0
 8007f26:	000c      	movs	r4, r1
 8007f28:	7859      	ldrb	r1, [r3, #1]
 8007f2a:	2000      	movs	r0, #0
 8007f2c:	4001      	ands	r1, r0
 8007f2e:	1c08      	adds	r0, r1, #0
 8007f30:	1c21      	adds	r1, r4, #0
 8007f32:	4301      	orrs	r1, r0
 8007f34:	7059      	strb	r1, [r3, #1]
 8007f36:	0c11      	lsrs	r1, r2, #16
 8007f38:	20ff      	movs	r0, #255	@ 0xff
 8007f3a:	4001      	ands	r1, r0
 8007f3c:	000c      	movs	r4, r1
 8007f3e:	7899      	ldrb	r1, [r3, #2]
 8007f40:	2000      	movs	r0, #0
 8007f42:	4001      	ands	r1, r0
 8007f44:	1c08      	adds	r0, r1, #0
 8007f46:	1c21      	adds	r1, r4, #0
 8007f48:	4301      	orrs	r1, r0
 8007f4a:	7099      	strb	r1, [r3, #2]
 8007f4c:	0e10      	lsrs	r0, r2, #24
 8007f4e:	78da      	ldrb	r2, [r3, #3]
 8007f50:	2100      	movs	r1, #0
 8007f52:	400a      	ands	r2, r1
 8007f54:	1c11      	adds	r1, r2, #0
 8007f56:	1c02      	adds	r2, r0, #0
 8007f58:	430a      	orrs	r2, r1
 8007f5a:	70da      	strb	r2, [r3, #3]

    pdwVal++;
 8007f5c:	6a3b      	ldr	r3, [r7, #32]
 8007f5e:	3304      	adds	r3, #4
 8007f60:	623b      	str	r3, [r7, #32]
    pBuf++;
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	3301      	adds	r3, #1
 8007f66:	617b      	str	r3, [r7, #20]
    pBuf++;
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	617b      	str	r3, [r7, #20]
    pBuf++;
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	3301      	adds	r3, #1
 8007f72:	617b      	str	r3, [r7, #20]
    pBuf++;
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	3301      	adds	r3, #1
 8007f78:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 8007f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1bf      	bne.n	8007f06 <USB_ReadPMA+0x52>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 8007f86:	231a      	movs	r3, #26
 8007f88:	18fb      	adds	r3, r7, r3
 8007f8a:	881b      	ldrh	r3, [r3, #0]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d01b      	beq.n	8007fc8 <USB_ReadPMA+0x114>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 8007f90:	6a3b      	ldr	r3, [r7, #32]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 8007f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	00db      	lsls	r3, r3, #3
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	40da      	lsrs	r2, r3
 8007fa0:	0013      	movs	r3, r2
 8007fa2:	b2da      	uxtb	r2, r3
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	701a      	strb	r2, [r3, #0]
      count++;
 8007fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007faa:	3301      	adds	r3, #1
 8007fac:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 8007fb4:	211a      	movs	r1, #26
 8007fb6:	187b      	adds	r3, r7, r1
 8007fb8:	881a      	ldrh	r2, [r3, #0]
 8007fba:	187b      	adds	r3, r7, r1
 8007fbc:	3a01      	subs	r2, #1
 8007fbe:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 8007fc0:	187b      	adds	r3, r7, r1
 8007fc2:	881b      	ldrh	r3, [r3, #0]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d1e6      	bne.n	8007f96 <USB_ReadPMA+0xe2>
  }
}
 8007fc8:	46c0      	nop			@ (mov r8, r8)
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	b00b      	add	sp, #44	@ 0x2c
 8007fce:	bd90      	pop	{r4, r7, pc}
 8007fd0:	40009800 	.word	0x40009800

08007fd4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	000a      	movs	r2, r1
 8007fde:	1cfb      	adds	r3, r7, #3
 8007fe0:	701a      	strb	r2, [r3, #0]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007fe2:	2387      	movs	r3, #135	@ 0x87
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	0018      	movs	r0, r3
 8007fe8:	f002 ff0a 	bl	800ae00 <USBD_static_malloc>
 8007fec:	0003      	movs	r3, r0
 8007fee:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d10a      	bne.n	800800c <USBD_CDC_Init+0x38>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	23b5      	movs	r3, #181	@ 0xb5
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	58d2      	ldr	r2, [r2, r3]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	32b0      	adds	r2, #176	@ 0xb0
 8008002:	0092      	lsls	r2, r2, #2
 8008004:	2100      	movs	r1, #0
 8008006:	50d1      	str	r1, [r2, r3]
    return (uint8_t)USBD_EMEM;
 8008008:	2302      	movs	r3, #2
 800800a:	e0e9      	b.n	80081e0 <USBD_CDC_Init+0x20c>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800800c:	2387      	movs	r3, #135	@ 0x87
 800800e:	009a      	lsls	r2, r3, #2
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2100      	movs	r1, #0
 8008014:	0018      	movs	r0, r3
 8008016:	f002 ff67 	bl	800aee8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	23b5      	movs	r3, #181	@ 0xb5
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	58d2      	ldr	r2, [r2, r3]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	32b0      	adds	r2, #176	@ 0xb0
 8008026:	0092      	lsls	r2, r2, #2
 8008028:	68f9      	ldr	r1, [r7, #12]
 800802a:	50d1      	str	r1, [r2, r3]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	23b5      	movs	r3, #181	@ 0xb5
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	58d2      	ldr	r2, [r2, r3]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	32b0      	adds	r2, #176	@ 0xb0
 8008038:	0092      	lsls	r2, r2, #2
 800803a:	58d1      	ldr	r1, [r2, r3]
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	23af      	movs	r3, #175	@ 0xaf
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	50d1      	str	r1, [r2, r3]
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	7c1b      	ldrb	r3, [r3, #16]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d13c      	bne.n	80080c6 <USBD_CDC_Init+0xf2>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800804c:	4b66      	ldr	r3, [pc, #408]	@ (80081e8 <USBD_CDC_Init+0x214>)
 800804e:	7819      	ldrb	r1, [r3, #0]
 8008050:	2380      	movs	r3, #128	@ 0x80
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	2202      	movs	r2, #2
 8008058:	f002 fd47 	bl	800aaea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800805c:	4b62      	ldr	r3, [pc, #392]	@ (80081e8 <USBD_CDC_Init+0x214>)
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	001a      	movs	r2, r3
 8008062:	230f      	movs	r3, #15
 8008064:	401a      	ands	r2, r3
 8008066:	6879      	ldr	r1, [r7, #4]
 8008068:	0013      	movs	r3, r2
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	189b      	adds	r3, r3, r2
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	18cb      	adds	r3, r1, r3
 8008072:	3324      	adds	r3, #36	@ 0x24
 8008074:	2201      	movs	r2, #1
 8008076:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008078:	4b5c      	ldr	r3, [pc, #368]	@ (80081ec <USBD_CDC_Init+0x218>)
 800807a:	7819      	ldrb	r1, [r3, #0]
 800807c:	2380      	movs	r3, #128	@ 0x80
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	2202      	movs	r2, #2
 8008084:	f002 fd31 	bl	800aaea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008088:	4b58      	ldr	r3, [pc, #352]	@ (80081ec <USBD_CDC_Init+0x218>)
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	001a      	movs	r2, r3
 800808e:	230f      	movs	r3, #15
 8008090:	401a      	ands	r2, r3
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	23b2      	movs	r3, #178	@ 0xb2
 8008096:	0059      	lsls	r1, r3, #1
 8008098:	0013      	movs	r3, r2
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	189b      	adds	r3, r3, r2
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	18c3      	adds	r3, r0, r3
 80080a2:	185b      	adds	r3, r3, r1
 80080a4:	2201      	movs	r2, #1
 80080a6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80080a8:	4b51      	ldr	r3, [pc, #324]	@ (80081f0 <USBD_CDC_Init+0x21c>)
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	001a      	movs	r2, r3
 80080ae:	230f      	movs	r3, #15
 80080b0:	401a      	ands	r2, r3
 80080b2:	6879      	ldr	r1, [r7, #4]
 80080b4:	0013      	movs	r3, r2
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	189b      	adds	r3, r3, r2
 80080ba:	009b      	lsls	r3, r3, #2
 80080bc:	18cb      	adds	r3, r1, r3
 80080be:	3326      	adds	r3, #38	@ 0x26
 80080c0:	2210      	movs	r2, #16
 80080c2:	801a      	strh	r2, [r3, #0]
 80080c4:	e039      	b.n	800813a <USBD_CDC_Init+0x166>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80080c6:	4b48      	ldr	r3, [pc, #288]	@ (80081e8 <USBD_CDC_Init+0x214>)
 80080c8:	7819      	ldrb	r1, [r3, #0]
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	2340      	movs	r3, #64	@ 0x40
 80080ce:	2202      	movs	r2, #2
 80080d0:	f002 fd0b 	bl	800aaea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80080d4:	4b44      	ldr	r3, [pc, #272]	@ (80081e8 <USBD_CDC_Init+0x214>)
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	001a      	movs	r2, r3
 80080da:	230f      	movs	r3, #15
 80080dc:	401a      	ands	r2, r3
 80080de:	6879      	ldr	r1, [r7, #4]
 80080e0:	0013      	movs	r3, r2
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	189b      	adds	r3, r3, r2
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	18cb      	adds	r3, r1, r3
 80080ea:	3324      	adds	r3, #36	@ 0x24
 80080ec:	2201      	movs	r2, #1
 80080ee:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80080f0:	4b3e      	ldr	r3, [pc, #248]	@ (80081ec <USBD_CDC_Init+0x218>)
 80080f2:	7819      	ldrb	r1, [r3, #0]
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	2340      	movs	r3, #64	@ 0x40
 80080f8:	2202      	movs	r2, #2
 80080fa:	f002 fcf6 	bl	800aaea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80080fe:	4b3b      	ldr	r3, [pc, #236]	@ (80081ec <USBD_CDC_Init+0x218>)
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	001a      	movs	r2, r3
 8008104:	230f      	movs	r3, #15
 8008106:	401a      	ands	r2, r3
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	23b2      	movs	r3, #178	@ 0xb2
 800810c:	0059      	lsls	r1, r3, #1
 800810e:	0013      	movs	r3, r2
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	189b      	adds	r3, r3, r2
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	18c3      	adds	r3, r0, r3
 8008118:	185b      	adds	r3, r3, r1
 800811a:	2201      	movs	r2, #1
 800811c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800811e:	4b34      	ldr	r3, [pc, #208]	@ (80081f0 <USBD_CDC_Init+0x21c>)
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	001a      	movs	r2, r3
 8008124:	230f      	movs	r3, #15
 8008126:	401a      	ands	r2, r3
 8008128:	6879      	ldr	r1, [r7, #4]
 800812a:	0013      	movs	r3, r2
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	189b      	adds	r3, r3, r2
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	18cb      	adds	r3, r1, r3
 8008134:	3326      	adds	r3, #38	@ 0x26
 8008136:	2210      	movs	r2, #16
 8008138:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800813a:	4b2d      	ldr	r3, [pc, #180]	@ (80081f0 <USBD_CDC_Init+0x21c>)
 800813c:	7819      	ldrb	r1, [r3, #0]
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	2308      	movs	r3, #8
 8008142:	2203      	movs	r2, #3
 8008144:	f002 fcd1 	bl	800aaea <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008148:	4b29      	ldr	r3, [pc, #164]	@ (80081f0 <USBD_CDC_Init+0x21c>)
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	001a      	movs	r2, r3
 800814e:	230f      	movs	r3, #15
 8008150:	401a      	ands	r2, r3
 8008152:	6879      	ldr	r1, [r7, #4]
 8008154:	0013      	movs	r3, r2
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	189b      	adds	r3, r3, r2
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	18cb      	adds	r3, r1, r3
 800815e:	3324      	adds	r3, #36	@ 0x24
 8008160:	2201      	movs	r2, #1
 8008162:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	2381      	movs	r3, #129	@ 0x81
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	2100      	movs	r1, #0
 800816c:	50d1      	str	r1, [r2, r3]

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	23b5      	movs	r3, #181	@ 0xb5
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	58d3      	ldr	r3, [r2, r3]
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	33b0      	adds	r3, #176	@ 0xb0
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	18d3      	adds	r3, r2, r3
 800817e:	3304      	adds	r3, #4
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	2385      	movs	r3, #133	@ 0x85
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	2100      	movs	r1, #0
 800818e:	50d1      	str	r1, [r2, r3]
  hcdc->RxState = 0U;
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	2386      	movs	r3, #134	@ 0x86
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	2100      	movs	r1, #0
 8008198:	50d1      	str	r1, [r2, r3]

  if (hcdc->RxBuffer == NULL)
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	2381      	movs	r3, #129	@ 0x81
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	58d3      	ldr	r3, [r2, r3]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d101      	bne.n	80081aa <USBD_CDC_Init+0x1d6>
  {
    return (uint8_t)USBD_EMEM;
 80081a6:	2302      	movs	r3, #2
 80081a8:	e01a      	b.n	80081e0 <USBD_CDC_Init+0x20c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	7c1b      	ldrb	r3, [r3, #16]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d10b      	bne.n	80081ca <USBD_CDC_Init+0x1f6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80081b2:	4b0e      	ldr	r3, [pc, #56]	@ (80081ec <USBD_CDC_Init+0x218>)
 80081b4:	7819      	ldrb	r1, [r3, #0]
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	2381      	movs	r3, #129	@ 0x81
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	58d2      	ldr	r2, [r2, r3]
 80081be:	2380      	movs	r3, #128	@ 0x80
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f002 fdd5 	bl	800ad72 <USBD_LL_PrepareReceive>
 80081c8:	e009      	b.n	80081de <USBD_CDC_Init+0x20a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80081ca:	4b08      	ldr	r3, [pc, #32]	@ (80081ec <USBD_CDC_Init+0x218>)
 80081cc:	7819      	ldrb	r1, [r3, #0]
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	2381      	movs	r3, #129	@ 0x81
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	58d2      	ldr	r2, [r2, r3]
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	2340      	movs	r3, #64	@ 0x40
 80081da:	f002 fdca 	bl	800ad72 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	0018      	movs	r0, r3
 80081e2:	46bd      	mov	sp, r7
 80081e4:	b004      	add	sp, #16
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	200000c3 	.word	0x200000c3
 80081ec:	200000c4 	.word	0x200000c4
 80081f0:	200000c5 	.word	0x200000c5

080081f4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	000a      	movs	r2, r1
 80081fe:	1cfb      	adds	r3, r7, #3
 8008200:	701a      	strb	r2, [r3, #0]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008202:	4b41      	ldr	r3, [pc, #260]	@ (8008308 <USBD_CDC_DeInit+0x114>)
 8008204:	781a      	ldrb	r2, [r3, #0]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	0011      	movs	r1, r2
 800820a:	0018      	movs	r0, r3
 800820c:	f002 fca4 	bl	800ab58 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008210:	4b3d      	ldr	r3, [pc, #244]	@ (8008308 <USBD_CDC_DeInit+0x114>)
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	001a      	movs	r2, r3
 8008216:	230f      	movs	r3, #15
 8008218:	401a      	ands	r2, r3
 800821a:	6879      	ldr	r1, [r7, #4]
 800821c:	0013      	movs	r3, r2
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	189b      	adds	r3, r3, r2
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	18cb      	adds	r3, r1, r3
 8008226:	3324      	adds	r3, #36	@ 0x24
 8008228:	2200      	movs	r2, #0
 800822a:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800822c:	4b37      	ldr	r3, [pc, #220]	@ (800830c <USBD_CDC_DeInit+0x118>)
 800822e:	781a      	ldrb	r2, [r3, #0]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	0011      	movs	r1, r2
 8008234:	0018      	movs	r0, r3
 8008236:	f002 fc8f 	bl	800ab58 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800823a:	4b34      	ldr	r3, [pc, #208]	@ (800830c <USBD_CDC_DeInit+0x118>)
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	001a      	movs	r2, r3
 8008240:	230f      	movs	r3, #15
 8008242:	401a      	ands	r2, r3
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	23b2      	movs	r3, #178	@ 0xb2
 8008248:	0059      	lsls	r1, r3, #1
 800824a:	0013      	movs	r3, r2
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	189b      	adds	r3, r3, r2
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	18c3      	adds	r3, r0, r3
 8008254:	185b      	adds	r3, r3, r1
 8008256:	2200      	movs	r2, #0
 8008258:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800825a:	4b2d      	ldr	r3, [pc, #180]	@ (8008310 <USBD_CDC_DeInit+0x11c>)
 800825c:	781a      	ldrb	r2, [r3, #0]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	0011      	movs	r1, r2
 8008262:	0018      	movs	r0, r3
 8008264:	f002 fc78 	bl	800ab58 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008268:	4b29      	ldr	r3, [pc, #164]	@ (8008310 <USBD_CDC_DeInit+0x11c>)
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	001a      	movs	r2, r3
 800826e:	230f      	movs	r3, #15
 8008270:	401a      	ands	r2, r3
 8008272:	6879      	ldr	r1, [r7, #4]
 8008274:	0013      	movs	r3, r2
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	189b      	adds	r3, r3, r2
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	18cb      	adds	r3, r1, r3
 800827e:	3324      	adds	r3, #36	@ 0x24
 8008280:	2200      	movs	r2, #0
 8008282:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008284:	4b22      	ldr	r3, [pc, #136]	@ (8008310 <USBD_CDC_DeInit+0x11c>)
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	001a      	movs	r2, r3
 800828a:	230f      	movs	r3, #15
 800828c:	401a      	ands	r2, r3
 800828e:	6879      	ldr	r1, [r7, #4]
 8008290:	0013      	movs	r3, r2
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	189b      	adds	r3, r3, r2
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	18cb      	adds	r3, r1, r3
 800829a:	3326      	adds	r3, #38	@ 0x26
 800829c:	2200      	movs	r2, #0
 800829e:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	23b5      	movs	r3, #181	@ 0xb5
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	58d2      	ldr	r2, [r2, r3]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	32b0      	adds	r2, #176	@ 0xb0
 80082ac:	0092      	lsls	r2, r2, #2
 80082ae:	58d3      	ldr	r3, [r2, r3]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d024      	beq.n	80082fe <USBD_CDC_DeInit+0x10a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	23b5      	movs	r3, #181	@ 0xb5
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	58d3      	ldr	r3, [r2, r3]
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	33b0      	adds	r3, #176	@ 0xb0
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	18d3      	adds	r3, r2, r3
 80082c4:	3304      	adds	r3, #4
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	23b5      	movs	r3, #181	@ 0xb5
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	58d2      	ldr	r2, [r2, r3]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	32b0      	adds	r2, #176	@ 0xb0
 80082d8:	0092      	lsls	r2, r2, #2
 80082da:	58d3      	ldr	r3, [r2, r3]
 80082dc:	0018      	movs	r0, r3
 80082de:	f002 fd9b 	bl	800ae18 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	23b5      	movs	r3, #181	@ 0xb5
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	58d2      	ldr	r2, [r2, r3]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	32b0      	adds	r2, #176	@ 0xb0
 80082ee:	0092      	lsls	r2, r2, #2
 80082f0:	2100      	movs	r1, #0
 80082f2:	50d1      	str	r1, [r2, r3]
    pdev->pClassData = NULL;
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	23af      	movs	r3, #175	@ 0xaf
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	2100      	movs	r1, #0
 80082fc:	50d1      	str	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 80082fe:	2300      	movs	r3, #0
}
 8008300:	0018      	movs	r0, r3
 8008302:	46bd      	mov	sp, r7
 8008304:	b002      	add	sp, #8
 8008306:	bd80      	pop	{r7, pc}
 8008308:	200000c3 	.word	0x200000c3
 800830c:	200000c4 	.word	0x200000c4
 8008310:	200000c5 	.word	0x200000c5

08008314 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b086      	sub	sp, #24
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	23b5      	movs	r3, #181	@ 0xb5
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	58d2      	ldr	r2, [r2, r3]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	32b0      	adds	r2, #176	@ 0xb0
 800832a:	0092      	lsls	r2, r2, #2
 800832c:	58d3      	ldr	r3, [r2, r3]
 800832e:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008330:	230d      	movs	r3, #13
 8008332:	18fb      	adds	r3, r7, r3
 8008334:	2200      	movs	r2, #0
 8008336:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8008338:	230a      	movs	r3, #10
 800833a:	18fb      	adds	r3, r7, r3
 800833c:	2200      	movs	r2, #0
 800833e:	801a      	strh	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008340:	2317      	movs	r3, #23
 8008342:	18fb      	adds	r3, r7, r3
 8008344:	2200      	movs	r2, #0
 8008346:	701a      	strb	r2, [r3, #0]

  if (hcdc == NULL)
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d101      	bne.n	8008352 <USBD_CDC_Setup+0x3e>
  {
    return (uint8_t)USBD_FAIL;
 800834e:	2303      	movs	r3, #3
 8008350:	e0d1      	b.n	80084f6 <USBD_CDC_Setup+0x1e2>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	001a      	movs	r2, r3
 8008358:	2360      	movs	r3, #96	@ 0x60
 800835a:	4013      	ands	r3, r2
 800835c:	d05b      	beq.n	8008416 <USBD_CDC_Setup+0x102>
 800835e:	2b20      	cmp	r3, #32
 8008360:	d000      	beq.n	8008364 <USBD_CDC_Setup+0x50>
 8008362:	e0ba      	b.n	80084da <USBD_CDC_Setup+0x1c6>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	88db      	ldrh	r3, [r3, #6]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d043      	beq.n	80083f4 <USBD_CDC_Setup+0xe0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	b25b      	sxtb	r3, r3
 8008372:	2b00      	cmp	r3, #0
 8008374:	da22      	bge.n	80083bc <USBD_CDC_Setup+0xa8>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	23b5      	movs	r3, #181	@ 0xb5
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	58d3      	ldr	r3, [r2, r3]
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	33b0      	adds	r3, #176	@ 0xb0
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	18d3      	adds	r3, r2, r3
 8008386:	3304      	adds	r3, #4
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	683a      	ldr	r2, [r7, #0]
 800838e:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008390:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008392:	683a      	ldr	r2, [r7, #0]
 8008394:	88d2      	ldrh	r2, [r2, #6]
 8008396:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	88db      	ldrh	r3, [r3, #6]
 800839c:	220e      	movs	r2, #14
 800839e:	18ba      	adds	r2, r7, r2
 80083a0:	b299      	uxth	r1, r3
 80083a2:	2907      	cmp	r1, #7
 80083a4:	d900      	bls.n	80083a8 <USBD_CDC_Setup+0x94>
 80083a6:	2307      	movs	r3, #7
 80083a8:	8013      	strh	r3, [r2, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80083aa:	6939      	ldr	r1, [r7, #16]
 80083ac:	230e      	movs	r3, #14
 80083ae:	18fb      	adds	r3, r7, r3
 80083b0:	881a      	ldrh	r2, [r3, #0]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	0018      	movs	r0, r3
 80083b6:	f001 ff65 	bl	800a284 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80083ba:	e099      	b.n	80084f0 <USBD_CDC_Setup+0x1dc>
          hcdc->CmdOpCode = req->bRequest;
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	7859      	ldrb	r1, [r3, #1]
 80083c0:	693a      	ldr	r2, [r7, #16]
 80083c2:	2380      	movs	r3, #128	@ 0x80
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	88db      	ldrh	r3, [r3, #6]
 80083cc:	2b3f      	cmp	r3, #63	@ 0x3f
 80083ce:	d803      	bhi.n	80083d8 <USBD_CDC_Setup+0xc4>
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	88db      	ldrh	r3, [r3, #6]
 80083d4:	b2da      	uxtb	r2, r3
 80083d6:	e000      	b.n	80083da <USBD_CDC_Setup+0xc6>
 80083d8:	2240      	movs	r2, #64	@ 0x40
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	4948      	ldr	r1, [pc, #288]	@ (8008500 <USBD_CDC_Setup+0x1ec>)
 80083de:	545a      	strb	r2, [r3, r1]
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80083e0:	6939      	ldr	r1, [r7, #16]
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	4a46      	ldr	r2, [pc, #280]	@ (8008500 <USBD_CDC_Setup+0x1ec>)
 80083e6:	5c9b      	ldrb	r3, [r3, r2]
 80083e8:	001a      	movs	r2, r3
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	0018      	movs	r0, r3
 80083ee:	f001 ff76 	bl	800a2de <USBD_CtlPrepareRx>
      break;
 80083f2:	e07d      	b.n	80084f0 <USBD_CDC_Setup+0x1dc>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	23b5      	movs	r3, #181	@ 0xb5
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	58d3      	ldr	r3, [r2, r3]
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	33b0      	adds	r3, #176	@ 0xb0
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	18d3      	adds	r3, r2, r3
 8008404:	3304      	adds	r3, #4
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	683a      	ldr	r2, [r7, #0]
 800840c:	7850      	ldrb	r0, [r2, #1]
 800840e:	6839      	ldr	r1, [r7, #0]
 8008410:	2200      	movs	r2, #0
 8008412:	4798      	blx	r3
      break;
 8008414:	e06c      	b.n	80084f0 <USBD_CDC_Setup+0x1dc>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	785b      	ldrb	r3, [r3, #1]
 800841a:	2b0b      	cmp	r3, #11
 800841c:	d03c      	beq.n	8008498 <USBD_CDC_Setup+0x184>
 800841e:	dc4d      	bgt.n	80084bc <USBD_CDC_Setup+0x1a8>
 8008420:	2b0a      	cmp	r3, #10
 8008422:	d01f      	beq.n	8008464 <USBD_CDC_Setup+0x150>
 8008424:	dc4a      	bgt.n	80084bc <USBD_CDC_Setup+0x1a8>
 8008426:	2b00      	cmp	r3, #0
 8008428:	d002      	beq.n	8008430 <USBD_CDC_Setup+0x11c>
 800842a:	2b01      	cmp	r3, #1
 800842c:	d051      	beq.n	80084d2 <USBD_CDC_Setup+0x1be>
 800842e:	e045      	b.n	80084bc <USBD_CDC_Setup+0x1a8>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	23a7      	movs	r3, #167	@ 0xa7
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	5cd3      	ldrb	r3, [r2, r3]
 8008438:	b2db      	uxtb	r3, r3
 800843a:	2b03      	cmp	r3, #3
 800843c:	d107      	bne.n	800844e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800843e:	230a      	movs	r3, #10
 8008440:	18f9      	adds	r1, r7, r3
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2202      	movs	r2, #2
 8008446:	0018      	movs	r0, r3
 8008448:	f001 ff1c 	bl	800a284 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800844c:	e044      	b.n	80084d8 <USBD_CDC_Setup+0x1c4>
            USBD_CtlError(pdev, req);
 800844e:	683a      	ldr	r2, [r7, #0]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	0011      	movs	r1, r2
 8008454:	0018      	movs	r0, r3
 8008456:	f001 fe8d 	bl	800a174 <USBD_CtlError>
            ret = USBD_FAIL;
 800845a:	2317      	movs	r3, #23
 800845c:	18fb      	adds	r3, r7, r3
 800845e:	2203      	movs	r2, #3
 8008460:	701a      	strb	r2, [r3, #0]
          break;
 8008462:	e039      	b.n	80084d8 <USBD_CDC_Setup+0x1c4>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	23a7      	movs	r3, #167	@ 0xa7
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	5cd3      	ldrb	r3, [r2, r3]
 800846c:	b2db      	uxtb	r3, r3
 800846e:	2b03      	cmp	r3, #3
 8008470:	d107      	bne.n	8008482 <USBD_CDC_Setup+0x16e>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008472:	230d      	movs	r3, #13
 8008474:	18f9      	adds	r1, r7, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2201      	movs	r2, #1
 800847a:	0018      	movs	r0, r3
 800847c:	f001 ff02 	bl	800a284 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008480:	e02a      	b.n	80084d8 <USBD_CDC_Setup+0x1c4>
            USBD_CtlError(pdev, req);
 8008482:	683a      	ldr	r2, [r7, #0]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	0011      	movs	r1, r2
 8008488:	0018      	movs	r0, r3
 800848a:	f001 fe73 	bl	800a174 <USBD_CtlError>
            ret = USBD_FAIL;
 800848e:	2317      	movs	r3, #23
 8008490:	18fb      	adds	r3, r7, r3
 8008492:	2203      	movs	r2, #3
 8008494:	701a      	strb	r2, [r3, #0]
          break;
 8008496:	e01f      	b.n	80084d8 <USBD_CDC_Setup+0x1c4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	23a7      	movs	r3, #167	@ 0xa7
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	5cd3      	ldrb	r3, [r2, r3]
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	2b03      	cmp	r3, #3
 80084a4:	d017      	beq.n	80084d6 <USBD_CDC_Setup+0x1c2>
          {
            USBD_CtlError(pdev, req);
 80084a6:	683a      	ldr	r2, [r7, #0]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	0011      	movs	r1, r2
 80084ac:	0018      	movs	r0, r3
 80084ae:	f001 fe61 	bl	800a174 <USBD_CtlError>
            ret = USBD_FAIL;
 80084b2:	2317      	movs	r3, #23
 80084b4:	18fb      	adds	r3, r7, r3
 80084b6:	2203      	movs	r2, #3
 80084b8:	701a      	strb	r2, [r3, #0]
          }
          break;
 80084ba:	e00c      	b.n	80084d6 <USBD_CDC_Setup+0x1c2>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80084bc:	683a      	ldr	r2, [r7, #0]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	0011      	movs	r1, r2
 80084c2:	0018      	movs	r0, r3
 80084c4:	f001 fe56 	bl	800a174 <USBD_CtlError>
          ret = USBD_FAIL;
 80084c8:	2317      	movs	r3, #23
 80084ca:	18fb      	adds	r3, r7, r3
 80084cc:	2203      	movs	r2, #3
 80084ce:	701a      	strb	r2, [r3, #0]
          break;
 80084d0:	e002      	b.n	80084d8 <USBD_CDC_Setup+0x1c4>
          break;
 80084d2:	46c0      	nop			@ (mov r8, r8)
 80084d4:	e00c      	b.n	80084f0 <USBD_CDC_Setup+0x1dc>
          break;
 80084d6:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80084d8:	e00a      	b.n	80084f0 <USBD_CDC_Setup+0x1dc>

    default:
      USBD_CtlError(pdev, req);
 80084da:	683a      	ldr	r2, [r7, #0]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	0011      	movs	r1, r2
 80084e0:	0018      	movs	r0, r3
 80084e2:	f001 fe47 	bl	800a174 <USBD_CtlError>
      ret = USBD_FAIL;
 80084e6:	2317      	movs	r3, #23
 80084e8:	18fb      	adds	r3, r7, r3
 80084ea:	2203      	movs	r2, #3
 80084ec:	701a      	strb	r2, [r3, #0]
      break;
 80084ee:	46c0      	nop			@ (mov r8, r8)
  }

  return (uint8_t)ret;
 80084f0:	2317      	movs	r3, #23
 80084f2:	18fb      	adds	r3, r7, r3
 80084f4:	781b      	ldrb	r3, [r3, #0]
}
 80084f6:	0018      	movs	r0, r3
 80084f8:	46bd      	mov	sp, r7
 80084fa:	b006      	add	sp, #24
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	46c0      	nop			@ (mov r8, r8)
 8008500:	00000201 	.word	0x00000201

08008504 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008504:	b590      	push	{r4, r7, lr}
 8008506:	b085      	sub	sp, #20
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	000a      	movs	r2, r1
 800850e:	1cfb      	adds	r3, r7, #3
 8008510:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	23b2      	movs	r3, #178	@ 0xb2
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	58d3      	ldr	r3, [r2, r3]
 800851a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	23b5      	movs	r3, #181	@ 0xb5
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	58d2      	ldr	r2, [r2, r3]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	32b0      	adds	r2, #176	@ 0xb0
 8008528:	0092      	lsls	r2, r2, #2
 800852a:	58d3      	ldr	r3, [r2, r3]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d101      	bne.n	8008534 <USBD_CDC_DataIn+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008530:	2303      	movs	r3, #3
 8008532:	e072      	b.n	800861a <USBD_CDC_DataIn+0x116>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	23b5      	movs	r3, #181	@ 0xb5
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	58d2      	ldr	r2, [r2, r3]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	32b0      	adds	r2, #176	@ 0xb0
 8008540:	0092      	lsls	r2, r2, #2
 8008542:	58d3      	ldr	r3, [r2, r3]
 8008544:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008546:	1cfb      	adds	r3, r7, #3
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	220f      	movs	r2, #15
 800854c:	401a      	ands	r2, r3
 800854e:	6879      	ldr	r1, [r7, #4]
 8008550:	0013      	movs	r3, r2
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	189b      	adds	r3, r3, r2
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	18cb      	adds	r3, r1, r3
 800855a:	3318      	adds	r3, #24
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d031      	beq.n	80085c6 <USBD_CDC_DataIn+0xc2>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008562:	1cfb      	adds	r3, r7, #3
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	220f      	movs	r2, #15
 8008568:	401a      	ands	r2, r3
 800856a:	6879      	ldr	r1, [r7, #4]
 800856c:	0013      	movs	r3, r2
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	189b      	adds	r3, r3, r2
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	18cb      	adds	r3, r1, r3
 8008576:	3318      	adds	r3, #24
 8008578:	6818      	ldr	r0, [r3, #0]
 800857a:	1cfb      	adds	r3, r7, #3
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	220f      	movs	r2, #15
 8008580:	401a      	ands	r2, r3
 8008582:	68f9      	ldr	r1, [r7, #12]
 8008584:	0013      	movs	r3, r2
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	189b      	adds	r3, r3, r2
 800858a:	00db      	lsls	r3, r3, #3
 800858c:	18cb      	adds	r3, r1, r3
 800858e:	334c      	adds	r3, #76	@ 0x4c
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	0019      	movs	r1, r3
 8008594:	f7f7 fe4e 	bl	8000234 <__aeabi_uidivmod>
 8008598:	1e0b      	subs	r3, r1, #0
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800859a:	d114      	bne.n	80085c6 <USBD_CDC_DataIn+0xc2>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800859c:	1cfb      	adds	r3, r7, #3
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	220f      	movs	r2, #15
 80085a2:	401a      	ands	r2, r3
 80085a4:	6879      	ldr	r1, [r7, #4]
 80085a6:	0013      	movs	r3, r2
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	189b      	adds	r3, r3, r2
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	18cb      	adds	r3, r1, r3
 80085b0:	3318      	adds	r3, #24
 80085b2:	2200      	movs	r2, #0
 80085b4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80085b6:	1cfb      	adds	r3, r7, #3
 80085b8:	7819      	ldrb	r1, [r3, #0]
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	2300      	movs	r3, #0
 80085be:	2200      	movs	r2, #0
 80085c0:	f002 fba7 	bl	800ad12 <USBD_LL_Transmit>
 80085c4:	e028      	b.n	8008618 <USBD_CDC_DataIn+0x114>
  }
  else
  {
    hcdc->TxState = 0U;
 80085c6:	68ba      	ldr	r2, [r7, #8]
 80085c8:	2385      	movs	r3, #133	@ 0x85
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	2100      	movs	r1, #0
 80085ce:	50d1      	str	r1, [r2, r3]

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	23b5      	movs	r3, #181	@ 0xb5
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	58d3      	ldr	r3, [r2, r3]
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	33b0      	adds	r3, #176	@ 0xb0
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	18d3      	adds	r3, r2, r3
 80085e0:	3304      	adds	r3, #4
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	691b      	ldr	r3, [r3, #16]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d016      	beq.n	8008618 <USBD_CDC_DataIn+0x114>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	23b5      	movs	r3, #181	@ 0xb5
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	58d3      	ldr	r3, [r2, r3]
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	33b0      	adds	r3, #176	@ 0xb0
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	18d3      	adds	r3, r2, r3
 80085fa:	3304      	adds	r3, #4
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	691c      	ldr	r4, [r3, #16]
 8008600:	68ba      	ldr	r2, [r7, #8]
 8008602:	2382      	movs	r3, #130	@ 0x82
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	58d0      	ldr	r0, [r2, r3]
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	2284      	movs	r2, #132	@ 0x84
 800860c:	0092      	lsls	r2, r2, #2
 800860e:	1899      	adds	r1, r3, r2
 8008610:	1cfb      	adds	r3, r7, #3
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	001a      	movs	r2, r3
 8008616:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 8008618:	2300      	movs	r3, #0
}
 800861a:	0018      	movs	r0, r3
 800861c:	46bd      	mov	sp, r7
 800861e:	b005      	add	sp, #20
 8008620:	bd90      	pop	{r4, r7, pc}

08008622 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008622:	b580      	push	{r7, lr}
 8008624:	b084      	sub	sp, #16
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
 800862a:	000a      	movs	r2, r1
 800862c:	1cfb      	adds	r3, r7, #3
 800862e:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	23b5      	movs	r3, #181	@ 0xb5
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	58d2      	ldr	r2, [r2, r3]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	32b0      	adds	r2, #176	@ 0xb0
 800863c:	0092      	lsls	r2, r2, #2
 800863e:	58d3      	ldr	r3, [r2, r3]
 8008640:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	23b5      	movs	r3, #181	@ 0xb5
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	58d2      	ldr	r2, [r2, r3]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	32b0      	adds	r2, #176	@ 0xb0
 800864e:	0092      	lsls	r2, r2, #2
 8008650:	58d3      	ldr	r3, [r2, r3]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d101      	bne.n	800865a <USBD_CDC_DataOut+0x38>
  {
    return (uint8_t)USBD_FAIL;
 8008656:	2303      	movs	r3, #3
 8008658:	e022      	b.n	80086a0 <USBD_CDC_DataOut+0x7e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800865a:	1cfb      	adds	r3, r7, #3
 800865c:	781a      	ldrb	r2, [r3, #0]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	0011      	movs	r1, r2
 8008662:	0018      	movs	r0, r3
 8008664:	f002 fbb5 	bl	800add2 <USBD_LL_GetRxDataSize>
 8008668:	0001      	movs	r1, r0
 800866a:	68fa      	ldr	r2, [r7, #12]
 800866c:	2383      	movs	r3, #131	@ 0x83
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	23b5      	movs	r3, #181	@ 0xb5
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	58d3      	ldr	r3, [r2, r3]
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	33b0      	adds	r3, #176	@ 0xb0
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	18d3      	adds	r3, r2, r3
 8008682:	3304      	adds	r3, #4
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68da      	ldr	r2, [r3, #12]
 8008688:	68f9      	ldr	r1, [r7, #12]
 800868a:	2381      	movs	r3, #129	@ 0x81
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	58c8      	ldr	r0, [r1, r3]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2183      	movs	r1, #131	@ 0x83
 8008694:	0089      	lsls	r1, r1, #2
 8008696:	468c      	mov	ip, r1
 8008698:	4463      	add	r3, ip
 800869a:	0019      	movs	r1, r3
 800869c:	4790      	blx	r2

  return (uint8_t)USBD_OK;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	0018      	movs	r0, r3
 80086a2:	46bd      	mov	sp, r7
 80086a4:	b004      	add	sp, #16
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80086a8:	b590      	push	{r4, r7, lr}
 80086aa:	b085      	sub	sp, #20
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	23b5      	movs	r3, #181	@ 0xb5
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	58d2      	ldr	r2, [r2, r3]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	32b0      	adds	r2, #176	@ 0xb0
 80086bc:	0092      	lsls	r2, r2, #2
 80086be:	58d3      	ldr	r3, [r2, r3]
 80086c0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d101      	bne.n	80086cc <USBD_CDC_EP0_RxReady+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80086c8:	2303      	movs	r3, #3
 80086ca:	e02b      	b.n	8008724 <USBD_CDC_EP0_RxReady+0x7c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	23b5      	movs	r3, #181	@ 0xb5
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	58d3      	ldr	r3, [r2, r3]
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	33b0      	adds	r3, #176	@ 0xb0
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	18d3      	adds	r3, r2, r3
 80086dc:	3304      	adds	r3, #4
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d01e      	beq.n	8008722 <USBD_CDC_EP0_RxReady+0x7a>
 80086e4:	68fa      	ldr	r2, [r7, #12]
 80086e6:	2380      	movs	r3, #128	@ 0x80
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	5cd3      	ldrb	r3, [r2, r3]
 80086ec:	2bff      	cmp	r3, #255	@ 0xff
 80086ee:	d018      	beq.n	8008722 <USBD_CDC_EP0_RxReady+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	23b5      	movs	r3, #181	@ 0xb5
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	58d3      	ldr	r3, [r2, r3]
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	33b0      	adds	r3, #176	@ 0xb0
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	18d3      	adds	r3, r2, r3
 8008700:	3304      	adds	r3, #4
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	68f9      	ldr	r1, [r7, #12]
 8008708:	2280      	movs	r2, #128	@ 0x80
 800870a:	0092      	lsls	r2, r2, #2
 800870c:	5c88      	ldrb	r0, [r1, r2]
                                                                     (uint8_t *)hcdc->data,
 800870e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	4c06      	ldr	r4, [pc, #24]	@ (800872c <USBD_CDC_EP0_RxReady+0x84>)
 8008714:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008716:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008718:	68fa      	ldr	r2, [r7, #12]
 800871a:	2380      	movs	r3, #128	@ 0x80
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	21ff      	movs	r1, #255	@ 0xff
 8008720:	54d1      	strb	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 8008722:	2300      	movs	r3, #0
}
 8008724:	0018      	movs	r0, r3
 8008726:	46bd      	mov	sp, r7
 8008728:	b005      	add	sp, #20
 800872a:	bd90      	pop	{r4, r7, pc}
 800872c:	00000201 	.word	0x00000201

08008730 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b086      	sub	sp, #24
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008738:	4b20      	ldr	r3, [pc, #128]	@ (80087bc <USBD_CDC_GetFSCfgDesc+0x8c>)
 800873a:	2182      	movs	r1, #130	@ 0x82
 800873c:	0018      	movs	r0, r3
 800873e:	f000 fd9c 	bl	800927a <USBD_GetEpDesc>
 8008742:	0003      	movs	r3, r0
 8008744:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008746:	4b1d      	ldr	r3, [pc, #116]	@ (80087bc <USBD_CDC_GetFSCfgDesc+0x8c>)
 8008748:	2101      	movs	r1, #1
 800874a:	0018      	movs	r0, r3
 800874c:	f000 fd95 	bl	800927a <USBD_GetEpDesc>
 8008750:	0003      	movs	r3, r0
 8008752:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008754:	4b19      	ldr	r3, [pc, #100]	@ (80087bc <USBD_CDC_GetFSCfgDesc+0x8c>)
 8008756:	2181      	movs	r1, #129	@ 0x81
 8008758:	0018      	movs	r0, r3
 800875a:	f000 fd8e 	bl	800927a <USBD_GetEpDesc>
 800875e:	0003      	movs	r3, r0
 8008760:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d002      	beq.n	800876e <USBD_CDC_GetFSCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	2210      	movs	r2, #16
 800876c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d00b      	beq.n	800878c <USBD_CDC_GetFSCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	791a      	ldrb	r2, [r3, #4]
 8008778:	2100      	movs	r1, #0
 800877a:	400a      	ands	r2, r1
 800877c:	1c11      	adds	r1, r2, #0
 800877e:	2240      	movs	r2, #64	@ 0x40
 8008780:	430a      	orrs	r2, r1
 8008782:	711a      	strb	r2, [r3, #4]
 8008784:	795a      	ldrb	r2, [r3, #5]
 8008786:	2100      	movs	r1, #0
 8008788:	400a      	ands	r2, r1
 800878a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00b      	beq.n	80087aa <USBD_CDC_GetFSCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	791a      	ldrb	r2, [r3, #4]
 8008796:	2100      	movs	r1, #0
 8008798:	400a      	ands	r2, r1
 800879a:	1c11      	adds	r1, r2, #0
 800879c:	2240      	movs	r2, #64	@ 0x40
 800879e:	430a      	orrs	r2, r1
 80087a0:	711a      	strb	r2, [r3, #4]
 80087a2:	795a      	ldrb	r2, [r3, #5]
 80087a4:	2100      	movs	r1, #0
 80087a6:	400a      	ands	r2, r1
 80087a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2243      	movs	r2, #67	@ 0x43
 80087ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80087b0:	4b02      	ldr	r3, [pc, #8]	@ (80087bc <USBD_CDC_GetFSCfgDesc+0x8c>)
}
 80087b2:	0018      	movs	r0, r3
 80087b4:	46bd      	mov	sp, r7
 80087b6:	b006      	add	sp, #24
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	46c0      	nop			@ (mov r8, r8)
 80087bc:	20000080 	.word	0x20000080

080087c0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b086      	sub	sp, #24
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80087c8:	4b20      	ldr	r3, [pc, #128]	@ (800884c <USBD_CDC_GetHSCfgDesc+0x8c>)
 80087ca:	2182      	movs	r1, #130	@ 0x82
 80087cc:	0018      	movs	r0, r3
 80087ce:	f000 fd54 	bl	800927a <USBD_GetEpDesc>
 80087d2:	0003      	movs	r3, r0
 80087d4:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80087d6:	4b1d      	ldr	r3, [pc, #116]	@ (800884c <USBD_CDC_GetHSCfgDesc+0x8c>)
 80087d8:	2101      	movs	r1, #1
 80087da:	0018      	movs	r0, r3
 80087dc:	f000 fd4d 	bl	800927a <USBD_GetEpDesc>
 80087e0:	0003      	movs	r3, r0
 80087e2:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80087e4:	4b19      	ldr	r3, [pc, #100]	@ (800884c <USBD_CDC_GetHSCfgDesc+0x8c>)
 80087e6:	2181      	movs	r1, #129	@ 0x81
 80087e8:	0018      	movs	r0, r3
 80087ea:	f000 fd46 	bl	800927a <USBD_GetEpDesc>
 80087ee:	0003      	movs	r3, r0
 80087f0:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d002      	beq.n	80087fe <USBD_CDC_GetHSCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	2210      	movs	r2, #16
 80087fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d00b      	beq.n	800881c <USBD_CDC_GetHSCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	791a      	ldrb	r2, [r3, #4]
 8008808:	2100      	movs	r1, #0
 800880a:	400a      	ands	r2, r1
 800880c:	711a      	strb	r2, [r3, #4]
 800880e:	795a      	ldrb	r2, [r3, #5]
 8008810:	2100      	movs	r1, #0
 8008812:	400a      	ands	r2, r1
 8008814:	1c11      	adds	r1, r2, #0
 8008816:	2202      	movs	r2, #2
 8008818:	430a      	orrs	r2, r1
 800881a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d00b      	beq.n	800883a <USBD_CDC_GetHSCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	791a      	ldrb	r2, [r3, #4]
 8008826:	2100      	movs	r1, #0
 8008828:	400a      	ands	r2, r1
 800882a:	711a      	strb	r2, [r3, #4]
 800882c:	795a      	ldrb	r2, [r3, #5]
 800882e:	2100      	movs	r1, #0
 8008830:	400a      	ands	r2, r1
 8008832:	1c11      	adds	r1, r2, #0
 8008834:	2202      	movs	r2, #2
 8008836:	430a      	orrs	r2, r1
 8008838:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2243      	movs	r2, #67	@ 0x43
 800883e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008840:	4b02      	ldr	r3, [pc, #8]	@ (800884c <USBD_CDC_GetHSCfgDesc+0x8c>)
}
 8008842:	0018      	movs	r0, r3
 8008844:	46bd      	mov	sp, r7
 8008846:	b006      	add	sp, #24
 8008848:	bd80      	pop	{r7, pc}
 800884a:	46c0      	nop			@ (mov r8, r8)
 800884c:	20000080 	.word	0x20000080

08008850 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b086      	sub	sp, #24
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008858:	4b20      	ldr	r3, [pc, #128]	@ (80088dc <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 800885a:	2182      	movs	r1, #130	@ 0x82
 800885c:	0018      	movs	r0, r3
 800885e:	f000 fd0c 	bl	800927a <USBD_GetEpDesc>
 8008862:	0003      	movs	r3, r0
 8008864:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008866:	4b1d      	ldr	r3, [pc, #116]	@ (80088dc <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 8008868:	2101      	movs	r1, #1
 800886a:	0018      	movs	r0, r3
 800886c:	f000 fd05 	bl	800927a <USBD_GetEpDesc>
 8008870:	0003      	movs	r3, r0
 8008872:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008874:	4b19      	ldr	r3, [pc, #100]	@ (80088dc <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 8008876:	2181      	movs	r1, #129	@ 0x81
 8008878:	0018      	movs	r0, r3
 800887a:	f000 fcfe 	bl	800927a <USBD_GetEpDesc>
 800887e:	0003      	movs	r3, r0
 8008880:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d002      	beq.n	800888e <USBD_CDC_GetOtherSpeedCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	2210      	movs	r2, #16
 800888c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d00b      	beq.n	80088ac <USBD_CDC_GetOtherSpeedCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	791a      	ldrb	r2, [r3, #4]
 8008898:	2100      	movs	r1, #0
 800889a:	400a      	ands	r2, r1
 800889c:	1c11      	adds	r1, r2, #0
 800889e:	2240      	movs	r2, #64	@ 0x40
 80088a0:	430a      	orrs	r2, r1
 80088a2:	711a      	strb	r2, [r3, #4]
 80088a4:	795a      	ldrb	r2, [r3, #5]
 80088a6:	2100      	movs	r1, #0
 80088a8:	400a      	ands	r2, r1
 80088aa:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d00b      	beq.n	80088ca <USBD_CDC_GetOtherSpeedCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	791a      	ldrb	r2, [r3, #4]
 80088b6:	2100      	movs	r1, #0
 80088b8:	400a      	ands	r2, r1
 80088ba:	1c11      	adds	r1, r2, #0
 80088bc:	2240      	movs	r2, #64	@ 0x40
 80088be:	430a      	orrs	r2, r1
 80088c0:	711a      	strb	r2, [r3, #4]
 80088c2:	795a      	ldrb	r2, [r3, #5]
 80088c4:	2100      	movs	r1, #0
 80088c6:	400a      	ands	r2, r1
 80088c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2243      	movs	r2, #67	@ 0x43
 80088ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80088d0:	4b02      	ldr	r3, [pc, #8]	@ (80088dc <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
}
 80088d2:	0018      	movs	r0, r3
 80088d4:	46bd      	mov	sp, r7
 80088d6:	b006      	add	sp, #24
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	46c0      	nop			@ (mov r8, r8)
 80088dc:	20000080 	.word	0x20000080

080088e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	220a      	movs	r2, #10
 80088ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80088ee:	4b02      	ldr	r3, [pc, #8]	@ (80088f8 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 80088f0:	0018      	movs	r0, r3
 80088f2:	46bd      	mov	sp, r7
 80088f4:	b002      	add	sp, #8
 80088f6:	bd80      	pop	{r7, pc}
 80088f8:	2000003c 	.word	0x2000003c

080088fc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d101      	bne.n	8008910 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800890c:	2303      	movs	r3, #3
 800890e:	e00b      	b.n	8008928 <USBD_CDC_RegisterInterface+0x2c>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	23b5      	movs	r3, #181	@ 0xb5
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	58d3      	ldr	r3, [r2, r3]
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	33b0      	adds	r3, #176	@ 0xb0
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	18d3      	adds	r3, r2, r3
 8008920:	3304      	adds	r3, #4
 8008922:	683a      	ldr	r2, [r7, #0]
 8008924:	601a      	str	r2, [r3, #0]

  return (uint8_t)USBD_OK;
 8008926:	2300      	movs	r3, #0
}
 8008928:	0018      	movs	r0, r3
 800892a:	46bd      	mov	sp, r7
 800892c:	b002      	add	sp, #8
 800892e:	bd80      	pop	{r7, pc}

08008930 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b086      	sub	sp, #24
 8008934:	af00      	add	r7, sp, #0
 8008936:	60f8      	str	r0, [r7, #12]
 8008938:	60b9      	str	r1, [r7, #8]
 800893a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800893c:	68fa      	ldr	r2, [r7, #12]
 800893e:	23b5      	movs	r3, #181	@ 0xb5
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	58d2      	ldr	r2, [r2, r3]
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	32b0      	adds	r2, #176	@ 0xb0
 8008948:	0092      	lsls	r2, r2, #2
 800894a:	58d3      	ldr	r3, [r2, r3]
 800894c:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d101      	bne.n	8008958 <USBD_CDC_SetTxBuffer+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008954:	2303      	movs	r3, #3
 8008956:	e00a      	b.n	800896e <USBD_CDC_SetTxBuffer+0x3e>
  }

  hcdc->TxBuffer = pbuff;
 8008958:	697a      	ldr	r2, [r7, #20]
 800895a:	2382      	movs	r3, #130	@ 0x82
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	68b9      	ldr	r1, [r7, #8]
 8008960:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8008962:	697a      	ldr	r2, [r7, #20]
 8008964:	2384      	movs	r3, #132	@ 0x84
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	6879      	ldr	r1, [r7, #4]
 800896a:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	0018      	movs	r0, r3
 8008970:	46bd      	mov	sp, r7
 8008972:	b006      	add	sp, #24
 8008974:	bd80      	pop	{r7, pc}

08008976 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b084      	sub	sp, #16
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
 800897e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	23b5      	movs	r3, #181	@ 0xb5
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	58d2      	ldr	r2, [r2, r3]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	32b0      	adds	r2, #176	@ 0xb0
 800898c:	0092      	lsls	r2, r2, #2
 800898e:	58d3      	ldr	r3, [r2, r3]
 8008990:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d101      	bne.n	800899c <USBD_CDC_SetRxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008998:	2303      	movs	r3, #3
 800899a:	e005      	b.n	80089a8 <USBD_CDC_SetRxBuffer+0x32>
  }

  hcdc->RxBuffer = pbuff;
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	2381      	movs	r3, #129	@ 0x81
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	6839      	ldr	r1, [r7, #0]
 80089a4:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	0018      	movs	r0, r3
 80089aa:	46bd      	mov	sp, r7
 80089ac:	b004      	add	sp, #16
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80089b0:	b590      	push	{r4, r7, lr}
 80089b2:	b085      	sub	sp, #20
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	23b5      	movs	r3, #181	@ 0xb5
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	58d2      	ldr	r2, [r2, r3]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	32b0      	adds	r2, #176	@ 0xb0
 80089c4:	0092      	lsls	r2, r2, #2
 80089c6:	58d3      	ldr	r3, [r2, r3]
 80089c8:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80089ca:	230f      	movs	r3, #15
 80089cc:	18fb      	adds	r3, r7, r3
 80089ce:	2201      	movs	r2, #1
 80089d0:	701a      	strb	r2, [r3, #0]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d101      	bne.n	80089dc <USBD_CDC_TransmitPacket+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80089d8:	2303      	movs	r3, #3
 80089da:	e030      	b.n	8008a3e <USBD_CDC_TransmitPacket+0x8e>
  }

  if (hcdc->TxState == 0U)
 80089dc:	68ba      	ldr	r2, [r7, #8]
 80089de:	2385      	movs	r3, #133	@ 0x85
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	58d3      	ldr	r3, [r2, r3]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d127      	bne.n	8008a38 <USBD_CDC_TransmitPacket+0x88>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80089e8:	68ba      	ldr	r2, [r7, #8]
 80089ea:	2385      	movs	r3, #133	@ 0x85
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	2101      	movs	r1, #1
 80089f0:	50d1      	str	r1, [r2, r3]

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80089f2:	4b15      	ldr	r3, [pc, #84]	@ (8008a48 <USBD_CDC_TransmitPacket+0x98>)
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	001a      	movs	r2, r3
 80089f8:	230f      	movs	r3, #15
 80089fa:	401a      	ands	r2, r3
 80089fc:	68b9      	ldr	r1, [r7, #8]
 80089fe:	2384      	movs	r3, #132	@ 0x84
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	58c9      	ldr	r1, [r1, r3]
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	0013      	movs	r3, r2
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	189b      	adds	r3, r3, r2
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	18c3      	adds	r3, r0, r3
 8008a10:	3318      	adds	r3, #24
 8008a12:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008a14:	4b0c      	ldr	r3, [pc, #48]	@ (8008a48 <USBD_CDC_TransmitPacket+0x98>)
 8008a16:	7819      	ldrb	r1, [r3, #0]
 8008a18:	68ba      	ldr	r2, [r7, #8]
 8008a1a:	2382      	movs	r3, #130	@ 0x82
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	58d4      	ldr	r4, [r2, r3]
 8008a20:	68ba      	ldr	r2, [r7, #8]
 8008a22:	2384      	movs	r3, #132	@ 0x84
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	58d3      	ldr	r3, [r2, r3]
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	0022      	movs	r2, r4
 8008a2c:	f002 f971 	bl	800ad12 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008a30:	230f      	movs	r3, #15
 8008a32:	18fb      	adds	r3, r7, r3
 8008a34:	2200      	movs	r2, #0
 8008a36:	701a      	strb	r2, [r3, #0]
  }

  return (uint8_t)ret;
 8008a38:	230f      	movs	r3, #15
 8008a3a:	18fb      	adds	r3, r7, r3
 8008a3c:	781b      	ldrb	r3, [r3, #0]
}
 8008a3e:	0018      	movs	r0, r3
 8008a40:	46bd      	mov	sp, r7
 8008a42:	b005      	add	sp, #20
 8008a44:	bd90      	pop	{r4, r7, pc}
 8008a46:	46c0      	nop			@ (mov r8, r8)
 8008a48:	200000c3 	.word	0x200000c3

08008a4c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	23b5      	movs	r3, #181	@ 0xb5
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	58d2      	ldr	r2, [r2, r3]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	32b0      	adds	r2, #176	@ 0xb0
 8008a60:	0092      	lsls	r2, r2, #2
 8008a62:	58d3      	ldr	r3, [r2, r3]
 8008a64:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	23b5      	movs	r3, #181	@ 0xb5
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	58d2      	ldr	r2, [r2, r3]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	32b0      	adds	r2, #176	@ 0xb0
 8008a72:	0092      	lsls	r2, r2, #2
 8008a74:	58d3      	ldr	r3, [r2, r3]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d101      	bne.n	8008a7e <USBD_CDC_ReceivePacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008a7a:	2303      	movs	r3, #3
 8008a7c:	e01a      	b.n	8008ab4 <USBD_CDC_ReceivePacket+0x68>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	7c1b      	ldrb	r3, [r3, #16]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d10b      	bne.n	8008a9e <USBD_CDC_ReceivePacket+0x52>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008a86:	4b0d      	ldr	r3, [pc, #52]	@ (8008abc <USBD_CDC_ReceivePacket+0x70>)
 8008a88:	7819      	ldrb	r1, [r3, #0]
 8008a8a:	68fa      	ldr	r2, [r7, #12]
 8008a8c:	2381      	movs	r3, #129	@ 0x81
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	58d2      	ldr	r2, [r2, r3]
 8008a92:	2380      	movs	r3, #128	@ 0x80
 8008a94:	009b      	lsls	r3, r3, #2
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f002 f96b 	bl	800ad72 <USBD_LL_PrepareReceive>
 8008a9c:	e009      	b.n	8008ab2 <USBD_CDC_ReceivePacket+0x66>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008a9e:	4b07      	ldr	r3, [pc, #28]	@ (8008abc <USBD_CDC_ReceivePacket+0x70>)
 8008aa0:	7819      	ldrb	r1, [r3, #0]
 8008aa2:	68fa      	ldr	r2, [r7, #12]
 8008aa4:	2381      	movs	r3, #129	@ 0x81
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	58d2      	ldr	r2, [r2, r3]
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	2340      	movs	r3, #64	@ 0x40
 8008aae:	f002 f960 	bl	800ad72 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	0018      	movs	r0, r3
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	b004      	add	sp, #16
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	200000c4 	.word	0x200000c4

08008ac0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008ac0:	b5b0      	push	{r4, r5, r7, lr}
 8008ac2:	b086      	sub	sp, #24
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	1dfb      	adds	r3, r7, #7
 8008acc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d101      	bne.n	8008ad8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008ad4:	2303      	movs	r3, #3
 8008ad6:	e029      	b.n	8008b2c <USBD_Init+0x6c>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	23ae      	movs	r3, #174	@ 0xae
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	2100      	movs	r1, #0
 8008ae0:	50d1      	str	r1, [r2, r3]
  pdev->pUserData[0] = NULL;
 8008ae2:	68fa      	ldr	r2, [r7, #12]
 8008ae4:	23b1      	movs	r3, #177	@ 0xb1
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	2100      	movs	r1, #0
 8008aea:	50d1      	str	r1, [r2, r3]
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	23b4      	movs	r3, #180	@ 0xb4
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	2100      	movs	r1, #0
 8008af4:	50d1      	str	r1, [r2, r3]

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d004      	beq.n	8008b06 <USBD_Init+0x46>
  {
    pdev->pDesc = pdesc;
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	23ad      	movs	r3, #173	@ 0xad
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	68b9      	ldr	r1, [r7, #8]
 8008b04:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	23a7      	movs	r3, #167	@ 0xa7
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	2101      	movs	r1, #1
 8008b0e:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	1dfa      	adds	r2, r7, #7
 8008b14:	7812      	ldrb	r2, [r2, #0]
 8008b16:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008b18:	2517      	movs	r5, #23
 8008b1a:	197c      	adds	r4, r7, r5
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	0018      	movs	r0, r3
 8008b20:	f001 ff4c 	bl	800a9bc <USBD_LL_Init>
 8008b24:	0003      	movs	r3, r0
 8008b26:	7023      	strb	r3, [r4, #0]

  return ret;
 8008b28:	197b      	adds	r3, r7, r5
 8008b2a:	781b      	ldrb	r3, [r3, #0]
}
 8008b2c:	0018      	movs	r0, r3
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	b006      	add	sp, #24
 8008b32:	bdb0      	pop	{r4, r5, r7, pc}

08008b34 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b3e:	230e      	movs	r3, #14
 8008b40:	18fb      	adds	r3, r7, r3
 8008b42:	2200      	movs	r2, #0
 8008b44:	801a      	strh	r2, [r3, #0]

  if (pclass == NULL)
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d101      	bne.n	8008b50 <USBD_RegisterClass+0x1c>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008b4c:	2303      	movs	r3, #3
 8008b4e:	e02b      	b.n	8008ba8 <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	23ae      	movs	r3, #174	@ 0xae
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	6839      	ldr	r1, [r7, #0]
 8008b58:	50d1      	str	r1, [r2, r3]
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	23b5      	movs	r3, #181	@ 0xb5
 8008b5e:	009b      	lsls	r3, r3, #2
 8008b60:	58d2      	ldr	r2, [r2, r3]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	32ae      	adds	r2, #174	@ 0xae
 8008b66:	0092      	lsls	r2, r2, #2
 8008b68:	58d3      	ldr	r3, [r2, r3]
 8008b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d011      	beq.n	8008b94 <USBD_RegisterClass+0x60>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	23b5      	movs	r3, #181	@ 0xb5
 8008b74:	009b      	lsls	r3, r3, #2
 8008b76:	58d2      	ldr	r2, [r2, r3]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	32ae      	adds	r2, #174	@ 0xae
 8008b7c:	0092      	lsls	r2, r2, #2
 8008b7e:	58d3      	ldr	r3, [r2, r3]
 8008b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b82:	220e      	movs	r2, #14
 8008b84:	18ba      	adds	r2, r7, r2
 8008b86:	0010      	movs	r0, r2
 8008b88:	4798      	blx	r3
 8008b8a:	0001      	movs	r1, r0
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	23b4      	movs	r3, #180	@ 0xb4
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	50d1      	str	r1, [r2, r3]
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	23b6      	movs	r3, #182	@ 0xb6
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	58d3      	ldr	r3, [r2, r3]
 8008b9c:	1c59      	adds	r1, r3, #1
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	23b6      	movs	r3, #182	@ 0xb6
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8008ba6:	2300      	movs	r3, #0
}
 8008ba8:	0018      	movs	r0, r3
 8008baa:	46bd      	mov	sp, r7
 8008bac:	b004      	add	sp, #16
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	0018      	movs	r0, r3
 8008bbc:	f001 ff70 	bl	800aaa0 <USBD_LL_Start>
 8008bc0:	0003      	movs	r3, r0
}
 8008bc2:	0018      	movs	r0, r3
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	b002      	add	sp, #8
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b082      	sub	sp, #8
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008bd2:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008bd4:	0018      	movs	r0, r3
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	b002      	add	sp, #8
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008bdc:	b590      	push	{r4, r7, lr}
 8008bde:	b085      	sub	sp, #20
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	000a      	movs	r2, r1
 8008be6:	1cfb      	adds	r3, r7, #3
 8008be8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bea:	210f      	movs	r1, #15
 8008bec:	187b      	adds	r3, r7, r1
 8008bee:	2200      	movs	r2, #0
 8008bf0:	701a      	strb	r2, [r3, #0]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	23ae      	movs	r3, #174	@ 0xae
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	58d3      	ldr	r3, [r2, r3]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d00c      	beq.n	8008c18 <USBD_SetClassConfig+0x3c>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	23ae      	movs	r3, #174	@ 0xae
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	58d3      	ldr	r3, [r2, r3]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	187c      	adds	r4, r7, r1
 8008c0a:	1cfa      	adds	r2, r7, #3
 8008c0c:	7811      	ldrb	r1, [r2, #0]
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	0010      	movs	r0, r2
 8008c12:	4798      	blx	r3
 8008c14:	0003      	movs	r3, r0
 8008c16:	7023      	strb	r3, [r4, #0]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008c18:	230f      	movs	r3, #15
 8008c1a:	18fb      	adds	r3, r7, r3
 8008c1c:	781b      	ldrb	r3, [r3, #0]
}
 8008c1e:	0018      	movs	r0, r3
 8008c20:	46bd      	mov	sp, r7
 8008c22:	b005      	add	sp, #20
 8008c24:	bd90      	pop	{r4, r7, pc}

08008c26 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c26:	b590      	push	{r4, r7, lr}
 8008c28:	b085      	sub	sp, #20
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
 8008c2e:	000a      	movs	r2, r1
 8008c30:	1cfb      	adds	r3, r7, #3
 8008c32:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c34:	240f      	movs	r4, #15
 8008c36:	193b      	adds	r3, r7, r4
 8008c38:	2200      	movs	r2, #0
 8008c3a:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	23ae      	movs	r3, #174	@ 0xae
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	58d3      	ldr	r3, [r2, r3]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	1cfa      	adds	r2, r7, #3
 8008c48:	7811      	ldrb	r1, [r2, #0]
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	0010      	movs	r0, r2
 8008c4e:	4798      	blx	r3
 8008c50:	1e03      	subs	r3, r0, #0
 8008c52:	d002      	beq.n	8008c5a <USBD_ClrClassConfig+0x34>
  {
    ret = USBD_FAIL;
 8008c54:	193b      	adds	r3, r7, r4
 8008c56:	2203      	movs	r2, #3
 8008c58:	701a      	strb	r2, [r3, #0]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008c5a:	230f      	movs	r3, #15
 8008c5c:	18fb      	adds	r3, r7, r3
 8008c5e:	781b      	ldrb	r3, [r3, #0]
}
 8008c60:	0018      	movs	r0, r3
 8008c62:	46bd      	mov	sp, r7
 8008c64:	b005      	add	sp, #20
 8008c66:	bd90      	pop	{r4, r7, pc}

08008c68 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008c68:	b590      	push	{r4, r7, lr}
 8008c6a:	b085      	sub	sp, #20
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	4a30      	ldr	r2, [pc, #192]	@ (8008d38 <USBD_LL_SetupStage+0xd0>)
 8008c76:	4694      	mov	ip, r2
 8008c78:	4463      	add	r3, ip
 8008c7a:	683a      	ldr	r2, [r7, #0]
 8008c7c:	0011      	movs	r1, r2
 8008c7e:	0018      	movs	r0, r3
 8008c80:	f001 fa3b 	bl	800a0fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	23a5      	movs	r3, #165	@ 0xa5
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	2101      	movs	r1, #1
 8008c8c:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	23ac      	movs	r3, #172	@ 0xac
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	5ad3      	ldrh	r3, [r2, r3]
 8008c96:	0019      	movs	r1, r3
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	23a6      	movs	r3, #166	@ 0xa6
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4a25      	ldr	r2, [pc, #148]	@ (8008d38 <USBD_LL_SetupStage+0xd0>)
 8008ca4:	5c9b      	ldrb	r3, [r3, r2]
 8008ca6:	001a      	movs	r2, r3
 8008ca8:	231f      	movs	r3, #31
 8008caa:	4013      	ands	r3, r2
 8008cac:	2b02      	cmp	r3, #2
 8008cae:	d01f      	beq.n	8008cf0 <USBD_LL_SetupStage+0x88>
 8008cb0:	d82b      	bhi.n	8008d0a <USBD_LL_SetupStage+0xa2>
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d002      	beq.n	8008cbc <USBD_LL_SetupStage+0x54>
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d00d      	beq.n	8008cd6 <USBD_LL_SetupStage+0x6e>
 8008cba:	e026      	b.n	8008d0a <USBD_LL_SetupStage+0xa2>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	4a1e      	ldr	r2, [pc, #120]	@ (8008d38 <USBD_LL_SetupStage+0xd0>)
 8008cc0:	189a      	adds	r2, r3, r2
 8008cc2:	230f      	movs	r3, #15
 8008cc4:	18fc      	adds	r4, r7, r3
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	0011      	movs	r1, r2
 8008cca:	0018      	movs	r0, r3
 8008ccc:	f000 fb5c 	bl	8009388 <USBD_StdDevReq>
 8008cd0:	0003      	movs	r3, r0
 8008cd2:	7023      	strb	r3, [r4, #0]
      break;
 8008cd4:	e029      	b.n	8008d2a <USBD_LL_SetupStage+0xc2>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4a17      	ldr	r2, [pc, #92]	@ (8008d38 <USBD_LL_SetupStage+0xd0>)
 8008cda:	189a      	adds	r2, r3, r2
 8008cdc:	230f      	movs	r3, #15
 8008cde:	18fc      	adds	r4, r7, r3
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	0011      	movs	r1, r2
 8008ce4:	0018      	movs	r0, r3
 8008ce6:	f000 fbcd 	bl	8009484 <USBD_StdItfReq>
 8008cea:	0003      	movs	r3, r0
 8008cec:	7023      	strb	r3, [r4, #0]
      break;
 8008cee:	e01c      	b.n	8008d2a <USBD_LL_SetupStage+0xc2>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a11      	ldr	r2, [pc, #68]	@ (8008d38 <USBD_LL_SetupStage+0xd0>)
 8008cf4:	189a      	adds	r2, r3, r2
 8008cf6:	230f      	movs	r3, #15
 8008cf8:	18fc      	adds	r4, r7, r3
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	0011      	movs	r1, r2
 8008cfe:	0018      	movs	r0, r3
 8008d00:	f000 fc4d 	bl	800959e <USBD_StdEPReq>
 8008d04:	0003      	movs	r3, r0
 8008d06:	7023      	strb	r3, [r4, #0]
      break;
 8008d08:	e00f      	b.n	8008d2a <USBD_LL_SetupStage+0xc2>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4a0a      	ldr	r2, [pc, #40]	@ (8008d38 <USBD_LL_SetupStage+0xd0>)
 8008d0e:	5c9b      	ldrb	r3, [r3, r2]
 8008d10:	227f      	movs	r2, #127	@ 0x7f
 8008d12:	4393      	bics	r3, r2
 8008d14:	b2da      	uxtb	r2, r3
 8008d16:	230f      	movs	r3, #15
 8008d18:	18fc      	adds	r4, r7, r3
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	0011      	movs	r1, r2
 8008d1e:	0018      	movs	r0, r3
 8008d20:	f001 ff45 	bl	800abae <USBD_LL_StallEP>
 8008d24:	0003      	movs	r3, r0
 8008d26:	7023      	strb	r3, [r4, #0]
      break;
 8008d28:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8008d2a:	230f      	movs	r3, #15
 8008d2c:	18fb      	adds	r3, r7, r3
 8008d2e:	781b      	ldrb	r3, [r3, #0]
}
 8008d30:	0018      	movs	r0, r3
 8008d32:	46bd      	mov	sp, r7
 8008d34:	b005      	add	sp, #20
 8008d36:	bd90      	pop	{r4, r7, pc}
 8008d38:	000002aa 	.word	0x000002aa

08008d3c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d3e:	b087      	sub	sp, #28
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	607a      	str	r2, [r7, #4]
 8008d46:	200b      	movs	r0, #11
 8008d48:	183b      	adds	r3, r7, r0
 8008d4a:	1c0a      	adds	r2, r1, #0
 8008d4c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008d4e:	2317      	movs	r3, #23
 8008d50:	18fb      	adds	r3, r7, r3
 8008d52:	2200      	movs	r2, #0
 8008d54:	701a      	strb	r2, [r3, #0]
  uint8_t idx;

  if (epnum == 0U)
 8008d56:	183b      	adds	r3, r7, r0
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d000      	beq.n	8008d60 <USBD_LL_DataOutStage+0x24>
 8008d5e:	e084      	b.n	8008e6a <USBD_LL_DataOutStage+0x12e>
  {
    pep = &pdev->ep_out[0];
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	3355      	adds	r3, #85	@ 0x55
 8008d64:	33ff      	adds	r3, #255	@ 0xff
 8008d66:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008d68:	68fa      	ldr	r2, [r7, #12]
 8008d6a:	23a5      	movs	r3, #165	@ 0xa5
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	58d3      	ldr	r3, [r2, r3]
 8008d70:	2b03      	cmp	r3, #3
 8008d72:	d000      	beq.n	8008d76 <USBD_LL_DataOutStage+0x3a>
 8008d74:	e0c0      	b.n	8008ef8 <USBD_LL_DataOutStage+0x1bc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	689a      	ldr	r2, [r3, #8]
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d914      	bls.n	8008dac <USBD_LL_DataOutStage+0x70>
      {
        pep->rem_length -= pep->maxpacket;
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	689a      	ldr	r2, [r3, #8]
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	68db      	ldr	r3, [r3, #12]
 8008d8a:	1ad2      	subs	r2, r2, r3
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	68d9      	ldr	r1, [r3, #12]
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	689a      	ldr	r2, [r3, #8]
 8008d98:	000b      	movs	r3, r1
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d900      	bls.n	8008da0 <USBD_LL_DataOutStage+0x64>
 8008d9e:	0013      	movs	r3, r2
 8008da0:	6879      	ldr	r1, [r7, #4]
 8008da2:	68f8      	ldr	r0, [r7, #12]
 8008da4:	001a      	movs	r2, r3
 8008da6:	f001 faba 	bl	800a31e <USBD_CtlContinueRx>
 8008daa:	e0a5      	b.n	8008ef8 <USBD_LL_DataOutStage+0x1bc>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	4a55      	ldr	r2, [pc, #340]	@ (8008f04 <USBD_LL_DataOutStage+0x1c8>)
 8008db0:	5c9b      	ldrb	r3, [r3, r2]
 8008db2:	001a      	movs	r2, r3
 8008db4:	231f      	movs	r3, #31
 8008db6:	4013      	ands	r3, r2
 8008db8:	2b02      	cmp	r3, #2
 8008dba:	d018      	beq.n	8008dee <USBD_LL_DataOutStage+0xb2>
 8008dbc:	d825      	bhi.n	8008e0a <USBD_LL_DataOutStage+0xce>
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d002      	beq.n	8008dc8 <USBD_LL_DataOutStage+0x8c>
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d005      	beq.n	8008dd2 <USBD_LL_DataOutStage+0x96>
 8008dc6:	e020      	b.n	8008e0a <USBD_LL_DataOutStage+0xce>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008dc8:	2316      	movs	r3, #22
 8008dca:	18fb      	adds	r3, r7, r3
 8008dcc:	2200      	movs	r2, #0
 8008dce:	701a      	strb	r2, [r3, #0]
            break;
 8008dd0:	e020      	b.n	8008e14 <USBD_LL_DataOutStage+0xd8>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	4a4c      	ldr	r2, [pc, #304]	@ (8008f08 <USBD_LL_DataOutStage+0x1cc>)
 8008dd6:	5a9b      	ldrh	r3, [r3, r2]
 8008dd8:	b2da      	uxtb	r2, r3
 8008dda:	2316      	movs	r3, #22
 8008ddc:	18fc      	adds	r4, r7, r3
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	0011      	movs	r1, r2
 8008de2:	0018      	movs	r0, r3
 8008de4:	f000 fa31 	bl	800924a <USBD_CoreFindIF>
 8008de8:	0003      	movs	r3, r0
 8008dea:	7023      	strb	r3, [r4, #0]
            break;
 8008dec:	e012      	b.n	8008e14 <USBD_LL_DataOutStage+0xd8>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	4a45      	ldr	r2, [pc, #276]	@ (8008f08 <USBD_LL_DataOutStage+0x1cc>)
 8008df2:	5a9b      	ldrh	r3, [r3, r2]
 8008df4:	b2da      	uxtb	r2, r3
 8008df6:	2316      	movs	r3, #22
 8008df8:	18fc      	adds	r4, r7, r3
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	0011      	movs	r1, r2
 8008dfe:	0018      	movs	r0, r3
 8008e00:	f000 fa2f 	bl	8009262 <USBD_CoreFindEP>
 8008e04:	0003      	movs	r3, r0
 8008e06:	7023      	strb	r3, [r4, #0]
            break;
 8008e08:	e004      	b.n	8008e14 <USBD_LL_DataOutStage+0xd8>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008e0a:	2316      	movs	r3, #22
 8008e0c:	18fb      	adds	r3, r7, r3
 8008e0e:	2200      	movs	r2, #0
 8008e10:	701a      	strb	r2, [r3, #0]
            break;
 8008e12:	46c0      	nop			@ (mov r8, r8)
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008e14:	2116      	movs	r1, #22
 8008e16:	187b      	adds	r3, r7, r1
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d120      	bne.n	8008e60 <USBD_LL_DataOutStage+0x124>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e1e:	68fa      	ldr	r2, [r7, #12]
 8008e20:	23a7      	movs	r3, #167	@ 0xa7
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	5cd3      	ldrb	r3, [r2, r3]
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	2b03      	cmp	r3, #3
 8008e2a:	d119      	bne.n	8008e60 <USBD_LL_DataOutStage+0x124>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008e2c:	187b      	adds	r3, r7, r1
 8008e2e:	781a      	ldrb	r2, [r3, #0]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	32ae      	adds	r2, #174	@ 0xae
 8008e34:	0092      	lsls	r2, r2, #2
 8008e36:	58d3      	ldr	r3, [r2, r3]
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d010      	beq.n	8008e60 <USBD_LL_DataOutStage+0x124>
            {
              pdev->classId = idx;
 8008e3e:	0008      	movs	r0, r1
 8008e40:	187b      	adds	r3, r7, r1
 8008e42:	7819      	ldrb	r1, [r3, #0]
 8008e44:	68fa      	ldr	r2, [r7, #12]
 8008e46:	23b5      	movs	r3, #181	@ 0xb5
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	50d1      	str	r1, [r2, r3]
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008e4c:	183b      	adds	r3, r7, r0
 8008e4e:	781a      	ldrb	r2, [r3, #0]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	32ae      	adds	r2, #174	@ 0xae
 8008e54:	0092      	lsls	r2, r2, #2
 8008e56:	58d3      	ldr	r3, [r2, r3]
 8008e58:	691b      	ldr	r3, [r3, #16]
 8008e5a:	68fa      	ldr	r2, [r7, #12]
 8008e5c:	0010      	movs	r0, r2
 8008e5e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	0018      	movs	r0, r3
 8008e64:	f001 fa6c 	bl	800a340 <USBD_CtlSendStatus>
 8008e68:	e046      	b.n	8008ef8 <USBD_LL_DataOutStage+0x1bc>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008e6a:	260b      	movs	r6, #11
 8008e6c:	19bb      	adds	r3, r7, r6
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	227f      	movs	r2, #127	@ 0x7f
 8008e72:	4013      	ands	r3, r2
 8008e74:	b2da      	uxtb	r2, r3
 8008e76:	2516      	movs	r5, #22
 8008e78:	197c      	adds	r4, r7, r5
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	0011      	movs	r1, r2
 8008e7e:	0018      	movs	r0, r3
 8008e80:	f000 f9ef 	bl	8009262 <USBD_CoreFindEP>
 8008e84:	0003      	movs	r3, r0
 8008e86:	7023      	strb	r3, [r4, #0]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e88:	0029      	movs	r1, r5
 8008e8a:	187b      	adds	r3, r7, r1
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	2bff      	cmp	r3, #255	@ 0xff
 8008e90:	d032      	beq.n	8008ef8 <USBD_LL_DataOutStage+0x1bc>
 8008e92:	187b      	adds	r3, r7, r1
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d12e      	bne.n	8008ef8 <USBD_LL_DataOutStage+0x1bc>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e9a:	68fa      	ldr	r2, [r7, #12]
 8008e9c:	23a7      	movs	r3, #167	@ 0xa7
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	5cd3      	ldrb	r3, [r2, r3]
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	2b03      	cmp	r3, #3
 8008ea6:	d11f      	bne.n	8008ee8 <USBD_LL_DataOutStage+0x1ac>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008ea8:	187b      	adds	r3, r7, r1
 8008eaa:	781a      	ldrb	r2, [r3, #0]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	32ae      	adds	r2, #174	@ 0xae
 8008eb0:	0092      	lsls	r2, r2, #2
 8008eb2:	58d3      	ldr	r3, [r2, r3]
 8008eb4:	699b      	ldr	r3, [r3, #24]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d016      	beq.n	8008ee8 <USBD_LL_DataOutStage+0x1ac>
        {
          pdev->classId = idx;
 8008eba:	0008      	movs	r0, r1
 8008ebc:	187b      	adds	r3, r7, r1
 8008ebe:	7819      	ldrb	r1, [r3, #0]
 8008ec0:	68fa      	ldr	r2, [r7, #12]
 8008ec2:	23b5      	movs	r3, #181	@ 0xb5
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	50d1      	str	r1, [r2, r3]
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008ec8:	183b      	adds	r3, r7, r0
 8008eca:	781a      	ldrb	r2, [r3, #0]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	32ae      	adds	r2, #174	@ 0xae
 8008ed0:	0092      	lsls	r2, r2, #2
 8008ed2:	58d3      	ldr	r3, [r2, r3]
 8008ed4:	699b      	ldr	r3, [r3, #24]
 8008ed6:	2217      	movs	r2, #23
 8008ed8:	18bc      	adds	r4, r7, r2
 8008eda:	19ba      	adds	r2, r7, r6
 8008edc:	7811      	ldrb	r1, [r2, #0]
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	0010      	movs	r0, r2
 8008ee2:	4798      	blx	r3
 8008ee4:	0003      	movs	r3, r0
 8008ee6:	7023      	strb	r3, [r4, #0]
        }
      }
      if (ret != USBD_OK)
 8008ee8:	2217      	movs	r2, #23
 8008eea:	18bb      	adds	r3, r7, r2
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d002      	beq.n	8008ef8 <USBD_LL_DataOutStage+0x1bc>
      {
        return ret;
 8008ef2:	18bb      	adds	r3, r7, r2
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	e000      	b.n	8008efa <USBD_LL_DataOutStage+0x1be>
      }
    }
  }

  return USBD_OK;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	0018      	movs	r0, r3
 8008efc:	46bd      	mov	sp, r7
 8008efe:	b007      	add	sp, #28
 8008f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f02:	46c0      	nop			@ (mov r8, r8)
 8008f04:	000002aa 	.word	0x000002aa
 8008f08:	000002ae 	.word	0x000002ae

08008f0c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f0e:	b087      	sub	sp, #28
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	607a      	str	r2, [r7, #4]
 8008f16:	200b      	movs	r0, #11
 8008f18:	183b      	adds	r3, r7, r0
 8008f1a:	1c0a      	adds	r2, r1, #0
 8008f1c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008f1e:	183b      	adds	r3, r7, r0
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d000      	beq.n	8008f28 <USBD_LL_DataInStage+0x1c>
 8008f26:	e07d      	b.n	8009024 <USBD_LL_DataInStage+0x118>
  {
    pep = &pdev->ep_in[0];
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	3314      	adds	r3, #20
 8008f2c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008f2e:	68fa      	ldr	r2, [r7, #12]
 8008f30:	23a5      	movs	r3, #165	@ 0xa5
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	58d3      	ldr	r3, [r2, r3]
 8008f36:	2b02      	cmp	r3, #2
 8008f38:	d164      	bne.n	8009004 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	689a      	ldr	r2, [r3, #8]
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d914      	bls.n	8008f70 <USBD_LL_DataInStage+0x64>
      {
        pep->rem_length -= pep->maxpacket;
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	689a      	ldr	r2, [r3, #8]
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	68db      	ldr	r3, [r3, #12]
 8008f4e:	1ad2      	subs	r2, r2, r3
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	689a      	ldr	r2, [r3, #8]
 8008f58:	6879      	ldr	r1, [r7, #4]
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	0018      	movs	r0, r3
 8008f5e:	f001 f9ad 	bl	800a2bc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	2300      	movs	r3, #0
 8008f66:	2200      	movs	r2, #0
 8008f68:	2100      	movs	r1, #0
 8008f6a:	f001 ff02 	bl	800ad72 <USBD_LL_PrepareReceive>
 8008f6e:	e049      	b.n	8009004 <USBD_LL_DataInStage+0xf8>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	68da      	ldr	r2, [r3, #12]
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d11f      	bne.n	8008fbc <USBD_LL_DataInStage+0xb0>
            (pep->total_length >= pep->maxpacket) &&
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	685a      	ldr	r2, [r3, #4]
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d319      	bcc.n	8008fbc <USBD_LL_DataInStage+0xb0>
            (pep->total_length < pdev->ep0_data_len))
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	685a      	ldr	r2, [r3, #4]
 8008f8c:	68f9      	ldr	r1, [r7, #12]
 8008f8e:	23a6      	movs	r3, #166	@ 0xa6
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d211      	bcs.n	8008fbc <USBD_LL_DataInStage+0xb0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	2100      	movs	r1, #0
 8008f9e:	0018      	movs	r0, r3
 8008fa0:	f001 f98c 	bl	800a2bc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008fa4:	68fa      	ldr	r2, [r7, #12]
 8008fa6:	23a6      	movs	r3, #166	@ 0xa6
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	2100      	movs	r1, #0
 8008fac:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fae:	68f8      	ldr	r0, [r7, #12]
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	2100      	movs	r1, #0
 8008fb6:	f001 fedc 	bl	800ad72 <USBD_LL_PrepareReceive>
 8008fba:	e023      	b.n	8009004 <USBD_LL_DataInStage+0xf8>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fbc:	68fa      	ldr	r2, [r7, #12]
 8008fbe:	23a7      	movs	r3, #167	@ 0xa7
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	5cd3      	ldrb	r3, [r2, r3]
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	2b03      	cmp	r3, #3
 8008fc8:	d113      	bne.n	8008ff2 <USBD_LL_DataInStage+0xe6>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008fca:	68fa      	ldr	r2, [r7, #12]
 8008fcc:	23ae      	movs	r3, #174	@ 0xae
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	58d3      	ldr	r3, [r2, r3]
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d00c      	beq.n	8008ff2 <USBD_LL_DataInStage+0xe6>
            {
              pdev->classId = 0U;
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	23b5      	movs	r3, #181	@ 0xb5
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	2100      	movs	r1, #0
 8008fe0:	50d1      	str	r1, [r2, r3]
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008fe2:	68fa      	ldr	r2, [r7, #12]
 8008fe4:	23ae      	movs	r3, #174	@ 0xae
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	58d3      	ldr	r3, [r2, r3]
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	68fa      	ldr	r2, [r7, #12]
 8008fee:	0010      	movs	r0, r2
 8008ff0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2180      	movs	r1, #128	@ 0x80
 8008ff6:	0018      	movs	r0, r3
 8008ff8:	f001 fdd9 	bl	800abae <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	0018      	movs	r0, r3
 8009000:	f001 f9b2 	bl	800a368 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	23a8      	movs	r3, #168	@ 0xa8
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	5cd3      	ldrb	r3, [r2, r3]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d050      	beq.n	80090b2 <USBD_LL_DataInStage+0x1a6>
    {
      (void)USBD_RunTestMode(pdev);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	0018      	movs	r0, r3
 8009014:	f7ff fdd9 	bl	8008bca <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	23a8      	movs	r3, #168	@ 0xa8
 800901c:	009b      	lsls	r3, r3, #2
 800901e:	2100      	movs	r1, #0
 8009020:	54d1      	strb	r1, [r2, r3]
 8009022:	e046      	b.n	80090b2 <USBD_LL_DataInStage+0x1a6>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009024:	260b      	movs	r6, #11
 8009026:	19bb      	adds	r3, r7, r6
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	2280      	movs	r2, #128	@ 0x80
 800902c:	4252      	negs	r2, r2
 800902e:	4313      	orrs	r3, r2
 8009030:	b2da      	uxtb	r2, r3
 8009032:	2517      	movs	r5, #23
 8009034:	197c      	adds	r4, r7, r5
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	0011      	movs	r1, r2
 800903a:	0018      	movs	r0, r3
 800903c:	f000 f911 	bl	8009262 <USBD_CoreFindEP>
 8009040:	0003      	movs	r3, r0
 8009042:	7023      	strb	r3, [r4, #0]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009044:	0029      	movs	r1, r5
 8009046:	187b      	adds	r3, r7, r1
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	2bff      	cmp	r3, #255	@ 0xff
 800904c:	d031      	beq.n	80090b2 <USBD_LL_DataInStage+0x1a6>
 800904e:	187b      	adds	r3, r7, r1
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d12d      	bne.n	80090b2 <USBD_LL_DataInStage+0x1a6>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009056:	68fa      	ldr	r2, [r7, #12]
 8009058:	23a7      	movs	r3, #167	@ 0xa7
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	5cd3      	ldrb	r3, [r2, r3]
 800905e:	b2db      	uxtb	r3, r3
 8009060:	2b03      	cmp	r3, #3
 8009062:	d126      	bne.n	80090b2 <USBD_LL_DataInStage+0x1a6>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009064:	187b      	adds	r3, r7, r1
 8009066:	781a      	ldrb	r2, [r3, #0]
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	32ae      	adds	r2, #174	@ 0xae
 800906c:	0092      	lsls	r2, r2, #2
 800906e:	58d3      	ldr	r3, [r2, r3]
 8009070:	695b      	ldr	r3, [r3, #20]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d01d      	beq.n	80090b2 <USBD_LL_DataInStage+0x1a6>
        {
          pdev->classId = idx;
 8009076:	0008      	movs	r0, r1
 8009078:	187b      	adds	r3, r7, r1
 800907a:	7819      	ldrb	r1, [r3, #0]
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	23b5      	movs	r3, #181	@ 0xb5
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	50d1      	str	r1, [r2, r3]
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009084:	183b      	adds	r3, r7, r0
 8009086:	781a      	ldrb	r2, [r3, #0]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	32ae      	adds	r2, #174	@ 0xae
 800908c:	0092      	lsls	r2, r2, #2
 800908e:	58d3      	ldr	r3, [r2, r3]
 8009090:	695b      	ldr	r3, [r3, #20]
 8009092:	2516      	movs	r5, #22
 8009094:	197c      	adds	r4, r7, r5
 8009096:	19ba      	adds	r2, r7, r6
 8009098:	7811      	ldrb	r1, [r2, #0]
 800909a:	68fa      	ldr	r2, [r7, #12]
 800909c:	0010      	movs	r0, r2
 800909e:	4798      	blx	r3
 80090a0:	0003      	movs	r3, r0
 80090a2:	7023      	strb	r3, [r4, #0]

          if (ret != USBD_OK)
 80090a4:	197b      	adds	r3, r7, r5
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d002      	beq.n	80090b2 <USBD_LL_DataInStage+0x1a6>
          {
            return ret;
 80090ac:	197b      	adds	r3, r7, r5
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	e000      	b.n	80090b4 <USBD_LL_DataInStage+0x1a8>
        }
      }
    }
  }

  return USBD_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	0018      	movs	r0, r3
 80090b6:	46bd      	mov	sp, r7
 80090b8:	b007      	add	sp, #28
 80090ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080090bc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80090bc:	b590      	push	{r4, r7, lr}
 80090be:	b085      	sub	sp, #20
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80090c4:	240f      	movs	r4, #15
 80090c6:	193b      	adds	r3, r7, r4
 80090c8:	2200      	movs	r2, #0
 80090ca:	701a      	strb	r2, [r3, #0]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	23a7      	movs	r3, #167	@ 0xa7
 80090d0:	009b      	lsls	r3, r3, #2
 80090d2:	2101      	movs	r1, #1
 80090d4:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	23a5      	movs	r3, #165	@ 0xa5
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	2100      	movs	r1, #0
 80090de:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80090e6:	687a      	ldr	r2, [r7, #4]
 80090e8:	23a9      	movs	r3, #169	@ 0xa9
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	2100      	movs	r1, #0
 80090ee:	50d1      	str	r1, [r2, r3]
  pdev->dev_test_mode = 0U;
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	23a8      	movs	r3, #168	@ 0xa8
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	2100      	movs	r1, #0
 80090f8:	54d1      	strb	r1, [r2, r3]
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	23ae      	movs	r3, #174	@ 0xae
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	58d3      	ldr	r3, [r2, r3]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d016      	beq.n	8009134 <USBD_LL_Reset+0x78>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	23ae      	movs	r3, #174	@ 0xae
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	58d3      	ldr	r3, [r2, r3]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d00f      	beq.n	8009134 <USBD_LL_Reset+0x78>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	23ae      	movs	r3, #174	@ 0xae
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	58d3      	ldr	r3, [r2, r3]
 800911c:	685a      	ldr	r2, [r3, #4]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	b2d9      	uxtb	r1, r3
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	0018      	movs	r0, r3
 8009128:	4790      	blx	r2
 800912a:	1e03      	subs	r3, r0, #0
 800912c:	d002      	beq.n	8009134 <USBD_LL_Reset+0x78>
      {
        ret = USBD_FAIL;
 800912e:	193b      	adds	r3, r7, r4
 8009130:	2203      	movs	r2, #3
 8009132:	701a      	strb	r2, [r3, #0]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	2340      	movs	r3, #64	@ 0x40
 8009138:	2200      	movs	r2, #0
 800913a:	2100      	movs	r1, #0
 800913c:	f001 fcd5 	bl	800aaea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	23b2      	movs	r3, #178	@ 0xb2
 8009144:	005b      	lsls	r3, r3, #1
 8009146:	2101      	movs	r1, #1
 8009148:	52d1      	strh	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800914a:	687a      	ldr	r2, [r7, #4]
 800914c:	23b0      	movs	r3, #176	@ 0xb0
 800914e:	005b      	lsls	r3, r3, #1
 8009150:	2140      	movs	r1, #64	@ 0x40
 8009152:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	2340      	movs	r3, #64	@ 0x40
 8009158:	2200      	movs	r2, #0
 800915a:	2180      	movs	r1, #128	@ 0x80
 800915c:	f001 fcc5 	bl	800aaea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2201      	movs	r2, #1
 8009164:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2240      	movs	r2, #64	@ 0x40
 800916a:	621a      	str	r2, [r3, #32]

  return ret;
 800916c:	230f      	movs	r3, #15
 800916e:	18fb      	adds	r3, r7, r3
 8009170:	781b      	ldrb	r3, [r3, #0]
}
 8009172:	0018      	movs	r0, r3
 8009174:	46bd      	mov	sp, r7
 8009176:	b005      	add	sp, #20
 8009178:	bd90      	pop	{r4, r7, pc}

0800917a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800917a:	b580      	push	{r7, lr}
 800917c:	b082      	sub	sp, #8
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
 8009182:	000a      	movs	r2, r1
 8009184:	1cfb      	adds	r3, r7, #3
 8009186:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	1cfa      	adds	r2, r7, #3
 800918c:	7812      	ldrb	r2, [r2, #0]
 800918e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009190:	2300      	movs	r3, #0
}
 8009192:	0018      	movs	r0, r3
 8009194:	46bd      	mov	sp, r7
 8009196:	b002      	add	sp, #8
 8009198:	bd80      	pop	{r7, pc}
	...

0800919c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	23a7      	movs	r3, #167	@ 0xa7
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	5cd3      	ldrb	r3, [r2, r3]
 80091ac:	b2d9      	uxtb	r1, r3
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4a05      	ldr	r2, [pc, #20]	@ (80091c8 <USBD_LL_Suspend+0x2c>)
 80091b2:	5499      	strb	r1, [r3, r2]
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	23a7      	movs	r3, #167	@ 0xa7
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	2104      	movs	r1, #4
 80091bc:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 80091be:	2300      	movs	r3, #0
}
 80091c0:	0018      	movs	r0, r3
 80091c2:	46bd      	mov	sp, r7
 80091c4:	b002      	add	sp, #8
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	0000029d 	.word	0x0000029d

080091cc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b082      	sub	sp, #8
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	23a7      	movs	r3, #167	@ 0xa7
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	5cd3      	ldrb	r3, [r2, r3]
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	2b04      	cmp	r3, #4
 80091e0:	d107      	bne.n	80091f2 <USBD_LL_Resume+0x26>
  {
    pdev->dev_state = pdev->dev_old_state;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	4a05      	ldr	r2, [pc, #20]	@ (80091fc <USBD_LL_Resume+0x30>)
 80091e6:	5c9b      	ldrb	r3, [r3, r2]
 80091e8:	b2d9      	uxtb	r1, r3
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	23a7      	movs	r3, #167	@ 0xa7
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 80091f2:	2300      	movs	r3, #0
}
 80091f4:	0018      	movs	r0, r3
 80091f6:	46bd      	mov	sp, r7
 80091f8:	b002      	add	sp, #8
 80091fa:	bd80      	pop	{r7, pc}
 80091fc:	0000029d 	.word	0x0000029d

08009200 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009208:	687a      	ldr	r2, [r7, #4]
 800920a:	23a7      	movs	r3, #167	@ 0xa7
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	5cd3      	ldrb	r3, [r2, r3]
 8009210:	b2db      	uxtb	r3, r3
 8009212:	2b03      	cmp	r3, #3
 8009214:	d114      	bne.n	8009240 <USBD_LL_SOF+0x40>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	23ae      	movs	r3, #174	@ 0xae
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	58d3      	ldr	r3, [r2, r3]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d00e      	beq.n	8009240 <USBD_LL_SOF+0x40>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	23ae      	movs	r3, #174	@ 0xae
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	58d3      	ldr	r3, [r2, r3]
 800922a:	69db      	ldr	r3, [r3, #28]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d007      	beq.n	8009240 <USBD_LL_SOF+0x40>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	23ae      	movs	r3, #174	@ 0xae
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	58d3      	ldr	r3, [r2, r3]
 8009238:	69db      	ldr	r3, [r3, #28]
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	0010      	movs	r0, r2
 800923e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	0018      	movs	r0, r3
 8009244:	46bd      	mov	sp, r7
 8009246:	b002      	add	sp, #8
 8009248:	bd80      	pop	{r7, pc}

0800924a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800924a:	b580      	push	{r7, lr}
 800924c:	b082      	sub	sp, #8
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
 8009252:	000a      	movs	r2, r1
 8009254:	1cfb      	adds	r3, r7, #3
 8009256:	701a      	strb	r2, [r3, #0]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009258:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800925a:	0018      	movs	r0, r3
 800925c:	46bd      	mov	sp, r7
 800925e:	b002      	add	sp, #8
 8009260:	bd80      	pop	{r7, pc}

08009262 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009262:	b580      	push	{r7, lr}
 8009264:	b082      	sub	sp, #8
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
 800926a:	000a      	movs	r2, r1
 800926c:	1cfb      	adds	r3, r7, #3
 800926e:	701a      	strb	r2, [r3, #0]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009270:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009272:	0018      	movs	r0, r3
 8009274:	46bd      	mov	sp, r7
 8009276:	b002      	add	sp, #8
 8009278:	bd80      	pop	{r7, pc}

0800927a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800927a:	b580      	push	{r7, lr}
 800927c:	b086      	sub	sp, #24
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
 8009282:	000a      	movs	r2, r1
 8009284:	1cfb      	adds	r3, r7, #3
 8009286:	701a      	strb	r2, [r3, #0]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009290:	2300      	movs	r3, #0
 8009292:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	789a      	ldrb	r2, [r3, #2]
 8009298:	78db      	ldrb	r3, [r3, #3]
 800929a:	021b      	lsls	r3, r3, #8
 800929c:	4313      	orrs	r3, r2
 800929e:	b29b      	uxth	r3, r3
 80092a0:	68fa      	ldr	r2, [r7, #12]
 80092a2:	7812      	ldrb	r2, [r2, #0]
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d92a      	bls.n	80092fe <USBD_GetEpDesc+0x84>
  {
    ptr = desc->bLength;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	001a      	movs	r2, r3
 80092ae:	230a      	movs	r3, #10
 80092b0:	18fb      	adds	r3, r7, r3
 80092b2:	801a      	strh	r2, [r3, #0]

    while (ptr < desc->wTotalLength)
 80092b4:	e016      	b.n	80092e4 <USBD_GetEpDesc+0x6a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80092b6:	230a      	movs	r3, #10
 80092b8:	18fa      	adds	r2, r7, r3
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	0011      	movs	r1, r2
 80092be:	0018      	movs	r0, r3
 80092c0:	f000 f822 	bl	8009308 <USBD_GetNextDesc>
 80092c4:	0003      	movs	r3, r0
 80092c6:	617b      	str	r3, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	785b      	ldrb	r3, [r3, #1]
 80092cc:	2b05      	cmp	r3, #5
 80092ce:	d109      	bne.n	80092e4 <USBD_GetEpDesc+0x6a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	789b      	ldrb	r3, [r3, #2]
 80092d8:	1cfa      	adds	r2, r7, #3
 80092da:	7812      	ldrb	r2, [r2, #0]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d00d      	beq.n	80092fc <USBD_GetEpDesc+0x82>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80092e0:	2300      	movs	r3, #0
 80092e2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	789a      	ldrb	r2, [r3, #2]
 80092e8:	78db      	ldrb	r3, [r3, #3]
 80092ea:	021b      	lsls	r3, r3, #8
 80092ec:	4313      	orrs	r3, r2
 80092ee:	b29a      	uxth	r2, r3
 80092f0:	230a      	movs	r3, #10
 80092f2:	18fb      	adds	r3, r7, r3
 80092f4:	881b      	ldrh	r3, [r3, #0]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d8dd      	bhi.n	80092b6 <USBD_GetEpDesc+0x3c>
 80092fa:	e000      	b.n	80092fe <USBD_GetEpDesc+0x84>
          break;
 80092fc:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }

  return (void *)pEpDesc;
 80092fe:	693b      	ldr	r3, [r7, #16]
}
 8009300:	0018      	movs	r0, r3
 8009302:	46bd      	mov	sp, r7
 8009304:	b006      	add	sp, #24
 8009306:	bd80      	pop	{r7, pc}

08009308 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	881b      	ldrh	r3, [r3, #0]
 800931a:	68fa      	ldr	r2, [r7, #12]
 800931c:	7812      	ldrb	r2, [r2, #0]
 800931e:	189b      	adds	r3, r3, r2
 8009320:	b29a      	uxth	r2, r3
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	001a      	movs	r2, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	189b      	adds	r3, r3, r2
 8009330:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009332:	68fb      	ldr	r3, [r7, #12]
}
 8009334:	0018      	movs	r0, r3
 8009336:	46bd      	mov	sp, r7
 8009338:	b004      	add	sp, #16
 800933a:	bd80      	pop	{r7, pc}

0800933c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b086      	sub	sp, #24
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	781a      	ldrb	r2, [r3, #0]
 800934c:	2112      	movs	r1, #18
 800934e:	187b      	adds	r3, r7, r1
 8009350:	801a      	strh	r2, [r3, #0]
  _pbuff++;
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	3301      	adds	r3, #1
 8009356:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	781a      	ldrb	r2, [r3, #0]
 800935c:	2010      	movs	r0, #16
 800935e:	183b      	adds	r3, r7, r0
 8009360:	801a      	strh	r2, [r3, #0]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009362:	183b      	adds	r3, r7, r0
 8009364:	2200      	movs	r2, #0
 8009366:	5e9b      	ldrsh	r3, [r3, r2]
 8009368:	021b      	lsls	r3, r3, #8
 800936a:	b21a      	sxth	r2, r3
 800936c:	187b      	adds	r3, r7, r1
 800936e:	2100      	movs	r1, #0
 8009370:	5e5b      	ldrsh	r3, [r3, r1]
 8009372:	4313      	orrs	r3, r2
 8009374:	b21a      	sxth	r2, r3
 8009376:	210e      	movs	r1, #14
 8009378:	187b      	adds	r3, r7, r1
 800937a:	801a      	strh	r2, [r3, #0]

  return _SwapVal;
 800937c:	187b      	adds	r3, r7, r1
 800937e:	881b      	ldrh	r3, [r3, #0]
}
 8009380:	0018      	movs	r0, r3
 8009382:	46bd      	mov	sp, r7
 8009384:	b006      	add	sp, #24
 8009386:	bd80      	pop	{r7, pc}

08009388 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009388:	b590      	push	{r4, r7, lr}
 800938a:	b085      	sub	sp, #20
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009392:	230f      	movs	r3, #15
 8009394:	18fb      	adds	r3, r7, r3
 8009396:	2200      	movs	r2, #0
 8009398:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	001a      	movs	r2, r3
 80093a0:	2360      	movs	r3, #96	@ 0x60
 80093a2:	4013      	ands	r3, r2
 80093a4:	2b40      	cmp	r3, #64	@ 0x40
 80093a6:	d004      	beq.n	80093b2 <USBD_StdDevReq+0x2a>
 80093a8:	d85b      	bhi.n	8009462 <USBD_StdDevReq+0xda>
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d013      	beq.n	80093d6 <USBD_StdDevReq+0x4e>
 80093ae:	2b20      	cmp	r3, #32
 80093b0:	d157      	bne.n	8009462 <USBD_StdDevReq+0xda>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	23b5      	movs	r3, #181	@ 0xb5
 80093b6:	009b      	lsls	r3, r3, #2
 80093b8:	58d2      	ldr	r2, [r2, r3]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	32ae      	adds	r2, #174	@ 0xae
 80093be:	0092      	lsls	r2, r2, #2
 80093c0:	58d3      	ldr	r3, [r2, r3]
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	220f      	movs	r2, #15
 80093c6:	18bc      	adds	r4, r7, r2
 80093c8:	6839      	ldr	r1, [r7, #0]
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	0010      	movs	r0, r2
 80093ce:	4798      	blx	r3
 80093d0:	0003      	movs	r3, r0
 80093d2:	7023      	strb	r3, [r4, #0]
      break;
 80093d4:	e04c      	b.n	8009470 <USBD_StdDevReq+0xe8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	785b      	ldrb	r3, [r3, #1]
 80093da:	2b09      	cmp	r3, #9
 80093dc:	d839      	bhi.n	8009452 <USBD_StdDevReq+0xca>
 80093de:	009a      	lsls	r2, r3, #2
 80093e0:	4b27      	ldr	r3, [pc, #156]	@ (8009480 <USBD_StdDevReq+0xf8>)
 80093e2:	18d3      	adds	r3, r2, r3
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80093e8:	683a      	ldr	r2, [r7, #0]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	0011      	movs	r1, r2
 80093ee:	0018      	movs	r0, r3
 80093f0:	f000 fada 	bl	80099a8 <USBD_GetDescriptor>
          break;
 80093f4:	e034      	b.n	8009460 <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80093f6:	683a      	ldr	r2, [r7, #0]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	0011      	movs	r1, r2
 80093fc:	0018      	movs	r0, r3
 80093fe:	f000 fc8b 	bl	8009d18 <USBD_SetAddress>
          break;
 8009402:	e02d      	b.n	8009460 <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009404:	230f      	movs	r3, #15
 8009406:	18fc      	adds	r4, r7, r3
 8009408:	683a      	ldr	r2, [r7, #0]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	0011      	movs	r1, r2
 800940e:	0018      	movs	r0, r3
 8009410:	f000 fcd8 	bl	8009dc4 <USBD_SetConfig>
 8009414:	0003      	movs	r3, r0
 8009416:	7023      	strb	r3, [r4, #0]
          break;
 8009418:	e022      	b.n	8009460 <USBD_StdDevReq+0xd8>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800941a:	683a      	ldr	r2, [r7, #0]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	0011      	movs	r1, r2
 8009420:	0018      	movs	r0, r3
 8009422:	f000 fd9d 	bl	8009f60 <USBD_GetConfig>
          break;
 8009426:	e01b      	b.n	8009460 <USBD_StdDevReq+0xd8>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009428:	683a      	ldr	r2, [r7, #0]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	0011      	movs	r1, r2
 800942e:	0018      	movs	r0, r3
 8009430:	f000 fdd2 	bl	8009fd8 <USBD_GetStatus>
          break;
 8009434:	e014      	b.n	8009460 <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009436:	683a      	ldr	r2, [r7, #0]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	0011      	movs	r1, r2
 800943c:	0018      	movs	r0, r3
 800943e:	f000 fe06 	bl	800a04e <USBD_SetFeature>
          break;
 8009442:	e00d      	b.n	8009460 <USBD_StdDevReq+0xd8>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009444:	683a      	ldr	r2, [r7, #0]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	0011      	movs	r1, r2
 800944a:	0018      	movs	r0, r3
 800944c:	f000 fe2e 	bl	800a0ac <USBD_ClrFeature>
          break;
 8009450:	e006      	b.n	8009460 <USBD_StdDevReq+0xd8>

        default:
          USBD_CtlError(pdev, req);
 8009452:	683a      	ldr	r2, [r7, #0]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	0011      	movs	r1, r2
 8009458:	0018      	movs	r0, r3
 800945a:	f000 fe8b 	bl	800a174 <USBD_CtlError>
          break;
 800945e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8009460:	e006      	b.n	8009470 <USBD_StdDevReq+0xe8>

    default:
      USBD_CtlError(pdev, req);
 8009462:	683a      	ldr	r2, [r7, #0]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	0011      	movs	r1, r2
 8009468:	0018      	movs	r0, r3
 800946a:	f000 fe83 	bl	800a174 <USBD_CtlError>
      break;
 800946e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8009470:	230f      	movs	r3, #15
 8009472:	18fb      	adds	r3, r7, r3
 8009474:	781b      	ldrb	r3, [r3, #0]
}
 8009476:	0018      	movs	r0, r3
 8009478:	46bd      	mov	sp, r7
 800947a:	b005      	add	sp, #20
 800947c:	bd90      	pop	{r4, r7, pc}
 800947e:	46c0      	nop			@ (mov r8, r8)
 8009480:	0800b928 	.word	0x0800b928

08009484 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009484:	b5b0      	push	{r4, r5, r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800948e:	230f      	movs	r3, #15
 8009490:	18fb      	adds	r3, r7, r3
 8009492:	2200      	movs	r2, #0
 8009494:	701a      	strb	r2, [r3, #0]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	001a      	movs	r2, r3
 800949c:	2360      	movs	r3, #96	@ 0x60
 800949e:	4013      	ands	r3, r2
 80094a0:	2b40      	cmp	r3, #64	@ 0x40
 80094a2:	d005      	beq.n	80094b0 <USBD_StdItfReq+0x2c>
 80094a4:	d900      	bls.n	80094a8 <USBD_StdItfReq+0x24>
 80094a6:	e06c      	b.n	8009582 <USBD_StdItfReq+0xfe>
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d001      	beq.n	80094b0 <USBD_StdItfReq+0x2c>
 80094ac:	2b20      	cmp	r3, #32
 80094ae:	d168      	bne.n	8009582 <USBD_StdItfReq+0xfe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	23a7      	movs	r3, #167	@ 0xa7
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	5cd3      	ldrb	r3, [r2, r3]
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	3b01      	subs	r3, #1
 80094bc:	2b02      	cmp	r3, #2
 80094be:	d857      	bhi.n	8009570 <USBD_StdItfReq+0xec>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	889b      	ldrh	r3, [r3, #4]
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d84b      	bhi.n	8009562 <USBD_StdItfReq+0xde>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	889b      	ldrh	r3, [r3, #4]
 80094ce:	b2da      	uxtb	r2, r3
 80094d0:	250e      	movs	r5, #14
 80094d2:	197c      	adds	r4, r7, r5
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	0011      	movs	r1, r2
 80094d8:	0018      	movs	r0, r3
 80094da:	f7ff feb6 	bl	800924a <USBD_CoreFindIF>
 80094de:	0003      	movs	r3, r0
 80094e0:	7023      	strb	r3, [r4, #0]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80094e2:	0029      	movs	r1, r5
 80094e4:	187b      	adds	r3, r7, r1
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	2bff      	cmp	r3, #255	@ 0xff
 80094ea:	d028      	beq.n	800953e <USBD_StdItfReq+0xba>
 80094ec:	187b      	adds	r3, r7, r1
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d124      	bne.n	800953e <USBD_StdItfReq+0xba>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80094f4:	187b      	adds	r3, r7, r1
 80094f6:	781a      	ldrb	r2, [r3, #0]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	32ae      	adds	r2, #174	@ 0xae
 80094fc:	0092      	lsls	r2, r2, #2
 80094fe:	58d3      	ldr	r3, [r2, r3]
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d016      	beq.n	8009534 <USBD_StdItfReq+0xb0>
              {
                pdev->classId = idx;
 8009506:	0008      	movs	r0, r1
 8009508:	187b      	adds	r3, r7, r1
 800950a:	7819      	ldrb	r1, [r3, #0]
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	23b5      	movs	r3, #181	@ 0xb5
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	50d1      	str	r1, [r2, r3]
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009514:	183b      	adds	r3, r7, r0
 8009516:	781a      	ldrb	r2, [r3, #0]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	32ae      	adds	r2, #174	@ 0xae
 800951c:	0092      	lsls	r2, r2, #2
 800951e:	58d3      	ldr	r3, [r2, r3]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	220f      	movs	r2, #15
 8009524:	18bc      	adds	r4, r7, r2
 8009526:	6839      	ldr	r1, [r7, #0]
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	0010      	movs	r0, r2
 800952c:	4798      	blx	r3
 800952e:	0003      	movs	r3, r0
 8009530:	7023      	strb	r3, [r4, #0]
              if (pdev->pClass[idx]->Setup != NULL)
 8009532:	e008      	b.n	8009546 <USBD_StdItfReq+0xc2>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009534:	230f      	movs	r3, #15
 8009536:	18fb      	adds	r3, r7, r3
 8009538:	2203      	movs	r2, #3
 800953a:	701a      	strb	r2, [r3, #0]
              if (pdev->pClass[idx]->Setup != NULL)
 800953c:	e003      	b.n	8009546 <USBD_StdItfReq+0xc2>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800953e:	230f      	movs	r3, #15
 8009540:	18fb      	adds	r3, r7, r3
 8009542:	2203      	movs	r2, #3
 8009544:	701a      	strb	r2, [r3, #0]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	88db      	ldrh	r3, [r3, #6]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d117      	bne.n	800957e <USBD_StdItfReq+0xfa>
 800954e:	230f      	movs	r3, #15
 8009550:	18fb      	adds	r3, r7, r3
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d112      	bne.n	800957e <USBD_StdItfReq+0xfa>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	0018      	movs	r0, r3
 800955c:	f000 fef0 	bl	800a340 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009560:	e00d      	b.n	800957e <USBD_StdItfReq+0xfa>
            USBD_CtlError(pdev, req);
 8009562:	683a      	ldr	r2, [r7, #0]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	0011      	movs	r1, r2
 8009568:	0018      	movs	r0, r3
 800956a:	f000 fe03 	bl	800a174 <USBD_CtlError>
          break;
 800956e:	e006      	b.n	800957e <USBD_StdItfReq+0xfa>

        default:
          USBD_CtlError(pdev, req);
 8009570:	683a      	ldr	r2, [r7, #0]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	0011      	movs	r1, r2
 8009576:	0018      	movs	r0, r3
 8009578:	f000 fdfc 	bl	800a174 <USBD_CtlError>
          break;
 800957c:	e000      	b.n	8009580 <USBD_StdItfReq+0xfc>
          break;
 800957e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8009580:	e006      	b.n	8009590 <USBD_StdItfReq+0x10c>

    default:
      USBD_CtlError(pdev, req);
 8009582:	683a      	ldr	r2, [r7, #0]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	0011      	movs	r1, r2
 8009588:	0018      	movs	r0, r3
 800958a:	f000 fdf3 	bl	800a174 <USBD_CtlError>
      break;
 800958e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8009590:	230f      	movs	r3, #15
 8009592:	18fb      	adds	r3, r7, r3
 8009594:	781b      	ldrb	r3, [r3, #0]
}
 8009596:	0018      	movs	r0, r3
 8009598:	46bd      	mov	sp, r7
 800959a:	b004      	add	sp, #16
 800959c:	bdb0      	pop	{r4, r5, r7, pc}

0800959e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800959e:	b5b0      	push	{r4, r5, r7, lr}
 80095a0:	b084      	sub	sp, #16
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
 80095a6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80095a8:	230f      	movs	r3, #15
 80095aa:	18fb      	adds	r3, r7, r3
 80095ac:	2200      	movs	r2, #0
 80095ae:	701a      	strb	r2, [r3, #0]

  ep_addr = LOBYTE(req->wIndex);
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	889a      	ldrh	r2, [r3, #4]
 80095b4:	230e      	movs	r3, #14
 80095b6:	18fb      	adds	r3, r7, r3
 80095b8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	001a      	movs	r2, r3
 80095c0:	2360      	movs	r3, #96	@ 0x60
 80095c2:	4013      	ands	r3, r2
 80095c4:	2b40      	cmp	r3, #64	@ 0x40
 80095c6:	d006      	beq.n	80095d6 <USBD_StdEPReq+0x38>
 80095c8:	d900      	bls.n	80095cc <USBD_StdEPReq+0x2e>
 80095ca:	e1de      	b.n	800998a <USBD_StdEPReq+0x3ec>
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d039      	beq.n	8009644 <USBD_StdEPReq+0xa6>
 80095d0:	2b20      	cmp	r3, #32
 80095d2:	d000      	beq.n	80095d6 <USBD_StdEPReq+0x38>
 80095d4:	e1d9      	b.n	800998a <USBD_StdEPReq+0x3ec>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80095d6:	250d      	movs	r5, #13
 80095d8:	197c      	adds	r4, r7, r5
 80095da:	230e      	movs	r3, #14
 80095dc:	18fb      	adds	r3, r7, r3
 80095de:	781a      	ldrb	r2, [r3, #0]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	0011      	movs	r1, r2
 80095e4:	0018      	movs	r0, r3
 80095e6:	f7ff fe3c 	bl	8009262 <USBD_CoreFindEP>
 80095ea:	0003      	movs	r3, r0
 80095ec:	7023      	strb	r3, [r4, #0]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80095ee:	197b      	adds	r3, r7, r5
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	2bff      	cmp	r3, #255	@ 0xff
 80095f4:	d100      	bne.n	80095f8 <USBD_StdEPReq+0x5a>
 80095f6:	e1cf      	b.n	8009998 <USBD_StdEPReq+0x3fa>
 80095f8:	197b      	adds	r3, r7, r5
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d000      	beq.n	8009602 <USBD_StdEPReq+0x64>
 8009600:	e1ca      	b.n	8009998 <USBD_StdEPReq+0x3fa>
      {
        pdev->classId = idx;
 8009602:	197b      	adds	r3, r7, r5
 8009604:	7819      	ldrb	r1, [r3, #0]
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	23b5      	movs	r3, #181	@ 0xb5
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	50d1      	str	r1, [r2, r3]
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800960e:	0029      	movs	r1, r5
 8009610:	187b      	adds	r3, r7, r1
 8009612:	781a      	ldrb	r2, [r3, #0]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	32ae      	adds	r2, #174	@ 0xae
 8009618:	0092      	lsls	r2, r2, #2
 800961a:	58d3      	ldr	r3, [r2, r3]
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d100      	bne.n	8009624 <USBD_StdEPReq+0x86>
 8009622:	e1b9      	b.n	8009998 <USBD_StdEPReq+0x3fa>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009624:	187b      	adds	r3, r7, r1
 8009626:	781a      	ldrb	r2, [r3, #0]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	32ae      	adds	r2, #174	@ 0xae
 800962c:	0092      	lsls	r2, r2, #2
 800962e:	58d3      	ldr	r3, [r2, r3]
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	220f      	movs	r2, #15
 8009634:	18bc      	adds	r4, r7, r2
 8009636:	6839      	ldr	r1, [r7, #0]
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	0010      	movs	r0, r2
 800963c:	4798      	blx	r3
 800963e:	0003      	movs	r3, r0
 8009640:	7023      	strb	r3, [r4, #0]
        }
      }
      break;
 8009642:	e1a9      	b.n	8009998 <USBD_StdEPReq+0x3fa>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	785b      	ldrb	r3, [r3, #1]
 8009648:	2b03      	cmp	r3, #3
 800964a:	d007      	beq.n	800965c <USBD_StdEPReq+0xbe>
 800964c:	dd00      	ble.n	8009650 <USBD_StdEPReq+0xb2>
 800964e:	e194      	b.n	800997a <USBD_StdEPReq+0x3dc>
 8009650:	2b00      	cmp	r3, #0
 8009652:	d100      	bne.n	8009656 <USBD_StdEPReq+0xb8>
 8009654:	e0c9      	b.n	80097ea <USBD_StdEPReq+0x24c>
 8009656:	2b01      	cmp	r3, #1
 8009658:	d04d      	beq.n	80096f6 <USBD_StdEPReq+0x158>
 800965a:	e18e      	b.n	800997a <USBD_StdEPReq+0x3dc>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	23a7      	movs	r3, #167	@ 0xa7
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	5cd3      	ldrb	r3, [r2, r3]
 8009664:	b2db      	uxtb	r3, r3
 8009666:	2b02      	cmp	r3, #2
 8009668:	d002      	beq.n	8009670 <USBD_StdEPReq+0xd2>
 800966a:	2b03      	cmp	r3, #3
 800966c:	d01e      	beq.n	80096ac <USBD_StdEPReq+0x10e>
 800966e:	e03a      	b.n	80096e6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009670:	220e      	movs	r2, #14
 8009672:	18bb      	adds	r3, r7, r2
 8009674:	781b      	ldrb	r3, [r3, #0]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d011      	beq.n	800969e <USBD_StdEPReq+0x100>
 800967a:	18bb      	adds	r3, r7, r2
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	2b80      	cmp	r3, #128	@ 0x80
 8009680:	d00d      	beq.n	800969e <USBD_StdEPReq+0x100>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009682:	18bb      	adds	r3, r7, r2
 8009684:	781a      	ldrb	r2, [r3, #0]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	0011      	movs	r1, r2
 800968a:	0018      	movs	r0, r3
 800968c:	f001 fa8f 	bl	800abae <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2180      	movs	r1, #128	@ 0x80
 8009694:	0018      	movs	r0, r3
 8009696:	f001 fa8a 	bl	800abae <USBD_LL_StallEP>
 800969a:	46c0      	nop			@ (mov r8, r8)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800969c:	e02a      	b.n	80096f4 <USBD_StdEPReq+0x156>
                USBD_CtlError(pdev, req);
 800969e:	683a      	ldr	r2, [r7, #0]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	0011      	movs	r1, r2
 80096a4:	0018      	movs	r0, r3
 80096a6:	f000 fd65 	bl	800a174 <USBD_CtlError>
              break;
 80096aa:	e023      	b.n	80096f4 <USBD_StdEPReq+0x156>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	885b      	ldrh	r3, [r3, #2]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d113      	bne.n	80096dc <USBD_StdEPReq+0x13e>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80096b4:	220e      	movs	r2, #14
 80096b6:	18bb      	adds	r3, r7, r2
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d00e      	beq.n	80096dc <USBD_StdEPReq+0x13e>
 80096be:	18bb      	adds	r3, r7, r2
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	2b80      	cmp	r3, #128	@ 0x80
 80096c4:	d00a      	beq.n	80096dc <USBD_StdEPReq+0x13e>
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	88db      	ldrh	r3, [r3, #6]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d106      	bne.n	80096dc <USBD_StdEPReq+0x13e>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80096ce:	18bb      	adds	r3, r7, r2
 80096d0:	781a      	ldrb	r2, [r3, #0]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	0011      	movs	r1, r2
 80096d6:	0018      	movs	r0, r3
 80096d8:	f001 fa69 	bl	800abae <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	0018      	movs	r0, r3
 80096e0:	f000 fe2e 	bl	800a340 <USBD_CtlSendStatus>

              break;
 80096e4:	e006      	b.n	80096f4 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80096e6:	683a      	ldr	r2, [r7, #0]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	0011      	movs	r1, r2
 80096ec:	0018      	movs	r0, r3
 80096ee:	f000 fd41 	bl	800a174 <USBD_CtlError>
              break;
 80096f2:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80096f4:	e148      	b.n	8009988 <USBD_StdEPReq+0x3ea>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80096f6:	687a      	ldr	r2, [r7, #4]
 80096f8:	23a7      	movs	r3, #167	@ 0xa7
 80096fa:	009b      	lsls	r3, r3, #2
 80096fc:	5cd3      	ldrb	r3, [r2, r3]
 80096fe:	b2db      	uxtb	r3, r3
 8009700:	2b02      	cmp	r3, #2
 8009702:	d002      	beq.n	800970a <USBD_StdEPReq+0x16c>
 8009704:	2b03      	cmp	r3, #3
 8009706:	d01e      	beq.n	8009746 <USBD_StdEPReq+0x1a8>
 8009708:	e066      	b.n	80097d8 <USBD_StdEPReq+0x23a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800970a:	220e      	movs	r2, #14
 800970c:	18bb      	adds	r3, r7, r2
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d011      	beq.n	8009738 <USBD_StdEPReq+0x19a>
 8009714:	18bb      	adds	r3, r7, r2
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	2b80      	cmp	r3, #128	@ 0x80
 800971a:	d00d      	beq.n	8009738 <USBD_StdEPReq+0x19a>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800971c:	18bb      	adds	r3, r7, r2
 800971e:	781a      	ldrb	r2, [r3, #0]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	0011      	movs	r1, r2
 8009724:	0018      	movs	r0, r3
 8009726:	f001 fa42 	bl	800abae <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2180      	movs	r1, #128	@ 0x80
 800972e:	0018      	movs	r0, r3
 8009730:	f001 fa3d 	bl	800abae <USBD_LL_StallEP>
 8009734:	46c0      	nop			@ (mov r8, r8)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009736:	e057      	b.n	80097e8 <USBD_StdEPReq+0x24a>
                USBD_CtlError(pdev, req);
 8009738:	683a      	ldr	r2, [r7, #0]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	0011      	movs	r1, r2
 800973e:	0018      	movs	r0, r3
 8009740:	f000 fd18 	bl	800a174 <USBD_CtlError>
              break;
 8009744:	e050      	b.n	80097e8 <USBD_StdEPReq+0x24a>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	885b      	ldrh	r3, [r3, #2]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d14b      	bne.n	80097e6 <USBD_StdEPReq+0x248>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800974e:	210e      	movs	r1, #14
 8009750:	187b      	adds	r3, r7, r1
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	227f      	movs	r2, #127	@ 0x7f
 8009756:	4013      	ands	r3, r2
 8009758:	d006      	beq.n	8009768 <USBD_StdEPReq+0x1ca>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800975a:	187b      	adds	r3, r7, r1
 800975c:	781a      	ldrb	r2, [r3, #0]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	0011      	movs	r1, r2
 8009762:	0018      	movs	r0, r3
 8009764:	f001 fa4e 	bl	800ac04 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	0018      	movs	r0, r3
 800976c:	f000 fde8 	bl	800a340 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009770:	250d      	movs	r5, #13
 8009772:	197c      	adds	r4, r7, r5
 8009774:	230e      	movs	r3, #14
 8009776:	18fb      	adds	r3, r7, r3
 8009778:	781a      	ldrb	r2, [r3, #0]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	0011      	movs	r1, r2
 800977e:	0018      	movs	r0, r3
 8009780:	f7ff fd6f 	bl	8009262 <USBD_CoreFindEP>
 8009784:	0003      	movs	r3, r0
 8009786:	7023      	strb	r3, [r4, #0]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009788:	197b      	adds	r3, r7, r5
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	2bff      	cmp	r3, #255	@ 0xff
 800978e:	d02a      	beq.n	80097e6 <USBD_StdEPReq+0x248>
 8009790:	197b      	adds	r3, r7, r5
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d126      	bne.n	80097e6 <USBD_StdEPReq+0x248>
                {
                  pdev->classId = idx;
 8009798:	197b      	adds	r3, r7, r5
 800979a:	7819      	ldrb	r1, [r3, #0]
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	23b5      	movs	r3, #181	@ 0xb5
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	50d1      	str	r1, [r2, r3]
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80097a4:	0029      	movs	r1, r5
 80097a6:	187b      	adds	r3, r7, r1
 80097a8:	781a      	ldrb	r2, [r3, #0]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	32ae      	adds	r2, #174	@ 0xae
 80097ae:	0092      	lsls	r2, r2, #2
 80097b0:	58d3      	ldr	r3, [r2, r3]
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d016      	beq.n	80097e6 <USBD_StdEPReq+0x248>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80097b8:	187b      	adds	r3, r7, r1
 80097ba:	781a      	ldrb	r2, [r3, #0]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	32ae      	adds	r2, #174	@ 0xae
 80097c0:	0092      	lsls	r2, r2, #2
 80097c2:	58d3      	ldr	r3, [r2, r3]
 80097c4:	689b      	ldr	r3, [r3, #8]
 80097c6:	220f      	movs	r2, #15
 80097c8:	18bc      	adds	r4, r7, r2
 80097ca:	6839      	ldr	r1, [r7, #0]
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	0010      	movs	r0, r2
 80097d0:	4798      	blx	r3
 80097d2:	0003      	movs	r3, r0
 80097d4:	7023      	strb	r3, [r4, #0]
                  }
                }
              }
              break;
 80097d6:	e006      	b.n	80097e6 <USBD_StdEPReq+0x248>

            default:
              USBD_CtlError(pdev, req);
 80097d8:	683a      	ldr	r2, [r7, #0]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	0011      	movs	r1, r2
 80097de:	0018      	movs	r0, r3
 80097e0:	f000 fcc8 	bl	800a174 <USBD_CtlError>
              break;
 80097e4:	e000      	b.n	80097e8 <USBD_StdEPReq+0x24a>
              break;
 80097e6:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80097e8:	e0ce      	b.n	8009988 <USBD_StdEPReq+0x3ea>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80097ea:	687a      	ldr	r2, [r7, #4]
 80097ec:	23a7      	movs	r3, #167	@ 0xa7
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	5cd3      	ldrb	r3, [r2, r3]
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	2b02      	cmp	r3, #2
 80097f6:	d002      	beq.n	80097fe <USBD_StdEPReq+0x260>
 80097f8:	2b03      	cmp	r3, #3
 80097fa:	d03c      	beq.n	8009876 <USBD_StdEPReq+0x2d8>
 80097fc:	e0b5      	b.n	800996a <USBD_StdEPReq+0x3cc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097fe:	220e      	movs	r2, #14
 8009800:	18bb      	adds	r3, r7, r2
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d00a      	beq.n	800981e <USBD_StdEPReq+0x280>
 8009808:	18bb      	adds	r3, r7, r2
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	2b80      	cmp	r3, #128	@ 0x80
 800980e:	d006      	beq.n	800981e <USBD_StdEPReq+0x280>
              {
                USBD_CtlError(pdev, req);
 8009810:	683a      	ldr	r2, [r7, #0]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	0011      	movs	r1, r2
 8009816:	0018      	movs	r0, r3
 8009818:	f000 fcac 	bl	800a174 <USBD_CtlError>
                break;
 800981c:	e0ac      	b.n	8009978 <USBD_StdEPReq+0x3da>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800981e:	220e      	movs	r2, #14
 8009820:	18bb      	adds	r3, r7, r2
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	b25b      	sxtb	r3, r3
 8009826:	2b00      	cmp	r3, #0
 8009828:	da0c      	bge.n	8009844 <USBD_StdEPReq+0x2a6>
 800982a:	18bb      	adds	r3, r7, r2
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	227f      	movs	r2, #127	@ 0x7f
 8009830:	401a      	ands	r2, r3
 8009832:	0013      	movs	r3, r2
 8009834:	009b      	lsls	r3, r3, #2
 8009836:	189b      	adds	r3, r3, r2
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	3310      	adds	r3, #16
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	18d3      	adds	r3, r2, r3
 8009840:	3304      	adds	r3, #4
 8009842:	e00d      	b.n	8009860 <USBD_StdEPReq+0x2c2>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009844:	230e      	movs	r3, #14
 8009846:	18fb      	adds	r3, r7, r3
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	227f      	movs	r2, #127	@ 0x7f
 800984c:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800984e:	0013      	movs	r3, r2
 8009850:	009b      	lsls	r3, r3, #2
 8009852:	189b      	adds	r3, r3, r2
 8009854:	009b      	lsls	r3, r3, #2
 8009856:	3351      	adds	r3, #81	@ 0x51
 8009858:	33ff      	adds	r3, #255	@ 0xff
 800985a:	687a      	ldr	r2, [r7, #4]
 800985c:	18d3      	adds	r3, r2, r3
 800985e:	3304      	adds	r3, #4
 8009860:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	2200      	movs	r2, #0
 8009866:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009868:	68b9      	ldr	r1, [r7, #8]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2202      	movs	r2, #2
 800986e:	0018      	movs	r0, r3
 8009870:	f000 fd08 	bl	800a284 <USBD_CtlSendData>
              break;
 8009874:	e080      	b.n	8009978 <USBD_StdEPReq+0x3da>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009876:	220e      	movs	r2, #14
 8009878:	18bb      	adds	r3, r7, r2
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	b25b      	sxtb	r3, r3
 800987e:	2b00      	cmp	r3, #0
 8009880:	da14      	bge.n	80098ac <USBD_StdEPReq+0x30e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009882:	18bb      	adds	r3, r7, r2
 8009884:	781b      	ldrb	r3, [r3, #0]
 8009886:	220f      	movs	r2, #15
 8009888:	401a      	ands	r2, r3
 800988a:	6879      	ldr	r1, [r7, #4]
 800988c:	0013      	movs	r3, r2
 800988e:	009b      	lsls	r3, r3, #2
 8009890:	189b      	adds	r3, r3, r2
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	18cb      	adds	r3, r1, r3
 8009896:	3324      	adds	r3, #36	@ 0x24
 8009898:	881b      	ldrh	r3, [r3, #0]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d11e      	bne.n	80098dc <USBD_StdEPReq+0x33e>
                {
                  USBD_CtlError(pdev, req);
 800989e:	683a      	ldr	r2, [r7, #0]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	0011      	movs	r1, r2
 80098a4:	0018      	movs	r0, r3
 80098a6:	f000 fc65 	bl	800a174 <USBD_CtlError>
                  break;
 80098aa:	e065      	b.n	8009978 <USBD_StdEPReq+0x3da>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80098ac:	230e      	movs	r3, #14
 80098ae:	18fb      	adds	r3, r7, r3
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	220f      	movs	r2, #15
 80098b4:	401a      	ands	r2, r3
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	23b2      	movs	r3, #178	@ 0xb2
 80098ba:	0059      	lsls	r1, r3, #1
 80098bc:	0013      	movs	r3, r2
 80098be:	009b      	lsls	r3, r3, #2
 80098c0:	189b      	adds	r3, r3, r2
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	18c3      	adds	r3, r0, r3
 80098c6:	185b      	adds	r3, r3, r1
 80098c8:	881b      	ldrh	r3, [r3, #0]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d106      	bne.n	80098dc <USBD_StdEPReq+0x33e>
                {
                  USBD_CtlError(pdev, req);
 80098ce:	683a      	ldr	r2, [r7, #0]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	0011      	movs	r1, r2
 80098d4:	0018      	movs	r0, r3
 80098d6:	f000 fc4d 	bl	800a174 <USBD_CtlError>
                  break;
 80098da:	e04d      	b.n	8009978 <USBD_StdEPReq+0x3da>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098dc:	220e      	movs	r2, #14
 80098de:	18bb      	adds	r3, r7, r2
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	b25b      	sxtb	r3, r3
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	da0c      	bge.n	8009902 <USBD_StdEPReq+0x364>
 80098e8:	18bb      	adds	r3, r7, r2
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	227f      	movs	r2, #127	@ 0x7f
 80098ee:	401a      	ands	r2, r3
 80098f0:	0013      	movs	r3, r2
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	189b      	adds	r3, r3, r2
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	3310      	adds	r3, #16
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	18d3      	adds	r3, r2, r3
 80098fe:	3304      	adds	r3, #4
 8009900:	e00d      	b.n	800991e <USBD_StdEPReq+0x380>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009902:	230e      	movs	r3, #14
 8009904:	18fb      	adds	r3, r7, r3
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	227f      	movs	r2, #127	@ 0x7f
 800990a:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800990c:	0013      	movs	r3, r2
 800990e:	009b      	lsls	r3, r3, #2
 8009910:	189b      	adds	r3, r3, r2
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	3351      	adds	r3, #81	@ 0x51
 8009916:	33ff      	adds	r3, #255	@ 0xff
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	18d3      	adds	r3, r2, r3
 800991c:	3304      	adds	r3, #4
 800991e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009920:	220e      	movs	r2, #14
 8009922:	18bb      	adds	r3, r7, r2
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d003      	beq.n	8009932 <USBD_StdEPReq+0x394>
 800992a:	18bb      	adds	r3, r7, r2
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	2b80      	cmp	r3, #128	@ 0x80
 8009930:	d103      	bne.n	800993a <USBD_StdEPReq+0x39c>
              {
                pep->status = 0x0000U;
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	2200      	movs	r2, #0
 8009936:	601a      	str	r2, [r3, #0]
 8009938:	e010      	b.n	800995c <USBD_StdEPReq+0x3be>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800993a:	230e      	movs	r3, #14
 800993c:	18fb      	adds	r3, r7, r3
 800993e:	781a      	ldrb	r2, [r3, #0]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	0011      	movs	r1, r2
 8009944:	0018      	movs	r0, r3
 8009946:	f001 f988 	bl	800ac5a <USBD_LL_IsStallEP>
 800994a:	1e03      	subs	r3, r0, #0
 800994c:	d003      	beq.n	8009956 <USBD_StdEPReq+0x3b8>
              {
                pep->status = 0x0001U;
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	2201      	movs	r2, #1
 8009952:	601a      	str	r2, [r3, #0]
 8009954:	e002      	b.n	800995c <USBD_StdEPReq+0x3be>
              }
              else
              {
                pep->status = 0x0000U;
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	2200      	movs	r2, #0
 800995a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800995c:	68b9      	ldr	r1, [r7, #8]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2202      	movs	r2, #2
 8009962:	0018      	movs	r0, r3
 8009964:	f000 fc8e 	bl	800a284 <USBD_CtlSendData>
              break;
 8009968:	e006      	b.n	8009978 <USBD_StdEPReq+0x3da>

            default:
              USBD_CtlError(pdev, req);
 800996a:	683a      	ldr	r2, [r7, #0]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	0011      	movs	r1, r2
 8009970:	0018      	movs	r0, r3
 8009972:	f000 fbff 	bl	800a174 <USBD_CtlError>
              break;
 8009976:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8009978:	e006      	b.n	8009988 <USBD_StdEPReq+0x3ea>

        default:
          USBD_CtlError(pdev, req);
 800997a:	683a      	ldr	r2, [r7, #0]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	0011      	movs	r1, r2
 8009980:	0018      	movs	r0, r3
 8009982:	f000 fbf7 	bl	800a174 <USBD_CtlError>
          break;
 8009986:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8009988:	e007      	b.n	800999a <USBD_StdEPReq+0x3fc>

    default:
      USBD_CtlError(pdev, req);
 800998a:	683a      	ldr	r2, [r7, #0]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	0011      	movs	r1, r2
 8009990:	0018      	movs	r0, r3
 8009992:	f000 fbef 	bl	800a174 <USBD_CtlError>
      break;
 8009996:	e000      	b.n	800999a <USBD_StdEPReq+0x3fc>
      break;
 8009998:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800999a:	230f      	movs	r3, #15
 800999c:	18fb      	adds	r3, r7, r3
 800999e:	781b      	ldrb	r3, [r3, #0]
}
 80099a0:	0018      	movs	r0, r3
 80099a2:	46bd      	mov	sp, r7
 80099a4:	b004      	add	sp, #16
 80099a6:	bdb0      	pop	{r4, r5, r7, pc}

080099a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80099b2:	2308      	movs	r3, #8
 80099b4:	18fb      	adds	r3, r7, r3
 80099b6:	2200      	movs	r2, #0
 80099b8:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 80099ba:	2300      	movs	r3, #0
 80099bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80099be:	230b      	movs	r3, #11
 80099c0:	18fb      	adds	r3, r7, r3
 80099c2:	2200      	movs	r2, #0
 80099c4:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	885b      	ldrh	r3, [r3, #2]
 80099ca:	0a1b      	lsrs	r3, r3, #8
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	2b07      	cmp	r3, #7
 80099d0:	d900      	bls.n	80099d4 <USBD_GetDescriptor+0x2c>
 80099d2:	e159      	b.n	8009c88 <USBD_GetDescriptor+0x2e0>
 80099d4:	009a      	lsls	r2, r3, #2
 80099d6:	4bce      	ldr	r3, [pc, #824]	@ (8009d10 <USBD_GetDescriptor+0x368>)
 80099d8:	18d3      	adds	r3, r2, r3
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80099de:	687a      	ldr	r2, [r7, #4]
 80099e0:	23ad      	movs	r3, #173	@ 0xad
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	58d3      	ldr	r3, [r2, r3]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	7c12      	ldrb	r2, [r2, #16]
 80099ec:	2108      	movs	r1, #8
 80099ee:	1879      	adds	r1, r7, r1
 80099f0:	0010      	movs	r0, r2
 80099f2:	4798      	blx	r3
 80099f4:	0003      	movs	r3, r0
 80099f6:	60fb      	str	r3, [r7, #12]
      break;
 80099f8:	e153      	b.n	8009ca2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	7c1b      	ldrb	r3, [r3, #16]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d10f      	bne.n	8009a22 <USBD_GetDescriptor+0x7a>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	23ae      	movs	r3, #174	@ 0xae
 8009a06:	009b      	lsls	r3, r3, #2
 8009a08:	58d3      	ldr	r3, [r2, r3]
 8009a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a0c:	2208      	movs	r2, #8
 8009a0e:	18ba      	adds	r2, r7, r2
 8009a10:	0010      	movs	r0, r2
 8009a12:	4798      	blx	r3
 8009a14:	0003      	movs	r3, r0
 8009a16:	60fb      	str	r3, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	2202      	movs	r2, #2
 8009a1e:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009a20:	e13f      	b.n	8009ca2 <USBD_GetDescriptor+0x2fa>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	23ae      	movs	r3, #174	@ 0xae
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	58d3      	ldr	r3, [r2, r3]
 8009a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a2c:	2208      	movs	r2, #8
 8009a2e:	18ba      	adds	r2, r7, r2
 8009a30:	0010      	movs	r0, r2
 8009a32:	4798      	blx	r3
 8009a34:	0003      	movs	r3, r0
 8009a36:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	2202      	movs	r2, #2
 8009a3e:	701a      	strb	r2, [r3, #0]
      break;
 8009a40:	e12f      	b.n	8009ca2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	885b      	ldrh	r3, [r3, #2]
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	2b05      	cmp	r3, #5
 8009a4a:	d900      	bls.n	8009a4e <USBD_GetDescriptor+0xa6>
 8009a4c:	e0d0      	b.n	8009bf0 <USBD_GetDescriptor+0x248>
 8009a4e:	009a      	lsls	r2, r3, #2
 8009a50:	4bb0      	ldr	r3, [pc, #704]	@ (8009d14 <USBD_GetDescriptor+0x36c>)
 8009a52:	18d3      	adds	r3, r2, r3
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	23ad      	movs	r3, #173	@ 0xad
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	58d3      	ldr	r3, [r2, r3]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d00d      	beq.n	8009a82 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	23ad      	movs	r3, #173	@ 0xad
 8009a6a:	009b      	lsls	r3, r3, #2
 8009a6c:	58d3      	ldr	r3, [r2, r3]
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	7c12      	ldrb	r2, [r2, #16]
 8009a74:	2108      	movs	r1, #8
 8009a76:	1879      	adds	r1, r7, r1
 8009a78:	0010      	movs	r0, r2
 8009a7a:	4798      	blx	r3
 8009a7c:	0003      	movs	r3, r0
 8009a7e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a80:	e0c3      	b.n	8009c0a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009a82:	683a      	ldr	r2, [r7, #0]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	0011      	movs	r1, r2
 8009a88:	0018      	movs	r0, r3
 8009a8a:	f000 fb73 	bl	800a174 <USBD_CtlError>
            err++;
 8009a8e:	210b      	movs	r1, #11
 8009a90:	187b      	adds	r3, r7, r1
 8009a92:	781a      	ldrb	r2, [r3, #0]
 8009a94:	187b      	adds	r3, r7, r1
 8009a96:	3201      	adds	r2, #1
 8009a98:	701a      	strb	r2, [r3, #0]
          break;
 8009a9a:	e0b6      	b.n	8009c0a <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	23ad      	movs	r3, #173	@ 0xad
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	58d3      	ldr	r3, [r2, r3]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d00d      	beq.n	8009ac6 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	23ad      	movs	r3, #173	@ 0xad
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	58d3      	ldr	r3, [r2, r3]
 8009ab2:	689b      	ldr	r3, [r3, #8]
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	7c12      	ldrb	r2, [r2, #16]
 8009ab8:	2108      	movs	r1, #8
 8009aba:	1879      	adds	r1, r7, r1
 8009abc:	0010      	movs	r0, r2
 8009abe:	4798      	blx	r3
 8009ac0:	0003      	movs	r3, r0
 8009ac2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ac4:	e0a1      	b.n	8009c0a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009ac6:	683a      	ldr	r2, [r7, #0]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	0011      	movs	r1, r2
 8009acc:	0018      	movs	r0, r3
 8009ace:	f000 fb51 	bl	800a174 <USBD_CtlError>
            err++;
 8009ad2:	210b      	movs	r1, #11
 8009ad4:	187b      	adds	r3, r7, r1
 8009ad6:	781a      	ldrb	r2, [r3, #0]
 8009ad8:	187b      	adds	r3, r7, r1
 8009ada:	3201      	adds	r2, #1
 8009adc:	701a      	strb	r2, [r3, #0]
          break;
 8009ade:	e094      	b.n	8009c0a <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	23ad      	movs	r3, #173	@ 0xad
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	58d3      	ldr	r3, [r2, r3]
 8009ae8:	68db      	ldr	r3, [r3, #12]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d00d      	beq.n	8009b0a <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	23ad      	movs	r3, #173	@ 0xad
 8009af2:	009b      	lsls	r3, r3, #2
 8009af4:	58d3      	ldr	r3, [r2, r3]
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	7c12      	ldrb	r2, [r2, #16]
 8009afc:	2108      	movs	r1, #8
 8009afe:	1879      	adds	r1, r7, r1
 8009b00:	0010      	movs	r0, r2
 8009b02:	4798      	blx	r3
 8009b04:	0003      	movs	r3, r0
 8009b06:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b08:	e07f      	b.n	8009c0a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009b0a:	683a      	ldr	r2, [r7, #0]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	0011      	movs	r1, r2
 8009b10:	0018      	movs	r0, r3
 8009b12:	f000 fb2f 	bl	800a174 <USBD_CtlError>
            err++;
 8009b16:	210b      	movs	r1, #11
 8009b18:	187b      	adds	r3, r7, r1
 8009b1a:	781a      	ldrb	r2, [r3, #0]
 8009b1c:	187b      	adds	r3, r7, r1
 8009b1e:	3201      	adds	r2, #1
 8009b20:	701a      	strb	r2, [r3, #0]
          break;
 8009b22:	e072      	b.n	8009c0a <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	23ad      	movs	r3, #173	@ 0xad
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	58d3      	ldr	r3, [r2, r3]
 8009b2c:	691b      	ldr	r3, [r3, #16]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d00d      	beq.n	8009b4e <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	23ad      	movs	r3, #173	@ 0xad
 8009b36:	009b      	lsls	r3, r3, #2
 8009b38:	58d3      	ldr	r3, [r2, r3]
 8009b3a:	691b      	ldr	r3, [r3, #16]
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	7c12      	ldrb	r2, [r2, #16]
 8009b40:	2108      	movs	r1, #8
 8009b42:	1879      	adds	r1, r7, r1
 8009b44:	0010      	movs	r0, r2
 8009b46:	4798      	blx	r3
 8009b48:	0003      	movs	r3, r0
 8009b4a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b4c:	e05d      	b.n	8009c0a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009b4e:	683a      	ldr	r2, [r7, #0]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	0011      	movs	r1, r2
 8009b54:	0018      	movs	r0, r3
 8009b56:	f000 fb0d 	bl	800a174 <USBD_CtlError>
            err++;
 8009b5a:	210b      	movs	r1, #11
 8009b5c:	187b      	adds	r3, r7, r1
 8009b5e:	781a      	ldrb	r2, [r3, #0]
 8009b60:	187b      	adds	r3, r7, r1
 8009b62:	3201      	adds	r2, #1
 8009b64:	701a      	strb	r2, [r3, #0]
          break;
 8009b66:	e050      	b.n	8009c0a <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009b68:	687a      	ldr	r2, [r7, #4]
 8009b6a:	23ad      	movs	r3, #173	@ 0xad
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	58d3      	ldr	r3, [r2, r3]
 8009b70:	695b      	ldr	r3, [r3, #20]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d00d      	beq.n	8009b92 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	23ad      	movs	r3, #173	@ 0xad
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	58d3      	ldr	r3, [r2, r3]
 8009b7e:	695b      	ldr	r3, [r3, #20]
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	7c12      	ldrb	r2, [r2, #16]
 8009b84:	2108      	movs	r1, #8
 8009b86:	1879      	adds	r1, r7, r1
 8009b88:	0010      	movs	r0, r2
 8009b8a:	4798      	blx	r3
 8009b8c:	0003      	movs	r3, r0
 8009b8e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b90:	e03b      	b.n	8009c0a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009b92:	683a      	ldr	r2, [r7, #0]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	0011      	movs	r1, r2
 8009b98:	0018      	movs	r0, r3
 8009b9a:	f000 faeb 	bl	800a174 <USBD_CtlError>
            err++;
 8009b9e:	210b      	movs	r1, #11
 8009ba0:	187b      	adds	r3, r7, r1
 8009ba2:	781a      	ldrb	r2, [r3, #0]
 8009ba4:	187b      	adds	r3, r7, r1
 8009ba6:	3201      	adds	r2, #1
 8009ba8:	701a      	strb	r2, [r3, #0]
          break;
 8009baa:	e02e      	b.n	8009c0a <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	23ad      	movs	r3, #173	@ 0xad
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	58d3      	ldr	r3, [r2, r3]
 8009bb4:	699b      	ldr	r3, [r3, #24]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d00d      	beq.n	8009bd6 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009bba:	687a      	ldr	r2, [r7, #4]
 8009bbc:	23ad      	movs	r3, #173	@ 0xad
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	58d3      	ldr	r3, [r2, r3]
 8009bc2:	699b      	ldr	r3, [r3, #24]
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	7c12      	ldrb	r2, [r2, #16]
 8009bc8:	2108      	movs	r1, #8
 8009bca:	1879      	adds	r1, r7, r1
 8009bcc:	0010      	movs	r0, r2
 8009bce:	4798      	blx	r3
 8009bd0:	0003      	movs	r3, r0
 8009bd2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bd4:	e019      	b.n	8009c0a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009bd6:	683a      	ldr	r2, [r7, #0]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	0011      	movs	r1, r2
 8009bdc:	0018      	movs	r0, r3
 8009bde:	f000 fac9 	bl	800a174 <USBD_CtlError>
            err++;
 8009be2:	210b      	movs	r1, #11
 8009be4:	187b      	adds	r3, r7, r1
 8009be6:	781a      	ldrb	r2, [r3, #0]
 8009be8:	187b      	adds	r3, r7, r1
 8009bea:	3201      	adds	r2, #1
 8009bec:	701a      	strb	r2, [r3, #0]
          break;
 8009bee:	e00c      	b.n	8009c0a <USBD_GetDescriptor+0x262>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009bf0:	683a      	ldr	r2, [r7, #0]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	0011      	movs	r1, r2
 8009bf6:	0018      	movs	r0, r3
 8009bf8:	f000 fabc 	bl	800a174 <USBD_CtlError>
          err++;
 8009bfc:	210b      	movs	r1, #11
 8009bfe:	187b      	adds	r3, r7, r1
 8009c00:	781a      	ldrb	r2, [r3, #0]
 8009c02:	187b      	adds	r3, r7, r1
 8009c04:	3201      	adds	r2, #1
 8009c06:	701a      	strb	r2, [r3, #0]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009c08:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8009c0a:	e04a      	b.n	8009ca2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	7c1b      	ldrb	r3, [r3, #16]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d10b      	bne.n	8009c2c <USBD_GetDescriptor+0x284>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	23ae      	movs	r3, #174	@ 0xae
 8009c18:	009b      	lsls	r3, r3, #2
 8009c1a:	58d3      	ldr	r3, [r2, r3]
 8009c1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c1e:	2208      	movs	r2, #8
 8009c20:	18ba      	adds	r2, r7, r2
 8009c22:	0010      	movs	r0, r2
 8009c24:	4798      	blx	r3
 8009c26:	0003      	movs	r3, r0
 8009c28:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c2a:	e03a      	b.n	8009ca2 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8009c2c:	683a      	ldr	r2, [r7, #0]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	0011      	movs	r1, r2
 8009c32:	0018      	movs	r0, r3
 8009c34:	f000 fa9e 	bl	800a174 <USBD_CtlError>
        err++;
 8009c38:	210b      	movs	r1, #11
 8009c3a:	187b      	adds	r3, r7, r1
 8009c3c:	781a      	ldrb	r2, [r3, #0]
 8009c3e:	187b      	adds	r3, r7, r1
 8009c40:	3201      	adds	r2, #1
 8009c42:	701a      	strb	r2, [r3, #0]
      break;
 8009c44:	e02d      	b.n	8009ca2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	7c1b      	ldrb	r3, [r3, #16]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d10f      	bne.n	8009c6e <USBD_GetDescriptor+0x2c6>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	23ae      	movs	r3, #174	@ 0xae
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	58d3      	ldr	r3, [r2, r3]
 8009c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c58:	2208      	movs	r2, #8
 8009c5a:	18ba      	adds	r2, r7, r2
 8009c5c:	0010      	movs	r0, r2
 8009c5e:	4798      	blx	r3
 8009c60:	0003      	movs	r3, r0
 8009c62:	60fb      	str	r3, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	3301      	adds	r3, #1
 8009c68:	2207      	movs	r2, #7
 8009c6a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c6c:	e019      	b.n	8009ca2 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8009c6e:	683a      	ldr	r2, [r7, #0]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	0011      	movs	r1, r2
 8009c74:	0018      	movs	r0, r3
 8009c76:	f000 fa7d 	bl	800a174 <USBD_CtlError>
        err++;
 8009c7a:	210b      	movs	r1, #11
 8009c7c:	187b      	adds	r3, r7, r1
 8009c7e:	781a      	ldrb	r2, [r3, #0]
 8009c80:	187b      	adds	r3, r7, r1
 8009c82:	3201      	adds	r2, #1
 8009c84:	701a      	strb	r2, [r3, #0]
      break;
 8009c86:	e00c      	b.n	8009ca2 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8009c88:	683a      	ldr	r2, [r7, #0]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	0011      	movs	r1, r2
 8009c8e:	0018      	movs	r0, r3
 8009c90:	f000 fa70 	bl	800a174 <USBD_CtlError>
      err++;
 8009c94:	210b      	movs	r1, #11
 8009c96:	187b      	adds	r3, r7, r1
 8009c98:	781a      	ldrb	r2, [r3, #0]
 8009c9a:	187b      	adds	r3, r7, r1
 8009c9c:	3201      	adds	r2, #1
 8009c9e:	701a      	strb	r2, [r3, #0]
      break;
 8009ca0:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8009ca2:	230b      	movs	r3, #11
 8009ca4:	18fb      	adds	r3, r7, r3
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d12c      	bne.n	8009d06 <USBD_GetDescriptor+0x35e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	88db      	ldrh	r3, [r3, #6]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d023      	beq.n	8009cfc <USBD_GetDescriptor+0x354>
  {
    if (len != 0U)
 8009cb4:	2108      	movs	r1, #8
 8009cb6:	187b      	adds	r3, r7, r1
 8009cb8:	881b      	ldrh	r3, [r3, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d017      	beq.n	8009cee <USBD_GetDescriptor+0x346>
    {
      len = MIN(len, req->wLength);
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	88da      	ldrh	r2, [r3, #6]
 8009cc2:	187b      	adds	r3, r7, r1
 8009cc4:	881b      	ldrh	r3, [r3, #0]
 8009cc6:	1c18      	adds	r0, r3, #0
 8009cc8:	1c11      	adds	r1, r2, #0
 8009cca:	b28a      	uxth	r2, r1
 8009ccc:	b283      	uxth	r3, r0
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d900      	bls.n	8009cd4 <USBD_GetDescriptor+0x32c>
 8009cd2:	1c01      	adds	r1, r0, #0
 8009cd4:	b28a      	uxth	r2, r1
 8009cd6:	2108      	movs	r1, #8
 8009cd8:	187b      	adds	r3, r7, r1
 8009cda:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009cdc:	187b      	adds	r3, r7, r1
 8009cde:	881b      	ldrh	r3, [r3, #0]
 8009ce0:	001a      	movs	r2, r3
 8009ce2:	68f9      	ldr	r1, [r7, #12]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	0018      	movs	r0, r3
 8009ce8:	f000 facc 	bl	800a284 <USBD_CtlSendData>
 8009cec:	e00c      	b.n	8009d08 <USBD_GetDescriptor+0x360>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009cee:	683a      	ldr	r2, [r7, #0]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	0011      	movs	r1, r2
 8009cf4:	0018      	movs	r0, r3
 8009cf6:	f000 fa3d 	bl	800a174 <USBD_CtlError>
 8009cfa:	e005      	b.n	8009d08 <USBD_GetDescriptor+0x360>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	0018      	movs	r0, r3
 8009d00:	f000 fb1e 	bl	800a340 <USBD_CtlSendStatus>
 8009d04:	e000      	b.n	8009d08 <USBD_GetDescriptor+0x360>
    return;
 8009d06:	46c0      	nop			@ (mov r8, r8)
  }
}
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	b004      	add	sp, #16
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	46c0      	nop			@ (mov r8, r8)
 8009d10:	0800b950 	.word	0x0800b950
 8009d14:	0800b970 	.word	0x0800b970

08009d18 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d18:	b590      	push	{r4, r7, lr}
 8009d1a:	b085      	sub	sp, #20
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	889b      	ldrh	r3, [r3, #4]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d13e      	bne.n	8009da8 <USBD_SetAddress+0x90>
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	88db      	ldrh	r3, [r3, #6]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d13a      	bne.n	8009da8 <USBD_SetAddress+0x90>
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	885b      	ldrh	r3, [r3, #2]
 8009d36:	2b7f      	cmp	r3, #127	@ 0x7f
 8009d38:	d836      	bhi.n	8009da8 <USBD_SetAddress+0x90>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	885b      	ldrh	r3, [r3, #2]
 8009d3e:	b2da      	uxtb	r2, r3
 8009d40:	230f      	movs	r3, #15
 8009d42:	18fb      	adds	r3, r7, r3
 8009d44:	217f      	movs	r1, #127	@ 0x7f
 8009d46:	400a      	ands	r2, r1
 8009d48:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d4a:	687a      	ldr	r2, [r7, #4]
 8009d4c:	23a7      	movs	r3, #167	@ 0xa7
 8009d4e:	009b      	lsls	r3, r3, #2
 8009d50:	5cd3      	ldrb	r3, [r2, r3]
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	2b03      	cmp	r3, #3
 8009d56:	d106      	bne.n	8009d66 <USBD_SetAddress+0x4e>
    {
      USBD_CtlError(pdev, req);
 8009d58:	683a      	ldr	r2, [r7, #0]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	0011      	movs	r1, r2
 8009d5e:	0018      	movs	r0, r3
 8009d60:	f000 fa08 	bl	800a174 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d64:	e027      	b.n	8009db6 <USBD_SetAddress+0x9e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	240f      	movs	r4, #15
 8009d6a:	193a      	adds	r2, r7, r4
 8009d6c:	4914      	ldr	r1, [pc, #80]	@ (8009dc0 <USBD_SetAddress+0xa8>)
 8009d6e:	7812      	ldrb	r2, [r2, #0]
 8009d70:	545a      	strb	r2, [r3, r1]
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009d72:	193b      	adds	r3, r7, r4
 8009d74:	781a      	ldrb	r2, [r3, #0]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	0011      	movs	r1, r2
 8009d7a:	0018      	movs	r0, r3
 8009d7c:	f000 ff9e 	bl	800acbc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	0018      	movs	r0, r3
 8009d84:	f000 fadc 	bl	800a340 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009d88:	193b      	adds	r3, r7, r4
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d005      	beq.n	8009d9c <USBD_SetAddress+0x84>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	23a7      	movs	r3, #167	@ 0xa7
 8009d94:	009b      	lsls	r3, r3, #2
 8009d96:	2102      	movs	r1, #2
 8009d98:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d9a:	e00c      	b.n	8009db6 <USBD_SetAddress+0x9e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009d9c:	687a      	ldr	r2, [r7, #4]
 8009d9e:	23a7      	movs	r3, #167	@ 0xa7
 8009da0:	009b      	lsls	r3, r3, #2
 8009da2:	2101      	movs	r1, #1
 8009da4:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009da6:	e006      	b.n	8009db6 <USBD_SetAddress+0x9e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009da8:	683a      	ldr	r2, [r7, #0]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	0011      	movs	r1, r2
 8009dae:	0018      	movs	r0, r3
 8009db0:	f000 f9e0 	bl	800a174 <USBD_CtlError>
  }
}
 8009db4:	46c0      	nop			@ (mov r8, r8)
 8009db6:	46c0      	nop			@ (mov r8, r8)
 8009db8:	46bd      	mov	sp, r7
 8009dba:	b005      	add	sp, #20
 8009dbc:	bd90      	pop	{r4, r7, pc}
 8009dbe:	46c0      	nop			@ (mov r8, r8)
 8009dc0:	0000029e 	.word	0x0000029e

08009dc4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dc4:	b5b0      	push	{r4, r5, r7, lr}
 8009dc6:	b084      	sub	sp, #16
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009dce:	230f      	movs	r3, #15
 8009dd0:	18fb      	adds	r3, r7, r3
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	701a      	strb	r2, [r3, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	885b      	ldrh	r3, [r3, #2]
 8009dda:	b2da      	uxtb	r2, r3
 8009ddc:	4b5f      	ldr	r3, [pc, #380]	@ (8009f5c <USBD_SetConfig+0x198>)
 8009dde:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009de0:	4b5e      	ldr	r3, [pc, #376]	@ (8009f5c <USBD_SetConfig+0x198>)
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	d907      	bls.n	8009df8 <USBD_SetConfig+0x34>
  {
    USBD_CtlError(pdev, req);
 8009de8:	683a      	ldr	r2, [r7, #0]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	0011      	movs	r1, r2
 8009dee:	0018      	movs	r0, r3
 8009df0:	f000 f9c0 	bl	800a174 <USBD_CtlError>
    return USBD_FAIL;
 8009df4:	2303      	movs	r3, #3
 8009df6:	e0ac      	b.n	8009f52 <USBD_SetConfig+0x18e>
  }

  switch (pdev->dev_state)
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	23a7      	movs	r3, #167	@ 0xa7
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	5cd3      	ldrb	r3, [r2, r3]
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	2b02      	cmp	r3, #2
 8009e04:	d002      	beq.n	8009e0c <USBD_SetConfig+0x48>
 8009e06:	2b03      	cmp	r3, #3
 8009e08:	d033      	beq.n	8009e72 <USBD_SetConfig+0xae>
 8009e0a:	e08d      	b.n	8009f28 <USBD_SetConfig+0x164>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009e0c:	4b53      	ldr	r3, [pc, #332]	@ (8009f5c <USBD_SetConfig+0x198>)
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d029      	beq.n	8009e68 <USBD_SetConfig+0xa4>
      {
        pdev->dev_config = cfgidx;
 8009e14:	4b51      	ldr	r3, [pc, #324]	@ (8009f5c <USBD_SetConfig+0x198>)
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	001a      	movs	r2, r3
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009e1e:	4b4f      	ldr	r3, [pc, #316]	@ (8009f5c <USBD_SetConfig+0x198>)
 8009e20:	781a      	ldrb	r2, [r3, #0]
 8009e22:	250f      	movs	r5, #15
 8009e24:	197c      	adds	r4, r7, r5
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	0011      	movs	r1, r2
 8009e2a:	0018      	movs	r0, r3
 8009e2c:	f7fe fed6 	bl	8008bdc <USBD_SetClassConfig>
 8009e30:	0003      	movs	r3, r0
 8009e32:	7023      	strb	r3, [r4, #0]

        if (ret != USBD_OK)
 8009e34:	197b      	adds	r3, r7, r5
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d00b      	beq.n	8009e54 <USBD_SetConfig+0x90>
        {
          USBD_CtlError(pdev, req);
 8009e3c:	683a      	ldr	r2, [r7, #0]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	0011      	movs	r1, r2
 8009e42:	0018      	movs	r0, r3
 8009e44:	f000 f996 	bl	800a174 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	23a7      	movs	r3, #167	@ 0xa7
 8009e4c:	009b      	lsls	r3, r3, #2
 8009e4e:	2102      	movs	r1, #2
 8009e50:	54d1      	strb	r1, [r2, r3]
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009e52:	e07b      	b.n	8009f4c <USBD_SetConfig+0x188>
          (void)USBD_CtlSendStatus(pdev);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	0018      	movs	r0, r3
 8009e58:	f000 fa72 	bl	800a340 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	23a7      	movs	r3, #167	@ 0xa7
 8009e60:	009b      	lsls	r3, r3, #2
 8009e62:	2103      	movs	r1, #3
 8009e64:	54d1      	strb	r1, [r2, r3]
      break;
 8009e66:	e071      	b.n	8009f4c <USBD_SetConfig+0x188>
        (void)USBD_CtlSendStatus(pdev);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	0018      	movs	r0, r3
 8009e6c:	f000 fa68 	bl	800a340 <USBD_CtlSendStatus>
      break;
 8009e70:	e06c      	b.n	8009f4c <USBD_SetConfig+0x188>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009e72:	4b3a      	ldr	r3, [pc, #232]	@ (8009f5c <USBD_SetConfig+0x198>)
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d115      	bne.n	8009ea6 <USBD_SetConfig+0xe2>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e7a:	687a      	ldr	r2, [r7, #4]
 8009e7c:	23a7      	movs	r3, #167	@ 0xa7
 8009e7e:	009b      	lsls	r3, r3, #2
 8009e80:	2102      	movs	r1, #2
 8009e82:	54d1      	strb	r1, [r2, r3]
        pdev->dev_config = cfgidx;
 8009e84:	4b35      	ldr	r3, [pc, #212]	@ (8009f5c <USBD_SetConfig+0x198>)
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	001a      	movs	r2, r3
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009e8e:	4b33      	ldr	r3, [pc, #204]	@ (8009f5c <USBD_SetConfig+0x198>)
 8009e90:	781a      	ldrb	r2, [r3, #0]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	0011      	movs	r1, r2
 8009e96:	0018      	movs	r0, r3
 8009e98:	f7fe fec5 	bl	8008c26 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	0018      	movs	r0, r3
 8009ea0:	f000 fa4e 	bl	800a340 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009ea4:	e052      	b.n	8009f4c <USBD_SetConfig+0x188>
      else if (cfgidx != pdev->dev_config)
 8009ea6:	4b2d      	ldr	r3, [pc, #180]	@ (8009f5c <USBD_SetConfig+0x198>)
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	001a      	movs	r2, r3
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d034      	beq.n	8009f1e <USBD_SetConfig+0x15a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	b2da      	uxtb	r2, r3
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	0011      	movs	r1, r2
 8009ebe:	0018      	movs	r0, r3
 8009ec0:	f7fe feb1 	bl	8008c26 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009ec4:	4b25      	ldr	r3, [pc, #148]	@ (8009f5c <USBD_SetConfig+0x198>)
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	001a      	movs	r2, r3
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009ece:	4b23      	ldr	r3, [pc, #140]	@ (8009f5c <USBD_SetConfig+0x198>)
 8009ed0:	781a      	ldrb	r2, [r3, #0]
 8009ed2:	250f      	movs	r5, #15
 8009ed4:	197c      	adds	r4, r7, r5
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	0011      	movs	r1, r2
 8009eda:	0018      	movs	r0, r3
 8009edc:	f7fe fe7e 	bl	8008bdc <USBD_SetClassConfig>
 8009ee0:	0003      	movs	r3, r0
 8009ee2:	7023      	strb	r3, [r4, #0]
        if (ret != USBD_OK)
 8009ee4:	197b      	adds	r3, r7, r5
 8009ee6:	781b      	ldrb	r3, [r3, #0]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d013      	beq.n	8009f14 <USBD_SetConfig+0x150>
          USBD_CtlError(pdev, req);
 8009eec:	683a      	ldr	r2, [r7, #0]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	0011      	movs	r1, r2
 8009ef2:	0018      	movs	r0, r3
 8009ef4:	f000 f93e 	bl	800a174 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	b2da      	uxtb	r2, r3
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	0011      	movs	r1, r2
 8009f02:	0018      	movs	r0, r3
 8009f04:	f7fe fe8f 	bl	8008c26 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f08:	687a      	ldr	r2, [r7, #4]
 8009f0a:	23a7      	movs	r3, #167	@ 0xa7
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	2102      	movs	r1, #2
 8009f10:	54d1      	strb	r1, [r2, r3]
      break;
 8009f12:	e01b      	b.n	8009f4c <USBD_SetConfig+0x188>
          (void)USBD_CtlSendStatus(pdev);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	0018      	movs	r0, r3
 8009f18:	f000 fa12 	bl	800a340 <USBD_CtlSendStatus>
      break;
 8009f1c:	e016      	b.n	8009f4c <USBD_SetConfig+0x188>
        (void)USBD_CtlSendStatus(pdev);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	0018      	movs	r0, r3
 8009f22:	f000 fa0d 	bl	800a340 <USBD_CtlSendStatus>
      break;
 8009f26:	e011      	b.n	8009f4c <USBD_SetConfig+0x188>

    default:
      USBD_CtlError(pdev, req);
 8009f28:	683a      	ldr	r2, [r7, #0]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	0011      	movs	r1, r2
 8009f2e:	0018      	movs	r0, r3
 8009f30:	f000 f920 	bl	800a174 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009f34:	4b09      	ldr	r3, [pc, #36]	@ (8009f5c <USBD_SetConfig+0x198>)
 8009f36:	781a      	ldrb	r2, [r3, #0]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	0011      	movs	r1, r2
 8009f3c:	0018      	movs	r0, r3
 8009f3e:	f7fe fe72 	bl	8008c26 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009f42:	230f      	movs	r3, #15
 8009f44:	18fb      	adds	r3, r7, r3
 8009f46:	2203      	movs	r2, #3
 8009f48:	701a      	strb	r2, [r3, #0]
      break;
 8009f4a:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8009f4c:	230f      	movs	r3, #15
 8009f4e:	18fb      	adds	r3, r7, r3
 8009f50:	781b      	ldrb	r3, [r3, #0]
}
 8009f52:	0018      	movs	r0, r3
 8009f54:	46bd      	mov	sp, r7
 8009f56:	b004      	add	sp, #16
 8009f58:	bdb0      	pop	{r4, r5, r7, pc}
 8009f5a:	46c0      	nop			@ (mov r8, r8)
 8009f5c:	20000574 	.word	0x20000574

08009f60 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b082      	sub	sp, #8
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	88db      	ldrh	r3, [r3, #6]
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d006      	beq.n	8009f80 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8009f72:	683a      	ldr	r2, [r7, #0]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	0011      	movs	r1, r2
 8009f78:	0018      	movs	r0, r3
 8009f7a:	f000 f8fb 	bl	800a174 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009f7e:	e027      	b.n	8009fd0 <USBD_GetConfig+0x70>
    switch (pdev->dev_state)
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	23a7      	movs	r3, #167	@ 0xa7
 8009f84:	009b      	lsls	r3, r3, #2
 8009f86:	5cd3      	ldrb	r3, [r2, r3]
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	2b02      	cmp	r3, #2
 8009f8c:	dc02      	bgt.n	8009f94 <USBD_GetConfig+0x34>
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	dc03      	bgt.n	8009f9a <USBD_GetConfig+0x3a>
 8009f92:	e016      	b.n	8009fc2 <USBD_GetConfig+0x62>
 8009f94:	2b03      	cmp	r3, #3
 8009f96:	d00c      	beq.n	8009fb2 <USBD_GetConfig+0x52>
 8009f98:	e013      	b.n	8009fc2 <USBD_GetConfig+0x62>
        pdev->dev_default_config = 0U;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	3308      	adds	r3, #8
 8009fa4:	0019      	movs	r1, r3
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2201      	movs	r2, #1
 8009faa:	0018      	movs	r0, r3
 8009fac:	f000 f96a 	bl	800a284 <USBD_CtlSendData>
        break;
 8009fb0:	e00e      	b.n	8009fd0 <USBD_GetConfig+0x70>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	1d19      	adds	r1, r3, #4
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2201      	movs	r2, #1
 8009fba:	0018      	movs	r0, r3
 8009fbc:	f000 f962 	bl	800a284 <USBD_CtlSendData>
        break;
 8009fc0:	e006      	b.n	8009fd0 <USBD_GetConfig+0x70>
        USBD_CtlError(pdev, req);
 8009fc2:	683a      	ldr	r2, [r7, #0]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	0011      	movs	r1, r2
 8009fc8:	0018      	movs	r0, r3
 8009fca:	f000 f8d3 	bl	800a174 <USBD_CtlError>
        break;
 8009fce:	46c0      	nop			@ (mov r8, r8)
}
 8009fd0:	46c0      	nop			@ (mov r8, r8)
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	b002      	add	sp, #8
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	23a7      	movs	r3, #167	@ 0xa7
 8009fe6:	009b      	lsls	r3, r3, #2
 8009fe8:	5cd3      	ldrb	r3, [r2, r3]
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	3b01      	subs	r3, #1
 8009fee:	2b02      	cmp	r3, #2
 8009ff0:	d822      	bhi.n	800a038 <USBD_GetStatus+0x60>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	88db      	ldrh	r3, [r3, #6]
 8009ff6:	2b02      	cmp	r3, #2
 8009ff8:	d006      	beq.n	800a008 <USBD_GetStatus+0x30>
      {
        USBD_CtlError(pdev, req);
 8009ffa:	683a      	ldr	r2, [r7, #0]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	0011      	movs	r1, r2
 800a000:	0018      	movs	r0, r3
 800a002:	f000 f8b7 	bl	800a174 <USBD_CtlError>
        break;
 800a006:	e01e      	b.n	800a046 <USBD_GetStatus+0x6e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2201      	movs	r2, #1
 800a00c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	23a9      	movs	r3, #169	@ 0xa9
 800a012:	009b      	lsls	r3, r3, #2
 800a014:	58d3      	ldr	r3, [r2, r3]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d005      	beq.n	800a026 <USBD_GetStatus+0x4e>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	68db      	ldr	r3, [r3, #12]
 800a01e:	2202      	movs	r2, #2
 800a020:	431a      	orrs	r2, r3
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	330c      	adds	r3, #12
 800a02a:	0019      	movs	r1, r3
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2202      	movs	r2, #2
 800a030:	0018      	movs	r0, r3
 800a032:	f000 f927 	bl	800a284 <USBD_CtlSendData>
      break;
 800a036:	e006      	b.n	800a046 <USBD_GetStatus+0x6e>

    default:
      USBD_CtlError(pdev, req);
 800a038:	683a      	ldr	r2, [r7, #0]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	0011      	movs	r1, r2
 800a03e:	0018      	movs	r0, r3
 800a040:	f000 f898 	bl	800a174 <USBD_CtlError>
      break;
 800a044:	46c0      	nop			@ (mov r8, r8)
  }
}
 800a046:	46c0      	nop			@ (mov r8, r8)
 800a048:	46bd      	mov	sp, r7
 800a04a:	b002      	add	sp, #8
 800a04c:	bd80      	pop	{r7, pc}

0800a04e <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a04e:	b580      	push	{r7, lr}
 800a050:	b082      	sub	sp, #8
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
 800a056:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	885b      	ldrh	r3, [r3, #2]
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d109      	bne.n	800a074 <USBD_SetFeature+0x26>
  {
    pdev->dev_remote_wakeup = 1U;
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	23a9      	movs	r3, #169	@ 0xa9
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	2101      	movs	r1, #1
 800a068:	50d1      	str	r1, [r2, r3]
    (void)USBD_CtlSendStatus(pdev);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	0018      	movs	r0, r3
 800a06e:	f000 f967 	bl	800a340 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a072:	e017      	b.n	800a0a4 <USBD_SetFeature+0x56>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	885b      	ldrh	r3, [r3, #2]
 800a078:	2b02      	cmp	r3, #2
 800a07a:	d10d      	bne.n	800a098 <USBD_SetFeature+0x4a>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	889b      	ldrh	r3, [r3, #4]
 800a080:	0a1b      	lsrs	r3, r3, #8
 800a082:	b29b      	uxth	r3, r3
 800a084:	b2d9      	uxtb	r1, r3
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	23a8      	movs	r3, #168	@ 0xa8
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	54d1      	strb	r1, [r2, r3]
    (void)USBD_CtlSendStatus(pdev);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	0018      	movs	r0, r3
 800a092:	f000 f955 	bl	800a340 <USBD_CtlSendStatus>
}
 800a096:	e005      	b.n	800a0a4 <USBD_SetFeature+0x56>
    USBD_CtlError(pdev, req);
 800a098:	683a      	ldr	r2, [r7, #0]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	0011      	movs	r1, r2
 800a09e:	0018      	movs	r0, r3
 800a0a0:	f000 f868 	bl	800a174 <USBD_CtlError>
}
 800a0a4:	46c0      	nop			@ (mov r8, r8)
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	b002      	add	sp, #8
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a0b6:	687a      	ldr	r2, [r7, #4]
 800a0b8:	23a7      	movs	r3, #167	@ 0xa7
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	5cd3      	ldrb	r3, [r2, r3]
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	3b01      	subs	r3, #1
 800a0c2:	2b02      	cmp	r3, #2
 800a0c4:	d80d      	bhi.n	800a0e2 <USBD_ClrFeature+0x36>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	885b      	ldrh	r3, [r3, #2]
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d110      	bne.n	800a0f0 <USBD_ClrFeature+0x44>
      {
        pdev->dev_remote_wakeup = 0U;
 800a0ce:	687a      	ldr	r2, [r7, #4]
 800a0d0:	23a9      	movs	r3, #169	@ 0xa9
 800a0d2:	009b      	lsls	r3, r3, #2
 800a0d4:	2100      	movs	r1, #0
 800a0d6:	50d1      	str	r1, [r2, r3]
        (void)USBD_CtlSendStatus(pdev);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	0018      	movs	r0, r3
 800a0dc:	f000 f930 	bl	800a340 <USBD_CtlSendStatus>
      }
      break;
 800a0e0:	e006      	b.n	800a0f0 <USBD_ClrFeature+0x44>

    default:
      USBD_CtlError(pdev, req);
 800a0e2:	683a      	ldr	r2, [r7, #0]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	0011      	movs	r1, r2
 800a0e8:	0018      	movs	r0, r3
 800a0ea:	f000 f843 	bl	800a174 <USBD_CtlError>
      break;
 800a0ee:	e000      	b.n	800a0f2 <USBD_ClrFeature+0x46>
      break;
 800a0f0:	46c0      	nop			@ (mov r8, r8)
  }
}
 800a0f2:	46c0      	nop			@ (mov r8, r8)
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	b002      	add	sp, #8
 800a0f8:	bd80      	pop	{r7, pc}

0800a0fa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a0fa:	b580      	push	{r7, lr}
 800a0fc:	b084      	sub	sp, #16
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
 800a102:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	781a      	ldrb	r2, [r3, #0]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	3301      	adds	r3, #1
 800a114:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	781a      	ldrb	r2, [r3, #0]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	3301      	adds	r3, #1
 800a122:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	0018      	movs	r0, r3
 800a128:	f7ff f908 	bl	800933c <SWAPBYTE>
 800a12c:	0003      	movs	r3, r0
 800a12e:	001a      	movs	r2, r3
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	3301      	adds	r3, #1
 800a138:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	3301      	adds	r3, #1
 800a13e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	0018      	movs	r0, r3
 800a144:	f7ff f8fa 	bl	800933c <SWAPBYTE>
 800a148:	0003      	movs	r3, r0
 800a14a:	001a      	movs	r2, r3
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	3301      	adds	r3, #1
 800a154:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	3301      	adds	r3, #1
 800a15a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	0018      	movs	r0, r3
 800a160:	f7ff f8ec 	bl	800933c <SWAPBYTE>
 800a164:	0003      	movs	r3, r0
 800a166:	001a      	movs	r2, r3
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	80da      	strh	r2, [r3, #6]
}
 800a16c:	46c0      	nop			@ (mov r8, r8)
 800a16e:	46bd      	mov	sp, r7
 800a170:	b004      	add	sp, #16
 800a172:	bd80      	pop	{r7, pc}

0800a174 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b082      	sub	sp, #8
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2180      	movs	r1, #128	@ 0x80
 800a182:	0018      	movs	r0, r3
 800a184:	f000 fd13 	bl	800abae <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2100      	movs	r1, #0
 800a18c:	0018      	movs	r0, r3
 800a18e:	f000 fd0e 	bl	800abae <USBD_LL_StallEP>
}
 800a192:	46c0      	nop			@ (mov r8, r8)
 800a194:	46bd      	mov	sp, r7
 800a196:	b002      	add	sp, #8
 800a198:	bd80      	pop	{r7, pc}

0800a19a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a19a:	b590      	push	{r4, r7, lr}
 800a19c:	b087      	sub	sp, #28
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	60f8      	str	r0, [r7, #12]
 800a1a2:	60b9      	str	r1, [r7, #8]
 800a1a4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a1a6:	2417      	movs	r4, #23
 800a1a8:	193b      	adds	r3, r7, r4
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	701a      	strb	r2, [r3, #0]
  uint8_t *pdesc;

  if (desc == NULL)
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d044      	beq.n	800a23e <USBD_GetString+0xa4>
  {
    return;
  }

  pdesc = desc;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	0018      	movs	r0, r3
 800a1bc:	f000 f843 	bl	800a246 <USBD_GetLen>
 800a1c0:	0003      	movs	r3, r0
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	18db      	adds	r3, r3, r3
 800a1c8:	b29a      	uxth	r2, r3
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a1ce:	193b      	adds	r3, r7, r4
 800a1d0:	781b      	ldrb	r3, [r3, #0]
 800a1d2:	68ba      	ldr	r2, [r7, #8]
 800a1d4:	18d3      	adds	r3, r2, r3
 800a1d6:	687a      	ldr	r2, [r7, #4]
 800a1d8:	7812      	ldrb	r2, [r2, #0]
 800a1da:	701a      	strb	r2, [r3, #0]
  idx++;
 800a1dc:	193b      	adds	r3, r7, r4
 800a1de:	781a      	ldrb	r2, [r3, #0]
 800a1e0:	193b      	adds	r3, r7, r4
 800a1e2:	3201      	adds	r2, #1
 800a1e4:	701a      	strb	r2, [r3, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a1e6:	193b      	adds	r3, r7, r4
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	68ba      	ldr	r2, [r7, #8]
 800a1ec:	18d3      	adds	r3, r2, r3
 800a1ee:	2203      	movs	r2, #3
 800a1f0:	701a      	strb	r2, [r3, #0]
  idx++;
 800a1f2:	193b      	adds	r3, r7, r4
 800a1f4:	781a      	ldrb	r2, [r3, #0]
 800a1f6:	193b      	adds	r3, r7, r4
 800a1f8:	3201      	adds	r2, #1
 800a1fa:	701a      	strb	r2, [r3, #0]

  while (*pdesc != (uint8_t)'\0')
 800a1fc:	e01a      	b.n	800a234 <USBD_GetString+0x9a>
  {
    unicode[idx] = *pdesc;
 800a1fe:	2117      	movs	r1, #23
 800a200:	187b      	adds	r3, r7, r1
 800a202:	781b      	ldrb	r3, [r3, #0]
 800a204:	68ba      	ldr	r2, [r7, #8]
 800a206:	18d3      	adds	r3, r2, r3
 800a208:	693a      	ldr	r2, [r7, #16]
 800a20a:	7812      	ldrb	r2, [r2, #0]
 800a20c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	3301      	adds	r3, #1
 800a212:	613b      	str	r3, [r7, #16]
    idx++;
 800a214:	187b      	adds	r3, r7, r1
 800a216:	781a      	ldrb	r2, [r3, #0]
 800a218:	187b      	adds	r3, r7, r1
 800a21a:	3201      	adds	r2, #1
 800a21c:	701a      	strb	r2, [r3, #0]

    unicode[idx] = 0U;
 800a21e:	187b      	adds	r3, r7, r1
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	68ba      	ldr	r2, [r7, #8]
 800a224:	18d3      	adds	r3, r2, r3
 800a226:	2200      	movs	r2, #0
 800a228:	701a      	strb	r2, [r3, #0]
    idx++;
 800a22a:	187b      	adds	r3, r7, r1
 800a22c:	781a      	ldrb	r2, [r3, #0]
 800a22e:	187b      	adds	r3, r7, r1
 800a230:	3201      	adds	r2, #1
 800a232:	701a      	strb	r2, [r3, #0]
  while (*pdesc != (uint8_t)'\0')
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	781b      	ldrb	r3, [r3, #0]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d1e0      	bne.n	800a1fe <USBD_GetString+0x64>
 800a23c:	e000      	b.n	800a240 <USBD_GetString+0xa6>
    return;
 800a23e:	46c0      	nop			@ (mov r8, r8)
  }
}
 800a240:	46bd      	mov	sp, r7
 800a242:	b007      	add	sp, #28
 800a244:	bd90      	pop	{r4, r7, pc}

0800a246 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a246:	b580      	push	{r7, lr}
 800a248:	b084      	sub	sp, #16
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a24e:	230f      	movs	r3, #15
 800a250:	18fb      	adds	r3, r7, r3
 800a252:	2200      	movs	r2, #0
 800a254:	701a      	strb	r2, [r3, #0]
  uint8_t *pbuff = buf;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a25a:	e008      	b.n	800a26e <USBD_GetLen+0x28>
  {
    len++;
 800a25c:	210f      	movs	r1, #15
 800a25e:	187b      	adds	r3, r7, r1
 800a260:	781a      	ldrb	r2, [r3, #0]
 800a262:	187b      	adds	r3, r7, r1
 800a264:	3201      	adds	r2, #1
 800a266:	701a      	strb	r2, [r3, #0]
    pbuff++;
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	3301      	adds	r3, #1
 800a26c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d1f2      	bne.n	800a25c <USBD_GetLen+0x16>
  }

  return len;
 800a276:	230f      	movs	r3, #15
 800a278:	18fb      	adds	r3, r7, r3
 800a27a:	781b      	ldrb	r3, [r3, #0]
}
 800a27c:	0018      	movs	r0, r3
 800a27e:	46bd      	mov	sp, r7
 800a280:	b004      	add	sp, #16
 800a282:	bd80      	pop	{r7, pc}

0800a284 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b084      	sub	sp, #16
 800a288:	af00      	add	r7, sp, #0
 800a28a:	60f8      	str	r0, [r7, #12]
 800a28c:	60b9      	str	r1, [r7, #8]
 800a28e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a290:	68fa      	ldr	r2, [r7, #12]
 800a292:	23a5      	movs	r3, #165	@ 0xa5
 800a294:	009b      	lsls	r3, r3, #2
 800a296:	2102      	movs	r1, #2
 800a298:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	687a      	ldr	r2, [r7, #4]
 800a2a4:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	68ba      	ldr	r2, [r7, #8]
 800a2aa:	68f8      	ldr	r0, [r7, #12]
 800a2ac:	2100      	movs	r1, #0
 800a2ae:	f000 fd30 	bl	800ad12 <USBD_LL_Transmit>

  return USBD_OK;
 800a2b2:	2300      	movs	r3, #0
}
 800a2b4:	0018      	movs	r0, r3
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	b004      	add	sp, #16
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	60f8      	str	r0, [r7, #12]
 800a2c4:	60b9      	str	r1, [r7, #8]
 800a2c6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	68ba      	ldr	r2, [r7, #8]
 800a2cc:	68f8      	ldr	r0, [r7, #12]
 800a2ce:	2100      	movs	r1, #0
 800a2d0:	f000 fd1f 	bl	800ad12 <USBD_LL_Transmit>

  return USBD_OK;
 800a2d4:	2300      	movs	r3, #0
}
 800a2d6:	0018      	movs	r0, r3
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	b004      	add	sp, #16
 800a2dc:	bd80      	pop	{r7, pc}

0800a2de <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a2de:	b580      	push	{r7, lr}
 800a2e0:	b084      	sub	sp, #16
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	60f8      	str	r0, [r7, #12]
 800a2e6:	60b9      	str	r1, [r7, #8]
 800a2e8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a2ea:	68fa      	ldr	r2, [r7, #12]
 800a2ec:	23a5      	movs	r3, #165	@ 0xa5
 800a2ee:	009b      	lsls	r3, r3, #2
 800a2f0:	2103      	movs	r1, #3
 800a2f2:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800a2f4:	68fa      	ldr	r2, [r7, #12]
 800a2f6:	23ac      	movs	r3, #172	@ 0xac
 800a2f8:	005b      	lsls	r3, r3, #1
 800a2fa:	6879      	ldr	r1, [r7, #4]
 800a2fc:	50d1      	str	r1, [r2, r3]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a2fe:	68fa      	ldr	r2, [r7, #12]
 800a300:	23ae      	movs	r3, #174	@ 0xae
 800a302:	005b      	lsls	r3, r3, #1
 800a304:	6879      	ldr	r1, [r7, #4]
 800a306:	50d1      	str	r1, [r2, r3]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	68ba      	ldr	r2, [r7, #8]
 800a30c:	68f8      	ldr	r0, [r7, #12]
 800a30e:	2100      	movs	r1, #0
 800a310:	f000 fd2f 	bl	800ad72 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a314:	2300      	movs	r3, #0
}
 800a316:	0018      	movs	r0, r3
 800a318:	46bd      	mov	sp, r7
 800a31a:	b004      	add	sp, #16
 800a31c:	bd80      	pop	{r7, pc}

0800a31e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a31e:	b580      	push	{r7, lr}
 800a320:	b084      	sub	sp, #16
 800a322:	af00      	add	r7, sp, #0
 800a324:	60f8      	str	r0, [r7, #12]
 800a326:	60b9      	str	r1, [r7, #8]
 800a328:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	68ba      	ldr	r2, [r7, #8]
 800a32e:	68f8      	ldr	r0, [r7, #12]
 800a330:	2100      	movs	r1, #0
 800a332:	f000 fd1e 	bl	800ad72 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a336:	2300      	movs	r3, #0
}
 800a338:	0018      	movs	r0, r3
 800a33a:	46bd      	mov	sp, r7
 800a33c:	b004      	add	sp, #16
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a348:	687a      	ldr	r2, [r7, #4]
 800a34a:	23a5      	movs	r3, #165	@ 0xa5
 800a34c:	009b      	lsls	r3, r3, #2
 800a34e:	2104      	movs	r1, #4
 800a350:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	2300      	movs	r3, #0
 800a356:	2200      	movs	r2, #0
 800a358:	2100      	movs	r1, #0
 800a35a:	f000 fcda 	bl	800ad12 <USBD_LL_Transmit>

  return USBD_OK;
 800a35e:	2300      	movs	r3, #0
}
 800a360:	0018      	movs	r0, r3
 800a362:	46bd      	mov	sp, r7
 800a364:	b002      	add	sp, #8
 800a366:	bd80      	pop	{r7, pc}

0800a368 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b082      	sub	sp, #8
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	23a5      	movs	r3, #165	@ 0xa5
 800a374:	009b      	lsls	r3, r3, #2
 800a376:	2105      	movs	r1, #5
 800a378:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	2300      	movs	r3, #0
 800a37e:	2200      	movs	r2, #0
 800a380:	2100      	movs	r1, #0
 800a382:	f000 fcf6 	bl	800ad72 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a386:	2300      	movs	r3, #0
}
 800a388:	0018      	movs	r0, r3
 800a38a:	46bd      	mov	sp, r7
 800a38c:	b002      	add	sp, #8
 800a38e:	bd80      	pop	{r7, pc}

0800a390 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800a394:	4914      	ldr	r1, [pc, #80]	@ (800a3e8 <MX_USB_Device_Init+0x58>)
 800a396:	4b15      	ldr	r3, [pc, #84]	@ (800a3ec <MX_USB_Device_Init+0x5c>)
 800a398:	2200      	movs	r2, #0
 800a39a:	0018      	movs	r0, r3
 800a39c:	f7fe fb90 	bl	8008ac0 <USBD_Init>
 800a3a0:	1e03      	subs	r3, r0, #0
 800a3a2:	d001      	beq.n	800a3a8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800a3a4:	f7f6 fdba 	bl	8000f1c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800a3a8:	4a11      	ldr	r2, [pc, #68]	@ (800a3f0 <MX_USB_Device_Init+0x60>)
 800a3aa:	4b10      	ldr	r3, [pc, #64]	@ (800a3ec <MX_USB_Device_Init+0x5c>)
 800a3ac:	0011      	movs	r1, r2
 800a3ae:	0018      	movs	r0, r3
 800a3b0:	f7fe fbc0 	bl	8008b34 <USBD_RegisterClass>
 800a3b4:	1e03      	subs	r3, r0, #0
 800a3b6:	d001      	beq.n	800a3bc <MX_USB_Device_Init+0x2c>
    Error_Handler();
 800a3b8:	f7f6 fdb0 	bl	8000f1c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800a3bc:	4a0d      	ldr	r2, [pc, #52]	@ (800a3f4 <MX_USB_Device_Init+0x64>)
 800a3be:	4b0b      	ldr	r3, [pc, #44]	@ (800a3ec <MX_USB_Device_Init+0x5c>)
 800a3c0:	0011      	movs	r1, r2
 800a3c2:	0018      	movs	r0, r3
 800a3c4:	f7fe fa9a 	bl	80088fc <USBD_CDC_RegisterInterface>
 800a3c8:	1e03      	subs	r3, r0, #0
 800a3ca:	d001      	beq.n	800a3d0 <MX_USB_Device_Init+0x40>
    Error_Handler();
 800a3cc:	f7f6 fda6 	bl	8000f1c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a3d0:	4b06      	ldr	r3, [pc, #24]	@ (800a3ec <MX_USB_Device_Init+0x5c>)
 800a3d2:	0018      	movs	r0, r3
 800a3d4:	f7fe fbec 	bl	8008bb0 <USBD_Start>
 800a3d8:	1e03      	subs	r3, r0, #0
 800a3da:	d001      	beq.n	800a3e0 <MX_USB_Device_Init+0x50>
    Error_Handler();
 800a3dc:	f7f6 fd9e 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800a3e0:	46c0      	nop			@ (mov r8, r8)
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	46c0      	nop			@ (mov r8, r8)
 800a3e8:	200000dc 	.word	0x200000dc
 800a3ec:	20000578 	.word	0x20000578
 800a3f0:	20000048 	.word	0x20000048
 800a3f4:	200000c8 	.word	0x200000c8

0800a3f8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a3fc:	4907      	ldr	r1, [pc, #28]	@ (800a41c <CDC_Init_FS+0x24>)
 800a3fe:	4b08      	ldr	r3, [pc, #32]	@ (800a420 <CDC_Init_FS+0x28>)
 800a400:	2200      	movs	r2, #0
 800a402:	0018      	movs	r0, r3
 800a404:	f7fe fa94 	bl	8008930 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a408:	4a06      	ldr	r2, [pc, #24]	@ (800a424 <CDC_Init_FS+0x2c>)
 800a40a:	4b05      	ldr	r3, [pc, #20]	@ (800a420 <CDC_Init_FS+0x28>)
 800a40c:	0011      	movs	r1, r2
 800a40e:	0018      	movs	r0, r3
 800a410:	f7fe fab1 	bl	8008976 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a414:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a416:	0018      	movs	r0, r3
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}
 800a41c:	20000a54 	.word	0x20000a54
 800a420:	20000578 	.word	0x20000578
 800a424:	20000854 	.word	0x20000854

0800a428 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a42c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a42e:	0018      	movs	r0, r3
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b082      	sub	sp, #8
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6039      	str	r1, [r7, #0]
 800a43c:	0011      	movs	r1, r2
 800a43e:	1dfb      	adds	r3, r7, #7
 800a440:	1c02      	adds	r2, r0, #0
 800a442:	701a      	strb	r2, [r3, #0]
 800a444:	1d3b      	adds	r3, r7, #4
 800a446:	1c0a      	adds	r2, r1, #0
 800a448:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a44a:	1dfb      	adds	r3, r7, #7
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	2b23      	cmp	r3, #35	@ 0x23
 800a450:	d804      	bhi.n	800a45c <CDC_Control_FS+0x28>
 800a452:	009a      	lsls	r2, r3, #2
 800a454:	4b04      	ldr	r3, [pc, #16]	@ (800a468 <CDC_Control_FS+0x34>)
 800a456:	18d3      	adds	r3, r2, r3
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a45c:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 800a45e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a460:	0018      	movs	r0, r3
 800a462:	46bd      	mov	sp, r7
 800a464:	b002      	add	sp, #8
 800a466:	bd80      	pop	{r7, pc}
 800a468:	0800b988 	.word	0x0800b988

0800a46c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	4b06      	ldr	r3, [pc, #24]	@ (800a494 <CDC_Receive_FS+0x28>)
 800a47a:	0011      	movs	r1, r2
 800a47c:	0018      	movs	r0, r3
 800a47e:	f7fe fa7a 	bl	8008976 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a482:	4b04      	ldr	r3, [pc, #16]	@ (800a494 <CDC_Receive_FS+0x28>)
 800a484:	0018      	movs	r0, r3
 800a486:	f7fe fae1 	bl	8008a4c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a48a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a48c:	0018      	movs	r0, r3
 800a48e:	46bd      	mov	sp, r7
 800a490:	b002      	add	sp, #8
 800a492:	bd80      	pop	{r7, pc}
 800a494:	20000578 	.word	0x20000578

0800a498 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a498:	b5b0      	push	{r4, r5, r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	000a      	movs	r2, r1
 800a4a2:	1cbb      	adds	r3, r7, #2
 800a4a4:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800a4a6:	230f      	movs	r3, #15
 800a4a8:	18fb      	adds	r3, r7, r3
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a4ae:	4a11      	ldr	r2, [pc, #68]	@ (800a4f4 <CDC_Transmit_FS+0x5c>)
 800a4b0:	23af      	movs	r3, #175	@ 0xaf
 800a4b2:	009b      	lsls	r3, r3, #2
 800a4b4:	58d3      	ldr	r3, [r2, r3]
 800a4b6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a4b8:	68ba      	ldr	r2, [r7, #8]
 800a4ba:	2385      	movs	r3, #133	@ 0x85
 800a4bc:	009b      	lsls	r3, r3, #2
 800a4be:	58d3      	ldr	r3, [r2, r3]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d001      	beq.n	800a4c8 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	e010      	b.n	800a4ea <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a4c8:	1cbb      	adds	r3, r7, #2
 800a4ca:	881a      	ldrh	r2, [r3, #0]
 800a4cc:	6879      	ldr	r1, [r7, #4]
 800a4ce:	4b09      	ldr	r3, [pc, #36]	@ (800a4f4 <CDC_Transmit_FS+0x5c>)
 800a4d0:	0018      	movs	r0, r3
 800a4d2:	f7fe fa2d 	bl	8008930 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a4d6:	250f      	movs	r5, #15
 800a4d8:	197c      	adds	r4, r7, r5
 800a4da:	4b06      	ldr	r3, [pc, #24]	@ (800a4f4 <CDC_Transmit_FS+0x5c>)
 800a4dc:	0018      	movs	r0, r3
 800a4de:	f7fe fa67 	bl	80089b0 <USBD_CDC_TransmitPacket>
 800a4e2:	0003      	movs	r3, r0
 800a4e4:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800a4e6:	197b      	adds	r3, r7, r5
 800a4e8:	781b      	ldrb	r3, [r3, #0]
}
 800a4ea:	0018      	movs	r0, r3
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	b004      	add	sp, #16
 800a4f0:	bdb0      	pop	{r4, r5, r7, pc}
 800a4f2:	46c0      	nop			@ (mov r8, r8)
 800a4f4:	20000578 	.word	0x20000578

0800a4f8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b086      	sub	sp, #24
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	60f8      	str	r0, [r7, #12]
 800a500:	60b9      	str	r1, [r7, #8]
 800a502:	1dfb      	adds	r3, r7, #7
 800a504:	701a      	strb	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800a506:	2117      	movs	r1, #23
 800a508:	187b      	adds	r3, r7, r1
 800a50a:	2200      	movs	r2, #0
 800a50c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a50e:	187b      	adds	r3, r7, r1
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	b25b      	sxtb	r3, r3
}
 800a514:	0018      	movs	r0, r3
 800a516:	46bd      	mov	sp, r7
 800a518:	b006      	add	sp, #24
 800a51a:	bd80      	pop	{r7, pc}

0800a51c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b082      	sub	sp, #8
 800a520:	af00      	add	r7, sp, #0
 800a522:	0002      	movs	r2, r0
 800a524:	6039      	str	r1, [r7, #0]
 800a526:	1dfb      	adds	r3, r7, #7
 800a528:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	2212      	movs	r2, #18
 800a52e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800a530:	4b02      	ldr	r3, [pc, #8]	@ (800a53c <USBD_CDC_DeviceDescriptor+0x20>)
}
 800a532:	0018      	movs	r0, r3
 800a534:	46bd      	mov	sp, r7
 800a536:	b002      	add	sp, #8
 800a538:	bd80      	pop	{r7, pc}
 800a53a:	46c0      	nop			@ (mov r8, r8)
 800a53c:	200000f8 	.word	0x200000f8

0800a540 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b082      	sub	sp, #8
 800a544:	af00      	add	r7, sp, #0
 800a546:	0002      	movs	r2, r0
 800a548:	6039      	str	r1, [r7, #0]
 800a54a:	1dfb      	adds	r3, r7, #7
 800a54c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	2204      	movs	r2, #4
 800a552:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a554:	4b02      	ldr	r3, [pc, #8]	@ (800a560 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800a556:	0018      	movs	r0, r3
 800a558:	46bd      	mov	sp, r7
 800a55a:	b002      	add	sp, #8
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	46c0      	nop			@ (mov r8, r8)
 800a560:	2000010c 	.word	0x2000010c

0800a564 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b082      	sub	sp, #8
 800a568:	af00      	add	r7, sp, #0
 800a56a:	0002      	movs	r2, r0
 800a56c:	6039      	str	r1, [r7, #0]
 800a56e:	1dfb      	adds	r3, r7, #7
 800a570:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800a572:	1dfb      	adds	r3, r7, #7
 800a574:	781b      	ldrb	r3, [r3, #0]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d106      	bne.n	800a588 <USBD_CDC_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a57a:	683a      	ldr	r2, [r7, #0]
 800a57c:	4908      	ldr	r1, [pc, #32]	@ (800a5a0 <USBD_CDC_ProductStrDescriptor+0x3c>)
 800a57e:	4b09      	ldr	r3, [pc, #36]	@ (800a5a4 <USBD_CDC_ProductStrDescriptor+0x40>)
 800a580:	0018      	movs	r0, r3
 800a582:	f7ff fe0a 	bl	800a19a <USBD_GetString>
 800a586:	e005      	b.n	800a594 <USBD_CDC_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a588:	683a      	ldr	r2, [r7, #0]
 800a58a:	4905      	ldr	r1, [pc, #20]	@ (800a5a0 <USBD_CDC_ProductStrDescriptor+0x3c>)
 800a58c:	4b05      	ldr	r3, [pc, #20]	@ (800a5a4 <USBD_CDC_ProductStrDescriptor+0x40>)
 800a58e:	0018      	movs	r0, r3
 800a590:	f7ff fe03 	bl	800a19a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a594:	4b02      	ldr	r3, [pc, #8]	@ (800a5a0 <USBD_CDC_ProductStrDescriptor+0x3c>)
}
 800a596:	0018      	movs	r0, r3
 800a598:	46bd      	mov	sp, r7
 800a59a:	b002      	add	sp, #8
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	46c0      	nop			@ (mov r8, r8)
 800a5a0:	20001254 	.word	0x20001254
 800a5a4:	0800b85c 	.word	0x0800b85c

0800a5a8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b082      	sub	sp, #8
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	0002      	movs	r2, r0
 800a5b0:	6039      	str	r1, [r7, #0]
 800a5b2:	1dfb      	adds	r3, r7, #7
 800a5b4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a5b6:	683a      	ldr	r2, [r7, #0]
 800a5b8:	4904      	ldr	r1, [pc, #16]	@ (800a5cc <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800a5ba:	4b05      	ldr	r3, [pc, #20]	@ (800a5d0 <USBD_CDC_ManufacturerStrDescriptor+0x28>)
 800a5bc:	0018      	movs	r0, r3
 800a5be:	f7ff fdec 	bl	800a19a <USBD_GetString>
  return USBD_StrDesc;
 800a5c2:	4b02      	ldr	r3, [pc, #8]	@ (800a5cc <USBD_CDC_ManufacturerStrDescriptor+0x24>)
}
 800a5c4:	0018      	movs	r0, r3
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	b002      	add	sp, #8
 800a5ca:	bd80      	pop	{r7, pc}
 800a5cc:	20001254 	.word	0x20001254
 800a5d0:	0800b870 	.word	0x0800b870

0800a5d4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b082      	sub	sp, #8
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	0002      	movs	r2, r0
 800a5dc:	6039      	str	r1, [r7, #0]
 800a5de:	1dfb      	adds	r3, r7, #7
 800a5e0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	221a      	movs	r2, #26
 800a5e6:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a5e8:	f000 f84c 	bl	800a684 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a5ec:	4b02      	ldr	r3, [pc, #8]	@ (800a5f8 <USBD_CDC_SerialStrDescriptor+0x24>)
}
 800a5ee:	0018      	movs	r0, r3
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	b002      	add	sp, #8
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	46c0      	nop			@ (mov r8, r8)
 800a5f8:	20000110 	.word	0x20000110

0800a5fc <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b082      	sub	sp, #8
 800a600:	af00      	add	r7, sp, #0
 800a602:	0002      	movs	r2, r0
 800a604:	6039      	str	r1, [r7, #0]
 800a606:	1dfb      	adds	r3, r7, #7
 800a608:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800a60a:	1dfb      	adds	r3, r7, #7
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d106      	bne.n	800a620 <USBD_CDC_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a612:	683a      	ldr	r2, [r7, #0]
 800a614:	4908      	ldr	r1, [pc, #32]	@ (800a638 <USBD_CDC_ConfigStrDescriptor+0x3c>)
 800a616:	4b09      	ldr	r3, [pc, #36]	@ (800a63c <USBD_CDC_ConfigStrDescriptor+0x40>)
 800a618:	0018      	movs	r0, r3
 800a61a:	f7ff fdbe 	bl	800a19a <USBD_GetString>
 800a61e:	e005      	b.n	800a62c <USBD_CDC_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a620:	683a      	ldr	r2, [r7, #0]
 800a622:	4905      	ldr	r1, [pc, #20]	@ (800a638 <USBD_CDC_ConfigStrDescriptor+0x3c>)
 800a624:	4b05      	ldr	r3, [pc, #20]	@ (800a63c <USBD_CDC_ConfigStrDescriptor+0x40>)
 800a626:	0018      	movs	r0, r3
 800a628:	f7ff fdb7 	bl	800a19a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a62c:	4b02      	ldr	r3, [pc, #8]	@ (800a638 <USBD_CDC_ConfigStrDescriptor+0x3c>)
}
 800a62e:	0018      	movs	r0, r3
 800a630:	46bd      	mov	sp, r7
 800a632:	b002      	add	sp, #8
 800a634:	bd80      	pop	{r7, pc}
 800a636:	46c0      	nop			@ (mov r8, r8)
 800a638:	20001254 	.word	0x20001254
 800a63c:	0800b874 	.word	0x0800b874

0800a640 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b082      	sub	sp, #8
 800a644:	af00      	add	r7, sp, #0
 800a646:	0002      	movs	r2, r0
 800a648:	6039      	str	r1, [r7, #0]
 800a64a:	1dfb      	adds	r3, r7, #7
 800a64c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800a64e:	1dfb      	adds	r3, r7, #7
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d106      	bne.n	800a664 <USBD_CDC_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a656:	683a      	ldr	r2, [r7, #0]
 800a658:	4908      	ldr	r1, [pc, #32]	@ (800a67c <USBD_CDC_InterfaceStrDescriptor+0x3c>)
 800a65a:	4b09      	ldr	r3, [pc, #36]	@ (800a680 <USBD_CDC_InterfaceStrDescriptor+0x40>)
 800a65c:	0018      	movs	r0, r3
 800a65e:	f7ff fd9c 	bl	800a19a <USBD_GetString>
 800a662:	e005      	b.n	800a670 <USBD_CDC_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a664:	683a      	ldr	r2, [r7, #0]
 800a666:	4905      	ldr	r1, [pc, #20]	@ (800a67c <USBD_CDC_InterfaceStrDescriptor+0x3c>)
 800a668:	4b05      	ldr	r3, [pc, #20]	@ (800a680 <USBD_CDC_InterfaceStrDescriptor+0x40>)
 800a66a:	0018      	movs	r0, r3
 800a66c:	f7ff fd95 	bl	800a19a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a670:	4b02      	ldr	r3, [pc, #8]	@ (800a67c <USBD_CDC_InterfaceStrDescriptor+0x3c>)
}
 800a672:	0018      	movs	r0, r3
 800a674:	46bd      	mov	sp, r7
 800a676:	b002      	add	sp, #8
 800a678:	bd80      	pop	{r7, pc}
 800a67a:	46c0      	nop			@ (mov r8, r8)
 800a67c:	20001254 	.word	0x20001254
 800a680:	0800b880 	.word	0x0800b880

0800a684 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b084      	sub	sp, #16
 800a688:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a68a:	4b10      	ldr	r3, [pc, #64]	@ (800a6cc <Get_SerialNum+0x48>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a690:	4b0f      	ldr	r3, [pc, #60]	@ (800a6d0 <Get_SerialNum+0x4c>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a696:	4b0f      	ldr	r3, [pc, #60]	@ (800a6d4 <Get_SerialNum+0x50>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a69c:	68fa      	ldr	r2, [r7, #12]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	18d3      	adds	r3, r2, r3
 800a6a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d00b      	beq.n	800a6c2 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a6aa:	490b      	ldr	r1, [pc, #44]	@ (800a6d8 <Get_SerialNum+0x54>)
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2208      	movs	r2, #8
 800a6b0:	0018      	movs	r0, r3
 800a6b2:	f000 f815 	bl	800a6e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a6b6:	4909      	ldr	r1, [pc, #36]	@ (800a6dc <Get_SerialNum+0x58>)
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	2204      	movs	r2, #4
 800a6bc:	0018      	movs	r0, r3
 800a6be:	f000 f80f 	bl	800a6e0 <IntToUnicode>
  }
}
 800a6c2:	46c0      	nop			@ (mov r8, r8)
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	b004      	add	sp, #16
 800a6c8:	bd80      	pop	{r7, pc}
 800a6ca:	46c0      	nop			@ (mov r8, r8)
 800a6cc:	1fff7590 	.word	0x1fff7590
 800a6d0:	1fff7594 	.word	0x1fff7594
 800a6d4:	1fff7598 	.word	0x1fff7598
 800a6d8:	20000112 	.word	0x20000112
 800a6dc:	20000122 	.word	0x20000122

0800a6e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b086      	sub	sp, #24
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	60f8      	str	r0, [r7, #12]
 800a6e8:	60b9      	str	r1, [r7, #8]
 800a6ea:	1dfb      	adds	r3, r7, #7
 800a6ec:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800a6ee:	2117      	movs	r1, #23
 800a6f0:	187b      	adds	r3, r7, r1
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800a6f6:	187b      	adds	r3, r7, r1
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	701a      	strb	r2, [r3, #0]
 800a6fc:	e02f      	b.n	800a75e <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	0f1b      	lsrs	r3, r3, #28
 800a702:	2b09      	cmp	r3, #9
 800a704:	d80d      	bhi.n	800a722 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	0f1b      	lsrs	r3, r3, #28
 800a70a:	b2da      	uxtb	r2, r3
 800a70c:	2317      	movs	r3, #23
 800a70e:	18fb      	adds	r3, r7, r3
 800a710:	781b      	ldrb	r3, [r3, #0]
 800a712:	005b      	lsls	r3, r3, #1
 800a714:	0019      	movs	r1, r3
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	185b      	adds	r3, r3, r1
 800a71a:	3230      	adds	r2, #48	@ 0x30
 800a71c:	b2d2      	uxtb	r2, r2
 800a71e:	701a      	strb	r2, [r3, #0]
 800a720:	e00c      	b.n	800a73c <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	0f1b      	lsrs	r3, r3, #28
 800a726:	b2da      	uxtb	r2, r3
 800a728:	2317      	movs	r3, #23
 800a72a:	18fb      	adds	r3, r7, r3
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	005b      	lsls	r3, r3, #1
 800a730:	0019      	movs	r1, r3
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	185b      	adds	r3, r3, r1
 800a736:	3237      	adds	r2, #55	@ 0x37
 800a738:	b2d2      	uxtb	r2, r2
 800a73a:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	011b      	lsls	r3, r3, #4
 800a740:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a742:	2117      	movs	r1, #23
 800a744:	187b      	adds	r3, r7, r1
 800a746:	781b      	ldrb	r3, [r3, #0]
 800a748:	005b      	lsls	r3, r3, #1
 800a74a:	3301      	adds	r3, #1
 800a74c:	68ba      	ldr	r2, [r7, #8]
 800a74e:	18d3      	adds	r3, r2, r3
 800a750:	2200      	movs	r2, #0
 800a752:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a754:	187b      	adds	r3, r7, r1
 800a756:	781a      	ldrb	r2, [r3, #0]
 800a758:	187b      	adds	r3, r7, r1
 800a75a:	3201      	adds	r2, #1
 800a75c:	701a      	strb	r2, [r3, #0]
 800a75e:	2317      	movs	r3, #23
 800a760:	18fa      	adds	r2, r7, r3
 800a762:	1dfb      	adds	r3, r7, #7
 800a764:	7812      	ldrb	r2, [r2, #0]
 800a766:	781b      	ldrb	r3, [r3, #0]
 800a768:	429a      	cmp	r2, r3
 800a76a:	d3c8      	bcc.n	800a6fe <IntToUnicode+0x1e>
  }
}
 800a76c:	46c0      	nop			@ (mov r8, r8)
 800a76e:	46c0      	nop			@ (mov r8, r8)
 800a770:	46bd      	mov	sp, r7
 800a772:	b006      	add	sp, #24
 800a774:	bd80      	pop	{r7, pc}
	...

0800a778 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a778:	b590      	push	{r4, r7, lr}
 800a77a:	b099      	sub	sp, #100	@ 0x64
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a780:	2414      	movs	r4, #20
 800a782:	193b      	adds	r3, r7, r4
 800a784:	0018      	movs	r0, r3
 800a786:	234c      	movs	r3, #76	@ 0x4c
 800a788:	001a      	movs	r2, r3
 800a78a:	2100      	movs	r1, #0
 800a78c:	f000 fbac 	bl	800aee8 <memset>
  if(pcdHandle->Instance==USB_DRD_FS)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a25      	ldr	r2, [pc, #148]	@ (800a82c <HAL_PCD_MspInit+0xb4>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d143      	bne.n	800a822 <HAL_PCD_MspInit+0xaa>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a79a:	193b      	adds	r3, r7, r4
 800a79c:	2280      	movs	r2, #128	@ 0x80
 800a79e:	0452      	lsls	r2, r2, #17
 800a7a0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a7a2:	193b      	adds	r3, r7, r4
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	645a      	str	r2, [r3, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a7a8:	193b      	adds	r3, r7, r4
 800a7aa:	0018      	movs	r0, r3
 800a7ac:	f7fa f9fa 	bl	8004ba4 <HAL_RCCEx_PeriphCLKConfig>
 800a7b0:	1e03      	subs	r3, r0, #0
 800a7b2:	d001      	beq.n	800a7b8 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800a7b4:	f7f6 fbb2 	bl	8000f1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a7b8:	4b1d      	ldr	r3, [pc, #116]	@ (800a830 <HAL_PCD_MspInit+0xb8>)
 800a7ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a7bc:	4b1c      	ldr	r3, [pc, #112]	@ (800a830 <HAL_PCD_MspInit+0xb8>)
 800a7be:	2180      	movs	r1, #128	@ 0x80
 800a7c0:	0189      	lsls	r1, r1, #6
 800a7c2:	430a      	orrs	r2, r1
 800a7c4:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a7c6:	4b1a      	ldr	r3, [pc, #104]	@ (800a830 <HAL_PCD_MspInit+0xb8>)
 800a7c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a7ca:	2380      	movs	r3, #128	@ 0x80
 800a7cc:	019b      	lsls	r3, r3, #6
 800a7ce:	4013      	ands	r3, r2
 800a7d0:	613b      	str	r3, [r7, #16]
 800a7d2:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a7d4:	4b16      	ldr	r3, [pc, #88]	@ (800a830 <HAL_PCD_MspInit+0xb8>)
 800a7d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a7d8:	2380      	movs	r3, #128	@ 0x80
 800a7da:	055b      	lsls	r3, r3, #21
 800a7dc:	4013      	ands	r3, r2
 800a7de:	d116      	bne.n	800a80e <HAL_PCD_MspInit+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a7e0:	4b13      	ldr	r3, [pc, #76]	@ (800a830 <HAL_PCD_MspInit+0xb8>)
 800a7e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a7e4:	4b12      	ldr	r3, [pc, #72]	@ (800a830 <HAL_PCD_MspInit+0xb8>)
 800a7e6:	2180      	movs	r1, #128	@ 0x80
 800a7e8:	0549      	lsls	r1, r1, #21
 800a7ea:	430a      	orrs	r2, r1
 800a7ec:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a7ee:	4b10      	ldr	r3, [pc, #64]	@ (800a830 <HAL_PCD_MspInit+0xb8>)
 800a7f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a7f2:	2380      	movs	r3, #128	@ 0x80
 800a7f4:	055b      	lsls	r3, r3, #21
 800a7f6:	4013      	ands	r3, r2
 800a7f8:	60fb      	str	r3, [r7, #12]
 800a7fa:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800a7fc:	f7f9 fc6e 	bl	80040dc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a800:	4b0b      	ldr	r3, [pc, #44]	@ (800a830 <HAL_PCD_MspInit+0xb8>)
 800a802:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a804:	4b0a      	ldr	r3, [pc, #40]	@ (800a830 <HAL_PCD_MspInit+0xb8>)
 800a806:	490b      	ldr	r1, [pc, #44]	@ (800a834 <HAL_PCD_MspInit+0xbc>)
 800a808:	400a      	ands	r2, r1
 800a80a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a80c:	e001      	b.n	800a812 <HAL_PCD_MspInit+0x9a>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800a80e:	f7f9 fc65 	bl	80040dc <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_UCPD1_2_IRQn, 0, 0);
 800a812:	2200      	movs	r2, #0
 800a814:	2100      	movs	r1, #0
 800a816:	2008      	movs	r0, #8
 800a818:	f7f7 f850 	bl	80018bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_UCPD1_2_IRQn);
 800a81c:	2008      	movs	r0, #8
 800a81e:	f7f7 f862 	bl	80018e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }
}
 800a822:	46c0      	nop			@ (mov r8, r8)
 800a824:	46bd      	mov	sp, r7
 800a826:	b019      	add	sp, #100	@ 0x64
 800a828:	bd90      	pop	{r4, r7, pc}
 800a82a:	46c0      	nop			@ (mov r8, r8)
 800a82c:	40005c00 	.word	0x40005c00
 800a830:	40021000 	.word	0x40021000
 800a834:	efffffff 	.word	0xefffffff

0800a838 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	23c1      	movs	r3, #193	@ 0xc1
 800a844:	009b      	lsls	r3, r3, #2
 800a846:	58d2      	ldr	r2, [r2, r3]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	21b1      	movs	r1, #177	@ 0xb1
 800a84c:	0089      	lsls	r1, r1, #2
 800a84e:	468c      	mov	ip, r1
 800a850:	4463      	add	r3, ip
 800a852:	0019      	movs	r1, r3
 800a854:	0010      	movs	r0, r2
 800a856:	f7fe fa07 	bl	8008c68 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800a85a:	46c0      	nop			@ (mov r8, r8)
 800a85c:	46bd      	mov	sp, r7
 800a85e:	b002      	add	sp, #8
 800a860:	bd80      	pop	{r7, pc}

0800a862 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a862:	b590      	push	{r4, r7, lr}
 800a864:	b083      	sub	sp, #12
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
 800a86a:	000a      	movs	r2, r1
 800a86c:	1cfb      	adds	r3, r7, #3
 800a86e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a870:	687a      	ldr	r2, [r7, #4]
 800a872:	23c1      	movs	r3, #193	@ 0xc1
 800a874:	009b      	lsls	r3, r3, #2
 800a876:	58d4      	ldr	r4, [r2, r3]
 800a878:	1cfb      	adds	r3, r7, #3
 800a87a:	781a      	ldrb	r2, [r3, #0]
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	23c8      	movs	r3, #200	@ 0xc8
 800a880:	0059      	lsls	r1, r3, #1
 800a882:	0013      	movs	r3, r2
 800a884:	009b      	lsls	r3, r3, #2
 800a886:	189b      	adds	r3, r3, r2
 800a888:	00db      	lsls	r3, r3, #3
 800a88a:	18c3      	adds	r3, r0, r3
 800a88c:	185b      	adds	r3, r3, r1
 800a88e:	681a      	ldr	r2, [r3, #0]
 800a890:	1cfb      	adds	r3, r7, #3
 800a892:	781b      	ldrb	r3, [r3, #0]
 800a894:	0019      	movs	r1, r3
 800a896:	0020      	movs	r0, r4
 800a898:	f7fe fa50 	bl	8008d3c <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a89c:	46c0      	nop			@ (mov r8, r8)
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	b003      	add	sp, #12
 800a8a2:	bd90      	pop	{r4, r7, pc}

0800a8a4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b082      	sub	sp, #8
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	000a      	movs	r2, r1
 800a8ae:	1cfb      	adds	r3, r7, #3
 800a8b0:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a8b2:	687a      	ldr	r2, [r7, #4]
 800a8b4:	23c1      	movs	r3, #193	@ 0xc1
 800a8b6:	009b      	lsls	r3, r3, #2
 800a8b8:	58d0      	ldr	r0, [r2, r3]
 800a8ba:	1cfb      	adds	r3, r7, #3
 800a8bc:	781a      	ldrb	r2, [r3, #0]
 800a8be:	6879      	ldr	r1, [r7, #4]
 800a8c0:	0013      	movs	r3, r2
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	189b      	adds	r3, r3, r2
 800a8c6:	00db      	lsls	r3, r3, #3
 800a8c8:	18cb      	adds	r3, r1, r3
 800a8ca:	3350      	adds	r3, #80	@ 0x50
 800a8cc:	681a      	ldr	r2, [r3, #0]
 800a8ce:	1cfb      	adds	r3, r7, #3
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	0019      	movs	r1, r3
 800a8d4:	f7fe fb1a 	bl	8008f0c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a8d8:	46c0      	nop			@ (mov r8, r8)
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	b002      	add	sp, #8
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b082      	sub	sp, #8
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	23c1      	movs	r3, #193	@ 0xc1
 800a8ec:	009b      	lsls	r3, r3, #2
 800a8ee:	58d3      	ldr	r3, [r2, r3]
 800a8f0:	0018      	movs	r0, r3
 800a8f2:	f7fe fc85 	bl	8009200 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a8f6:	46c0      	nop			@ (mov r8, r8)
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	b002      	add	sp, #8
 800a8fc:	bd80      	pop	{r7, pc}

0800a8fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8fe:	b580      	push	{r7, lr}
 800a900:	b084      	sub	sp, #16
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a906:	230f      	movs	r3, #15
 800a908:	18fb      	adds	r3, r7, r3
 800a90a:	2201      	movs	r2, #1
 800a90c:	701a      	strb	r2, [r3, #0]
  if (hpcd->Init.speed != USBD_FS_SPEED)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	68db      	ldr	r3, [r3, #12]
 800a912:	2b02      	cmp	r3, #2
 800a914:	d001      	beq.n	800a91a <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800a916:	f7f6 fb01 	bl	8000f1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	23c1      	movs	r3, #193	@ 0xc1
 800a91e:	009b      	lsls	r3, r3, #2
 800a920:	58d2      	ldr	r2, [r2, r3]
 800a922:	230f      	movs	r3, #15
 800a924:	18fb      	adds	r3, r7, r3
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	0019      	movs	r1, r3
 800a92a:	0010      	movs	r0, r2
 800a92c:	f7fe fc25 	bl	800917a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a930:	687a      	ldr	r2, [r7, #4]
 800a932:	23c1      	movs	r3, #193	@ 0xc1
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	58d3      	ldr	r3, [r2, r3]
 800a938:	0018      	movs	r0, r3
 800a93a:	f7fe fbbf 	bl	80090bc <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a93e:	46c0      	nop			@ (mov r8, r8)
 800a940:	46bd      	mov	sp, r7
 800a942:	b004      	add	sp, #16
 800a944:	bd80      	pop	{r7, pc}
	...

0800a948 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b082      	sub	sp, #8
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
 /* __HAL_PCD_GATE_PHYCLOCK(hpcd);*/
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a950:	687a      	ldr	r2, [r7, #4]
 800a952:	23c1      	movs	r3, #193	@ 0xc1
 800a954:	009b      	lsls	r3, r3, #2
 800a956:	58d3      	ldr	r3, [r2, r3]
 800a958:	0018      	movs	r0, r3
 800a95a:	f7fe fc1f 	bl	800919c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6a1b      	ldr	r3, [r3, #32]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d005      	beq.n	800a972 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a966:	4b05      	ldr	r3, [pc, #20]	@ (800a97c <HAL_PCD_SuspendCallback+0x34>)
 800a968:	691a      	ldr	r2, [r3, #16]
 800a96a:	4b04      	ldr	r3, [pc, #16]	@ (800a97c <HAL_PCD_SuspendCallback+0x34>)
 800a96c:	2106      	movs	r1, #6
 800a96e:	430a      	orrs	r2, r1
 800a970:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a972:	46c0      	nop			@ (mov r8, r8)
 800a974:	46bd      	mov	sp, r7
 800a976:	b002      	add	sp, #8
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	46c0      	nop			@ (mov r8, r8)
 800a97c:	e000ed00 	.word	0xe000ed00

0800a980 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b082      	sub	sp, #8
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */
 /* __HAL_PCD_UNGATE_PHYCLOCK(hpcd);*/

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6a1b      	ldr	r3, [r3, #32]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d007      	beq.n	800a9a0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a990:	4b09      	ldr	r3, [pc, #36]	@ (800a9b8 <HAL_PCD_ResumeCallback+0x38>)
 800a992:	691a      	ldr	r2, [r3, #16]
 800a994:	4b08      	ldr	r3, [pc, #32]	@ (800a9b8 <HAL_PCD_ResumeCallback+0x38>)
 800a996:	2106      	movs	r1, #6
 800a998:	438a      	bics	r2, r1
 800a99a:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800a99c:	f000 fa44 	bl	800ae28 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a9a0:	687a      	ldr	r2, [r7, #4]
 800a9a2:	23c1      	movs	r3, #193	@ 0xc1
 800a9a4:	009b      	lsls	r3, r3, #2
 800a9a6:	58d3      	ldr	r3, [r2, r3]
 800a9a8:	0018      	movs	r0, r3
 800a9aa:	f7fe fc0f 	bl	80091cc <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a9ae:	46c0      	nop			@ (mov r8, r8)
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	b002      	add	sp, #8
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	46c0      	nop			@ (mov r8, r8)
 800a9b8:	e000ed00 	.word	0xe000ed00

0800a9bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b082      	sub	sp, #8
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_DRD_FS.pData = pdev;
 800a9c4:	4a34      	ldr	r2, [pc, #208]	@ (800aa98 <USBD_LL_Init+0xdc>)
 800a9c6:	23c1      	movs	r3, #193	@ 0xc1
 800a9c8:	009b      	lsls	r3, r3, #2
 800a9ca:	6879      	ldr	r1, [r7, #4]
 800a9cc:	50d1      	str	r1, [r2, r3]
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_DRD_FS;
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	23b2      	movs	r3, #178	@ 0xb2
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	4930      	ldr	r1, [pc, #192]	@ (800aa98 <USBD_LL_Init+0xdc>)
 800a9d6:	50d1      	str	r1, [r2, r3]

  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 800a9d8:	4b2f      	ldr	r3, [pc, #188]	@ (800aa98 <USBD_LL_Init+0xdc>)
 800a9da:	4a30      	ldr	r2, [pc, #192]	@ (800aa9c <USBD_LL_Init+0xe0>)
 800a9dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 800a9de:	4b2e      	ldr	r3, [pc, #184]	@ (800aa98 <USBD_LL_Init+0xdc>)
 800a9e0:	2208      	movs	r2, #8
 800a9e2:	605a      	str	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.Host_channels = 8;
 800a9e4:	4b2c      	ldr	r3, [pc, #176]	@ (800aa98 <USBD_LL_Init+0xdc>)
 800a9e6:	2208      	movs	r2, #8
 800a9e8:	609a      	str	r2, [r3, #8]
  hpcd_USB_DRD_FS.Init.speed = PCD_SPEED_FULL;
 800a9ea:	4b2b      	ldr	r3, [pc, #172]	@ (800aa98 <USBD_LL_Init+0xdc>)
 800a9ec:	2202      	movs	r2, #2
 800a9ee:	60da      	str	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a9f0:	4b29      	ldr	r3, [pc, #164]	@ (800aa98 <USBD_LL_Init+0xdc>)
 800a9f2:	2202      	movs	r2, #2
 800a9f4:	619a      	str	r2, [r3, #24]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 800a9f6:	4b28      	ldr	r3, [pc, #160]	@ (800aa98 <USBD_LL_Init+0xdc>)
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	61da      	str	r2, [r3, #28]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 800a9fc:	4b26      	ldr	r3, [pc, #152]	@ (800aa98 <USBD_LL_Init+0xdc>)
 800a9fe:	2200      	movs	r2, #0
 800aa00:	621a      	str	r2, [r3, #32]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 800aa02:	4b25      	ldr	r3, [pc, #148]	@ (800aa98 <USBD_LL_Init+0xdc>)
 800aa04:	2200      	movs	r2, #0
 800aa06:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 800aa08:	4b23      	ldr	r3, [pc, #140]	@ (800aa98 <USBD_LL_Init+0xdc>)
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 800aa0e:	4b22      	ldr	r3, [pc, #136]	@ (800aa98 <USBD_LL_Init+0xdc>)
 800aa10:	2200      	movs	r2, #0
 800aa12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 800aa14:	4b20      	ldr	r3, [pc, #128]	@ (800aa98 <USBD_LL_Init+0xdc>)
 800aa16:	2200      	movs	r2, #0
 800aa18:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 800aa1a:	4b1f      	ldr	r3, [pc, #124]	@ (800aa98 <USBD_LL_Init+0xdc>)
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 800aa20:	4b1d      	ldr	r3, [pc, #116]	@ (800aa98 <USBD_LL_Init+0xdc>)
 800aa22:	0018      	movs	r0, r3
 800aa24:	f7f7 fd70 	bl	8002508 <HAL_PCD_Init>
 800aa28:	1e03      	subs	r3, r0, #0
 800aa2a:	d001      	beq.n	800aa30 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 800aa2c:	f7f6 fa76 	bl	8000f1c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800aa30:	687a      	ldr	r2, [r7, #4]
 800aa32:	23b2      	movs	r3, #178	@ 0xb2
 800aa34:	009b      	lsls	r3, r3, #2
 800aa36:	58d0      	ldr	r0, [r2, r3]
 800aa38:	2318      	movs	r3, #24
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	2100      	movs	r1, #0
 800aa3e:	f7f9 facf 	bl	8003fe0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	23b2      	movs	r3, #178	@ 0xb2
 800aa46:	009b      	lsls	r3, r3, #2
 800aa48:	58d0      	ldr	r0, [r2, r3]
 800aa4a:	2358      	movs	r3, #88	@ 0x58
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	2180      	movs	r1, #128	@ 0x80
 800aa50:	f7f9 fac6 	bl	8003fe0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800aa54:	687a      	ldr	r2, [r7, #4]
 800aa56:	23b2      	movs	r3, #178	@ 0xb2
 800aa58:	009b      	lsls	r3, r3, #2
 800aa5a:	58d0      	ldr	r0, [r2, r3]
 800aa5c:	23c0      	movs	r3, #192	@ 0xc0
 800aa5e:	2200      	movs	r2, #0
 800aa60:	2181      	movs	r1, #129	@ 0x81
 800aa62:	f7f9 fabd 	bl	8003fe0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800aa66:	687a      	ldr	r2, [r7, #4]
 800aa68:	23b2      	movs	r3, #178	@ 0xb2
 800aa6a:	009b      	lsls	r3, r3, #2
 800aa6c:	58d0      	ldr	r0, [r2, r3]
 800aa6e:	2388      	movs	r3, #136	@ 0x88
 800aa70:	005b      	lsls	r3, r3, #1
 800aa72:	2200      	movs	r2, #0
 800aa74:	2101      	movs	r1, #1
 800aa76:	f7f9 fab3 	bl	8003fe0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	23b2      	movs	r3, #178	@ 0xb2
 800aa7e:	009b      	lsls	r3, r3, #2
 800aa80:	58d0      	ldr	r0, [r2, r3]
 800aa82:	2380      	movs	r3, #128	@ 0x80
 800aa84:	005b      	lsls	r3, r3, #1
 800aa86:	2200      	movs	r2, #0
 800aa88:	2182      	movs	r1, #130	@ 0x82
 800aa8a:	f7f9 faa9 	bl	8003fe0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */

  return USBD_OK;
 800aa8e:	2300      	movs	r3, #0
}
 800aa90:	0018      	movs	r0, r3
 800aa92:	46bd      	mov	sp, r7
 800aa94:	b002      	add	sp, #8
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	20001454 	.word	0x20001454
 800aa9c:	40005c00 	.word	0x40005c00

0800aaa0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aaa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aaa2:	b085      	sub	sp, #20
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aaa8:	210f      	movs	r1, #15
 800aaaa:	187b      	adds	r3, r7, r1
 800aaac:	2200      	movs	r2, #0
 800aaae:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aab0:	260e      	movs	r6, #14
 800aab2:	19bb      	adds	r3, r7, r6
 800aab4:	2200      	movs	r2, #0
 800aab6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800aab8:	687a      	ldr	r2, [r7, #4]
 800aaba:	23b2      	movs	r3, #178	@ 0xb2
 800aabc:	009b      	lsls	r3, r3, #2
 800aabe:	58d3      	ldr	r3, [r2, r3]
 800aac0:	000d      	movs	r5, r1
 800aac2:	187c      	adds	r4, r7, r1
 800aac4:	0018      	movs	r0, r3
 800aac6:	f7f7 fe39 	bl	800273c <HAL_PCD_Start>
 800aaca:	0003      	movs	r3, r0
 800aacc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aace:	19bc      	adds	r4, r7, r6
 800aad0:	197b      	adds	r3, r7, r5
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	0018      	movs	r0, r3
 800aad6:	f000 f9ae 	bl	800ae36 <USBD_Get_USB_Status>
 800aada:	0003      	movs	r3, r0
 800aadc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800aade:	19bb      	adds	r3, r7, r6
 800aae0:	781b      	ldrb	r3, [r3, #0]
}
 800aae2:	0018      	movs	r0, r3
 800aae4:	46bd      	mov	sp, r7
 800aae6:	b005      	add	sp, #20
 800aae8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aaea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800aaea:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aaec:	b085      	sub	sp, #20
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	6078      	str	r0, [r7, #4]
 800aaf2:	000c      	movs	r4, r1
 800aaf4:	0010      	movs	r0, r2
 800aaf6:	0019      	movs	r1, r3
 800aaf8:	1cfb      	adds	r3, r7, #3
 800aafa:	1c22      	adds	r2, r4, #0
 800aafc:	701a      	strb	r2, [r3, #0]
 800aafe:	1cbb      	adds	r3, r7, #2
 800ab00:	1c02      	adds	r2, r0, #0
 800ab02:	701a      	strb	r2, [r3, #0]
 800ab04:	003b      	movs	r3, r7
 800ab06:	1c0a      	adds	r2, r1, #0
 800ab08:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab0a:	260f      	movs	r6, #15
 800ab0c:	19bb      	adds	r3, r7, r6
 800ab0e:	2200      	movs	r2, #0
 800ab10:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab12:	250e      	movs	r5, #14
 800ab14:	197b      	adds	r3, r7, r5
 800ab16:	2200      	movs	r2, #0
 800ab18:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ab1a:	687a      	ldr	r2, [r7, #4]
 800ab1c:	23b2      	movs	r3, #178	@ 0xb2
 800ab1e:	009b      	lsls	r3, r3, #2
 800ab20:	58d0      	ldr	r0, [r2, r3]
 800ab22:	19bc      	adds	r4, r7, r6
 800ab24:	1cbb      	adds	r3, r7, #2
 800ab26:	781d      	ldrb	r5, [r3, #0]
 800ab28:	003b      	movs	r3, r7
 800ab2a:	881a      	ldrh	r2, [r3, #0]
 800ab2c:	1cfb      	adds	r3, r7, #3
 800ab2e:	7819      	ldrb	r1, [r3, #0]
 800ab30:	002b      	movs	r3, r5
 800ab32:	f7f7 ff6a 	bl	8002a0a <HAL_PCD_EP_Open>
 800ab36:	0003      	movs	r3, r0
 800ab38:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab3a:	250e      	movs	r5, #14
 800ab3c:	197c      	adds	r4, r7, r5
 800ab3e:	19bb      	adds	r3, r7, r6
 800ab40:	781b      	ldrb	r3, [r3, #0]
 800ab42:	0018      	movs	r0, r3
 800ab44:	f000 f977 	bl	800ae36 <USBD_Get_USB_Status>
 800ab48:	0003      	movs	r3, r0
 800ab4a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ab4c:	197b      	adds	r3, r7, r5
 800ab4e:	781b      	ldrb	r3, [r3, #0]
}
 800ab50:	0018      	movs	r0, r3
 800ab52:	46bd      	mov	sp, r7
 800ab54:	b005      	add	sp, #20
 800ab56:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ab58 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	000a      	movs	r2, r1
 800ab62:	1cfb      	adds	r3, r7, #3
 800ab64:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab66:	210f      	movs	r1, #15
 800ab68:	187b      	adds	r3, r7, r1
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab6e:	260e      	movs	r6, #14
 800ab70:	19bb      	adds	r3, r7, r6
 800ab72:	2200      	movs	r2, #0
 800ab74:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ab76:	687a      	ldr	r2, [r7, #4]
 800ab78:	23b2      	movs	r3, #178	@ 0xb2
 800ab7a:	009b      	lsls	r3, r3, #2
 800ab7c:	58d2      	ldr	r2, [r2, r3]
 800ab7e:	000d      	movs	r5, r1
 800ab80:	187c      	adds	r4, r7, r1
 800ab82:	1cfb      	adds	r3, r7, #3
 800ab84:	781b      	ldrb	r3, [r3, #0]
 800ab86:	0019      	movs	r1, r3
 800ab88:	0010      	movs	r0, r2
 800ab8a:	f7f7 ffb8 	bl	8002afe <HAL_PCD_EP_Close>
 800ab8e:	0003      	movs	r3, r0
 800ab90:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab92:	19bc      	adds	r4, r7, r6
 800ab94:	197b      	adds	r3, r7, r5
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	0018      	movs	r0, r3
 800ab9a:	f000 f94c 	bl	800ae36 <USBD_Get_USB_Status>
 800ab9e:	0003      	movs	r3, r0
 800aba0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800aba2:	19bb      	adds	r3, r7, r6
 800aba4:	781b      	ldrb	r3, [r3, #0]
}
 800aba6:	0018      	movs	r0, r3
 800aba8:	46bd      	mov	sp, r7
 800abaa:	b005      	add	sp, #20
 800abac:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800abae <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abae:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abb0:	b085      	sub	sp, #20
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	6078      	str	r0, [r7, #4]
 800abb6:	000a      	movs	r2, r1
 800abb8:	1cfb      	adds	r3, r7, #3
 800abba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abbc:	210f      	movs	r1, #15
 800abbe:	187b      	adds	r3, r7, r1
 800abc0:	2200      	movs	r2, #0
 800abc2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abc4:	260e      	movs	r6, #14
 800abc6:	19bb      	adds	r3, r7, r6
 800abc8:	2200      	movs	r2, #0
 800abca:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	23b2      	movs	r3, #178	@ 0xb2
 800abd0:	009b      	lsls	r3, r3, #2
 800abd2:	58d2      	ldr	r2, [r2, r3]
 800abd4:	000d      	movs	r5, r1
 800abd6:	187c      	adds	r4, r7, r1
 800abd8:	1cfb      	adds	r3, r7, #3
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	0019      	movs	r1, r3
 800abde:	0010      	movs	r0, r2
 800abe0:	f7f8 f888 	bl	8002cf4 <HAL_PCD_EP_SetStall>
 800abe4:	0003      	movs	r3, r0
 800abe6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abe8:	19bc      	adds	r4, r7, r6
 800abea:	197b      	adds	r3, r7, r5
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	0018      	movs	r0, r3
 800abf0:	f000 f921 	bl	800ae36 <USBD_Get_USB_Status>
 800abf4:	0003      	movs	r3, r0
 800abf6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800abf8:	19bb      	adds	r3, r7, r6
 800abfa:	781b      	ldrb	r3, [r3, #0]
}
 800abfc:	0018      	movs	r0, r3
 800abfe:	46bd      	mov	sp, r7
 800ac00:	b005      	add	sp, #20
 800ac02:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ac04 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac06:	b085      	sub	sp, #20
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	000a      	movs	r2, r1
 800ac0e:	1cfb      	adds	r3, r7, #3
 800ac10:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac12:	210f      	movs	r1, #15
 800ac14:	187b      	adds	r3, r7, r1
 800ac16:	2200      	movs	r2, #0
 800ac18:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac1a:	260e      	movs	r6, #14
 800ac1c:	19bb      	adds	r3, r7, r6
 800ac1e:	2200      	movs	r2, #0
 800ac20:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ac22:	687a      	ldr	r2, [r7, #4]
 800ac24:	23b2      	movs	r3, #178	@ 0xb2
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	58d2      	ldr	r2, [r2, r3]
 800ac2a:	000d      	movs	r5, r1
 800ac2c:	187c      	adds	r4, r7, r1
 800ac2e:	1cfb      	adds	r3, r7, #3
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	0019      	movs	r1, r3
 800ac34:	0010      	movs	r0, r2
 800ac36:	f7f8 f8bb 	bl	8002db0 <HAL_PCD_EP_ClrStall>
 800ac3a:	0003      	movs	r3, r0
 800ac3c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac3e:	19bc      	adds	r4, r7, r6
 800ac40:	197b      	adds	r3, r7, r5
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	0018      	movs	r0, r3
 800ac46:	f000 f8f6 	bl	800ae36 <USBD_Get_USB_Status>
 800ac4a:	0003      	movs	r3, r0
 800ac4c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ac4e:	19bb      	adds	r3, r7, r6
 800ac50:	781b      	ldrb	r3, [r3, #0]
}
 800ac52:	0018      	movs	r0, r3
 800ac54:	46bd      	mov	sp, r7
 800ac56:	b005      	add	sp, #20
 800ac58:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ac5a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b084      	sub	sp, #16
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
 800ac62:	000a      	movs	r2, r1
 800ac64:	1cfb      	adds	r3, r7, #3
 800ac66:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ac68:	687a      	ldr	r2, [r7, #4]
 800ac6a:	23b2      	movs	r3, #178	@ 0xb2
 800ac6c:	009b      	lsls	r3, r3, #2
 800ac6e:	58d3      	ldr	r3, [r2, r3]
 800ac70:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ac72:	1cfb      	adds	r3, r7, #3
 800ac74:	781b      	ldrb	r3, [r3, #0]
 800ac76:	b25b      	sxtb	r3, r3
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	da0d      	bge.n	800ac98 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ac7c:	1cfb      	adds	r3, r7, #3
 800ac7e:	781b      	ldrb	r3, [r3, #0]
 800ac80:	227f      	movs	r2, #127	@ 0x7f
 800ac82:	401a      	ands	r2, r3
 800ac84:	68f9      	ldr	r1, [r7, #12]
 800ac86:	203e      	movs	r0, #62	@ 0x3e
 800ac88:	0013      	movs	r3, r2
 800ac8a:	009b      	lsls	r3, r3, #2
 800ac8c:	189b      	adds	r3, r3, r2
 800ac8e:	00db      	lsls	r3, r3, #3
 800ac90:	18cb      	adds	r3, r1, r3
 800ac92:	181b      	adds	r3, r3, r0
 800ac94:	781b      	ldrb	r3, [r3, #0]
 800ac96:	e00d      	b.n	800acb4 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ac98:	1cfb      	adds	r3, r7, #3
 800ac9a:	781b      	ldrb	r3, [r3, #0]
 800ac9c:	227f      	movs	r2, #127	@ 0x7f
 800ac9e:	401a      	ands	r2, r3
 800aca0:	68f8      	ldr	r0, [r7, #12]
 800aca2:	23bf      	movs	r3, #191	@ 0xbf
 800aca4:	0059      	lsls	r1, r3, #1
 800aca6:	0013      	movs	r3, r2
 800aca8:	009b      	lsls	r3, r3, #2
 800acaa:	189b      	adds	r3, r3, r2
 800acac:	00db      	lsls	r3, r3, #3
 800acae:	18c3      	adds	r3, r0, r3
 800acb0:	185b      	adds	r3, r3, r1
 800acb2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800acb4:	0018      	movs	r0, r3
 800acb6:	46bd      	mov	sp, r7
 800acb8:	b004      	add	sp, #16
 800acba:	bd80      	pop	{r7, pc}

0800acbc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800acbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acbe:	b085      	sub	sp, #20
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	000a      	movs	r2, r1
 800acc6:	1cfb      	adds	r3, r7, #3
 800acc8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acca:	210f      	movs	r1, #15
 800accc:	187b      	adds	r3, r7, r1
 800acce:	2200      	movs	r2, #0
 800acd0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acd2:	260e      	movs	r6, #14
 800acd4:	19bb      	adds	r3, r7, r6
 800acd6:	2200      	movs	r2, #0
 800acd8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800acda:	687a      	ldr	r2, [r7, #4]
 800acdc:	23b2      	movs	r3, #178	@ 0xb2
 800acde:	009b      	lsls	r3, r3, #2
 800ace0:	58d2      	ldr	r2, [r2, r3]
 800ace2:	000d      	movs	r5, r1
 800ace4:	187c      	adds	r4, r7, r1
 800ace6:	1cfb      	adds	r3, r7, #3
 800ace8:	781b      	ldrb	r3, [r3, #0]
 800acea:	0019      	movs	r1, r3
 800acec:	0010      	movs	r0, r2
 800acee:	f7f7 fe61 	bl	80029b4 <HAL_PCD_SetAddress>
 800acf2:	0003      	movs	r3, r0
 800acf4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acf6:	19bc      	adds	r4, r7, r6
 800acf8:	197b      	adds	r3, r7, r5
 800acfa:	781b      	ldrb	r3, [r3, #0]
 800acfc:	0018      	movs	r0, r3
 800acfe:	f000 f89a 	bl	800ae36 <USBD_Get_USB_Status>
 800ad02:	0003      	movs	r3, r0
 800ad04:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ad06:	19bb      	adds	r3, r7, r6
 800ad08:	781b      	ldrb	r3, [r3, #0]
}
 800ad0a:	0018      	movs	r0, r3
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	b005      	add	sp, #20
 800ad10:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ad12 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ad12:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad14:	b087      	sub	sp, #28
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	60f8      	str	r0, [r7, #12]
 800ad1a:	607a      	str	r2, [r7, #4]
 800ad1c:	603b      	str	r3, [r7, #0]
 800ad1e:	230b      	movs	r3, #11
 800ad20:	18fb      	adds	r3, r7, r3
 800ad22:	1c0a      	adds	r2, r1, #0
 800ad24:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad26:	2617      	movs	r6, #23
 800ad28:	19bb      	adds	r3, r7, r6
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad2e:	2516      	movs	r5, #22
 800ad30:	197b      	adds	r3, r7, r5
 800ad32:	2200      	movs	r2, #0
 800ad34:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ad36:	68fa      	ldr	r2, [r7, #12]
 800ad38:	23b2      	movs	r3, #178	@ 0xb2
 800ad3a:	009b      	lsls	r3, r3, #2
 800ad3c:	58d0      	ldr	r0, [r2, r3]
 800ad3e:	19bc      	adds	r4, r7, r6
 800ad40:	683d      	ldr	r5, [r7, #0]
 800ad42:	687a      	ldr	r2, [r7, #4]
 800ad44:	230b      	movs	r3, #11
 800ad46:	18fb      	adds	r3, r7, r3
 800ad48:	7819      	ldrb	r1, [r3, #0]
 800ad4a:	002b      	movs	r3, r5
 800ad4c:	f7f7 ff88 	bl	8002c60 <HAL_PCD_EP_Transmit>
 800ad50:	0003      	movs	r3, r0
 800ad52:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad54:	2516      	movs	r5, #22
 800ad56:	197c      	adds	r4, r7, r5
 800ad58:	19bb      	adds	r3, r7, r6
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	0018      	movs	r0, r3
 800ad5e:	f000 f86a 	bl	800ae36 <USBD_Get_USB_Status>
 800ad62:	0003      	movs	r3, r0
 800ad64:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ad66:	197b      	adds	r3, r7, r5
 800ad68:	781b      	ldrb	r3, [r3, #0]
}
 800ad6a:	0018      	movs	r0, r3
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	b007      	add	sp, #28
 800ad70:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ad72 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ad72:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad74:	b087      	sub	sp, #28
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	60f8      	str	r0, [r7, #12]
 800ad7a:	607a      	str	r2, [r7, #4]
 800ad7c:	603b      	str	r3, [r7, #0]
 800ad7e:	230b      	movs	r3, #11
 800ad80:	18fb      	adds	r3, r7, r3
 800ad82:	1c0a      	adds	r2, r1, #0
 800ad84:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad86:	2617      	movs	r6, #23
 800ad88:	19bb      	adds	r3, r7, r6
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad8e:	2516      	movs	r5, #22
 800ad90:	197b      	adds	r3, r7, r5
 800ad92:	2200      	movs	r2, #0
 800ad94:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ad96:	68fa      	ldr	r2, [r7, #12]
 800ad98:	23b2      	movs	r3, #178	@ 0xb2
 800ad9a:	009b      	lsls	r3, r3, #2
 800ad9c:	58d0      	ldr	r0, [r2, r3]
 800ad9e:	19bc      	adds	r4, r7, r6
 800ada0:	683d      	ldr	r5, [r7, #0]
 800ada2:	687a      	ldr	r2, [r7, #4]
 800ada4:	230b      	movs	r3, #11
 800ada6:	18fb      	adds	r3, r7, r3
 800ada8:	7819      	ldrb	r1, [r3, #0]
 800adaa:	002b      	movs	r3, r5
 800adac:	f7f7 fefa 	bl	8002ba4 <HAL_PCD_EP_Receive>
 800adb0:	0003      	movs	r3, r0
 800adb2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adb4:	2516      	movs	r5, #22
 800adb6:	197c      	adds	r4, r7, r5
 800adb8:	19bb      	adds	r3, r7, r6
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	0018      	movs	r0, r3
 800adbe:	f000 f83a 	bl	800ae36 <USBD_Get_USB_Status>
 800adc2:	0003      	movs	r3, r0
 800adc4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800adc6:	197b      	adds	r3, r7, r5
 800adc8:	781b      	ldrb	r3, [r3, #0]
}
 800adca:	0018      	movs	r0, r3
 800adcc:	46bd      	mov	sp, r7
 800adce:	b007      	add	sp, #28
 800add0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800add2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800add2:	b580      	push	{r7, lr}
 800add4:	b082      	sub	sp, #8
 800add6:	af00      	add	r7, sp, #0
 800add8:	6078      	str	r0, [r7, #4]
 800adda:	000a      	movs	r2, r1
 800addc:	1cfb      	adds	r3, r7, #3
 800adde:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ade0:	687a      	ldr	r2, [r7, #4]
 800ade2:	23b2      	movs	r3, #178	@ 0xb2
 800ade4:	009b      	lsls	r3, r3, #2
 800ade6:	58d2      	ldr	r2, [r2, r3]
 800ade8:	1cfb      	adds	r3, r7, #3
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	0019      	movs	r1, r3
 800adee:	0010      	movs	r0, r2
 800adf0:	f7f7 ff1d 	bl	8002c2e <HAL_PCD_EP_GetRxCount>
 800adf4:	0003      	movs	r3, r0
}
 800adf6:	0018      	movs	r0, r3
 800adf8:	46bd      	mov	sp, r7
 800adfa:	b002      	add	sp, #8
 800adfc:	bd80      	pop	{r7, pc}
	...

0800ae00 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b082      	sub	sp, #8
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ae08:	4b02      	ldr	r3, [pc, #8]	@ (800ae14 <USBD_static_malloc+0x14>)
}
 800ae0a:	0018      	movs	r0, r3
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	b002      	add	sp, #8
 800ae10:	bd80      	pop	{r7, pc}
 800ae12:	46c0      	nop			@ (mov r8, r8)
 800ae14:	2000175c 	.word	0x2000175c

0800ae18 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]

}
 800ae20:	46c0      	nop			@ (mov r8, r8)
 800ae22:	46bd      	mov	sp, r7
 800ae24:	b002      	add	sp, #8
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ae2c:	f7f5 ff90 	bl	8000d50 <SystemClock_Config>
}
 800ae30:	46c0      	nop			@ (mov r8, r8)
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}

0800ae36 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ae36:	b580      	push	{r7, lr}
 800ae38:	b084      	sub	sp, #16
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	0002      	movs	r2, r0
 800ae3e:	1dfb      	adds	r3, r7, #7
 800ae40:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae42:	230f      	movs	r3, #15
 800ae44:	18fb      	adds	r3, r7, r3
 800ae46:	2200      	movs	r2, #0
 800ae48:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800ae4a:	1dfb      	adds	r3, r7, #7
 800ae4c:	781b      	ldrb	r3, [r3, #0]
 800ae4e:	2b03      	cmp	r3, #3
 800ae50:	d017      	beq.n	800ae82 <USBD_Get_USB_Status+0x4c>
 800ae52:	dc1b      	bgt.n	800ae8c <USBD_Get_USB_Status+0x56>
 800ae54:	2b02      	cmp	r3, #2
 800ae56:	d00f      	beq.n	800ae78 <USBD_Get_USB_Status+0x42>
 800ae58:	dc18      	bgt.n	800ae8c <USBD_Get_USB_Status+0x56>
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d002      	beq.n	800ae64 <USBD_Get_USB_Status+0x2e>
 800ae5e:	2b01      	cmp	r3, #1
 800ae60:	d005      	beq.n	800ae6e <USBD_Get_USB_Status+0x38>
 800ae62:	e013      	b.n	800ae8c <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ae64:	230f      	movs	r3, #15
 800ae66:	18fb      	adds	r3, r7, r3
 800ae68:	2200      	movs	r2, #0
 800ae6a:	701a      	strb	r2, [r3, #0]
    break;
 800ae6c:	e013      	b.n	800ae96 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ae6e:	230f      	movs	r3, #15
 800ae70:	18fb      	adds	r3, r7, r3
 800ae72:	2203      	movs	r2, #3
 800ae74:	701a      	strb	r2, [r3, #0]
    break;
 800ae76:	e00e      	b.n	800ae96 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ae78:	230f      	movs	r3, #15
 800ae7a:	18fb      	adds	r3, r7, r3
 800ae7c:	2201      	movs	r2, #1
 800ae7e:	701a      	strb	r2, [r3, #0]
    break;
 800ae80:	e009      	b.n	800ae96 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ae82:	230f      	movs	r3, #15
 800ae84:	18fb      	adds	r3, r7, r3
 800ae86:	2203      	movs	r2, #3
 800ae88:	701a      	strb	r2, [r3, #0]
    break;
 800ae8a:	e004      	b.n	800ae96 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800ae8c:	230f      	movs	r3, #15
 800ae8e:	18fb      	adds	r3, r7, r3
 800ae90:	2203      	movs	r2, #3
 800ae92:	701a      	strb	r2, [r3, #0]
    break;
 800ae94:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 800ae96:	230f      	movs	r3, #15
 800ae98:	18fb      	adds	r3, r7, r3
 800ae9a:	781b      	ldrb	r3, [r3, #0]
}
 800ae9c:	0018      	movs	r0, r3
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	b004      	add	sp, #16
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <siprintf>:
 800aea4:	b40e      	push	{r1, r2, r3}
 800aea6:	b510      	push	{r4, lr}
 800aea8:	2400      	movs	r4, #0
 800aeaa:	490c      	ldr	r1, [pc, #48]	@ (800aedc <siprintf+0x38>)
 800aeac:	b09d      	sub	sp, #116	@ 0x74
 800aeae:	ab1f      	add	r3, sp, #124	@ 0x7c
 800aeb0:	9002      	str	r0, [sp, #8]
 800aeb2:	9006      	str	r0, [sp, #24]
 800aeb4:	9107      	str	r1, [sp, #28]
 800aeb6:	9104      	str	r1, [sp, #16]
 800aeb8:	4809      	ldr	r0, [pc, #36]	@ (800aee0 <siprintf+0x3c>)
 800aeba:	490a      	ldr	r1, [pc, #40]	@ (800aee4 <siprintf+0x40>)
 800aebc:	cb04      	ldmia	r3!, {r2}
 800aebe:	9105      	str	r1, [sp, #20]
 800aec0:	6800      	ldr	r0, [r0, #0]
 800aec2:	a902      	add	r1, sp, #8
 800aec4:	9301      	str	r3, [sp, #4]
 800aec6:	941b      	str	r4, [sp, #108]	@ 0x6c
 800aec8:	f000 f99e 	bl	800b208 <_svfiprintf_r>
 800aecc:	9b02      	ldr	r3, [sp, #8]
 800aece:	701c      	strb	r4, [r3, #0]
 800aed0:	b01d      	add	sp, #116	@ 0x74
 800aed2:	bc10      	pop	{r4}
 800aed4:	bc08      	pop	{r3}
 800aed6:	b003      	add	sp, #12
 800aed8:	4718      	bx	r3
 800aeda:	46c0      	nop			@ (mov r8, r8)
 800aedc:	7fffffff 	.word	0x7fffffff
 800aee0:	2000012c 	.word	0x2000012c
 800aee4:	ffff0208 	.word	0xffff0208

0800aee8 <memset>:
 800aee8:	0003      	movs	r3, r0
 800aeea:	1882      	adds	r2, r0, r2
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d100      	bne.n	800aef2 <memset+0xa>
 800aef0:	4770      	bx	lr
 800aef2:	7019      	strb	r1, [r3, #0]
 800aef4:	3301      	adds	r3, #1
 800aef6:	e7f9      	b.n	800aeec <memset+0x4>

0800aef8 <__errno>:
 800aef8:	4b01      	ldr	r3, [pc, #4]	@ (800af00 <__errno+0x8>)
 800aefa:	6818      	ldr	r0, [r3, #0]
 800aefc:	4770      	bx	lr
 800aefe:	46c0      	nop			@ (mov r8, r8)
 800af00:	2000012c 	.word	0x2000012c

0800af04 <__libc_init_array>:
 800af04:	b570      	push	{r4, r5, r6, lr}
 800af06:	2600      	movs	r6, #0
 800af08:	4c0c      	ldr	r4, [pc, #48]	@ (800af3c <__libc_init_array+0x38>)
 800af0a:	4d0d      	ldr	r5, [pc, #52]	@ (800af40 <__libc_init_array+0x3c>)
 800af0c:	1b64      	subs	r4, r4, r5
 800af0e:	10a4      	asrs	r4, r4, #2
 800af10:	42a6      	cmp	r6, r4
 800af12:	d109      	bne.n	800af28 <__libc_init_array+0x24>
 800af14:	2600      	movs	r6, #0
 800af16:	f000 fc61 	bl	800b7dc <_init>
 800af1a:	4c0a      	ldr	r4, [pc, #40]	@ (800af44 <__libc_init_array+0x40>)
 800af1c:	4d0a      	ldr	r5, [pc, #40]	@ (800af48 <__libc_init_array+0x44>)
 800af1e:	1b64      	subs	r4, r4, r5
 800af20:	10a4      	asrs	r4, r4, #2
 800af22:	42a6      	cmp	r6, r4
 800af24:	d105      	bne.n	800af32 <__libc_init_array+0x2e>
 800af26:	bd70      	pop	{r4, r5, r6, pc}
 800af28:	00b3      	lsls	r3, r6, #2
 800af2a:	58eb      	ldr	r3, [r5, r3]
 800af2c:	4798      	blx	r3
 800af2e:	3601      	adds	r6, #1
 800af30:	e7ee      	b.n	800af10 <__libc_init_array+0xc>
 800af32:	00b3      	lsls	r3, r6, #2
 800af34:	58eb      	ldr	r3, [r5, r3]
 800af36:	4798      	blx	r3
 800af38:	3601      	adds	r6, #1
 800af3a:	e7f2      	b.n	800af22 <__libc_init_array+0x1e>
 800af3c:	0800ba54 	.word	0x0800ba54
 800af40:	0800ba54 	.word	0x0800ba54
 800af44:	0800ba58 	.word	0x0800ba58
 800af48:	0800ba54 	.word	0x0800ba54

0800af4c <__retarget_lock_acquire_recursive>:
 800af4c:	4770      	bx	lr

0800af4e <__retarget_lock_release_recursive>:
 800af4e:	4770      	bx	lr

0800af50 <_free_r>:
 800af50:	b570      	push	{r4, r5, r6, lr}
 800af52:	0005      	movs	r5, r0
 800af54:	1e0c      	subs	r4, r1, #0
 800af56:	d010      	beq.n	800af7a <_free_r+0x2a>
 800af58:	3c04      	subs	r4, #4
 800af5a:	6823      	ldr	r3, [r4, #0]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	da00      	bge.n	800af62 <_free_r+0x12>
 800af60:	18e4      	adds	r4, r4, r3
 800af62:	0028      	movs	r0, r5
 800af64:	f000 f8e0 	bl	800b128 <__malloc_lock>
 800af68:	4a1d      	ldr	r2, [pc, #116]	@ (800afe0 <_free_r+0x90>)
 800af6a:	6813      	ldr	r3, [r2, #0]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d105      	bne.n	800af7c <_free_r+0x2c>
 800af70:	6063      	str	r3, [r4, #4]
 800af72:	6014      	str	r4, [r2, #0]
 800af74:	0028      	movs	r0, r5
 800af76:	f000 f8df 	bl	800b138 <__malloc_unlock>
 800af7a:	bd70      	pop	{r4, r5, r6, pc}
 800af7c:	42a3      	cmp	r3, r4
 800af7e:	d908      	bls.n	800af92 <_free_r+0x42>
 800af80:	6820      	ldr	r0, [r4, #0]
 800af82:	1821      	adds	r1, r4, r0
 800af84:	428b      	cmp	r3, r1
 800af86:	d1f3      	bne.n	800af70 <_free_r+0x20>
 800af88:	6819      	ldr	r1, [r3, #0]
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	1809      	adds	r1, r1, r0
 800af8e:	6021      	str	r1, [r4, #0]
 800af90:	e7ee      	b.n	800af70 <_free_r+0x20>
 800af92:	001a      	movs	r2, r3
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d001      	beq.n	800af9e <_free_r+0x4e>
 800af9a:	42a3      	cmp	r3, r4
 800af9c:	d9f9      	bls.n	800af92 <_free_r+0x42>
 800af9e:	6811      	ldr	r1, [r2, #0]
 800afa0:	1850      	adds	r0, r2, r1
 800afa2:	42a0      	cmp	r0, r4
 800afa4:	d10b      	bne.n	800afbe <_free_r+0x6e>
 800afa6:	6820      	ldr	r0, [r4, #0]
 800afa8:	1809      	adds	r1, r1, r0
 800afaa:	1850      	adds	r0, r2, r1
 800afac:	6011      	str	r1, [r2, #0]
 800afae:	4283      	cmp	r3, r0
 800afb0:	d1e0      	bne.n	800af74 <_free_r+0x24>
 800afb2:	6818      	ldr	r0, [r3, #0]
 800afb4:	685b      	ldr	r3, [r3, #4]
 800afb6:	1841      	adds	r1, r0, r1
 800afb8:	6011      	str	r1, [r2, #0]
 800afba:	6053      	str	r3, [r2, #4]
 800afbc:	e7da      	b.n	800af74 <_free_r+0x24>
 800afbe:	42a0      	cmp	r0, r4
 800afc0:	d902      	bls.n	800afc8 <_free_r+0x78>
 800afc2:	230c      	movs	r3, #12
 800afc4:	602b      	str	r3, [r5, #0]
 800afc6:	e7d5      	b.n	800af74 <_free_r+0x24>
 800afc8:	6820      	ldr	r0, [r4, #0]
 800afca:	1821      	adds	r1, r4, r0
 800afcc:	428b      	cmp	r3, r1
 800afce:	d103      	bne.n	800afd8 <_free_r+0x88>
 800afd0:	6819      	ldr	r1, [r3, #0]
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	1809      	adds	r1, r1, r0
 800afd6:	6021      	str	r1, [r4, #0]
 800afd8:	6063      	str	r3, [r4, #4]
 800afda:	6054      	str	r4, [r2, #4]
 800afdc:	e7ca      	b.n	800af74 <_free_r+0x24>
 800afde:	46c0      	nop			@ (mov r8, r8)
 800afe0:	20001ac0 	.word	0x20001ac0

0800afe4 <sbrk_aligned>:
 800afe4:	b570      	push	{r4, r5, r6, lr}
 800afe6:	4e0f      	ldr	r6, [pc, #60]	@ (800b024 <sbrk_aligned+0x40>)
 800afe8:	000d      	movs	r5, r1
 800afea:	6831      	ldr	r1, [r6, #0]
 800afec:	0004      	movs	r4, r0
 800afee:	2900      	cmp	r1, #0
 800aff0:	d102      	bne.n	800aff8 <sbrk_aligned+0x14>
 800aff2:	f000 fb95 	bl	800b720 <_sbrk_r>
 800aff6:	6030      	str	r0, [r6, #0]
 800aff8:	0029      	movs	r1, r5
 800affa:	0020      	movs	r0, r4
 800affc:	f000 fb90 	bl	800b720 <_sbrk_r>
 800b000:	1c43      	adds	r3, r0, #1
 800b002:	d103      	bne.n	800b00c <sbrk_aligned+0x28>
 800b004:	2501      	movs	r5, #1
 800b006:	426d      	negs	r5, r5
 800b008:	0028      	movs	r0, r5
 800b00a:	bd70      	pop	{r4, r5, r6, pc}
 800b00c:	2303      	movs	r3, #3
 800b00e:	1cc5      	adds	r5, r0, #3
 800b010:	439d      	bics	r5, r3
 800b012:	42a8      	cmp	r0, r5
 800b014:	d0f8      	beq.n	800b008 <sbrk_aligned+0x24>
 800b016:	1a29      	subs	r1, r5, r0
 800b018:	0020      	movs	r0, r4
 800b01a:	f000 fb81 	bl	800b720 <_sbrk_r>
 800b01e:	3001      	adds	r0, #1
 800b020:	d1f2      	bne.n	800b008 <sbrk_aligned+0x24>
 800b022:	e7ef      	b.n	800b004 <sbrk_aligned+0x20>
 800b024:	20001abc 	.word	0x20001abc

0800b028 <_malloc_r>:
 800b028:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b02a:	2203      	movs	r2, #3
 800b02c:	1ccb      	adds	r3, r1, #3
 800b02e:	4393      	bics	r3, r2
 800b030:	3308      	adds	r3, #8
 800b032:	0005      	movs	r5, r0
 800b034:	001f      	movs	r7, r3
 800b036:	2b0c      	cmp	r3, #12
 800b038:	d234      	bcs.n	800b0a4 <_malloc_r+0x7c>
 800b03a:	270c      	movs	r7, #12
 800b03c:	42b9      	cmp	r1, r7
 800b03e:	d833      	bhi.n	800b0a8 <_malloc_r+0x80>
 800b040:	0028      	movs	r0, r5
 800b042:	f000 f871 	bl	800b128 <__malloc_lock>
 800b046:	4e37      	ldr	r6, [pc, #220]	@ (800b124 <_malloc_r+0xfc>)
 800b048:	6833      	ldr	r3, [r6, #0]
 800b04a:	001c      	movs	r4, r3
 800b04c:	2c00      	cmp	r4, #0
 800b04e:	d12f      	bne.n	800b0b0 <_malloc_r+0x88>
 800b050:	0039      	movs	r1, r7
 800b052:	0028      	movs	r0, r5
 800b054:	f7ff ffc6 	bl	800afe4 <sbrk_aligned>
 800b058:	0004      	movs	r4, r0
 800b05a:	1c43      	adds	r3, r0, #1
 800b05c:	d15f      	bne.n	800b11e <_malloc_r+0xf6>
 800b05e:	6834      	ldr	r4, [r6, #0]
 800b060:	9400      	str	r4, [sp, #0]
 800b062:	9b00      	ldr	r3, [sp, #0]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d14a      	bne.n	800b0fe <_malloc_r+0xd6>
 800b068:	2c00      	cmp	r4, #0
 800b06a:	d052      	beq.n	800b112 <_malloc_r+0xea>
 800b06c:	6823      	ldr	r3, [r4, #0]
 800b06e:	0028      	movs	r0, r5
 800b070:	18e3      	adds	r3, r4, r3
 800b072:	9900      	ldr	r1, [sp, #0]
 800b074:	9301      	str	r3, [sp, #4]
 800b076:	f000 fb53 	bl	800b720 <_sbrk_r>
 800b07a:	9b01      	ldr	r3, [sp, #4]
 800b07c:	4283      	cmp	r3, r0
 800b07e:	d148      	bne.n	800b112 <_malloc_r+0xea>
 800b080:	6823      	ldr	r3, [r4, #0]
 800b082:	0028      	movs	r0, r5
 800b084:	1aff      	subs	r7, r7, r3
 800b086:	0039      	movs	r1, r7
 800b088:	f7ff ffac 	bl	800afe4 <sbrk_aligned>
 800b08c:	3001      	adds	r0, #1
 800b08e:	d040      	beq.n	800b112 <_malloc_r+0xea>
 800b090:	6823      	ldr	r3, [r4, #0]
 800b092:	19db      	adds	r3, r3, r7
 800b094:	6023      	str	r3, [r4, #0]
 800b096:	6833      	ldr	r3, [r6, #0]
 800b098:	685a      	ldr	r2, [r3, #4]
 800b09a:	2a00      	cmp	r2, #0
 800b09c:	d133      	bne.n	800b106 <_malloc_r+0xde>
 800b09e:	9b00      	ldr	r3, [sp, #0]
 800b0a0:	6033      	str	r3, [r6, #0]
 800b0a2:	e019      	b.n	800b0d8 <_malloc_r+0xb0>
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	dac9      	bge.n	800b03c <_malloc_r+0x14>
 800b0a8:	230c      	movs	r3, #12
 800b0aa:	602b      	str	r3, [r5, #0]
 800b0ac:	2000      	movs	r0, #0
 800b0ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b0b0:	6821      	ldr	r1, [r4, #0]
 800b0b2:	1bc9      	subs	r1, r1, r7
 800b0b4:	d420      	bmi.n	800b0f8 <_malloc_r+0xd0>
 800b0b6:	290b      	cmp	r1, #11
 800b0b8:	d90a      	bls.n	800b0d0 <_malloc_r+0xa8>
 800b0ba:	19e2      	adds	r2, r4, r7
 800b0bc:	6027      	str	r7, [r4, #0]
 800b0be:	42a3      	cmp	r3, r4
 800b0c0:	d104      	bne.n	800b0cc <_malloc_r+0xa4>
 800b0c2:	6032      	str	r2, [r6, #0]
 800b0c4:	6863      	ldr	r3, [r4, #4]
 800b0c6:	6011      	str	r1, [r2, #0]
 800b0c8:	6053      	str	r3, [r2, #4]
 800b0ca:	e005      	b.n	800b0d8 <_malloc_r+0xb0>
 800b0cc:	605a      	str	r2, [r3, #4]
 800b0ce:	e7f9      	b.n	800b0c4 <_malloc_r+0x9c>
 800b0d0:	6862      	ldr	r2, [r4, #4]
 800b0d2:	42a3      	cmp	r3, r4
 800b0d4:	d10e      	bne.n	800b0f4 <_malloc_r+0xcc>
 800b0d6:	6032      	str	r2, [r6, #0]
 800b0d8:	0028      	movs	r0, r5
 800b0da:	f000 f82d 	bl	800b138 <__malloc_unlock>
 800b0de:	0020      	movs	r0, r4
 800b0e0:	2207      	movs	r2, #7
 800b0e2:	300b      	adds	r0, #11
 800b0e4:	1d23      	adds	r3, r4, #4
 800b0e6:	4390      	bics	r0, r2
 800b0e8:	1ac2      	subs	r2, r0, r3
 800b0ea:	4298      	cmp	r0, r3
 800b0ec:	d0df      	beq.n	800b0ae <_malloc_r+0x86>
 800b0ee:	1a1b      	subs	r3, r3, r0
 800b0f0:	50a3      	str	r3, [r4, r2]
 800b0f2:	e7dc      	b.n	800b0ae <_malloc_r+0x86>
 800b0f4:	605a      	str	r2, [r3, #4]
 800b0f6:	e7ef      	b.n	800b0d8 <_malloc_r+0xb0>
 800b0f8:	0023      	movs	r3, r4
 800b0fa:	6864      	ldr	r4, [r4, #4]
 800b0fc:	e7a6      	b.n	800b04c <_malloc_r+0x24>
 800b0fe:	9c00      	ldr	r4, [sp, #0]
 800b100:	6863      	ldr	r3, [r4, #4]
 800b102:	9300      	str	r3, [sp, #0]
 800b104:	e7ad      	b.n	800b062 <_malloc_r+0x3a>
 800b106:	001a      	movs	r2, r3
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	42a3      	cmp	r3, r4
 800b10c:	d1fb      	bne.n	800b106 <_malloc_r+0xde>
 800b10e:	2300      	movs	r3, #0
 800b110:	e7da      	b.n	800b0c8 <_malloc_r+0xa0>
 800b112:	230c      	movs	r3, #12
 800b114:	0028      	movs	r0, r5
 800b116:	602b      	str	r3, [r5, #0]
 800b118:	f000 f80e 	bl	800b138 <__malloc_unlock>
 800b11c:	e7c6      	b.n	800b0ac <_malloc_r+0x84>
 800b11e:	6007      	str	r7, [r0, #0]
 800b120:	e7da      	b.n	800b0d8 <_malloc_r+0xb0>
 800b122:	46c0      	nop			@ (mov r8, r8)
 800b124:	20001ac0 	.word	0x20001ac0

0800b128 <__malloc_lock>:
 800b128:	b510      	push	{r4, lr}
 800b12a:	4802      	ldr	r0, [pc, #8]	@ (800b134 <__malloc_lock+0xc>)
 800b12c:	f7ff ff0e 	bl	800af4c <__retarget_lock_acquire_recursive>
 800b130:	bd10      	pop	{r4, pc}
 800b132:	46c0      	nop			@ (mov r8, r8)
 800b134:	20001ab8 	.word	0x20001ab8

0800b138 <__malloc_unlock>:
 800b138:	b510      	push	{r4, lr}
 800b13a:	4802      	ldr	r0, [pc, #8]	@ (800b144 <__malloc_unlock+0xc>)
 800b13c:	f7ff ff07 	bl	800af4e <__retarget_lock_release_recursive>
 800b140:	bd10      	pop	{r4, pc}
 800b142:	46c0      	nop			@ (mov r8, r8)
 800b144:	20001ab8 	.word	0x20001ab8

0800b148 <__ssputs_r>:
 800b148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b14a:	688e      	ldr	r6, [r1, #8]
 800b14c:	b085      	sub	sp, #20
 800b14e:	001f      	movs	r7, r3
 800b150:	000c      	movs	r4, r1
 800b152:	680b      	ldr	r3, [r1, #0]
 800b154:	9002      	str	r0, [sp, #8]
 800b156:	9203      	str	r2, [sp, #12]
 800b158:	42be      	cmp	r6, r7
 800b15a:	d830      	bhi.n	800b1be <__ssputs_r+0x76>
 800b15c:	210c      	movs	r1, #12
 800b15e:	5e62      	ldrsh	r2, [r4, r1]
 800b160:	2190      	movs	r1, #144	@ 0x90
 800b162:	00c9      	lsls	r1, r1, #3
 800b164:	420a      	tst	r2, r1
 800b166:	d028      	beq.n	800b1ba <__ssputs_r+0x72>
 800b168:	2003      	movs	r0, #3
 800b16a:	6921      	ldr	r1, [r4, #16]
 800b16c:	1a5b      	subs	r3, r3, r1
 800b16e:	9301      	str	r3, [sp, #4]
 800b170:	6963      	ldr	r3, [r4, #20]
 800b172:	4343      	muls	r3, r0
 800b174:	9801      	ldr	r0, [sp, #4]
 800b176:	0fdd      	lsrs	r5, r3, #31
 800b178:	18ed      	adds	r5, r5, r3
 800b17a:	1c7b      	adds	r3, r7, #1
 800b17c:	181b      	adds	r3, r3, r0
 800b17e:	106d      	asrs	r5, r5, #1
 800b180:	42ab      	cmp	r3, r5
 800b182:	d900      	bls.n	800b186 <__ssputs_r+0x3e>
 800b184:	001d      	movs	r5, r3
 800b186:	0552      	lsls	r2, r2, #21
 800b188:	d528      	bpl.n	800b1dc <__ssputs_r+0x94>
 800b18a:	0029      	movs	r1, r5
 800b18c:	9802      	ldr	r0, [sp, #8]
 800b18e:	f7ff ff4b 	bl	800b028 <_malloc_r>
 800b192:	1e06      	subs	r6, r0, #0
 800b194:	d02c      	beq.n	800b1f0 <__ssputs_r+0xa8>
 800b196:	9a01      	ldr	r2, [sp, #4]
 800b198:	6921      	ldr	r1, [r4, #16]
 800b19a:	f000 fade 	bl	800b75a <memcpy>
 800b19e:	89a2      	ldrh	r2, [r4, #12]
 800b1a0:	4b18      	ldr	r3, [pc, #96]	@ (800b204 <__ssputs_r+0xbc>)
 800b1a2:	401a      	ands	r2, r3
 800b1a4:	2380      	movs	r3, #128	@ 0x80
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	81a3      	strh	r3, [r4, #12]
 800b1aa:	9b01      	ldr	r3, [sp, #4]
 800b1ac:	6126      	str	r6, [r4, #16]
 800b1ae:	18f6      	adds	r6, r6, r3
 800b1b0:	6026      	str	r6, [r4, #0]
 800b1b2:	003e      	movs	r6, r7
 800b1b4:	6165      	str	r5, [r4, #20]
 800b1b6:	1aed      	subs	r5, r5, r3
 800b1b8:	60a5      	str	r5, [r4, #8]
 800b1ba:	42be      	cmp	r6, r7
 800b1bc:	d900      	bls.n	800b1c0 <__ssputs_r+0x78>
 800b1be:	003e      	movs	r6, r7
 800b1c0:	0032      	movs	r2, r6
 800b1c2:	9903      	ldr	r1, [sp, #12]
 800b1c4:	6820      	ldr	r0, [r4, #0]
 800b1c6:	f000 fa99 	bl	800b6fc <memmove>
 800b1ca:	2000      	movs	r0, #0
 800b1cc:	68a3      	ldr	r3, [r4, #8]
 800b1ce:	1b9b      	subs	r3, r3, r6
 800b1d0:	60a3      	str	r3, [r4, #8]
 800b1d2:	6823      	ldr	r3, [r4, #0]
 800b1d4:	199b      	adds	r3, r3, r6
 800b1d6:	6023      	str	r3, [r4, #0]
 800b1d8:	b005      	add	sp, #20
 800b1da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1dc:	002a      	movs	r2, r5
 800b1de:	9802      	ldr	r0, [sp, #8]
 800b1e0:	f000 fac4 	bl	800b76c <_realloc_r>
 800b1e4:	1e06      	subs	r6, r0, #0
 800b1e6:	d1e0      	bne.n	800b1aa <__ssputs_r+0x62>
 800b1e8:	6921      	ldr	r1, [r4, #16]
 800b1ea:	9802      	ldr	r0, [sp, #8]
 800b1ec:	f7ff feb0 	bl	800af50 <_free_r>
 800b1f0:	230c      	movs	r3, #12
 800b1f2:	2001      	movs	r0, #1
 800b1f4:	9a02      	ldr	r2, [sp, #8]
 800b1f6:	4240      	negs	r0, r0
 800b1f8:	6013      	str	r3, [r2, #0]
 800b1fa:	89a2      	ldrh	r2, [r4, #12]
 800b1fc:	3334      	adds	r3, #52	@ 0x34
 800b1fe:	4313      	orrs	r3, r2
 800b200:	81a3      	strh	r3, [r4, #12]
 800b202:	e7e9      	b.n	800b1d8 <__ssputs_r+0x90>
 800b204:	fffffb7f 	.word	0xfffffb7f

0800b208 <_svfiprintf_r>:
 800b208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b20a:	b0a1      	sub	sp, #132	@ 0x84
 800b20c:	9003      	str	r0, [sp, #12]
 800b20e:	001d      	movs	r5, r3
 800b210:	898b      	ldrh	r3, [r1, #12]
 800b212:	000f      	movs	r7, r1
 800b214:	0016      	movs	r6, r2
 800b216:	061b      	lsls	r3, r3, #24
 800b218:	d511      	bpl.n	800b23e <_svfiprintf_r+0x36>
 800b21a:	690b      	ldr	r3, [r1, #16]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d10e      	bne.n	800b23e <_svfiprintf_r+0x36>
 800b220:	2140      	movs	r1, #64	@ 0x40
 800b222:	f7ff ff01 	bl	800b028 <_malloc_r>
 800b226:	6038      	str	r0, [r7, #0]
 800b228:	6138      	str	r0, [r7, #16]
 800b22a:	2800      	cmp	r0, #0
 800b22c:	d105      	bne.n	800b23a <_svfiprintf_r+0x32>
 800b22e:	230c      	movs	r3, #12
 800b230:	9a03      	ldr	r2, [sp, #12]
 800b232:	6013      	str	r3, [r2, #0]
 800b234:	2001      	movs	r0, #1
 800b236:	4240      	negs	r0, r0
 800b238:	e0cf      	b.n	800b3da <_svfiprintf_r+0x1d2>
 800b23a:	2340      	movs	r3, #64	@ 0x40
 800b23c:	617b      	str	r3, [r7, #20]
 800b23e:	2300      	movs	r3, #0
 800b240:	ac08      	add	r4, sp, #32
 800b242:	6163      	str	r3, [r4, #20]
 800b244:	3320      	adds	r3, #32
 800b246:	7663      	strb	r3, [r4, #25]
 800b248:	3310      	adds	r3, #16
 800b24a:	76a3      	strb	r3, [r4, #26]
 800b24c:	9507      	str	r5, [sp, #28]
 800b24e:	0035      	movs	r5, r6
 800b250:	782b      	ldrb	r3, [r5, #0]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d001      	beq.n	800b25a <_svfiprintf_r+0x52>
 800b256:	2b25      	cmp	r3, #37	@ 0x25
 800b258:	d148      	bne.n	800b2ec <_svfiprintf_r+0xe4>
 800b25a:	1bab      	subs	r3, r5, r6
 800b25c:	9305      	str	r3, [sp, #20]
 800b25e:	42b5      	cmp	r5, r6
 800b260:	d00b      	beq.n	800b27a <_svfiprintf_r+0x72>
 800b262:	0032      	movs	r2, r6
 800b264:	0039      	movs	r1, r7
 800b266:	9803      	ldr	r0, [sp, #12]
 800b268:	f7ff ff6e 	bl	800b148 <__ssputs_r>
 800b26c:	3001      	adds	r0, #1
 800b26e:	d100      	bne.n	800b272 <_svfiprintf_r+0x6a>
 800b270:	e0ae      	b.n	800b3d0 <_svfiprintf_r+0x1c8>
 800b272:	6963      	ldr	r3, [r4, #20]
 800b274:	9a05      	ldr	r2, [sp, #20]
 800b276:	189b      	adds	r3, r3, r2
 800b278:	6163      	str	r3, [r4, #20]
 800b27a:	782b      	ldrb	r3, [r5, #0]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d100      	bne.n	800b282 <_svfiprintf_r+0x7a>
 800b280:	e0a6      	b.n	800b3d0 <_svfiprintf_r+0x1c8>
 800b282:	2201      	movs	r2, #1
 800b284:	2300      	movs	r3, #0
 800b286:	4252      	negs	r2, r2
 800b288:	6062      	str	r2, [r4, #4]
 800b28a:	a904      	add	r1, sp, #16
 800b28c:	3254      	adds	r2, #84	@ 0x54
 800b28e:	1852      	adds	r2, r2, r1
 800b290:	1c6e      	adds	r6, r5, #1
 800b292:	6023      	str	r3, [r4, #0]
 800b294:	60e3      	str	r3, [r4, #12]
 800b296:	60a3      	str	r3, [r4, #8]
 800b298:	7013      	strb	r3, [r2, #0]
 800b29a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800b29c:	4b54      	ldr	r3, [pc, #336]	@ (800b3f0 <_svfiprintf_r+0x1e8>)
 800b29e:	2205      	movs	r2, #5
 800b2a0:	0018      	movs	r0, r3
 800b2a2:	7831      	ldrb	r1, [r6, #0]
 800b2a4:	9305      	str	r3, [sp, #20]
 800b2a6:	f000 fa4d 	bl	800b744 <memchr>
 800b2aa:	1c75      	adds	r5, r6, #1
 800b2ac:	2800      	cmp	r0, #0
 800b2ae:	d11f      	bne.n	800b2f0 <_svfiprintf_r+0xe8>
 800b2b0:	6822      	ldr	r2, [r4, #0]
 800b2b2:	06d3      	lsls	r3, r2, #27
 800b2b4:	d504      	bpl.n	800b2c0 <_svfiprintf_r+0xb8>
 800b2b6:	2353      	movs	r3, #83	@ 0x53
 800b2b8:	a904      	add	r1, sp, #16
 800b2ba:	185b      	adds	r3, r3, r1
 800b2bc:	2120      	movs	r1, #32
 800b2be:	7019      	strb	r1, [r3, #0]
 800b2c0:	0713      	lsls	r3, r2, #28
 800b2c2:	d504      	bpl.n	800b2ce <_svfiprintf_r+0xc6>
 800b2c4:	2353      	movs	r3, #83	@ 0x53
 800b2c6:	a904      	add	r1, sp, #16
 800b2c8:	185b      	adds	r3, r3, r1
 800b2ca:	212b      	movs	r1, #43	@ 0x2b
 800b2cc:	7019      	strb	r1, [r3, #0]
 800b2ce:	7833      	ldrb	r3, [r6, #0]
 800b2d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2d2:	d016      	beq.n	800b302 <_svfiprintf_r+0xfa>
 800b2d4:	0035      	movs	r5, r6
 800b2d6:	2100      	movs	r1, #0
 800b2d8:	200a      	movs	r0, #10
 800b2da:	68e3      	ldr	r3, [r4, #12]
 800b2dc:	782a      	ldrb	r2, [r5, #0]
 800b2de:	1c6e      	adds	r6, r5, #1
 800b2e0:	3a30      	subs	r2, #48	@ 0x30
 800b2e2:	2a09      	cmp	r2, #9
 800b2e4:	d950      	bls.n	800b388 <_svfiprintf_r+0x180>
 800b2e6:	2900      	cmp	r1, #0
 800b2e8:	d111      	bne.n	800b30e <_svfiprintf_r+0x106>
 800b2ea:	e017      	b.n	800b31c <_svfiprintf_r+0x114>
 800b2ec:	3501      	adds	r5, #1
 800b2ee:	e7af      	b.n	800b250 <_svfiprintf_r+0x48>
 800b2f0:	9b05      	ldr	r3, [sp, #20]
 800b2f2:	6822      	ldr	r2, [r4, #0]
 800b2f4:	1ac0      	subs	r0, r0, r3
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	4083      	lsls	r3, r0
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	002e      	movs	r6, r5
 800b2fe:	6023      	str	r3, [r4, #0]
 800b300:	e7cc      	b.n	800b29c <_svfiprintf_r+0x94>
 800b302:	9b07      	ldr	r3, [sp, #28]
 800b304:	1d19      	adds	r1, r3, #4
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	9107      	str	r1, [sp, #28]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	db01      	blt.n	800b312 <_svfiprintf_r+0x10a>
 800b30e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b310:	e004      	b.n	800b31c <_svfiprintf_r+0x114>
 800b312:	425b      	negs	r3, r3
 800b314:	60e3      	str	r3, [r4, #12]
 800b316:	2302      	movs	r3, #2
 800b318:	4313      	orrs	r3, r2
 800b31a:	6023      	str	r3, [r4, #0]
 800b31c:	782b      	ldrb	r3, [r5, #0]
 800b31e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b320:	d10c      	bne.n	800b33c <_svfiprintf_r+0x134>
 800b322:	786b      	ldrb	r3, [r5, #1]
 800b324:	2b2a      	cmp	r3, #42	@ 0x2a
 800b326:	d134      	bne.n	800b392 <_svfiprintf_r+0x18a>
 800b328:	9b07      	ldr	r3, [sp, #28]
 800b32a:	3502      	adds	r5, #2
 800b32c:	1d1a      	adds	r2, r3, #4
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	9207      	str	r2, [sp, #28]
 800b332:	2b00      	cmp	r3, #0
 800b334:	da01      	bge.n	800b33a <_svfiprintf_r+0x132>
 800b336:	2301      	movs	r3, #1
 800b338:	425b      	negs	r3, r3
 800b33a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b33c:	4e2d      	ldr	r6, [pc, #180]	@ (800b3f4 <_svfiprintf_r+0x1ec>)
 800b33e:	2203      	movs	r2, #3
 800b340:	0030      	movs	r0, r6
 800b342:	7829      	ldrb	r1, [r5, #0]
 800b344:	f000 f9fe 	bl	800b744 <memchr>
 800b348:	2800      	cmp	r0, #0
 800b34a:	d006      	beq.n	800b35a <_svfiprintf_r+0x152>
 800b34c:	2340      	movs	r3, #64	@ 0x40
 800b34e:	1b80      	subs	r0, r0, r6
 800b350:	4083      	lsls	r3, r0
 800b352:	6822      	ldr	r2, [r4, #0]
 800b354:	3501      	adds	r5, #1
 800b356:	4313      	orrs	r3, r2
 800b358:	6023      	str	r3, [r4, #0]
 800b35a:	7829      	ldrb	r1, [r5, #0]
 800b35c:	2206      	movs	r2, #6
 800b35e:	4826      	ldr	r0, [pc, #152]	@ (800b3f8 <_svfiprintf_r+0x1f0>)
 800b360:	1c6e      	adds	r6, r5, #1
 800b362:	7621      	strb	r1, [r4, #24]
 800b364:	f000 f9ee 	bl	800b744 <memchr>
 800b368:	2800      	cmp	r0, #0
 800b36a:	d038      	beq.n	800b3de <_svfiprintf_r+0x1d6>
 800b36c:	4b23      	ldr	r3, [pc, #140]	@ (800b3fc <_svfiprintf_r+0x1f4>)
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d122      	bne.n	800b3b8 <_svfiprintf_r+0x1b0>
 800b372:	2207      	movs	r2, #7
 800b374:	9b07      	ldr	r3, [sp, #28]
 800b376:	3307      	adds	r3, #7
 800b378:	4393      	bics	r3, r2
 800b37a:	3308      	adds	r3, #8
 800b37c:	9307      	str	r3, [sp, #28]
 800b37e:	6963      	ldr	r3, [r4, #20]
 800b380:	9a04      	ldr	r2, [sp, #16]
 800b382:	189b      	adds	r3, r3, r2
 800b384:	6163      	str	r3, [r4, #20]
 800b386:	e762      	b.n	800b24e <_svfiprintf_r+0x46>
 800b388:	4343      	muls	r3, r0
 800b38a:	0035      	movs	r5, r6
 800b38c:	2101      	movs	r1, #1
 800b38e:	189b      	adds	r3, r3, r2
 800b390:	e7a4      	b.n	800b2dc <_svfiprintf_r+0xd4>
 800b392:	2300      	movs	r3, #0
 800b394:	200a      	movs	r0, #10
 800b396:	0019      	movs	r1, r3
 800b398:	3501      	adds	r5, #1
 800b39a:	6063      	str	r3, [r4, #4]
 800b39c:	782a      	ldrb	r2, [r5, #0]
 800b39e:	1c6e      	adds	r6, r5, #1
 800b3a0:	3a30      	subs	r2, #48	@ 0x30
 800b3a2:	2a09      	cmp	r2, #9
 800b3a4:	d903      	bls.n	800b3ae <_svfiprintf_r+0x1a6>
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d0c8      	beq.n	800b33c <_svfiprintf_r+0x134>
 800b3aa:	9109      	str	r1, [sp, #36]	@ 0x24
 800b3ac:	e7c6      	b.n	800b33c <_svfiprintf_r+0x134>
 800b3ae:	4341      	muls	r1, r0
 800b3b0:	0035      	movs	r5, r6
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	1889      	adds	r1, r1, r2
 800b3b6:	e7f1      	b.n	800b39c <_svfiprintf_r+0x194>
 800b3b8:	aa07      	add	r2, sp, #28
 800b3ba:	9200      	str	r2, [sp, #0]
 800b3bc:	0021      	movs	r1, r4
 800b3be:	003a      	movs	r2, r7
 800b3c0:	4b0f      	ldr	r3, [pc, #60]	@ (800b400 <_svfiprintf_r+0x1f8>)
 800b3c2:	9803      	ldr	r0, [sp, #12]
 800b3c4:	e000      	b.n	800b3c8 <_svfiprintf_r+0x1c0>
 800b3c6:	bf00      	nop
 800b3c8:	9004      	str	r0, [sp, #16]
 800b3ca:	9b04      	ldr	r3, [sp, #16]
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	d1d6      	bne.n	800b37e <_svfiprintf_r+0x176>
 800b3d0:	89bb      	ldrh	r3, [r7, #12]
 800b3d2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800b3d4:	065b      	lsls	r3, r3, #25
 800b3d6:	d500      	bpl.n	800b3da <_svfiprintf_r+0x1d2>
 800b3d8:	e72c      	b.n	800b234 <_svfiprintf_r+0x2c>
 800b3da:	b021      	add	sp, #132	@ 0x84
 800b3dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3de:	aa07      	add	r2, sp, #28
 800b3e0:	9200      	str	r2, [sp, #0]
 800b3e2:	0021      	movs	r1, r4
 800b3e4:	003a      	movs	r2, r7
 800b3e6:	4b06      	ldr	r3, [pc, #24]	@ (800b400 <_svfiprintf_r+0x1f8>)
 800b3e8:	9803      	ldr	r0, [sp, #12]
 800b3ea:	f000 f87b 	bl	800b4e4 <_printf_i>
 800b3ee:	e7eb      	b.n	800b3c8 <_svfiprintf_r+0x1c0>
 800b3f0:	0800ba18 	.word	0x0800ba18
 800b3f4:	0800ba1e 	.word	0x0800ba1e
 800b3f8:	0800ba22 	.word	0x0800ba22
 800b3fc:	00000000 	.word	0x00000000
 800b400:	0800b149 	.word	0x0800b149

0800b404 <_printf_common>:
 800b404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b406:	0016      	movs	r6, r2
 800b408:	9301      	str	r3, [sp, #4]
 800b40a:	688a      	ldr	r2, [r1, #8]
 800b40c:	690b      	ldr	r3, [r1, #16]
 800b40e:	000c      	movs	r4, r1
 800b410:	9000      	str	r0, [sp, #0]
 800b412:	4293      	cmp	r3, r2
 800b414:	da00      	bge.n	800b418 <_printf_common+0x14>
 800b416:	0013      	movs	r3, r2
 800b418:	0022      	movs	r2, r4
 800b41a:	6033      	str	r3, [r6, #0]
 800b41c:	3243      	adds	r2, #67	@ 0x43
 800b41e:	7812      	ldrb	r2, [r2, #0]
 800b420:	2a00      	cmp	r2, #0
 800b422:	d001      	beq.n	800b428 <_printf_common+0x24>
 800b424:	3301      	adds	r3, #1
 800b426:	6033      	str	r3, [r6, #0]
 800b428:	6823      	ldr	r3, [r4, #0]
 800b42a:	069b      	lsls	r3, r3, #26
 800b42c:	d502      	bpl.n	800b434 <_printf_common+0x30>
 800b42e:	6833      	ldr	r3, [r6, #0]
 800b430:	3302      	adds	r3, #2
 800b432:	6033      	str	r3, [r6, #0]
 800b434:	6822      	ldr	r2, [r4, #0]
 800b436:	2306      	movs	r3, #6
 800b438:	0015      	movs	r5, r2
 800b43a:	401d      	ands	r5, r3
 800b43c:	421a      	tst	r2, r3
 800b43e:	d027      	beq.n	800b490 <_printf_common+0x8c>
 800b440:	0023      	movs	r3, r4
 800b442:	3343      	adds	r3, #67	@ 0x43
 800b444:	781b      	ldrb	r3, [r3, #0]
 800b446:	1e5a      	subs	r2, r3, #1
 800b448:	4193      	sbcs	r3, r2
 800b44a:	6822      	ldr	r2, [r4, #0]
 800b44c:	0692      	lsls	r2, r2, #26
 800b44e:	d430      	bmi.n	800b4b2 <_printf_common+0xae>
 800b450:	0022      	movs	r2, r4
 800b452:	9901      	ldr	r1, [sp, #4]
 800b454:	9800      	ldr	r0, [sp, #0]
 800b456:	9d08      	ldr	r5, [sp, #32]
 800b458:	3243      	adds	r2, #67	@ 0x43
 800b45a:	47a8      	blx	r5
 800b45c:	3001      	adds	r0, #1
 800b45e:	d025      	beq.n	800b4ac <_printf_common+0xa8>
 800b460:	2206      	movs	r2, #6
 800b462:	6823      	ldr	r3, [r4, #0]
 800b464:	2500      	movs	r5, #0
 800b466:	4013      	ands	r3, r2
 800b468:	2b04      	cmp	r3, #4
 800b46a:	d105      	bne.n	800b478 <_printf_common+0x74>
 800b46c:	6833      	ldr	r3, [r6, #0]
 800b46e:	68e5      	ldr	r5, [r4, #12]
 800b470:	1aed      	subs	r5, r5, r3
 800b472:	43eb      	mvns	r3, r5
 800b474:	17db      	asrs	r3, r3, #31
 800b476:	401d      	ands	r5, r3
 800b478:	68a3      	ldr	r3, [r4, #8]
 800b47a:	6922      	ldr	r2, [r4, #16]
 800b47c:	4293      	cmp	r3, r2
 800b47e:	dd01      	ble.n	800b484 <_printf_common+0x80>
 800b480:	1a9b      	subs	r3, r3, r2
 800b482:	18ed      	adds	r5, r5, r3
 800b484:	2600      	movs	r6, #0
 800b486:	42b5      	cmp	r5, r6
 800b488:	d120      	bne.n	800b4cc <_printf_common+0xc8>
 800b48a:	2000      	movs	r0, #0
 800b48c:	e010      	b.n	800b4b0 <_printf_common+0xac>
 800b48e:	3501      	adds	r5, #1
 800b490:	68e3      	ldr	r3, [r4, #12]
 800b492:	6832      	ldr	r2, [r6, #0]
 800b494:	1a9b      	subs	r3, r3, r2
 800b496:	42ab      	cmp	r3, r5
 800b498:	ddd2      	ble.n	800b440 <_printf_common+0x3c>
 800b49a:	0022      	movs	r2, r4
 800b49c:	2301      	movs	r3, #1
 800b49e:	9901      	ldr	r1, [sp, #4]
 800b4a0:	9800      	ldr	r0, [sp, #0]
 800b4a2:	9f08      	ldr	r7, [sp, #32]
 800b4a4:	3219      	adds	r2, #25
 800b4a6:	47b8      	blx	r7
 800b4a8:	3001      	adds	r0, #1
 800b4aa:	d1f0      	bne.n	800b48e <_printf_common+0x8a>
 800b4ac:	2001      	movs	r0, #1
 800b4ae:	4240      	negs	r0, r0
 800b4b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b4b2:	2030      	movs	r0, #48	@ 0x30
 800b4b4:	18e1      	adds	r1, r4, r3
 800b4b6:	3143      	adds	r1, #67	@ 0x43
 800b4b8:	7008      	strb	r0, [r1, #0]
 800b4ba:	0021      	movs	r1, r4
 800b4bc:	1c5a      	adds	r2, r3, #1
 800b4be:	3145      	adds	r1, #69	@ 0x45
 800b4c0:	7809      	ldrb	r1, [r1, #0]
 800b4c2:	18a2      	adds	r2, r4, r2
 800b4c4:	3243      	adds	r2, #67	@ 0x43
 800b4c6:	3302      	adds	r3, #2
 800b4c8:	7011      	strb	r1, [r2, #0]
 800b4ca:	e7c1      	b.n	800b450 <_printf_common+0x4c>
 800b4cc:	0022      	movs	r2, r4
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	9901      	ldr	r1, [sp, #4]
 800b4d2:	9800      	ldr	r0, [sp, #0]
 800b4d4:	9f08      	ldr	r7, [sp, #32]
 800b4d6:	321a      	adds	r2, #26
 800b4d8:	47b8      	blx	r7
 800b4da:	3001      	adds	r0, #1
 800b4dc:	d0e6      	beq.n	800b4ac <_printf_common+0xa8>
 800b4de:	3601      	adds	r6, #1
 800b4e0:	e7d1      	b.n	800b486 <_printf_common+0x82>
	...

0800b4e4 <_printf_i>:
 800b4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4e6:	b08b      	sub	sp, #44	@ 0x2c
 800b4e8:	9206      	str	r2, [sp, #24]
 800b4ea:	000a      	movs	r2, r1
 800b4ec:	3243      	adds	r2, #67	@ 0x43
 800b4ee:	9307      	str	r3, [sp, #28]
 800b4f0:	9005      	str	r0, [sp, #20]
 800b4f2:	9203      	str	r2, [sp, #12]
 800b4f4:	7e0a      	ldrb	r2, [r1, #24]
 800b4f6:	000c      	movs	r4, r1
 800b4f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b4fa:	2a78      	cmp	r2, #120	@ 0x78
 800b4fc:	d809      	bhi.n	800b512 <_printf_i+0x2e>
 800b4fe:	2a62      	cmp	r2, #98	@ 0x62
 800b500:	d80b      	bhi.n	800b51a <_printf_i+0x36>
 800b502:	2a00      	cmp	r2, #0
 800b504:	d100      	bne.n	800b508 <_printf_i+0x24>
 800b506:	e0ba      	b.n	800b67e <_printf_i+0x19a>
 800b508:	497a      	ldr	r1, [pc, #488]	@ (800b6f4 <_printf_i+0x210>)
 800b50a:	9104      	str	r1, [sp, #16]
 800b50c:	2a58      	cmp	r2, #88	@ 0x58
 800b50e:	d100      	bne.n	800b512 <_printf_i+0x2e>
 800b510:	e08e      	b.n	800b630 <_printf_i+0x14c>
 800b512:	0025      	movs	r5, r4
 800b514:	3542      	adds	r5, #66	@ 0x42
 800b516:	702a      	strb	r2, [r5, #0]
 800b518:	e022      	b.n	800b560 <_printf_i+0x7c>
 800b51a:	0010      	movs	r0, r2
 800b51c:	3863      	subs	r0, #99	@ 0x63
 800b51e:	2815      	cmp	r0, #21
 800b520:	d8f7      	bhi.n	800b512 <_printf_i+0x2e>
 800b522:	f7f4 fdf7 	bl	8000114 <__gnu_thumb1_case_shi>
 800b526:	0016      	.short	0x0016
 800b528:	fff6001f 	.word	0xfff6001f
 800b52c:	fff6fff6 	.word	0xfff6fff6
 800b530:	001ffff6 	.word	0x001ffff6
 800b534:	fff6fff6 	.word	0xfff6fff6
 800b538:	fff6fff6 	.word	0xfff6fff6
 800b53c:	0036009f 	.word	0x0036009f
 800b540:	fff6007e 	.word	0xfff6007e
 800b544:	00b0fff6 	.word	0x00b0fff6
 800b548:	0036fff6 	.word	0x0036fff6
 800b54c:	fff6fff6 	.word	0xfff6fff6
 800b550:	0082      	.short	0x0082
 800b552:	0025      	movs	r5, r4
 800b554:	681a      	ldr	r2, [r3, #0]
 800b556:	3542      	adds	r5, #66	@ 0x42
 800b558:	1d11      	adds	r1, r2, #4
 800b55a:	6019      	str	r1, [r3, #0]
 800b55c:	6813      	ldr	r3, [r2, #0]
 800b55e:	702b      	strb	r3, [r5, #0]
 800b560:	2301      	movs	r3, #1
 800b562:	e09e      	b.n	800b6a2 <_printf_i+0x1be>
 800b564:	6818      	ldr	r0, [r3, #0]
 800b566:	6809      	ldr	r1, [r1, #0]
 800b568:	1d02      	adds	r2, r0, #4
 800b56a:	060d      	lsls	r5, r1, #24
 800b56c:	d50b      	bpl.n	800b586 <_printf_i+0xa2>
 800b56e:	6806      	ldr	r6, [r0, #0]
 800b570:	601a      	str	r2, [r3, #0]
 800b572:	2e00      	cmp	r6, #0
 800b574:	da03      	bge.n	800b57e <_printf_i+0x9a>
 800b576:	232d      	movs	r3, #45	@ 0x2d
 800b578:	9a03      	ldr	r2, [sp, #12]
 800b57a:	4276      	negs	r6, r6
 800b57c:	7013      	strb	r3, [r2, #0]
 800b57e:	4b5d      	ldr	r3, [pc, #372]	@ (800b6f4 <_printf_i+0x210>)
 800b580:	270a      	movs	r7, #10
 800b582:	9304      	str	r3, [sp, #16]
 800b584:	e018      	b.n	800b5b8 <_printf_i+0xd4>
 800b586:	6806      	ldr	r6, [r0, #0]
 800b588:	601a      	str	r2, [r3, #0]
 800b58a:	0649      	lsls	r1, r1, #25
 800b58c:	d5f1      	bpl.n	800b572 <_printf_i+0x8e>
 800b58e:	b236      	sxth	r6, r6
 800b590:	e7ef      	b.n	800b572 <_printf_i+0x8e>
 800b592:	6808      	ldr	r0, [r1, #0]
 800b594:	6819      	ldr	r1, [r3, #0]
 800b596:	c940      	ldmia	r1!, {r6}
 800b598:	0605      	lsls	r5, r0, #24
 800b59a:	d402      	bmi.n	800b5a2 <_printf_i+0xbe>
 800b59c:	0640      	lsls	r0, r0, #25
 800b59e:	d500      	bpl.n	800b5a2 <_printf_i+0xbe>
 800b5a0:	b2b6      	uxth	r6, r6
 800b5a2:	6019      	str	r1, [r3, #0]
 800b5a4:	4b53      	ldr	r3, [pc, #332]	@ (800b6f4 <_printf_i+0x210>)
 800b5a6:	270a      	movs	r7, #10
 800b5a8:	9304      	str	r3, [sp, #16]
 800b5aa:	2a6f      	cmp	r2, #111	@ 0x6f
 800b5ac:	d100      	bne.n	800b5b0 <_printf_i+0xcc>
 800b5ae:	3f02      	subs	r7, #2
 800b5b0:	0023      	movs	r3, r4
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	3343      	adds	r3, #67	@ 0x43
 800b5b6:	701a      	strb	r2, [r3, #0]
 800b5b8:	6863      	ldr	r3, [r4, #4]
 800b5ba:	60a3      	str	r3, [r4, #8]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	db06      	blt.n	800b5ce <_printf_i+0xea>
 800b5c0:	2104      	movs	r1, #4
 800b5c2:	6822      	ldr	r2, [r4, #0]
 800b5c4:	9d03      	ldr	r5, [sp, #12]
 800b5c6:	438a      	bics	r2, r1
 800b5c8:	6022      	str	r2, [r4, #0]
 800b5ca:	4333      	orrs	r3, r6
 800b5cc:	d00c      	beq.n	800b5e8 <_printf_i+0x104>
 800b5ce:	9d03      	ldr	r5, [sp, #12]
 800b5d0:	0030      	movs	r0, r6
 800b5d2:	0039      	movs	r1, r7
 800b5d4:	f7f4 fe2e 	bl	8000234 <__aeabi_uidivmod>
 800b5d8:	9b04      	ldr	r3, [sp, #16]
 800b5da:	3d01      	subs	r5, #1
 800b5dc:	5c5b      	ldrb	r3, [r3, r1]
 800b5de:	702b      	strb	r3, [r5, #0]
 800b5e0:	0033      	movs	r3, r6
 800b5e2:	0006      	movs	r6, r0
 800b5e4:	429f      	cmp	r7, r3
 800b5e6:	d9f3      	bls.n	800b5d0 <_printf_i+0xec>
 800b5e8:	2f08      	cmp	r7, #8
 800b5ea:	d109      	bne.n	800b600 <_printf_i+0x11c>
 800b5ec:	6823      	ldr	r3, [r4, #0]
 800b5ee:	07db      	lsls	r3, r3, #31
 800b5f0:	d506      	bpl.n	800b600 <_printf_i+0x11c>
 800b5f2:	6862      	ldr	r2, [r4, #4]
 800b5f4:	6923      	ldr	r3, [r4, #16]
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	dc02      	bgt.n	800b600 <_printf_i+0x11c>
 800b5fa:	2330      	movs	r3, #48	@ 0x30
 800b5fc:	3d01      	subs	r5, #1
 800b5fe:	702b      	strb	r3, [r5, #0]
 800b600:	9b03      	ldr	r3, [sp, #12]
 800b602:	1b5b      	subs	r3, r3, r5
 800b604:	6123      	str	r3, [r4, #16]
 800b606:	9b07      	ldr	r3, [sp, #28]
 800b608:	0021      	movs	r1, r4
 800b60a:	9300      	str	r3, [sp, #0]
 800b60c:	9805      	ldr	r0, [sp, #20]
 800b60e:	9b06      	ldr	r3, [sp, #24]
 800b610:	aa09      	add	r2, sp, #36	@ 0x24
 800b612:	f7ff fef7 	bl	800b404 <_printf_common>
 800b616:	3001      	adds	r0, #1
 800b618:	d148      	bne.n	800b6ac <_printf_i+0x1c8>
 800b61a:	2001      	movs	r0, #1
 800b61c:	4240      	negs	r0, r0
 800b61e:	b00b      	add	sp, #44	@ 0x2c
 800b620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b622:	2220      	movs	r2, #32
 800b624:	6809      	ldr	r1, [r1, #0]
 800b626:	430a      	orrs	r2, r1
 800b628:	6022      	str	r2, [r4, #0]
 800b62a:	2278      	movs	r2, #120	@ 0x78
 800b62c:	4932      	ldr	r1, [pc, #200]	@ (800b6f8 <_printf_i+0x214>)
 800b62e:	9104      	str	r1, [sp, #16]
 800b630:	0021      	movs	r1, r4
 800b632:	3145      	adds	r1, #69	@ 0x45
 800b634:	700a      	strb	r2, [r1, #0]
 800b636:	6819      	ldr	r1, [r3, #0]
 800b638:	6822      	ldr	r2, [r4, #0]
 800b63a:	c940      	ldmia	r1!, {r6}
 800b63c:	0610      	lsls	r0, r2, #24
 800b63e:	d402      	bmi.n	800b646 <_printf_i+0x162>
 800b640:	0650      	lsls	r0, r2, #25
 800b642:	d500      	bpl.n	800b646 <_printf_i+0x162>
 800b644:	b2b6      	uxth	r6, r6
 800b646:	6019      	str	r1, [r3, #0]
 800b648:	07d3      	lsls	r3, r2, #31
 800b64a:	d502      	bpl.n	800b652 <_printf_i+0x16e>
 800b64c:	2320      	movs	r3, #32
 800b64e:	4313      	orrs	r3, r2
 800b650:	6023      	str	r3, [r4, #0]
 800b652:	2e00      	cmp	r6, #0
 800b654:	d001      	beq.n	800b65a <_printf_i+0x176>
 800b656:	2710      	movs	r7, #16
 800b658:	e7aa      	b.n	800b5b0 <_printf_i+0xcc>
 800b65a:	2220      	movs	r2, #32
 800b65c:	6823      	ldr	r3, [r4, #0]
 800b65e:	4393      	bics	r3, r2
 800b660:	6023      	str	r3, [r4, #0]
 800b662:	e7f8      	b.n	800b656 <_printf_i+0x172>
 800b664:	681a      	ldr	r2, [r3, #0]
 800b666:	680d      	ldr	r5, [r1, #0]
 800b668:	1d10      	adds	r0, r2, #4
 800b66a:	6949      	ldr	r1, [r1, #20]
 800b66c:	6018      	str	r0, [r3, #0]
 800b66e:	6813      	ldr	r3, [r2, #0]
 800b670:	062e      	lsls	r6, r5, #24
 800b672:	d501      	bpl.n	800b678 <_printf_i+0x194>
 800b674:	6019      	str	r1, [r3, #0]
 800b676:	e002      	b.n	800b67e <_printf_i+0x19a>
 800b678:	066d      	lsls	r5, r5, #25
 800b67a:	d5fb      	bpl.n	800b674 <_printf_i+0x190>
 800b67c:	8019      	strh	r1, [r3, #0]
 800b67e:	2300      	movs	r3, #0
 800b680:	9d03      	ldr	r5, [sp, #12]
 800b682:	6123      	str	r3, [r4, #16]
 800b684:	e7bf      	b.n	800b606 <_printf_i+0x122>
 800b686:	681a      	ldr	r2, [r3, #0]
 800b688:	1d11      	adds	r1, r2, #4
 800b68a:	6019      	str	r1, [r3, #0]
 800b68c:	6815      	ldr	r5, [r2, #0]
 800b68e:	2100      	movs	r1, #0
 800b690:	0028      	movs	r0, r5
 800b692:	6862      	ldr	r2, [r4, #4]
 800b694:	f000 f856 	bl	800b744 <memchr>
 800b698:	2800      	cmp	r0, #0
 800b69a:	d001      	beq.n	800b6a0 <_printf_i+0x1bc>
 800b69c:	1b40      	subs	r0, r0, r5
 800b69e:	6060      	str	r0, [r4, #4]
 800b6a0:	6863      	ldr	r3, [r4, #4]
 800b6a2:	6123      	str	r3, [r4, #16]
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	9a03      	ldr	r2, [sp, #12]
 800b6a8:	7013      	strb	r3, [r2, #0]
 800b6aa:	e7ac      	b.n	800b606 <_printf_i+0x122>
 800b6ac:	002a      	movs	r2, r5
 800b6ae:	6923      	ldr	r3, [r4, #16]
 800b6b0:	9906      	ldr	r1, [sp, #24]
 800b6b2:	9805      	ldr	r0, [sp, #20]
 800b6b4:	9d07      	ldr	r5, [sp, #28]
 800b6b6:	47a8      	blx	r5
 800b6b8:	3001      	adds	r0, #1
 800b6ba:	d0ae      	beq.n	800b61a <_printf_i+0x136>
 800b6bc:	6823      	ldr	r3, [r4, #0]
 800b6be:	079b      	lsls	r3, r3, #30
 800b6c0:	d415      	bmi.n	800b6ee <_printf_i+0x20a>
 800b6c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6c4:	68e0      	ldr	r0, [r4, #12]
 800b6c6:	4298      	cmp	r0, r3
 800b6c8:	daa9      	bge.n	800b61e <_printf_i+0x13a>
 800b6ca:	0018      	movs	r0, r3
 800b6cc:	e7a7      	b.n	800b61e <_printf_i+0x13a>
 800b6ce:	0022      	movs	r2, r4
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	9906      	ldr	r1, [sp, #24]
 800b6d4:	9805      	ldr	r0, [sp, #20]
 800b6d6:	9e07      	ldr	r6, [sp, #28]
 800b6d8:	3219      	adds	r2, #25
 800b6da:	47b0      	blx	r6
 800b6dc:	3001      	adds	r0, #1
 800b6de:	d09c      	beq.n	800b61a <_printf_i+0x136>
 800b6e0:	3501      	adds	r5, #1
 800b6e2:	68e3      	ldr	r3, [r4, #12]
 800b6e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b6e6:	1a9b      	subs	r3, r3, r2
 800b6e8:	42ab      	cmp	r3, r5
 800b6ea:	dcf0      	bgt.n	800b6ce <_printf_i+0x1ea>
 800b6ec:	e7e9      	b.n	800b6c2 <_printf_i+0x1de>
 800b6ee:	2500      	movs	r5, #0
 800b6f0:	e7f7      	b.n	800b6e2 <_printf_i+0x1fe>
 800b6f2:	46c0      	nop			@ (mov r8, r8)
 800b6f4:	0800ba29 	.word	0x0800ba29
 800b6f8:	0800ba3a 	.word	0x0800ba3a

0800b6fc <memmove>:
 800b6fc:	b510      	push	{r4, lr}
 800b6fe:	4288      	cmp	r0, r1
 800b700:	d902      	bls.n	800b708 <memmove+0xc>
 800b702:	188b      	adds	r3, r1, r2
 800b704:	4298      	cmp	r0, r3
 800b706:	d308      	bcc.n	800b71a <memmove+0x1e>
 800b708:	2300      	movs	r3, #0
 800b70a:	429a      	cmp	r2, r3
 800b70c:	d007      	beq.n	800b71e <memmove+0x22>
 800b70e:	5ccc      	ldrb	r4, [r1, r3]
 800b710:	54c4      	strb	r4, [r0, r3]
 800b712:	3301      	adds	r3, #1
 800b714:	e7f9      	b.n	800b70a <memmove+0xe>
 800b716:	5c8b      	ldrb	r3, [r1, r2]
 800b718:	5483      	strb	r3, [r0, r2]
 800b71a:	3a01      	subs	r2, #1
 800b71c:	d2fb      	bcs.n	800b716 <memmove+0x1a>
 800b71e:	bd10      	pop	{r4, pc}

0800b720 <_sbrk_r>:
 800b720:	2300      	movs	r3, #0
 800b722:	b570      	push	{r4, r5, r6, lr}
 800b724:	4d06      	ldr	r5, [pc, #24]	@ (800b740 <_sbrk_r+0x20>)
 800b726:	0004      	movs	r4, r0
 800b728:	0008      	movs	r0, r1
 800b72a:	602b      	str	r3, [r5, #0]
 800b72c:	f7f5 fcd2 	bl	80010d4 <_sbrk>
 800b730:	1c43      	adds	r3, r0, #1
 800b732:	d103      	bne.n	800b73c <_sbrk_r+0x1c>
 800b734:	682b      	ldr	r3, [r5, #0]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d000      	beq.n	800b73c <_sbrk_r+0x1c>
 800b73a:	6023      	str	r3, [r4, #0]
 800b73c:	bd70      	pop	{r4, r5, r6, pc}
 800b73e:	46c0      	nop			@ (mov r8, r8)
 800b740:	20001ab4 	.word	0x20001ab4

0800b744 <memchr>:
 800b744:	b2c9      	uxtb	r1, r1
 800b746:	1882      	adds	r2, r0, r2
 800b748:	4290      	cmp	r0, r2
 800b74a:	d101      	bne.n	800b750 <memchr+0xc>
 800b74c:	2000      	movs	r0, #0
 800b74e:	4770      	bx	lr
 800b750:	7803      	ldrb	r3, [r0, #0]
 800b752:	428b      	cmp	r3, r1
 800b754:	d0fb      	beq.n	800b74e <memchr+0xa>
 800b756:	3001      	adds	r0, #1
 800b758:	e7f6      	b.n	800b748 <memchr+0x4>

0800b75a <memcpy>:
 800b75a:	2300      	movs	r3, #0
 800b75c:	b510      	push	{r4, lr}
 800b75e:	429a      	cmp	r2, r3
 800b760:	d100      	bne.n	800b764 <memcpy+0xa>
 800b762:	bd10      	pop	{r4, pc}
 800b764:	5ccc      	ldrb	r4, [r1, r3]
 800b766:	54c4      	strb	r4, [r0, r3]
 800b768:	3301      	adds	r3, #1
 800b76a:	e7f8      	b.n	800b75e <memcpy+0x4>

0800b76c <_realloc_r>:
 800b76c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b76e:	0006      	movs	r6, r0
 800b770:	000c      	movs	r4, r1
 800b772:	0015      	movs	r5, r2
 800b774:	2900      	cmp	r1, #0
 800b776:	d105      	bne.n	800b784 <_realloc_r+0x18>
 800b778:	0011      	movs	r1, r2
 800b77a:	f7ff fc55 	bl	800b028 <_malloc_r>
 800b77e:	0004      	movs	r4, r0
 800b780:	0020      	movs	r0, r4
 800b782:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b784:	2a00      	cmp	r2, #0
 800b786:	d103      	bne.n	800b790 <_realloc_r+0x24>
 800b788:	f7ff fbe2 	bl	800af50 <_free_r>
 800b78c:	002c      	movs	r4, r5
 800b78e:	e7f7      	b.n	800b780 <_realloc_r+0x14>
 800b790:	f000 f81c 	bl	800b7cc <_malloc_usable_size_r>
 800b794:	0007      	movs	r7, r0
 800b796:	4285      	cmp	r5, r0
 800b798:	d802      	bhi.n	800b7a0 <_realloc_r+0x34>
 800b79a:	0843      	lsrs	r3, r0, #1
 800b79c:	42ab      	cmp	r3, r5
 800b79e:	d3ef      	bcc.n	800b780 <_realloc_r+0x14>
 800b7a0:	0029      	movs	r1, r5
 800b7a2:	0030      	movs	r0, r6
 800b7a4:	f7ff fc40 	bl	800b028 <_malloc_r>
 800b7a8:	9001      	str	r0, [sp, #4]
 800b7aa:	2800      	cmp	r0, #0
 800b7ac:	d101      	bne.n	800b7b2 <_realloc_r+0x46>
 800b7ae:	9c01      	ldr	r4, [sp, #4]
 800b7b0:	e7e6      	b.n	800b780 <_realloc_r+0x14>
 800b7b2:	002a      	movs	r2, r5
 800b7b4:	42bd      	cmp	r5, r7
 800b7b6:	d900      	bls.n	800b7ba <_realloc_r+0x4e>
 800b7b8:	003a      	movs	r2, r7
 800b7ba:	0021      	movs	r1, r4
 800b7bc:	9801      	ldr	r0, [sp, #4]
 800b7be:	f7ff ffcc 	bl	800b75a <memcpy>
 800b7c2:	0021      	movs	r1, r4
 800b7c4:	0030      	movs	r0, r6
 800b7c6:	f7ff fbc3 	bl	800af50 <_free_r>
 800b7ca:	e7f0      	b.n	800b7ae <_realloc_r+0x42>

0800b7cc <_malloc_usable_size_r>:
 800b7cc:	1f0b      	subs	r3, r1, #4
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	1f18      	subs	r0, r3, #4
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	da01      	bge.n	800b7da <_malloc_usable_size_r+0xe>
 800b7d6:	580b      	ldr	r3, [r1, r0]
 800b7d8:	18c0      	adds	r0, r0, r3
 800b7da:	4770      	bx	lr

0800b7dc <_init>:
 800b7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7de:	46c0      	nop			@ (mov r8, r8)
 800b7e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7e2:	bc08      	pop	{r3}
 800b7e4:	469e      	mov	lr, r3
 800b7e6:	4770      	bx	lr

0800b7e8 <_fini>:
 800b7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ea:	46c0      	nop			@ (mov r8, r8)
 800b7ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ee:	bc08      	pop	{r3}
 800b7f0:	469e      	mov	lr, r3
 800b7f2:	4770      	bx	lr
