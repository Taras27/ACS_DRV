
DRV_1_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ed0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08005f8c  08005f8c  00015f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006110  08006110  000200e0  2**0
                  CONTENTS
  4 .ARM          00000008  08006110  08006110  00016110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006118  08006118  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006118  08006118  00016118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800611c  0800611c  0001611c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08006120  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001528  200000e0  08006200  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20001608  08006200  00021608  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002d502  00000000  00000000  0002014b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000059d2  00000000  00000000  0004d64d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001de8  00000000  00000000  00053020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017d8  00000000  00000000  00054e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000224de  00000000  00000000  000565e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00034cc3  00000000  00000000  00078abe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb52e  00000000  00000000  000ad781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004eb8  00000000  00000000  00178cb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00014e7d  00000000  00000000  0017db68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  001929e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000e0 	.word	0x200000e0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005f74 	.word	0x08005f74

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000e4 	.word	0x200000e4
 8000100:	08005f74 	.word	0x08005f74

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800061c:	b500      	push	{lr}
 800061e:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000620:	4b15      	ldr	r3, [pc, #84]	; (8000678 <MX_DMA_Init+0x5c>)
 8000622:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000624:	2201      	movs	r2, #1
 8000626:	4311      	orrs	r1, r2
 8000628:	6399      	str	r1, [r3, #56]	; 0x38
 800062a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800062c:	400a      	ands	r2, r1
 800062e:	9200      	str	r2, [sp, #0]
 8000630:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000632:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000634:	2202      	movs	r2, #2
 8000636:	4311      	orrs	r1, r2
 8000638:	6399      	str	r1, [r3, #56]	; 0x38
 800063a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800063c:	401a      	ands	r2, r3
 800063e:	9201      	str	r2, [sp, #4]
 8000640:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	2100      	movs	r1, #0
 8000646:	2009      	movs	r0, #9
 8000648:	f000 ffb2 	bl	80015b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800064c:	2009      	movs	r0, #9
 800064e:	f000 ffdf 	bl	8001610 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000652:	2200      	movs	r2, #0
 8000654:	2100      	movs	r1, #0
 8000656:	200a      	movs	r0, #10
 8000658:	f000 ffaa 	bl	80015b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800065c:	200a      	movs	r0, #10
 800065e:	f000 ffd7 	bl	8001610 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn, 0, 0);
 8000662:	2200      	movs	r2, #0
 8000664:	2100      	movs	r1, #0
 8000666:	200b      	movs	r0, #11
 8000668:	f000 ffa2 	bl	80015b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn);
 800066c:	200b      	movs	r0, #11
 800066e:	f000 ffcf 	bl	8001610 <HAL_NVIC_EnableIRQ>

}
 8000672:	b003      	add	sp, #12
 8000674:	bd00      	pop	{pc}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	40021000 	.word	0x40021000

0800067c <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 800067c:	b510      	push	{r4, lr}
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800067e:	4810      	ldr	r0, [pc, #64]	; (80006c0 <MX_FDCAN1_Init+0x44>)
 8000680:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <MX_FDCAN1_Init+0x48>)
 8000682:	6003      	str	r3, [r0, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	6043      	str	r3, [r0, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000688:	6083      	str	r3, [r0, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800068a:	60c3      	str	r3, [r0, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800068c:	7403      	strb	r3, [r0, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800068e:	7443      	strb	r3, [r0, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000690:	7483      	strb	r3, [r0, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000692:	2210      	movs	r2, #16
 8000694:	6142      	str	r2, [r0, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000696:	3a0f      	subs	r2, #15
 8000698:	6182      	str	r2, [r0, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800069a:	2102      	movs	r1, #2
 800069c:	61c1      	str	r1, [r0, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800069e:	6201      	str	r1, [r0, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80006a0:	6242      	str	r2, [r0, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80006a2:	6282      	str	r2, [r0, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80006a4:	62c2      	str	r2, [r0, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80006a6:	6302      	str	r2, [r0, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80006a8:	6343      	str	r3, [r0, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80006aa:	6383      	str	r3, [r0, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80006ac:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80006ae:	f001 f9b5 	bl	8001a1c <HAL_FDCAN_Init>
 80006b2:	2800      	cmp	r0, #0
 80006b4:	d100      	bne.n	80006b8 <MX_FDCAN1_Init+0x3c>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80006b6:	bd10      	pop	{r4, pc}
    Error_Handler();
 80006b8:	f000 f9e4 	bl	8000a84 <Error_Handler>
}
 80006bc:	e7fb      	b.n	80006b6 <MX_FDCAN1_Init+0x3a>
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	20000100 	.word	0x20000100
 80006c4:	40006400 	.word	0x40006400

080006c8 <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 80006c8:	b510      	push	{r4, lr}
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80006ca:	4810      	ldr	r0, [pc, #64]	; (800070c <MX_FDCAN2_Init+0x44>)
 80006cc:	4b10      	ldr	r3, [pc, #64]	; (8000710 <MX_FDCAN2_Init+0x48>)
 80006ce:	6003      	str	r3, [r0, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	6043      	str	r3, [r0, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80006d4:	6083      	str	r3, [r0, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80006d6:	60c3      	str	r3, [r0, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80006d8:	7403      	strb	r3, [r0, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80006da:	7443      	strb	r3, [r0, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80006dc:	7483      	strb	r3, [r0, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 80006de:	2210      	movs	r2, #16
 80006e0:	6142      	str	r2, [r0, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80006e2:	3a0f      	subs	r2, #15
 80006e4:	6182      	str	r2, [r0, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80006e6:	2102      	movs	r1, #2
 80006e8:	61c1      	str	r1, [r0, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80006ea:	6201      	str	r1, [r0, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80006ec:	6242      	str	r2, [r0, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80006ee:	6282      	str	r2, [r0, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80006f0:	62c2      	str	r2, [r0, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80006f2:	6302      	str	r2, [r0, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 80006f4:	6343      	str	r3, [r0, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 80006f6:	6383      	str	r3, [r0, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80006f8:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80006fa:	f001 f98f 	bl	8001a1c <HAL_FDCAN_Init>
 80006fe:	2800      	cmp	r0, #0
 8000700:	d100      	bne.n	8000704 <MX_FDCAN2_Init+0x3c>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000702:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000704:	f000 f9be 	bl	8000a84 <Error_Handler>
}
 8000708:	e7fb      	b.n	8000702 <MX_FDCAN2_Init+0x3a>
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	20000164 	.word	0x20000164
 8000710:	40006800 	.word	0x40006800

08000714 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000714:	b510      	push	{r4, lr}
 8000716:	b09c      	sub	sp, #112	; 0x70
 8000718:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	2214      	movs	r2, #20
 800071c:	2100      	movs	r1, #0
 800071e:	a817      	add	r0, sp, #92	; 0x5c
 8000720:	f005 fbfb 	bl	8005f1a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000724:	224c      	movs	r2, #76	; 0x4c
 8000726:	2100      	movs	r1, #0
 8000728:	a804      	add	r0, sp, #16
 800072a:	f005 fbf6 	bl	8005f1a <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800072e:	6823      	ldr	r3, [r4, #0]
 8000730:	4a45      	ldr	r2, [pc, #276]	; (8000848 <HAL_FDCAN_MspInit+0x134>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d004      	beq.n	8000740 <HAL_FDCAN_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(TIM17_FDCAN_IT1_IRQn);
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
  else if(fdcanHandle->Instance==FDCAN2)
 8000736:	4a45      	ldr	r2, [pc, #276]	; (800084c <HAL_FDCAN_MspInit+0x138>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d043      	beq.n	80007c4 <HAL_FDCAN_MspInit+0xb0>
    HAL_NVIC_EnableIRQ(TIM17_FDCAN_IT1_IRQn);
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 800073c:	b01c      	add	sp, #112	; 0x70
 800073e:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	049b      	lsls	r3, r3, #18
 8000744:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000746:	a804      	add	r0, sp, #16
 8000748:	f002 fd62 	bl	8003210 <HAL_RCCEx_PeriphCLKConfig>
 800074c:	2800      	cmp	r0, #0
 800074e:	d12b      	bne.n	80007a8 <HAL_FDCAN_MspInit+0x94>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000750:	4a3f      	ldr	r2, [pc, #252]	; (8000850 <HAL_FDCAN_MspInit+0x13c>)
 8000752:	6813      	ldr	r3, [r2, #0]
 8000754:	3301      	adds	r3, #1
 8000756:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000758:	2b01      	cmp	r3, #1
 800075a:	d028      	beq.n	80007ae <HAL_FDCAN_MspInit+0x9a>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800075c:	4a3d      	ldr	r2, [pc, #244]	; (8000854 <HAL_FDCAN_MspInit+0x140>)
 800075e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000760:	2308      	movs	r3, #8
 8000762:	4319      	orrs	r1, r3
 8000764:	6351      	str	r1, [r2, #52]	; 0x34
 8000766:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000768:	4013      	ands	r3, r2
 800076a:	9301      	str	r3, [sp, #4]
 800076c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800076e:	2303      	movs	r3, #3
 8000770:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000772:	2202      	movs	r2, #2
 8000774:	9218      	str	r2, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2200      	movs	r2, #0
 8000778:	9219      	str	r2, [sp, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	921a      	str	r2, [sp, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN1;
 800077c:	931b      	str	r3, [sp, #108]	; 0x6c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800077e:	a917      	add	r1, sp, #92	; 0x5c
 8000780:	4835      	ldr	r0, [pc, #212]	; (8000858 <HAL_FDCAN_MspInit+0x144>)
 8000782:	f001 fb0d 	bl	8001da0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM16_FDCAN_IT0_IRQn, 1, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2101      	movs	r1, #1
 800078a:	2015      	movs	r0, #21
 800078c:	f000 ff10 	bl	80015b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
 8000790:	2015      	movs	r0, #21
 8000792:	f000 ff3d 	bl	8001610 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM17_FDCAN_IT1_IRQn, 1, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	2101      	movs	r1, #1
 800079a:	2016      	movs	r0, #22
 800079c:	f000 ff08 	bl	80015b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_FDCAN_IT1_IRQn);
 80007a0:	2016      	movs	r0, #22
 80007a2:	f000 ff35 	bl	8001610 <HAL_NVIC_EnableIRQ>
 80007a6:	e7c9      	b.n	800073c <HAL_FDCAN_MspInit+0x28>
      Error_Handler();
 80007a8:	f000 f96c 	bl	8000a84 <Error_Handler>
 80007ac:	e7d0      	b.n	8000750 <HAL_FDCAN_MspInit+0x3c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80007ae:	4b29      	ldr	r3, [pc, #164]	; (8000854 <HAL_FDCAN_MspInit+0x140>)
 80007b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007b2:	2180      	movs	r1, #128	; 0x80
 80007b4:	0149      	lsls	r1, r1, #5
 80007b6:	430a      	orrs	r2, r1
 80007b8:	63da      	str	r2, [r3, #60]	; 0x3c
 80007ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007bc:	400b      	ands	r3, r1
 80007be:	9300      	str	r3, [sp, #0]
 80007c0:	9b00      	ldr	r3, [sp, #0]
 80007c2:	e7cb      	b.n	800075c <HAL_FDCAN_MspInit+0x48>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80007c4:	2380      	movs	r3, #128	; 0x80
 80007c6:	049b      	lsls	r3, r3, #18
 80007c8:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ca:	a804      	add	r0, sp, #16
 80007cc:	f002 fd20 	bl	8003210 <HAL_RCCEx_PeriphCLKConfig>
 80007d0:	2800      	cmp	r0, #0
 80007d2:	d12b      	bne.n	800082c <HAL_FDCAN_MspInit+0x118>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80007d4:	4a1e      	ldr	r2, [pc, #120]	; (8000850 <HAL_FDCAN_MspInit+0x13c>)
 80007d6:	6813      	ldr	r3, [r2, #0]
 80007d8:	3301      	adds	r3, #1
 80007da:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d028      	beq.n	8000832 <HAL_FDCAN_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e0:	4a1c      	ldr	r2, [pc, #112]	; (8000854 <HAL_FDCAN_MspInit+0x140>)
 80007e2:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80007e4:	2302      	movs	r3, #2
 80007e6:	4319      	orrs	r1, r3
 80007e8:	6351      	str	r1, [r2, #52]	; 0x34
 80007ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80007ec:	401a      	ands	r2, r3
 80007ee:	9203      	str	r2, [sp, #12]
 80007f0:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80007f2:	2260      	movs	r2, #96	; 0x60
 80007f4:	9217      	str	r2, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f6:	9318      	str	r3, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	931a      	str	r3, [sp, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN2;
 80007fe:	3303      	adds	r3, #3
 8000800:	931b      	str	r3, [sp, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000802:	a917      	add	r1, sp, #92	; 0x5c
 8000804:	4815      	ldr	r0, [pc, #84]	; (800085c <HAL_FDCAN_MspInit+0x148>)
 8000806:	f001 facb 	bl	8001da0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM16_FDCAN_IT0_IRQn, 1, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2101      	movs	r1, #1
 800080e:	2015      	movs	r0, #21
 8000810:	f000 fece 	bl	80015b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
 8000814:	2015      	movs	r0, #21
 8000816:	f000 fefb 	bl	8001610 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM17_FDCAN_IT1_IRQn, 1, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	2101      	movs	r1, #1
 800081e:	2016      	movs	r0, #22
 8000820:	f000 fec6 	bl	80015b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_FDCAN_IT1_IRQn);
 8000824:	2016      	movs	r0, #22
 8000826:	f000 fef3 	bl	8001610 <HAL_NVIC_EnableIRQ>
}
 800082a:	e787      	b.n	800073c <HAL_FDCAN_MspInit+0x28>
      Error_Handler();
 800082c:	f000 f92a 	bl	8000a84 <Error_Handler>
 8000830:	e7d0      	b.n	80007d4 <HAL_FDCAN_MspInit+0xc0>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <HAL_FDCAN_MspInit+0x140>)
 8000834:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000836:	2180      	movs	r1, #128	; 0x80
 8000838:	0149      	lsls	r1, r1, #5
 800083a:	430a      	orrs	r2, r1
 800083c:	63da      	str	r2, [r3, #60]	; 0x3c
 800083e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000840:	400b      	ands	r3, r1
 8000842:	9302      	str	r3, [sp, #8]
 8000844:	9b02      	ldr	r3, [sp, #8]
 8000846:	e7cb      	b.n	80007e0 <HAL_FDCAN_MspInit+0xcc>
 8000848:	40006400 	.word	0x40006400
 800084c:	40006800 	.word	0x40006800
 8000850:	200000fc 	.word	0x200000fc
 8000854:	40021000 	.word	0x40021000
 8000858:	50000c00 	.word	0x50000c00
 800085c:	50000400 	.word	0x50000400

08000860 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000862:	46d6      	mov	lr, sl
 8000864:	464f      	mov	r7, r9
 8000866:	4646      	mov	r6, r8
 8000868:	b5c0      	push	{r6, r7, lr}
 800086a:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	2214      	movs	r2, #20
 800086e:	2100      	movs	r1, #0
 8000870:	a805      	add	r0, sp, #20
 8000872:	f005 fb52 	bl	8005f1a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000876:	4b3e      	ldr	r3, [pc, #248]	; (8000970 <MX_GPIO_Init+0x110>)
 8000878:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800087a:	2204      	movs	r2, #4
 800087c:	4311      	orrs	r1, r2
 800087e:	6359      	str	r1, [r3, #52]	; 0x34
 8000880:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000882:	400a      	ands	r2, r1
 8000884:	9200      	str	r2, [sp, #0]
 8000886:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000888:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800088a:	2220      	movs	r2, #32
 800088c:	4311      	orrs	r1, r2
 800088e:	6359      	str	r1, [r3, #52]	; 0x34
 8000890:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000892:	400a      	ands	r2, r1
 8000894:	9201      	str	r2, [sp, #4]
 8000896:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800089a:	2501      	movs	r5, #1
 800089c:	432a      	orrs	r2, r5
 800089e:	635a      	str	r2, [r3, #52]	; 0x34
 80008a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008a2:	402a      	ands	r2, r5
 80008a4:	9202      	str	r2, [sp, #8]
 80008a6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80008aa:	2202      	movs	r2, #2
 80008ac:	4311      	orrs	r1, r2
 80008ae:	6359      	str	r1, [r3, #52]	; 0x34
 80008b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80008b2:	400a      	ands	r2, r1
 80008b4:	9203      	str	r2, [sp, #12]
 80008b6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80008ba:	2208      	movs	r2, #8
 80008bc:	4311      	orrs	r1, r2
 80008be:	6359      	str	r1, [r3, #52]	; 0x34
 80008c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008c2:	401a      	ands	r2, r3
 80008c4:	9204      	str	r2, [sp, #16]
 80008c6:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_ERROR_Pin|LED_PROCESS_Pin|LED_OK_Pin, GPIO_PIN_RESET);
 80008c8:	24e0      	movs	r4, #224	; 0xe0
 80008ca:	0224      	lsls	r4, r4, #8
 80008cc:	4e29      	ldr	r6, [pc, #164]	; (8000974 <MX_GPIO_Init+0x114>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	0021      	movs	r1, r4
 80008d2:	0030      	movs	r0, r6
 80008d4:	f001 fb24 	bl	8001f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, UART2_CS0_Pin|BUZZ_Pin, GPIO_PIN_RESET);
 80008d8:	4b27      	ldr	r3, [pc, #156]	; (8000978 <MX_GPIO_Init+0x118>)
 80008da:	469a      	mov	sl, r3
 80008dc:	23a0      	movs	r3, #160	; 0xa0
 80008de:	05db      	lsls	r3, r3, #23
 80008e0:	4698      	mov	r8, r3
 80008e2:	2200      	movs	r2, #0
 80008e4:	4651      	mov	r1, sl
 80008e6:	0018      	movs	r0, r3
 80008e8:	f001 fb1a 	bl	8001f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_CS0_Pin|SPI_CS1_Pin|UART3_CS0_Pin|UART5_CS0_Pin
 80008ec:	4b23      	ldr	r3, [pc, #140]	; (800097c <MX_GPIO_Init+0x11c>)
 80008ee:	4699      	mov	r9, r3
 80008f0:	4f23      	ldr	r7, [pc, #140]	; (8000980 <MX_GPIO_Init+0x120>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	0019      	movs	r1, r3
 80008f6:	0038      	movs	r0, r7
 80008f8:	f001 fb12 	bl	8001f20 <HAL_GPIO_WritePin>
                          |UART6_CS0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_ERROR_Pin|LED_PROCESS_Pin|LED_OK_Pin;
 80008fc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2400      	movs	r4, #0
 8000902:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000906:	a905      	add	r1, sp, #20
 8000908:	0030      	movs	r0, r6
 800090a:	f001 fa49 	bl	8001da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = ADDR0_Pin|ADDR1_Pin|LS1_Pin|LS2_Pin
 800090e:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <MX_GPIO_Init+0x124>)
 8000910:	9305      	str	r3, [sp, #20]
                          |LS5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000912:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	a905      	add	r1, sp, #20
 8000918:	4640      	mov	r0, r8
 800091a:	f001 fa41 	bl	8001da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = UART2_CS0_Pin|BUZZ_Pin;
 800091e:	4653      	mov	r3, sl
 8000920:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000928:	a905      	add	r1, sp, #20
 800092a:	4640      	mov	r0, r8
 800092c:	f001 fa38 	bl	8001da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SPI_CS0_Pin|SPI_CS1_Pin|UART3_CS0_Pin|UART5_CS0_Pin
 8000930:	464b      	mov	r3, r9
 8000932:	9305      	str	r3, [sp, #20]
                          |UART6_CS0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000934:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093a:	a905      	add	r1, sp, #20
 800093c:	0038      	movs	r0, r7
 800093e:	f001 fa2f 	bl	8001da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ADDR2_Pin|LS0_Pin|BOOT_BTN_Pin;
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_GPIO_Init+0x128>)
 8000944:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000946:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094a:	a905      	add	r1, sp, #20
 800094c:	0038      	movs	r0, r7
 800094e:	f001 fa27 	bl	8001da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LS3_Pin|LS4_Pin;
 8000952:	23c0      	movs	r3, #192	; 0xc0
 8000954:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000956:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095a:	a905      	add	r1, sp, #20
 800095c:	0030      	movs	r0, r6
 800095e:	f001 fa1f 	bl	8001da0 <HAL_GPIO_Init>

}
 8000962:	b00a      	add	sp, #40	; 0x28
 8000964:	bce0      	pop	{r5, r6, r7}
 8000966:	46ba      	mov	sl, r7
 8000968:	46b1      	mov	r9, r6
 800096a:	46a8      	mov	r8, r5
 800096c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	40021000 	.word	0x40021000
 8000974:	50000800 	.word	0x50000800
 8000978:	00008010 	.word	0x00008010
 800097c:	0000108b 	.word	0x0000108b
 8000980:	50000400 	.word	0x50000400
 8000984:	00000703 	.word	0x00000703
 8000988:	00008014 	.word	0x00008014

0800098c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800098c:	b510      	push	{r4, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800098e:	4814      	ldr	r0, [pc, #80]	; (80009e0 <MX_I2C2_Init+0x54>)
 8000990:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <MX_I2C2_Init+0x58>)
 8000992:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <MX_I2C2_Init+0x5c>)
 8000996:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800099c:	2201      	movs	r2, #1
 800099e:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009a0:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80009a2:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009a4:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009a6:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a8:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009aa:	f001 fb05 	bl	8001fb8 <HAL_I2C_Init>
 80009ae:	2800      	cmp	r0, #0
 80009b0:	d10c      	bne.n	80009cc <MX_I2C2_Init+0x40>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009b2:	480b      	ldr	r0, [pc, #44]	; (80009e0 <MX_I2C2_Init+0x54>)
 80009b4:	2100      	movs	r1, #0
 80009b6:	f001 fe73 	bl	80026a0 <HAL_I2CEx_ConfigAnalogFilter>
 80009ba:	2800      	cmp	r0, #0
 80009bc:	d109      	bne.n	80009d2 <MX_I2C2_Init+0x46>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80009be:	4808      	ldr	r0, [pc, #32]	; (80009e0 <MX_I2C2_Init+0x54>)
 80009c0:	2100      	movs	r1, #0
 80009c2:	f001 fe99 	bl	80026f8 <HAL_I2CEx_ConfigDigitalFilter>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	d106      	bne.n	80009d8 <MX_I2C2_Init+0x4c>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009ca:	bd10      	pop	{r4, pc}
    Error_Handler();
 80009cc:	f000 f85a 	bl	8000a84 <Error_Handler>
 80009d0:	e7ef      	b.n	80009b2 <MX_I2C2_Init+0x26>
    Error_Handler();
 80009d2:	f000 f857 	bl	8000a84 <Error_Handler>
 80009d6:	e7f2      	b.n	80009be <MX_I2C2_Init+0x32>
    Error_Handler();
 80009d8:	f000 f854 	bl	8000a84 <Error_Handler>
}
 80009dc:	e7f5      	b.n	80009ca <MX_I2C2_Init+0x3e>
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	200001c8 	.word	0x200001c8
 80009e4:	40005800 	.word	0x40005800
 80009e8:	10707dbc 	.word	0x10707dbc

080009ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009ec:	b510      	push	{r4, lr}
 80009ee:	b09a      	sub	sp, #104	; 0x68
 80009f0:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f2:	2214      	movs	r2, #20
 80009f4:	2100      	movs	r1, #0
 80009f6:	a815      	add	r0, sp, #84	; 0x54
 80009f8:	f005 fa8f 	bl	8005f1a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009fc:	224c      	movs	r2, #76	; 0x4c
 80009fe:	2100      	movs	r1, #0
 8000a00:	a802      	add	r0, sp, #8
 8000a02:	f005 fa8a 	bl	8005f1a <memset>
  if(i2cHandle->Instance==I2C2)
 8000a06:	6822      	ldr	r2, [r4, #0]
 8000a08:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <HAL_I2C_MspInit+0x8c>)
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d001      	beq.n	8000a12 <HAL_I2C_MspInit+0x26>
    HAL_NVIC_EnableIRQ(I2C2_3_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000a0e:	b01a      	add	sp, #104	; 0x68
 8000a10:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000a12:	2340      	movs	r3, #64	; 0x40
 8000a14:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a16:	a802      	add	r0, sp, #8
 8000a18:	f002 fbfa 	bl	8003210 <HAL_RCCEx_PeriphCLKConfig>
 8000a1c:	2800      	cmp	r0, #0
 8000a1e:	d128      	bne.n	8000a72 <HAL_I2C_MspInit+0x86>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a20:	4c16      	ldr	r4, [pc, #88]	; (8000a7c <HAL_I2C_MspInit+0x90>)
 8000a22:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000a24:	2302      	movs	r3, #2
 8000a26:	431a      	orrs	r2, r3
 8000a28:	6362      	str	r2, [r4, #52]	; 0x34
 8000a2a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	9300      	str	r3, [sp, #0]
 8000a30:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000a32:	23c0      	movs	r3, #192	; 0xc0
 8000a34:	01db      	lsls	r3, r3, #7
 8000a36:	9315      	str	r3, [sp, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a38:	2312      	movs	r3, #18
 8000a3a:	9316      	str	r3, [sp, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a40:	9318      	str	r3, [sp, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000a42:	3306      	adds	r3, #6
 8000a44:	9319      	str	r3, [sp, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a46:	a915      	add	r1, sp, #84	; 0x54
 8000a48:	480d      	ldr	r0, [pc, #52]	; (8000a80 <HAL_I2C_MspInit+0x94>)
 8000a4a:	f001 f9a9 	bl	8001da0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a4e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000a50:	2280      	movs	r2, #128	; 0x80
 8000a52:	03d2      	lsls	r2, r2, #15
 8000a54:	4313      	orrs	r3, r2
 8000a56:	63e3      	str	r3, [r4, #60]	; 0x3c
 8000a58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	9301      	str	r3, [sp, #4]
 8000a5e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C2_3_IRQn, 3, 0);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2103      	movs	r1, #3
 8000a64:	2018      	movs	r0, #24
 8000a66:	f000 fda3 	bl	80015b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_3_IRQn);
 8000a6a:	2018      	movs	r0, #24
 8000a6c:	f000 fdd0 	bl	8001610 <HAL_NVIC_EnableIRQ>
}
 8000a70:	e7cd      	b.n	8000a0e <HAL_I2C_MspInit+0x22>
      Error_Handler();
 8000a72:	f000 f807 	bl	8000a84 <Error_Handler>
 8000a76:	e7d3      	b.n	8000a20 <HAL_I2C_MspInit+0x34>
 8000a78:	40005800 	.word	0x40005800
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	50000400 	.word	0x50000400

08000a84 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a84:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <Error_Handler+0x2>

08000a88 <SystemClock_Config>:
{
 8000a88:	b500      	push	{lr}
 8000a8a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8c:	223c      	movs	r2, #60	; 0x3c
 8000a8e:	2100      	movs	r1, #0
 8000a90:	a805      	add	r0, sp, #20
 8000a92:	f005 fa42 	bl	8005f1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a96:	2210      	movs	r2, #16
 8000a98:	2100      	movs	r1, #0
 8000a9a:	a801      	add	r0, sp, #4
 8000a9c:	f005 fa3d 	bl	8005f1a <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aa0:	2080      	movs	r0, #128	; 0x80
 8000aa2:	0080      	lsls	r0, r0, #2
 8000aa4:	f001 ffc2 	bl	8002a2c <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_HSI48;
 8000aa8:	2321      	movs	r3, #33	; 0x21
 8000aaa:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aac:	2380      	movs	r3, #128	; 0x80
 8000aae:	025b      	lsls	r3, r3, #9
 8000ab0:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000ab2:	2380      	movs	r3, #128	; 0x80
 8000ab4:	03db      	lsls	r3, r3, #15
 8000ab6:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000abc:	3301      	adds	r3, #1
 8000abe:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000ac0:	330d      	adds	r3, #13
 8000ac2:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000ac4:	3310      	adds	r3, #16
 8000ac6:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ac8:	2380      	movs	r3, #128	; 0x80
 8000aca:	029b      	lsls	r3, r3, #10
 8000acc:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ace:	2380      	movs	r3, #128	; 0x80
 8000ad0:	049b      	lsls	r3, r3, #18
 8000ad2:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ad4:	2380      	movs	r3, #128	; 0x80
 8000ad6:	059b      	lsls	r3, r3, #22
 8000ad8:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ada:	a805      	add	r0, sp, #20
 8000adc:	f001 ffd0 	bl	8002a80 <HAL_RCC_OscConfig>
 8000ae0:	2800      	cmp	r0, #0
 8000ae2:	d10e      	bne.n	8000b02 <SystemClock_Config+0x7a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae4:	2307      	movs	r3, #7
 8000ae6:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae8:	3b05      	subs	r3, #5
 8000aea:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aec:	2300      	movs	r3, #0
 8000aee:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000af0:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000af2:	2102      	movs	r1, #2
 8000af4:	a801      	add	r0, sp, #4
 8000af6:	f002 faab 	bl	8003050 <HAL_RCC_ClockConfig>
 8000afa:	2800      	cmp	r0, #0
 8000afc:	d103      	bne.n	8000b06 <SystemClock_Config+0x7e>
}
 8000afe:	b015      	add	sp, #84	; 0x54
 8000b00:	bd00      	pop	{pc}
    Error_Handler();
 8000b02:	f7ff ffbf 	bl	8000a84 <Error_Handler>
    Error_Handler();
 8000b06:	f7ff ffbd 	bl	8000a84 <Error_Handler>

08000b0a <main>:
{
 8000b0a:	b510      	push	{r4, lr}
  HAL_Init();
 8000b0c:	f000 fd0c 	bl	8001528 <HAL_Init>
  SystemClock_Config();
 8000b10:	f7ff ffba 	bl	8000a88 <SystemClock_Config>
  MX_GPIO_Init();
 8000b14:	f7ff fea4 	bl	8000860 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b18:	f7ff fd80 	bl	800061c <MX_DMA_Init>
  MX_FDCAN1_Init();
 8000b1c:	f7ff fdae 	bl	800067c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000b20:	f7ff fdd2 	bl	80006c8 <MX_FDCAN2_Init>
  MX_I2C2_Init();
 8000b24:	f7ff ff32 	bl	800098c <MX_I2C2_Init>
  MX_SPI1_Init();
 8000b28:	f000 f818 	bl	8000b5c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000b2c:	f000 fa3c 	bl	8000fa8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000b30:	f000 fa72 	bl	8001018 <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 8000b34:	f000 faa8 	bl	8001088 <MX_USART5_UART_Init>
  MX_USART6_UART_Init();
 8000b38:	f000 fac4 	bl	80010c4 <MX_USART6_UART_Init>
  MX_USB_Device_Init();
 8000b3c:	f005 f866 	bl	8005c0c <MX_USB_Device_Init>
  MX_TIM14_Init();
 8000b40:	f000 f928 	bl	8000d94 <MX_TIM14_Init>
  MX_TIM15_Init();
 8000b44:	f000 f940 	bl	8000dc8 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000b48:	f000 f97e 	bl	8000e48 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000b4c:	f000 f998 	bl	8000e80 <MX_TIM17_Init>
  PROCESS_Init();
 8000b50:	f005 f9e1 	bl	8005f16 <PROCESS_Init>
	  PROCESS_Main();
 8000b54:	f005 f9e0 	bl	8005f18 <PROCESS_Main>
  while (1)
 8000b58:	e7fc      	b.n	8000b54 <main+0x4a>
	...

08000b5c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b5c:	b510      	push	{r4, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000b5e:	4811      	ldr	r0, [pc, #68]	; (8000ba4 <MX_SPI1_Init+0x48>)
 8000b60:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <MX_SPI1_Init+0x4c>)
 8000b62:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b64:	2382      	movs	r3, #130	; 0x82
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b6e:	22e0      	movs	r2, #224	; 0xe0
 8000b70:	00d2      	lsls	r2, r2, #3
 8000b72:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b74:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b76:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b78:	2280      	movs	r2, #128	; 0x80
 8000b7a:	0092      	lsls	r2, r2, #2
 8000b7c:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b7e:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b80:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b82:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b84:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b86:	3afa      	subs	r2, #250	; 0xfa
 8000b88:	3aff      	subs	r2, #255	; 0xff
 8000b8a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b8c:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b8e:	3308      	adds	r3, #8
 8000b90:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b92:	f002 fcbb 	bl	800350c <HAL_SPI_Init>
 8000b96:	2800      	cmp	r0, #0
 8000b98:	d100      	bne.n	8000b9c <MX_SPI1_Init+0x40>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b9a:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000b9c:	f7ff ff72 	bl	8000a84 <Error_Handler>
}
 8000ba0:	e7fb      	b.n	8000b9a <MX_SPI1_Init+0x3e>
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	2000021c 	.word	0x2000021c
 8000ba8:	40013000 	.word	0x40013000

08000bac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000bac:	b510      	push	{r4, lr}
 8000bae:	b088      	sub	sp, #32
 8000bb0:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb2:	2214      	movs	r2, #20
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	a803      	add	r0, sp, #12
 8000bb8:	f005 f9af 	bl	8005f1a <memset>
  if(spiHandle->Instance==SPI1)
 8000bbc:	6822      	ldr	r2, [r4, #0]
 8000bbe:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <HAL_SPI_MspInit+0x64>)
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d001      	beq.n	8000bc8 <HAL_SPI_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000bc4:	b008      	add	sp, #32
 8000bc6:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <HAL_SPI_MspInit+0x68>)
 8000bca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bcc:	2180      	movs	r1, #128	; 0x80
 8000bce:	0149      	lsls	r1, r1, #5
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	641a      	str	r2, [r3, #64]	; 0x40
 8000bd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bd6:	400a      	ands	r2, r1
 8000bd8:	9201      	str	r2, [sp, #4]
 8000bda:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bdc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000bde:	2201      	movs	r2, #1
 8000be0:	4311      	orrs	r1, r2
 8000be2:	6359      	str	r1, [r3, #52]	; 0x34
 8000be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000be6:	401a      	ands	r2, r3
 8000be8:	9202      	str	r2, [sp, #8]
 8000bea:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000bec:	23e0      	movs	r3, #224	; 0xe0
 8000bee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	3bde      	subs	r3, #222	; 0xde
 8000bf2:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf4:	20a0      	movs	r0, #160	; 0xa0
 8000bf6:	a903      	add	r1, sp, #12
 8000bf8:	05c0      	lsls	r0, r0, #23
 8000bfa:	f001 f8d1 	bl	8001da0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2103      	movs	r1, #3
 8000c02:	2019      	movs	r0, #25
 8000c04:	f000 fcd4 	bl	80015b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000c08:	2019      	movs	r0, #25
 8000c0a:	f000 fd01 	bl	8001610 <HAL_NVIC_EnableIRQ>
}
 8000c0e:	e7d9      	b.n	8000bc4 <HAL_SPI_MspInit+0x18>
 8000c10:	40013000 	.word	0x40013000
 8000c14:	40021000 	.word	0x40021000

08000c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c18:	b500      	push	{lr}
 8000c1a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1c:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <HAL_MspInit+0x34>)
 8000c1e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000c20:	2201      	movs	r2, #1
 8000c22:	4311      	orrs	r1, r2
 8000c24:	6419      	str	r1, [r3, #64]	; 0x40
 8000c26:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000c28:	400a      	ands	r2, r1
 8000c2a:	9200      	str	r2, [sp, #0]
 8000c2c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c30:	2180      	movs	r1, #128	; 0x80
 8000c32:	0549      	lsls	r1, r1, #21
 8000c34:	430a      	orrs	r2, r1
 8000c36:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c3a:	400b      	ands	r3, r1
 8000c3c:	9301      	str	r3, [sp, #4]
 8000c3e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000c40:	20c0      	movs	r0, #192	; 0xc0
 8000c42:	00c0      	lsls	r0, r0, #3
 8000c44:	f000 fca8 	bl	8001598 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c48:	b003      	add	sp, #12
 8000c4a:	bd00      	pop	{pc}
 8000c4c:	40021000 	.word	0x40021000

08000c50 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c50:	e7fe      	b.n	8000c50 <NMI_Handler>

08000c52 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <HardFault_Handler>

08000c54 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c54:	4770      	bx	lr

08000c56 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c56:	4770      	bx	lr

08000c58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c58:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c5a:	f000 fc79 	bl	8001550 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c5e:	bd10      	pop	{r4, pc}

08000c60 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c60:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000c62:	4802      	ldr	r0, [pc, #8]	; (8000c6c <DMA1_Channel1_IRQHandler+0xc>)
 8000c64:	f000 fe28 	bl	80018b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c68:	bd10      	pop	{r4, pc}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	200003b0 	.word	0x200003b0

08000c70 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000c70:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000c72:	4803      	ldr	r0, [pc, #12]	; (8000c80 <DMA1_Channel2_3_IRQHandler+0x10>)
 8000c74:	f000 fe20 	bl	80018b8 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000c78:	4802      	ldr	r0, [pc, #8]	; (8000c84 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000c7a:	f000 fe1d 	bl	80018b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000c7e:	bd10      	pop	{r4, pc}
 8000c80:	20000410 	.word	0x20000410
 8000c84:	20000470 	.word	0x20000470

08000c88 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 Ch4 to Ch7, DMA2 Ch1 to Ch5 and DMAMUX1 Overrun Interrupts.
  */
void DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler(void)
{
 8000c88:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000c8a:	4808      	ldr	r0, [pc, #32]	; (8000cac <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x24>)
 8000c8c:	f000 fe14 	bl	80018b8 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart5_rx);
 8000c90:	4807      	ldr	r0, [pc, #28]	; (8000cb0 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x28>)
 8000c92:	f000 fe11 	bl	80018b8 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart5_tx);
 8000c96:	4807      	ldr	r0, [pc, #28]	; (8000cb4 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x2c>)
 8000c98:	f000 fe0e 	bl	80018b8 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8000c9c:	4806      	ldr	r0, [pc, #24]	; (8000cb8 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x30>)
 8000c9e:	f000 fe0b 	bl	80018b8 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8000ca2:	4806      	ldr	r0, [pc, #24]	; (8000cbc <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x34>)
 8000ca4:	f000 fe08 	bl	80018b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 1 */
}
 8000ca8:	bd10      	pop	{r4, pc}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	200004d0 	.word	0x200004d0
 8000cb0:	20000530 	.word	0x20000530
 8000cb4:	20000590 	.word	0x20000590
 8000cb8:	200005f0 	.word	0x200005f0
 8000cbc:	20000650 	.word	0x20000650

08000cc0 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000cc0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000cc2:	4802      	ldr	r0, [pc, #8]	; (8000ccc <TIM14_IRQHandler+0xc>)
 8000cc4:	f002 fd6c 	bl	80037a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000cc8:	bd10      	pop	{r4, pc}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	20000280 	.word	0x20000280

08000cd0 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8000cd0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8000cd2:	4802      	ldr	r0, [pc, #8]	; (8000cdc <TIM15_IRQHandler+0xc>)
 8000cd4:	f002 fd64 	bl	80037a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8000cd8:	bd10      	pop	{r4, pc}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	200002cc 	.word	0x200002cc

08000ce0 <TIM16_FDCAN_IT0_IRQHandler>:

/**
  * @brief This function handles TIM16, FDCAN1_IT0 and FDCAN2_IT0 Interrupt.
  */
void TIM16_FDCAN_IT0_IRQHandler(void)
{
 8000ce0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 0 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <TIM16_FDCAN_IT0_IRQHandler+0x18>)
 8000ce4:	f002 fd5c 	bl	80037a0 <HAL_TIM_IRQHandler>
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000ce8:	4804      	ldr	r0, [pc, #16]	; (8000cfc <TIM16_FDCAN_IT0_IRQHandler+0x1c>)
 8000cea:	f000 ff94 	bl	8001c16 <HAL_FDCAN_IRQHandler>
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8000cee:	4804      	ldr	r0, [pc, #16]	; (8000d00 <TIM16_FDCAN_IT0_IRQHandler+0x20>)
 8000cf0:	f000 ff91 	bl	8001c16 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 1 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 1 */
}
 8000cf4:	bd10      	pop	{r4, pc}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	20000318 	.word	0x20000318
 8000cfc:	20000100 	.word	0x20000100
 8000d00:	20000164 	.word	0x20000164

08000d04 <TIM17_FDCAN_IT1_IRQHandler>:

/**
  * @brief This function handles TIM17, FDCAN1_IT1 and FDCAN2_IT1 Interrupt.
  */
void TIM17_FDCAN_IT1_IRQHandler(void)
{
 8000d04:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM17_FDCAN_IT1_IRQn 0 */

  /* USER CODE END TIM17_FDCAN_IT1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000d06:	4805      	ldr	r0, [pc, #20]	; (8000d1c <TIM17_FDCAN_IT1_IRQHandler+0x18>)
 8000d08:	f002 fd4a 	bl	80037a0 <HAL_TIM_IRQHandler>
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000d0c:	4804      	ldr	r0, [pc, #16]	; (8000d20 <TIM17_FDCAN_IT1_IRQHandler+0x1c>)
 8000d0e:	f000 ff82 	bl	8001c16 <HAL_FDCAN_IRQHandler>
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8000d12:	4804      	ldr	r0, [pc, #16]	; (8000d24 <TIM17_FDCAN_IT1_IRQHandler+0x20>)
 8000d14:	f000 ff7f 	bl	8001c16 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN TIM17_FDCAN_IT1_IRQn 1 */

  /* USER CODE END TIM17_FDCAN_IT1_IRQn 1 */
}
 8000d18:	bd10      	pop	{r4, pc}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	20000364 	.word	0x20000364
 8000d20:	20000100 	.word	0x20000100
 8000d24:	20000164 	.word	0x20000164

08000d28 <I2C2_3_IRQHandler>:

/**
  * @brief This function handles I2C2, I2C3 Interrupt (combined with EXTI 24 and EXTI 22).
  */
void I2C2_3_IRQHandler(void)
{
 8000d28:	b510      	push	{r4, lr}
  /* USER CODE BEGIN I2C2_3_IRQn 0 */

  /* USER CODE END I2C2_3_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8000d2a:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <I2C2_3_IRQHandler+0x20>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	699a      	ldr	r2, [r3, #24]
 8000d30:	23e0      	movs	r3, #224	; 0xe0
 8000d32:	00db      	lsls	r3, r3, #3
 8000d34:	421a      	tst	r2, r3
 8000d36:	d003      	beq.n	8000d40 <I2C2_3_IRQHandler+0x18>
    HAL_I2C_ER_IRQHandler(&hi2c2);
 8000d38:	4803      	ldr	r0, [pc, #12]	; (8000d48 <I2C2_3_IRQHandler+0x20>)
 8000d3a:	f001 fc73 	bl	8002624 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_3_IRQn 1 */

  /* USER CODE END I2C2_3_IRQn 1 */
}
 8000d3e:	bd10      	pop	{r4, pc}
    HAL_I2C_EV_IRQHandler(&hi2c2);
 8000d40:	4801      	ldr	r0, [pc, #4]	; (8000d48 <I2C2_3_IRQHandler+0x20>)
 8000d42:	f001 f99f 	bl	8002084 <HAL_I2C_EV_IRQHandler>
}
 8000d46:	e7fa      	b.n	8000d3e <I2C2_3_IRQHandler+0x16>
 8000d48:	200001c8 	.word	0x200001c8

08000d4c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1/I2S1 Interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000d4c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000d4e:	4802      	ldr	r0, [pc, #8]	; (8000d58 <SPI1_IRQHandler+0xc>)
 8000d50:	f002 fc60 	bl	8003614 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000d54:	bd10      	pop	{r4, pc}
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	2000021c 	.word	0x2000021c

08000d5c <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 + LPUART2 Interrupt.
  */
void USART2_LPUART2_IRQHandler(void)
{
 8000d5c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d5e:	4802      	ldr	r0, [pc, #8]	; (8000d68 <USART2_LPUART2_IRQHandler+0xc>)
 8000d60:	f002 ff92 	bl	8003c88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 8000d64:	bd10      	pop	{r4, pc}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	200006b0 	.word	0x200006b0

08000d6c <USART3_4_5_6_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4, USART5, USART6, LPUART1 globlal Interrupts (combined with EXTI 28).
  */
void USART3_4_5_6_LPUART1_IRQHandler(void)
{
 8000d6c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_5_6_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <USART3_4_5_6_LPUART1_IRQHandler+0x18>)
 8000d70:	f002 ff8a 	bl	8003c88 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart5);
 8000d74:	4804      	ldr	r0, [pc, #16]	; (8000d88 <USART3_4_5_6_LPUART1_IRQHandler+0x1c>)
 8000d76:	f002 ff87 	bl	8003c88 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart6);
 8000d7a:	4804      	ldr	r0, [pc, #16]	; (8000d8c <USART3_4_5_6_LPUART1_IRQHandler+0x20>)
 8000d7c:	f002 ff84 	bl	8003c88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_5_6_LPUART1_IRQn 1 */
}
 8000d80:	bd10      	pop	{r4, pc}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	20000744 	.word	0x20000744
 8000d88:	200007d8 	.word	0x200007d8
 8000d8c:	2000086c 	.word	0x2000086c

08000d90 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d90:	4770      	bx	lr
	...

08000d94 <MX_TIM14_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8000d94:	b510      	push	{r4, lr}
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000d96:	4809      	ldr	r0, [pc, #36]	; (8000dbc <MX_TIM14_Init+0x28>)
 8000d98:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <MX_TIM14_Init+0x2c>)
 8000d9a:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 6399;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <MX_TIM14_Init+0x30>)
 8000d9e:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da0:	2300      	movs	r3, #0
 8000da2:	6083      	str	r3, [r0, #8]
  htim14.Init.Period = 100;
 8000da4:	2264      	movs	r2, #100	; 0x64
 8000da6:	60c2      	str	r2, [r0, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da8:	6103      	str	r3, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000daa:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000dac:	f002 fe0e 	bl	80039cc <HAL_TIM_Base_Init>
 8000db0:	2800      	cmp	r0, #0
 8000db2:	d100      	bne.n	8000db6 <MX_TIM14_Init+0x22>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000db4:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000db6:	f7ff fe65 	bl	8000a84 <Error_Handler>
}
 8000dba:	e7fb      	b.n	8000db4 <MX_TIM14_Init+0x20>
 8000dbc:	20000280 	.word	0x20000280
 8000dc0:	40002000 	.word	0x40002000
 8000dc4:	000018ff 	.word	0x000018ff

08000dc8 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8000dc8:	b500      	push	{lr}
 8000dca:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dcc:	2210      	movs	r2, #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	a804      	add	r0, sp, #16
 8000dd2:	f005 f8a2 	bl	8005f1a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	2100      	movs	r1, #0
 8000dda:	a801      	add	r0, sp, #4
 8000ddc:	f005 f89d 	bl	8005f1a <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000de0:	4816      	ldr	r0, [pc, #88]	; (8000e3c <MX_TIM15_Init+0x74>)
 8000de2:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <MX_TIM15_Init+0x78>)
 8000de4:	6003      	str	r3, [r0, #0]
  htim15.Init.Prescaler = 6399;
 8000de6:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <MX_TIM15_Init+0x7c>)
 8000de8:	6043      	str	r3, [r0, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dea:	2300      	movs	r3, #0
 8000dec:	6083      	str	r3, [r0, #8]
  htim15.Init.Period = 200;
 8000dee:	22c8      	movs	r2, #200	; 0xc8
 8000df0:	60c2      	str	r2, [r0, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df2:	6103      	str	r3, [r0, #16]
  htim15.Init.RepetitionCounter = 0;
 8000df4:	6143      	str	r3, [r0, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000df8:	f002 fde8 	bl	80039cc <HAL_TIM_Base_Init>
 8000dfc:	2800      	cmp	r0, #0
 8000dfe:	d113      	bne.n	8000e28 <MX_TIM15_Init+0x60>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e00:	2380      	movs	r3, #128	; 0x80
 8000e02:	015b      	lsls	r3, r3, #5
 8000e04:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000e06:	480d      	ldr	r0, [pc, #52]	; (8000e3c <MX_TIM15_Init+0x74>)
 8000e08:	a904      	add	r1, sp, #16
 8000e0a:	f002 fe1b 	bl	8003a44 <HAL_TIM_ConfigClockSource>
 8000e0e:	2800      	cmp	r0, #0
 8000e10:	d10d      	bne.n	8000e2e <MX_TIM15_Init+0x66>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e12:	2300      	movs	r3, #0
 8000e14:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e16:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000e18:	4808      	ldr	r0, [pc, #32]	; (8000e3c <MX_TIM15_Init+0x74>)
 8000e1a:	a901      	add	r1, sp, #4
 8000e1c:	f002 fe96 	bl	8003b4c <HAL_TIMEx_MasterConfigSynchronization>
 8000e20:	2800      	cmp	r0, #0
 8000e22:	d107      	bne.n	8000e34 <MX_TIM15_Init+0x6c>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000e24:	b009      	add	sp, #36	; 0x24
 8000e26:	bd00      	pop	{pc}
    Error_Handler();
 8000e28:	f7ff fe2c 	bl	8000a84 <Error_Handler>
 8000e2c:	e7e8      	b.n	8000e00 <MX_TIM15_Init+0x38>
    Error_Handler();
 8000e2e:	f7ff fe29 	bl	8000a84 <Error_Handler>
 8000e32:	e7ee      	b.n	8000e12 <MX_TIM15_Init+0x4a>
    Error_Handler();
 8000e34:	f7ff fe26 	bl	8000a84 <Error_Handler>
}
 8000e38:	e7f4      	b.n	8000e24 <MX_TIM15_Init+0x5c>
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	200002cc 	.word	0x200002cc
 8000e40:	40014000 	.word	0x40014000
 8000e44:	000018ff 	.word	0x000018ff

08000e48 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000e48:	b510      	push	{r4, lr}
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000e4a:	480a      	ldr	r0, [pc, #40]	; (8000e74 <MX_TIM16_Init+0x2c>)
 8000e4c:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <MX_TIM16_Init+0x30>)
 8000e4e:	6003      	str	r3, [r0, #0]
  htim16.Init.Prescaler = 6399;
 8000e50:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <MX_TIM16_Init+0x34>)
 8000e52:	6043      	str	r3, [r0, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e54:	2300      	movs	r3, #0
 8000e56:	6083      	str	r3, [r0, #8]
  htim16.Init.Period = 500;
 8000e58:	22fa      	movs	r2, #250	; 0xfa
 8000e5a:	0052      	lsls	r2, r2, #1
 8000e5c:	60c2      	str	r2, [r0, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e5e:	6103      	str	r3, [r0, #16]
  htim16.Init.RepetitionCounter = 0;
 8000e60:	6143      	str	r3, [r0, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e62:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000e64:	f002 fdb2 	bl	80039cc <HAL_TIM_Base_Init>
 8000e68:	2800      	cmp	r0, #0
 8000e6a:	d100      	bne.n	8000e6e <MX_TIM16_Init+0x26>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000e6c:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000e6e:	f7ff fe09 	bl	8000a84 <Error_Handler>
}
 8000e72:	e7fb      	b.n	8000e6c <MX_TIM16_Init+0x24>
 8000e74:	20000318 	.word	0x20000318
 8000e78:	40014400 	.word	0x40014400
 8000e7c:	000018ff 	.word	0x000018ff

08000e80 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8000e80:	b510      	push	{r4, lr}
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000e82:	480a      	ldr	r0, [pc, #40]	; (8000eac <MX_TIM17_Init+0x2c>)
 8000e84:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <MX_TIM17_Init+0x30>)
 8000e86:	6003      	str	r3, [r0, #0]
  htim17.Init.Prescaler = 6399;
 8000e88:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <MX_TIM17_Init+0x34>)
 8000e8a:	6043      	str	r3, [r0, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	6083      	str	r3, [r0, #8]
  htim17.Init.Period = 1000;
 8000e90:	22fa      	movs	r2, #250	; 0xfa
 8000e92:	0092      	lsls	r2, r2, #2
 8000e94:	60c2      	str	r2, [r0, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e96:	6103      	str	r3, [r0, #16]
  htim17.Init.RepetitionCounter = 0;
 8000e98:	6143      	str	r3, [r0, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e9a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000e9c:	f002 fd96 	bl	80039cc <HAL_TIM_Base_Init>
 8000ea0:	2800      	cmp	r0, #0
 8000ea2:	d100      	bne.n	8000ea6 <MX_TIM17_Init+0x26>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000ea4:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000ea6:	f7ff fded 	bl	8000a84 <Error_Handler>
}
 8000eaa:	e7fb      	b.n	8000ea4 <MX_TIM17_Init+0x24>
 8000eac:	20000364 	.word	0x20000364
 8000eb0:	40014800 	.word	0x40014800
 8000eb4:	000018ff 	.word	0x000018ff

08000eb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000eb8:	b510      	push	{r4, lr}
 8000eba:	b098      	sub	sp, #96	; 0x60
 8000ebc:	0004      	movs	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ebe:	224c      	movs	r2, #76	; 0x4c
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	a805      	add	r0, sp, #20
 8000ec4:	f005 f829 	bl	8005f1a <memset>
  if(tim_baseHandle->Instance==TIM14)
 8000ec8:	6823      	ldr	r3, [r4, #0]
 8000eca:	4a32      	ldr	r2, [pc, #200]	; (8000f94 <HAL_TIM_Base_MspInit+0xdc>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d00a      	beq.n	8000ee6 <HAL_TIM_Base_MspInit+0x2e>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM15)
 8000ed0:	4a31      	ldr	r2, [pc, #196]	; (8000f98 <HAL_TIM_Base_MspInit+0xe0>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d01a      	beq.n	8000f0c <HAL_TIM_Base_MspInit+0x54>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM16)
 8000ed6:	4a31      	ldr	r2, [pc, #196]	; (8000f9c <HAL_TIM_Base_MspInit+0xe4>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d035      	beq.n	8000f48 <HAL_TIM_Base_MspInit+0x90>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM17)
 8000edc:	4a30      	ldr	r2, [pc, #192]	; (8000fa0 <HAL_TIM_Base_MspInit+0xe8>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d045      	beq.n	8000f6e <HAL_TIM_Base_MspInit+0xb6>
    HAL_NVIC_EnableIRQ(TIM17_FDCAN_IT1_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8000ee2:	b018      	add	sp, #96	; 0x60
 8000ee4:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000ee6:	4b2f      	ldr	r3, [pc, #188]	; (8000fa4 <HAL_TIM_Base_MspInit+0xec>)
 8000ee8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eea:	2180      	movs	r1, #128	; 0x80
 8000eec:	0209      	lsls	r1, r1, #8
 8000eee:	430a      	orrs	r2, r1
 8000ef0:	641a      	str	r2, [r3, #64]	; 0x40
 8000ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef4:	400b      	ands	r3, r1
 8000ef6:	9301      	str	r3, [sp, #4]
 8000ef8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM14_IRQn, 3, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2103      	movs	r1, #3
 8000efe:	2013      	movs	r0, #19
 8000f00:	f000 fb56 	bl	80015b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000f04:	2013      	movs	r0, #19
 8000f06:	f000 fb83 	bl	8001610 <HAL_NVIC_EnableIRQ>
 8000f0a:	e7ea      	b.n	8000ee2 <HAL_TIM_Base_MspInit+0x2a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM15;
 8000f0c:	2380      	movs	r3, #128	; 0x80
 8000f0e:	03db      	lsls	r3, r3, #15
 8000f10:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f12:	a805      	add	r0, sp, #20
 8000f14:	f002 f97c 	bl	8003210 <HAL_RCCEx_PeriphCLKConfig>
 8000f18:	2800      	cmp	r0, #0
 8000f1a:	d112      	bne.n	8000f42 <HAL_TIM_Base_MspInit+0x8a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000f1c:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <HAL_TIM_Base_MspInit+0xec>)
 8000f1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f20:	2180      	movs	r1, #128	; 0x80
 8000f22:	0249      	lsls	r1, r1, #9
 8000f24:	430a      	orrs	r2, r1
 8000f26:	641a      	str	r2, [r3, #64]	; 0x40
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	400b      	ands	r3, r1
 8000f2c:	9302      	str	r3, [sp, #8]
 8000f2e:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 3, 0);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2103      	movs	r1, #3
 8000f34:	2014      	movs	r0, #20
 8000f36:	f000 fb3b 	bl	80015b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8000f3a:	2014      	movs	r0, #20
 8000f3c:	f000 fb68 	bl	8001610 <HAL_NVIC_EnableIRQ>
 8000f40:	e7cf      	b.n	8000ee2 <HAL_TIM_Base_MspInit+0x2a>
      Error_Handler();
 8000f42:	f7ff fd9f 	bl	8000a84 <Error_Handler>
 8000f46:	e7e9      	b.n	8000f1c <HAL_TIM_Base_MspInit+0x64>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000f48:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <HAL_TIM_Base_MspInit+0xec>)
 8000f4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f4c:	2180      	movs	r1, #128	; 0x80
 8000f4e:	0289      	lsls	r1, r1, #10
 8000f50:	430a      	orrs	r2, r1
 8000f52:	641a      	str	r2, [r3, #64]	; 0x40
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	400b      	ands	r3, r1
 8000f58:	9303      	str	r3, [sp, #12]
 8000f5a:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM16_FDCAN_IT0_IRQn, 1, 0);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2101      	movs	r1, #1
 8000f60:	2015      	movs	r0, #21
 8000f62:	f000 fb25 	bl	80015b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
 8000f66:	2015      	movs	r0, #21
 8000f68:	f000 fb52 	bl	8001610 <HAL_NVIC_EnableIRQ>
 8000f6c:	e7b9      	b.n	8000ee2 <HAL_TIM_Base_MspInit+0x2a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <HAL_TIM_Base_MspInit+0xec>)
 8000f70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f72:	2180      	movs	r1, #128	; 0x80
 8000f74:	02c9      	lsls	r1, r1, #11
 8000f76:	430a      	orrs	r2, r1
 8000f78:	641a      	str	r2, [r3, #64]	; 0x40
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	400b      	ands	r3, r1
 8000f7e:	9304      	str	r3, [sp, #16]
 8000f80:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM17_FDCAN_IT1_IRQn, 1, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2101      	movs	r1, #1
 8000f86:	2016      	movs	r0, #22
 8000f88:	f000 fb12 	bl	80015b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_FDCAN_IT1_IRQn);
 8000f8c:	2016      	movs	r0, #22
 8000f8e:	f000 fb3f 	bl	8001610 <HAL_NVIC_EnableIRQ>
}
 8000f92:	e7a6      	b.n	8000ee2 <HAL_TIM_Base_MspInit+0x2a>
 8000f94:	40002000 	.word	0x40002000
 8000f98:	40014000 	.word	0x40014000
 8000f9c:	40014400 	.word	0x40014400
 8000fa0:	40014800 	.word	0x40014800
 8000fa4:	40021000 	.word	0x40021000

08000fa8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000fa8:	b510      	push	{r4, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000faa:	4819      	ldr	r0, [pc, #100]	; (8001010 <MX_USART2_UART_Init+0x68>)
 8000fac:	4b19      	ldr	r3, [pc, #100]	; (8001014 <MX_USART2_UART_Init+0x6c>)
 8000fae:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 8000fb0:	2396      	movs	r3, #150	; 0x96
 8000fb2:	019b      	lsls	r3, r3, #6
 8000fb4:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fba:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fbc:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fbe:	220c      	movs	r2, #12
 8000fc0:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fc2:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc4:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fc6:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fc8:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fca:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fcc:	f003 fae0 	bl	8004590 <HAL_UART_Init>
 8000fd0:	2800      	cmp	r0, #0
 8000fd2:	d111      	bne.n	8000ff8 <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fd4:	480e      	ldr	r0, [pc, #56]	; (8001010 <MX_USART2_UART_Init+0x68>)
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	f003 fb5e 	bl	8004698 <HAL_UARTEx_SetTxFifoThreshold>
 8000fdc:	2800      	cmp	r0, #0
 8000fde:	d10e      	bne.n	8000ffe <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fe0:	480b      	ldr	r0, [pc, #44]	; (8001010 <MX_USART2_UART_Init+0x68>)
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	f003 fb7e 	bl	80046e4 <HAL_UARTEx_SetRxFifoThreshold>
 8000fe8:	2800      	cmp	r0, #0
 8000fea:	d10b      	bne.n	8001004 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000fec:	4808      	ldr	r0, [pc, #32]	; (8001010 <MX_USART2_UART_Init+0x68>)
 8000fee:	f003 fb33 	bl	8004658 <HAL_UARTEx_DisableFifoMode>
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	d109      	bne.n	800100a <MX_USART2_UART_Init+0x62>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ff6:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000ff8:	f7ff fd44 	bl	8000a84 <Error_Handler>
 8000ffc:	e7ea      	b.n	8000fd4 <MX_USART2_UART_Init+0x2c>
    Error_Handler();
 8000ffe:	f7ff fd41 	bl	8000a84 <Error_Handler>
 8001002:	e7ed      	b.n	8000fe0 <MX_USART2_UART_Init+0x38>
    Error_Handler();
 8001004:	f7ff fd3e 	bl	8000a84 <Error_Handler>
 8001008:	e7f0      	b.n	8000fec <MX_USART2_UART_Init+0x44>
    Error_Handler();
 800100a:	f7ff fd3b 	bl	8000a84 <Error_Handler>
}
 800100e:	e7f2      	b.n	8000ff6 <MX_USART2_UART_Init+0x4e>
 8001010:	200006b0 	.word	0x200006b0
 8001014:	40004400 	.word	0x40004400

08001018 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001018:	b510      	push	{r4, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800101a:	4819      	ldr	r0, [pc, #100]	; (8001080 <MX_USART3_UART_Init+0x68>)
 800101c:	4b19      	ldr	r3, [pc, #100]	; (8001084 <MX_USART3_UART_Init+0x6c>)
 800101e:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 9600;
 8001020:	2396      	movs	r3, #150	; 0x96
 8001022:	019b      	lsls	r3, r3, #6
 8001024:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001026:	2300      	movs	r3, #0
 8001028:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800102a:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800102c:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800102e:	220c      	movs	r2, #12
 8001030:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001032:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001034:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001036:	6203      	str	r3, [r0, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001038:	6243      	str	r3, [r0, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800103a:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800103c:	f003 faa8 	bl	8004590 <HAL_UART_Init>
 8001040:	2800      	cmp	r0, #0
 8001042:	d111      	bne.n	8001068 <MX_USART3_UART_Init+0x50>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001044:	480e      	ldr	r0, [pc, #56]	; (8001080 <MX_USART3_UART_Init+0x68>)
 8001046:	2100      	movs	r1, #0
 8001048:	f003 fb26 	bl	8004698 <HAL_UARTEx_SetTxFifoThreshold>
 800104c:	2800      	cmp	r0, #0
 800104e:	d10e      	bne.n	800106e <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001050:	480b      	ldr	r0, [pc, #44]	; (8001080 <MX_USART3_UART_Init+0x68>)
 8001052:	2100      	movs	r1, #0
 8001054:	f003 fb46 	bl	80046e4 <HAL_UARTEx_SetRxFifoThreshold>
 8001058:	2800      	cmp	r0, #0
 800105a:	d10b      	bne.n	8001074 <MX_USART3_UART_Init+0x5c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800105c:	4808      	ldr	r0, [pc, #32]	; (8001080 <MX_USART3_UART_Init+0x68>)
 800105e:	f003 fafb 	bl	8004658 <HAL_UARTEx_DisableFifoMode>
 8001062:	2800      	cmp	r0, #0
 8001064:	d109      	bne.n	800107a <MX_USART3_UART_Init+0x62>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001066:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001068:	f7ff fd0c 	bl	8000a84 <Error_Handler>
 800106c:	e7ea      	b.n	8001044 <MX_USART3_UART_Init+0x2c>
    Error_Handler();
 800106e:	f7ff fd09 	bl	8000a84 <Error_Handler>
 8001072:	e7ed      	b.n	8001050 <MX_USART3_UART_Init+0x38>
    Error_Handler();
 8001074:	f7ff fd06 	bl	8000a84 <Error_Handler>
 8001078:	e7f0      	b.n	800105c <MX_USART3_UART_Init+0x44>
    Error_Handler();
 800107a:	f7ff fd03 	bl	8000a84 <Error_Handler>
}
 800107e:	e7f2      	b.n	8001066 <MX_USART3_UART_Init+0x4e>
 8001080:	20000744 	.word	0x20000744
 8001084:	40004800 	.word	0x40004800

08001088 <MX_USART5_UART_Init>:
/* USART5 init function */

void MX_USART5_UART_Init(void)
{
 8001088:	b510      	push	{r4, lr}
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 800108a:	480c      	ldr	r0, [pc, #48]	; (80010bc <MX_USART5_UART_Init+0x34>)
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <MX_USART5_UART_Init+0x38>)
 800108e:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = 9600;
 8001090:	2396      	movs	r3, #150	; 0x96
 8001092:	019b      	lsls	r3, r3, #6
 8001094:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001096:	2300      	movs	r3, #0
 8001098:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800109a:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800109c:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800109e:	220c      	movs	r2, #12
 80010a0:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a2:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a4:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010a6:	6203      	str	r3, [r0, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010a8:	6243      	str	r3, [r0, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010aa:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80010ac:	f003 fa70 	bl	8004590 <HAL_UART_Init>
 80010b0:	2800      	cmp	r0, #0
 80010b2:	d100      	bne.n	80010b6 <MX_USART5_UART_Init+0x2e>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 80010b4:	bd10      	pop	{r4, pc}
    Error_Handler();
 80010b6:	f7ff fce5 	bl	8000a84 <Error_Handler>
}
 80010ba:	e7fb      	b.n	80010b4 <MX_USART5_UART_Init+0x2c>
 80010bc:	200007d8 	.word	0x200007d8
 80010c0:	40005000 	.word	0x40005000

080010c4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80010c4:	b510      	push	{r4, lr}
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80010c6:	480c      	ldr	r0, [pc, #48]	; (80010f8 <MX_USART6_UART_Init+0x34>)
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <MX_USART6_UART_Init+0x38>)
 80010ca:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 9600;
 80010cc:	2396      	movs	r3, #150	; 0x96
 80010ce:	019b      	lsls	r3, r3, #6
 80010d0:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80010d2:	2300      	movs	r3, #0
 80010d4:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80010d6:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80010d8:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80010da:	220c      	movs	r2, #12
 80010dc:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010de:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e0:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010e2:	6203      	str	r3, [r0, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010e4:	6243      	str	r3, [r0, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010e6:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80010e8:	f003 fa52 	bl	8004590 <HAL_UART_Init>
 80010ec:	2800      	cmp	r0, #0
 80010ee:	d100      	bne.n	80010f2 <MX_USART6_UART_Init+0x2e>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80010f0:	bd10      	pop	{r4, pc}
    Error_Handler();
 80010f2:	f7ff fcc7 	bl	8000a84 <Error_Handler>
}
 80010f6:	e7fb      	b.n	80010f0 <MX_USART6_UART_Init+0x2c>
 80010f8:	2000086c 	.word	0x2000086c
 80010fc:	40013c00 	.word	0x40013c00

08001100 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001100:	b530      	push	{r4, r5, lr}
 8001102:	b0a1      	sub	sp, #132	; 0x84
 8001104:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001106:	2214      	movs	r2, #20
 8001108:	2100      	movs	r1, #0
 800110a:	a81b      	add	r0, sp, #108	; 0x6c
 800110c:	f004 ff05 	bl	8005f1a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001110:	224c      	movs	r2, #76	; 0x4c
 8001112:	2100      	movs	r1, #0
 8001114:	a808      	add	r0, sp, #32
 8001116:	f004 ff00 	bl	8005f1a <memset>
  if(uartHandle->Instance==USART2)
 800111a:	6823      	ldr	r3, [r4, #0]
 800111c:	4ac0      	ldr	r2, [pc, #768]	; (8001420 <HAL_UART_MspInit+0x320>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d00d      	beq.n	800113e <HAL_UART_MspInit+0x3e>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 8001122:	4ac0      	ldr	r2, [pc, #768]	; (8001424 <HAL_UART_MspInit+0x324>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d100      	bne.n	800112a <HAL_UART_MspInit+0x2a>
 8001128:	e06b      	b.n	8001202 <HAL_UART_MspInit+0x102>
    HAL_NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
  else if(uartHandle->Instance==USART5)
 800112a:	4abf      	ldr	r2, [pc, #764]	; (8001428 <HAL_UART_MspInit+0x328>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d100      	bne.n	8001132 <HAL_UART_MspInit+0x32>
 8001130:	e0c9      	b.n	80012c6 <HAL_UART_MspInit+0x1c6>
    HAL_NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }
  else if(uartHandle->Instance==USART6)
 8001132:	4abe      	ldr	r2, [pc, #760]	; (800142c <HAL_UART_MspInit+0x32c>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d100      	bne.n	800113a <HAL_UART_MspInit+0x3a>
 8001138:	e11b      	b.n	8001372 <HAL_UART_MspInit+0x272>
    HAL_NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800113a:	b021      	add	sp, #132	; 0x84
 800113c:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800113e:	2302      	movs	r3, #2
 8001140:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001142:	a808      	add	r0, sp, #32
 8001144:	f002 f864 	bl	8003210 <HAL_RCCEx_PeriphCLKConfig>
 8001148:	2800      	cmp	r0, #0
 800114a:	d151      	bne.n	80011f0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800114c:	4bb8      	ldr	r3, [pc, #736]	; (8001430 <HAL_UART_MspInit+0x330>)
 800114e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001150:	2180      	movs	r1, #128	; 0x80
 8001152:	0289      	lsls	r1, r1, #10
 8001154:	430a      	orrs	r2, r1
 8001156:	63da      	str	r2, [r3, #60]	; 0x3c
 8001158:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800115a:	400a      	ands	r2, r1
 800115c:	9200      	str	r2, [sp, #0]
 800115e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001160:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001162:	2201      	movs	r2, #1
 8001164:	4311      	orrs	r1, r2
 8001166:	6359      	str	r1, [r3, #52]	; 0x34
 8001168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800116a:	4013      	ands	r3, r2
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001170:	230c      	movs	r3, #12
 8001172:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	3b0a      	subs	r3, #10
 8001176:	931c      	str	r3, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2500      	movs	r5, #0
 800117a:	951d      	str	r5, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	951e      	str	r5, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800117e:	921f      	str	r2, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001180:	20a0      	movs	r0, #160	; 0xa0
 8001182:	a91b      	add	r1, sp, #108	; 0x6c
 8001184:	05c0      	lsls	r0, r0, #23
 8001186:	f000 fe0b 	bl	8001da0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 800118a:	48aa      	ldr	r0, [pc, #680]	; (8001434 <HAL_UART_MspInit+0x334>)
 800118c:	4baa      	ldr	r3, [pc, #680]	; (8001438 <HAL_UART_MspInit+0x338>)
 800118e:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001190:	2334      	movs	r3, #52	; 0x34
 8001192:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001194:	6085      	str	r5, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001196:	60c5      	str	r5, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001198:	334c      	adds	r3, #76	; 0x4c
 800119a:	6103      	str	r3, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800119c:	6145      	str	r5, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800119e:	6185      	str	r5, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80011a0:	61c5      	str	r5, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011a2:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80011a4:	f000 faa4 	bl	80016f0 <HAL_DMA_Init>
 80011a8:	2800      	cmp	r0, #0
 80011aa:	d124      	bne.n	80011f6 <HAL_UART_MspInit+0xf6>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80011ac:	2280      	movs	r2, #128	; 0x80
 80011ae:	4ba1      	ldr	r3, [pc, #644]	; (8001434 <HAL_UART_MspInit+0x334>)
 80011b0:	50a3      	str	r3, [r4, r2]
 80011b2:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel2;
 80011b4:	48a1      	ldr	r0, [pc, #644]	; (800143c <HAL_UART_MspInit+0x33c>)
 80011b6:	4ba2      	ldr	r3, [pc, #648]	; (8001440 <HAL_UART_MspInit+0x340>)
 80011b8:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80011ba:	2335      	movs	r3, #53	; 0x35
 80011bc:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011be:	3b25      	subs	r3, #37	; 0x25
 80011c0:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60c3      	str	r3, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011c6:	6102      	str	r2, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011c8:	6143      	str	r3, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011ca:	6183      	str	r3, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80011cc:	61c3      	str	r3, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011ce:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80011d0:	f000 fa8e 	bl	80016f0 <HAL_DMA_Init>
 80011d4:	2800      	cmp	r0, #0
 80011d6:	d111      	bne.n	80011fc <HAL_UART_MspInit+0xfc>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80011d8:	4b98      	ldr	r3, [pc, #608]	; (800143c <HAL_UART_MspInit+0x33c>)
 80011da:	67e3      	str	r3, [r4, #124]	; 0x7c
 80011dc:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 1, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2101      	movs	r1, #1
 80011e2:	201c      	movs	r0, #28
 80011e4:	f000 f9e4 	bl	80015b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 80011e8:	201c      	movs	r0, #28
 80011ea:	f000 fa11 	bl	8001610 <HAL_NVIC_EnableIRQ>
 80011ee:	e7a4      	b.n	800113a <HAL_UART_MspInit+0x3a>
      Error_Handler();
 80011f0:	f7ff fc48 	bl	8000a84 <Error_Handler>
 80011f4:	e7aa      	b.n	800114c <HAL_UART_MspInit+0x4c>
      Error_Handler();
 80011f6:	f7ff fc45 	bl	8000a84 <Error_Handler>
 80011fa:	e7d7      	b.n	80011ac <HAL_UART_MspInit+0xac>
      Error_Handler();
 80011fc:	f7ff fc42 	bl	8000a84 <Error_Handler>
 8001200:	e7ea      	b.n	80011d8 <HAL_UART_MspInit+0xd8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001202:	2304      	movs	r3, #4
 8001204:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001206:	a808      	add	r0, sp, #32
 8001208:	f002 f802 	bl	8003210 <HAL_RCCEx_PeriphCLKConfig>
 800120c:	2800      	cmp	r0, #0
 800120e:	d151      	bne.n	80012b4 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001210:	4b87      	ldr	r3, [pc, #540]	; (8001430 <HAL_UART_MspInit+0x330>)
 8001212:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001214:	2180      	movs	r1, #128	; 0x80
 8001216:	02c9      	lsls	r1, r1, #11
 8001218:	430a      	orrs	r2, r1
 800121a:	63da      	str	r2, [r3, #60]	; 0x3c
 800121c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800121e:	400a      	ands	r2, r1
 8001220:	9202      	str	r2, [sp, #8]
 8001222:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001224:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001226:	2202      	movs	r2, #2
 8001228:	4311      	orrs	r1, r2
 800122a:	6359      	str	r1, [r3, #52]	; 0x34
 800122c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800122e:	4013      	ands	r3, r2
 8001230:	9303      	str	r3, [sp, #12]
 8001232:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001234:	23c0      	movs	r3, #192	; 0xc0
 8001236:	011b      	lsls	r3, r3, #4
 8001238:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	921c      	str	r2, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2500      	movs	r5, #0
 800123e:	951d      	str	r5, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001240:	951e      	str	r5, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8001242:	2304      	movs	r3, #4
 8001244:	931f      	str	r3, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001246:	a91b      	add	r1, sp, #108	; 0x6c
 8001248:	487e      	ldr	r0, [pc, #504]	; (8001444 <HAL_UART_MspInit+0x344>)
 800124a:	f000 fda9 	bl	8001da0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800124e:	487e      	ldr	r0, [pc, #504]	; (8001448 <HAL_UART_MspInit+0x348>)
 8001250:	4b7e      	ldr	r3, [pc, #504]	; (800144c <HAL_UART_MspInit+0x34c>)
 8001252:	6003      	str	r3, [r0, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001254:	2336      	movs	r3, #54	; 0x36
 8001256:	6043      	str	r3, [r0, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001258:	6085      	str	r5, [r0, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800125a:	60c5      	str	r5, [r0, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800125c:	334a      	adds	r3, #74	; 0x4a
 800125e:	6103      	str	r3, [r0, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001260:	6145      	str	r5, [r0, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001262:	6185      	str	r5, [r0, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001264:	61c5      	str	r5, [r0, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001266:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001268:	f000 fa42 	bl	80016f0 <HAL_DMA_Init>
 800126c:	2800      	cmp	r0, #0
 800126e:	d124      	bne.n	80012ba <HAL_UART_MspInit+0x1ba>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001270:	2280      	movs	r2, #128	; 0x80
 8001272:	4b75      	ldr	r3, [pc, #468]	; (8001448 <HAL_UART_MspInit+0x348>)
 8001274:	50a3      	str	r3, [r4, r2]
 8001276:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_usart3_tx.Instance = DMA1_Channel4;
 8001278:	4875      	ldr	r0, [pc, #468]	; (8001450 <HAL_UART_MspInit+0x350>)
 800127a:	4b76      	ldr	r3, [pc, #472]	; (8001454 <HAL_UART_MspInit+0x354>)
 800127c:	6003      	str	r3, [r0, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800127e:	2337      	movs	r3, #55	; 0x37
 8001280:	6043      	str	r3, [r0, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001282:	3b27      	subs	r3, #39	; 0x27
 8001284:	6083      	str	r3, [r0, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001286:	2300      	movs	r3, #0
 8001288:	60c3      	str	r3, [r0, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800128a:	6102      	str	r2, [r0, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800128c:	6143      	str	r3, [r0, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800128e:	6183      	str	r3, [r0, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001290:	61c3      	str	r3, [r0, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001292:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001294:	f000 fa2c 	bl	80016f0 <HAL_DMA_Init>
 8001298:	2800      	cmp	r0, #0
 800129a:	d111      	bne.n	80012c0 <HAL_UART_MspInit+0x1c0>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800129c:	4b6c      	ldr	r3, [pc, #432]	; (8001450 <HAL_UART_MspInit+0x350>)
 800129e:	67e3      	str	r3, [r4, #124]	; 0x7c
 80012a0:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_4_5_6_LPUART1_IRQn, 1, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2101      	movs	r1, #1
 80012a6:	201d      	movs	r0, #29
 80012a8:	f000 f982 	bl	80015b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
 80012ac:	201d      	movs	r0, #29
 80012ae:	f000 f9af 	bl	8001610 <HAL_NVIC_EnableIRQ>
 80012b2:	e742      	b.n	800113a <HAL_UART_MspInit+0x3a>
      Error_Handler();
 80012b4:	f7ff fbe6 	bl	8000a84 <Error_Handler>
 80012b8:	e7aa      	b.n	8001210 <HAL_UART_MspInit+0x110>
      Error_Handler();
 80012ba:	f7ff fbe3 	bl	8000a84 <Error_Handler>
 80012be:	e7d7      	b.n	8001270 <HAL_UART_MspInit+0x170>
      Error_Handler();
 80012c0:	f7ff fbe0 	bl	8000a84 <Error_Handler>
 80012c4:	e7ea      	b.n	800129c <HAL_UART_MspInit+0x19c>
    __HAL_RCC_USART5_CLK_ENABLE();
 80012c6:	4b5a      	ldr	r3, [pc, #360]	; (8001430 <HAL_UART_MspInit+0x330>)
 80012c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012ca:	2180      	movs	r1, #128	; 0x80
 80012cc:	0049      	lsls	r1, r1, #1
 80012ce:	430a      	orrs	r2, r1
 80012d0:	63da      	str	r2, [r3, #60]	; 0x3c
 80012d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012d4:	400a      	ands	r2, r1
 80012d6:	9204      	str	r2, [sp, #16]
 80012d8:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012dc:	2208      	movs	r2, #8
 80012de:	4311      	orrs	r1, r2
 80012e0:	6359      	str	r1, [r3, #52]	; 0x34
 80012e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012e4:	401a      	ands	r2, r3
 80012e6:	9205      	str	r2, [sp, #20]
 80012e8:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012ea:	230c      	movs	r3, #12
 80012ec:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	3b0a      	subs	r3, #10
 80012f0:	931c      	str	r3, [sp, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 80012f2:	3301      	adds	r3, #1
 80012f4:	931f      	str	r3, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012f6:	a91b      	add	r1, sp, #108	; 0x6c
 80012f8:	4857      	ldr	r0, [pc, #348]	; (8001458 <HAL_UART_MspInit+0x358>)
 80012fa:	f000 fd51 	bl	8001da0 <HAL_GPIO_Init>
    hdma_usart5_rx.Instance = DMA1_Channel5;
 80012fe:	4857      	ldr	r0, [pc, #348]	; (800145c <HAL_UART_MspInit+0x35c>)
 8001300:	4b57      	ldr	r3, [pc, #348]	; (8001460 <HAL_UART_MspInit+0x360>)
 8001302:	6003      	str	r3, [r0, #0]
    hdma_usart5_rx.Init.Request = DMA_REQUEST_USART5_RX;
 8001304:	234a      	movs	r3, #74	; 0x4a
 8001306:	6043      	str	r3, [r0, #4]
    hdma_usart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001308:	2300      	movs	r3, #0
 800130a:	6083      	str	r3, [r0, #8]
    hdma_usart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800130c:	60c3      	str	r3, [r0, #12]
    hdma_usart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800130e:	2280      	movs	r2, #128	; 0x80
 8001310:	6102      	str	r2, [r0, #16]
    hdma_usart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001312:	6143      	str	r3, [r0, #20]
    hdma_usart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001314:	6183      	str	r3, [r0, #24]
    hdma_usart5_rx.Init.Mode = DMA_NORMAL;
 8001316:	61c3      	str	r3, [r0, #28]
    hdma_usart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001318:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart5_rx) != HAL_OK)
 800131a:	f000 f9e9 	bl	80016f0 <HAL_DMA_Init>
 800131e:	2800      	cmp	r0, #0
 8001320:	d121      	bne.n	8001366 <HAL_UART_MspInit+0x266>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart5_rx);
 8001322:	2280      	movs	r2, #128	; 0x80
 8001324:	4b4d      	ldr	r3, [pc, #308]	; (800145c <HAL_UART_MspInit+0x35c>)
 8001326:	50a3      	str	r3, [r4, r2]
 8001328:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_usart5_tx.Instance = DMA1_Channel6;
 800132a:	484e      	ldr	r0, [pc, #312]	; (8001464 <HAL_UART_MspInit+0x364>)
 800132c:	4b4e      	ldr	r3, [pc, #312]	; (8001468 <HAL_UART_MspInit+0x368>)
 800132e:	6003      	str	r3, [r0, #0]
    hdma_usart5_tx.Init.Request = DMA_REQUEST_USART5_TX;
 8001330:	234b      	movs	r3, #75	; 0x4b
 8001332:	6043      	str	r3, [r0, #4]
    hdma_usart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001334:	3b3b      	subs	r3, #59	; 0x3b
 8001336:	6083      	str	r3, [r0, #8]
    hdma_usart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001338:	2300      	movs	r3, #0
 800133a:	60c3      	str	r3, [r0, #12]
    hdma_usart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 800133c:	6102      	str	r2, [r0, #16]
    hdma_usart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800133e:	6143      	str	r3, [r0, #20]
    hdma_usart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001340:	6183      	str	r3, [r0, #24]
    hdma_usart5_tx.Init.Mode = DMA_NORMAL;
 8001342:	61c3      	str	r3, [r0, #28]
    hdma_usart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001344:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart5_tx) != HAL_OK)
 8001346:	f000 f9d3 	bl	80016f0 <HAL_DMA_Init>
 800134a:	2800      	cmp	r0, #0
 800134c:	d10e      	bne.n	800136c <HAL_UART_MspInit+0x26c>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart5_tx);
 800134e:	4b45      	ldr	r3, [pc, #276]	; (8001464 <HAL_UART_MspInit+0x364>)
 8001350:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001352:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_4_5_6_LPUART1_IRQn, 1, 0);
 8001354:	2200      	movs	r2, #0
 8001356:	2101      	movs	r1, #1
 8001358:	201d      	movs	r0, #29
 800135a:	f000 f929 	bl	80015b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
 800135e:	201d      	movs	r0, #29
 8001360:	f000 f956 	bl	8001610 <HAL_NVIC_EnableIRQ>
 8001364:	e6e9      	b.n	800113a <HAL_UART_MspInit+0x3a>
      Error_Handler();
 8001366:	f7ff fb8d 	bl	8000a84 <Error_Handler>
 800136a:	e7da      	b.n	8001322 <HAL_UART_MspInit+0x222>
      Error_Handler();
 800136c:	f7ff fb8a 	bl	8000a84 <Error_Handler>
 8001370:	e7ed      	b.n	800134e <HAL_UART_MspInit+0x24e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001372:	4b2f      	ldr	r3, [pc, #188]	; (8001430 <HAL_UART_MspInit+0x330>)
 8001374:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001376:	2180      	movs	r1, #128	; 0x80
 8001378:	0089      	lsls	r1, r1, #2
 800137a:	430a      	orrs	r2, r1
 800137c:	63da      	str	r2, [r3, #60]	; 0x3c
 800137e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001380:	400a      	ands	r2, r1
 8001382:	9206      	str	r2, [sp, #24]
 8001384:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001386:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001388:	2202      	movs	r2, #2
 800138a:	4311      	orrs	r1, r2
 800138c:	6359      	str	r1, [r3, #52]	; 0x34
 800138e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001390:	4013      	ands	r3, r2
 8001392:	9307      	str	r3, [sp, #28]
 8001394:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001396:	23c0      	movs	r3, #192	; 0xc0
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	921c      	str	r2, [sp, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800139e:	2308      	movs	r3, #8
 80013a0:	931f      	str	r3, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a2:	a91b      	add	r1, sp, #108	; 0x6c
 80013a4:	4827      	ldr	r0, [pc, #156]	; (8001444 <HAL_UART_MspInit+0x344>)
 80013a6:	f000 fcfb 	bl	8001da0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA1_Channel7;
 80013aa:	4830      	ldr	r0, [pc, #192]	; (800146c <HAL_UART_MspInit+0x36c>)
 80013ac:	4b30      	ldr	r3, [pc, #192]	; (8001470 <HAL_UART_MspInit+0x370>)
 80013ae:	6003      	str	r3, [r0, #0]
    hdma_usart6_rx.Init.Request = DMA_REQUEST_USART6_RX;
 80013b0:	234c      	movs	r3, #76	; 0x4c
 80013b2:	6043      	str	r3, [r0, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013b4:	2300      	movs	r3, #0
 80013b6:	6083      	str	r3, [r0, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013b8:	60c3      	str	r3, [r0, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013ba:	2280      	movs	r2, #128	; 0x80
 80013bc:	6102      	str	r2, [r0, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013be:	6143      	str	r3, [r0, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013c0:	6183      	str	r3, [r0, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80013c2:	61c3      	str	r3, [r0, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013c4:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80013c6:	f000 f993 	bl	80016f0 <HAL_DMA_Init>
 80013ca:	2800      	cmp	r0, #0
 80013cc:	d121      	bne.n	8001412 <HAL_UART_MspInit+0x312>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80013ce:	2280      	movs	r2, #128	; 0x80
 80013d0:	4b26      	ldr	r3, [pc, #152]	; (800146c <HAL_UART_MspInit+0x36c>)
 80013d2:	50a3      	str	r3, [r4, r2]
 80013d4:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_usart6_tx.Instance = DMA2_Channel1;
 80013d6:	4827      	ldr	r0, [pc, #156]	; (8001474 <HAL_UART_MspInit+0x374>)
 80013d8:	4b27      	ldr	r3, [pc, #156]	; (8001478 <HAL_UART_MspInit+0x378>)
 80013da:	6003      	str	r3, [r0, #0]
    hdma_usart6_tx.Init.Request = DMA_REQUEST_USART6_TX;
 80013dc:	234d      	movs	r3, #77	; 0x4d
 80013de:	6043      	str	r3, [r0, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013e0:	3b3d      	subs	r3, #61	; 0x3d
 80013e2:	6083      	str	r3, [r0, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60c3      	str	r3, [r0, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013e8:	6102      	str	r2, [r0, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013ea:	6143      	str	r3, [r0, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013ec:	6183      	str	r3, [r0, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80013ee:	61c3      	str	r3, [r0, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013f0:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80013f2:	f000 f97d 	bl	80016f0 <HAL_DMA_Init>
 80013f6:	2800      	cmp	r0, #0
 80013f8:	d10e      	bne.n	8001418 <HAL_UART_MspInit+0x318>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 80013fa:	4b1e      	ldr	r3, [pc, #120]	; (8001474 <HAL_UART_MspInit+0x374>)
 80013fc:	67e3      	str	r3, [r4, #124]	; 0x7c
 80013fe:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_4_5_6_LPUART1_IRQn, 1, 0);
 8001400:	2200      	movs	r2, #0
 8001402:	2101      	movs	r1, #1
 8001404:	201d      	movs	r0, #29
 8001406:	f000 f8d3 	bl	80015b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
 800140a:	201d      	movs	r0, #29
 800140c:	f000 f900 	bl	8001610 <HAL_NVIC_EnableIRQ>
}
 8001410:	e693      	b.n	800113a <HAL_UART_MspInit+0x3a>
      Error_Handler();
 8001412:	f7ff fb37 	bl	8000a84 <Error_Handler>
 8001416:	e7da      	b.n	80013ce <HAL_UART_MspInit+0x2ce>
      Error_Handler();
 8001418:	f7ff fb34 	bl	8000a84 <Error_Handler>
 800141c:	e7ed      	b.n	80013fa <HAL_UART_MspInit+0x2fa>
 800141e:	46c0      	nop			; (mov r8, r8)
 8001420:	40004400 	.word	0x40004400
 8001424:	40004800 	.word	0x40004800
 8001428:	40005000 	.word	0x40005000
 800142c:	40013c00 	.word	0x40013c00
 8001430:	40021000 	.word	0x40021000
 8001434:	200003b0 	.word	0x200003b0
 8001438:	40020008 	.word	0x40020008
 800143c:	20000410 	.word	0x20000410
 8001440:	4002001c 	.word	0x4002001c
 8001444:	50000400 	.word	0x50000400
 8001448:	20000470 	.word	0x20000470
 800144c:	40020030 	.word	0x40020030
 8001450:	200004d0 	.word	0x200004d0
 8001454:	40020044 	.word	0x40020044
 8001458:	50000c00 	.word	0x50000c00
 800145c:	20000530 	.word	0x20000530
 8001460:	40020058 	.word	0x40020058
 8001464:	20000590 	.word	0x20000590
 8001468:	4002006c 	.word	0x4002006c
 800146c:	200005f0 	.word	0x200005f0
 8001470:	40020080 	.word	0x40020080
 8001474:	20000650 	.word	0x20000650
 8001478:	40020408 	.word	0x40020408

0800147c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800147c:	480d      	ldr	r0, [pc, #52]	; (80014b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800147e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001480:	f7ff fc86 	bl	8000d90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001484:	480c      	ldr	r0, [pc, #48]	; (80014b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001486:	490d      	ldr	r1, [pc, #52]	; (80014bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001488:	4a0d      	ldr	r2, [pc, #52]	; (80014c0 <LoopForever+0xe>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800148c:	e002      	b.n	8001494 <LoopCopyDataInit>

0800148e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001492:	3304      	adds	r3, #4

08001494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001498:	d3f9      	bcc.n	800148e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800149a:	4a0a      	ldr	r2, [pc, #40]	; (80014c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800149c:	4c0a      	ldr	r4, [pc, #40]	; (80014c8 <LoopForever+0x16>)
  movs r3, #0
 800149e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a0:	e001      	b.n	80014a6 <LoopFillZerobss>

080014a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a4:	3204      	adds	r2, #4

080014a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a8:	d3fb      	bcc.n	80014a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80014aa:	f004 fd3f 	bl	8005f2c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80014ae:	f7ff fb2c 	bl	8000b0a <main>

080014b2 <LoopForever>:

LoopForever:
  b LoopForever
 80014b2:	e7fe      	b.n	80014b2 <LoopForever>
  ldr   r0, =_estack
 80014b4:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80014b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014bc:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 80014c0:	08006120 	.word	0x08006120
  ldr r2, =_sbss
 80014c4:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 80014c8:	20001608 	.word	0x20001608

080014cc <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014cc:	e7fe      	b.n	80014cc <ADC1_COMP_IRQHandler>
	...

080014d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d0:	b510      	push	{r4, lr}
 80014d2:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <HAL_InitTick+0x4c>)
 80014d6:	7819      	ldrb	r1, [r3, #0]
 80014d8:	2900      	cmp	r1, #0
 80014da:	d101      	bne.n	80014e0 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80014dc:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80014de:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80014e0:	20fa      	movs	r0, #250	; 0xfa
 80014e2:	0080      	lsls	r0, r0, #2
 80014e4:	f7fe fe0e 	bl	8000104 <__udivsi3>
 80014e8:	0001      	movs	r1, r0
 80014ea:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <HAL_InitTick+0x50>)
 80014ec:	6818      	ldr	r0, [r3, #0]
 80014ee:	f7fe fe09 	bl	8000104 <__udivsi3>
 80014f2:	f000 f899 	bl	8001628 <HAL_SYSTICK_Config>
 80014f6:	2800      	cmp	r0, #0
 80014f8:	d10d      	bne.n	8001516 <HAL_InitTick+0x46>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014fa:	2c03      	cmp	r4, #3
 80014fc:	d901      	bls.n	8001502 <HAL_InitTick+0x32>
        status = HAL_ERROR;
 80014fe:	2001      	movs	r0, #1
 8001500:	e7ed      	b.n	80014de <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001502:	3001      	adds	r0, #1
 8001504:	2200      	movs	r2, #0
 8001506:	0021      	movs	r1, r4
 8001508:	4240      	negs	r0, r0
 800150a:	f000 f851 	bl	80015b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800150e:	4b05      	ldr	r3, [pc, #20]	; (8001524 <HAL_InitTick+0x54>)
 8001510:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8001512:	2000      	movs	r0, #0
 8001514:	e7e3      	b.n	80014de <HAL_InitTick+0xe>
      status = HAL_ERROR;
 8001516:	2001      	movs	r0, #1
 8001518:	e7e1      	b.n	80014de <HAL_InitTick+0xe>
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	20000004 	.word	0x20000004
 8001520:	20000000 	.word	0x20000000
 8001524:	20000008 	.word	0x20000008

08001528 <HAL_Init>:
{
 8001528:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800152a:	4a08      	ldr	r2, [pc, #32]	; (800154c <HAL_Init+0x24>)
 800152c:	6811      	ldr	r1, [r2, #0]
 800152e:	2380      	movs	r3, #128	; 0x80
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	430b      	orrs	r3, r1
 8001534:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001536:	2003      	movs	r0, #3
 8001538:	f7ff ffca 	bl	80014d0 <HAL_InitTick>
 800153c:	1e04      	subs	r4, r0, #0
 800153e:	d002      	beq.n	8001546 <HAL_Init+0x1e>
    status = HAL_ERROR;
 8001540:	2401      	movs	r4, #1
}
 8001542:	0020      	movs	r0, r4
 8001544:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 8001546:	f7ff fb67 	bl	8000c18 <HAL_MspInit>
 800154a:	e7fa      	b.n	8001542 <HAL_Init+0x1a>
 800154c:	40022000 	.word	0x40022000

08001550 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001550:	4b03      	ldr	r3, [pc, #12]	; (8001560 <HAL_IncTick+0x10>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	4a03      	ldr	r2, [pc, #12]	; (8001564 <HAL_IncTick+0x14>)
 8001556:	6811      	ldr	r1, [r2, #0]
 8001558:	185b      	adds	r3, r3, r1
 800155a:	6013      	str	r3, [r2, #0]
}
 800155c:	4770      	bx	lr
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	20000004 	.word	0x20000004
 8001564:	20000900 	.word	0x20000900

08001568 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001568:	4b01      	ldr	r3, [pc, #4]	; (8001570 <HAL_GetTick+0x8>)
 800156a:	6818      	ldr	r0, [r3, #0]
}
 800156c:	4770      	bx	lr
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	20000900 	.word	0x20000900

08001574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001574:	b570      	push	{r4, r5, r6, lr}
 8001576:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001578:	f7ff fff6 	bl	8001568 <HAL_GetTick>
 800157c:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800157e:	1c63      	adds	r3, r4, #1
 8001580:	d002      	beq.n	8001588 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001582:	4b04      	ldr	r3, [pc, #16]	; (8001594 <HAL_Delay+0x20>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001588:	f7ff ffee 	bl	8001568 <HAL_GetTick>
 800158c:	1b40      	subs	r0, r0, r5
 800158e:	42a0      	cmp	r0, r4
 8001590:	d3fa      	bcc.n	8001588 <HAL_Delay+0x14>
  {
  }
}
 8001592:	bd70      	pop	{r4, r5, r6, pc}
 8001594:	20000004 	.word	0x20000004

08001598 <HAL_SYSCFG_StrobeDBattpinsConfig>:
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001598:	4a03      	ldr	r2, [pc, #12]	; (80015a8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x10>)
 800159a:	6813      	ldr	r3, [r2, #0]
 800159c:	4903      	ldr	r1, [pc, #12]	; (80015ac <HAL_SYSCFG_StrobeDBattpinsConfig+0x14>)
 800159e:	400b      	ands	r3, r1
 80015a0:	4303      	orrs	r3, r0
 80015a2:	6013      	str	r3, [r2, #0]
}
 80015a4:	4770      	bx	lr
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	40010000 	.word	0x40010000
 80015ac:	fffff9ff 	.word	0xfffff9ff

080015b0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b0:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80015b2:	2800      	cmp	r0, #0
 80015b4:	db11      	blt.n	80015da <HAL_NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015b6:	0883      	lsrs	r3, r0, #2
 80015b8:	4d13      	ldr	r5, [pc, #76]	; (8001608 <HAL_NVIC_SetPriority+0x58>)
 80015ba:	33c0      	adds	r3, #192	; 0xc0
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	595c      	ldr	r4, [r3, r5]
 80015c0:	2203      	movs	r2, #3
 80015c2:	4010      	ands	r0, r2
 80015c4:	00c0      	lsls	r0, r0, #3
 80015c6:	32fc      	adds	r2, #252	; 0xfc
 80015c8:	0016      	movs	r6, r2
 80015ca:	4086      	lsls	r6, r0
 80015cc:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015ce:	0189      	lsls	r1, r1, #6
 80015d0:	400a      	ands	r2, r1
 80015d2:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015d4:	4322      	orrs	r2, r4
 80015d6:	515a      	str	r2, [r3, r5]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 80015d8:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015da:	230f      	movs	r3, #15
 80015dc:	4003      	ands	r3, r0
 80015de:	3b08      	subs	r3, #8
 80015e0:	089b      	lsrs	r3, r3, #2
 80015e2:	3306      	adds	r3, #6
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4a09      	ldr	r2, [pc, #36]	; (800160c <HAL_NVIC_SetPriority+0x5c>)
 80015e8:	4694      	mov	ip, r2
 80015ea:	4463      	add	r3, ip
 80015ec:	685c      	ldr	r4, [r3, #4]
 80015ee:	2203      	movs	r2, #3
 80015f0:	4010      	ands	r0, r2
 80015f2:	00c0      	lsls	r0, r0, #3
 80015f4:	32fc      	adds	r2, #252	; 0xfc
 80015f6:	0015      	movs	r5, r2
 80015f8:	4085      	lsls	r5, r0
 80015fa:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015fc:	0189      	lsls	r1, r1, #6
 80015fe:	400a      	ands	r2, r1
 8001600:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001602:	4322      	orrs	r2, r4
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	e7e7      	b.n	80015d8 <HAL_NVIC_SetPriority+0x28>
 8001608:	e000e100 	.word	0xe000e100
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001610:	2800      	cmp	r0, #0
 8001612:	db05      	blt.n	8001620 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001614:	231f      	movs	r3, #31
 8001616:	4018      	ands	r0, r3
 8001618:	3b1e      	subs	r3, #30
 800161a:	4083      	lsls	r3, r0
 800161c:	4a01      	ldr	r2, [pc, #4]	; (8001624 <HAL_NVIC_EnableIRQ+0x14>)
 800161e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001620:	4770      	bx	lr
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	e000e100 	.word	0xe000e100

08001628 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001628:	3801      	subs	r0, #1
 800162a:	2380      	movs	r3, #128	; 0x80
 800162c:	045b      	lsls	r3, r3, #17
 800162e:	4298      	cmp	r0, r3
 8001630:	d20f      	bcs.n	8001652 <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001632:	4a09      	ldr	r2, [pc, #36]	; (8001658 <HAL_SYSTICK_Config+0x30>)
 8001634:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001636:	4809      	ldr	r0, [pc, #36]	; (800165c <HAL_SYSTICK_Config+0x34>)
 8001638:	6a03      	ldr	r3, [r0, #32]
 800163a:	021b      	lsls	r3, r3, #8
 800163c:	0a1b      	lsrs	r3, r3, #8
 800163e:	21c0      	movs	r1, #192	; 0xc0
 8001640:	0609      	lsls	r1, r1, #24
 8001642:	430b      	orrs	r3, r1
 8001644:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001646:	2300      	movs	r3, #0
 8001648:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800164a:	3307      	adds	r3, #7
 800164c:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800164e:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8001650:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001652:	2001      	movs	r0, #1
  return SysTick_Config(TicksNumb);
 8001654:	e7fc      	b.n	8001650 <HAL_SYSTICK_Config+0x28>
 8001656:	46c0      	nop			; (mov r8, r8)
 8001658:	e000e010 	.word	0xe000e010
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001660:	b510      	push	{r4, lr}
 8001662:	0004      	movs	r4, r0
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001664:	6802      	ldr	r2, [r0, #0]
 8001666:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8001668:	429a      	cmp	r2, r3
 800166a:	d815      	bhi.n	8001698 <DMA_CalcDMAMUXChannelBaseAndMask+0x38>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800166c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800166e:	089b      	lsrs	r3, r3, #2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4912      	ldr	r1, [pc, #72]	; (80016bc <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 8001674:	468c      	mov	ip, r1
 8001676:	4463      	add	r3, ip
 8001678:	6483      	str	r3, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800167a:	20ff      	movs	r0, #255	; 0xff
 800167c:	4010      	ands	r0, r2
 800167e:	3808      	subs	r0, #8
 8001680:	2114      	movs	r1, #20
 8001682:	f7fe fd3f 	bl	8000104 <__udivsi3>
 8001686:	0003      	movs	r3, r0
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001688:	4a0d      	ldr	r2, [pc, #52]	; (80016c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 800168a:	64e2      	str	r2, [r4, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800168c:	201f      	movs	r0, #31
 800168e:	4018      	ands	r0, r3
 8001690:	2301      	movs	r3, #1
 8001692:	4083      	lsls	r3, r0
 8001694:	6523      	str	r3, [r4, #80]	; 0x50
}
 8001696:	bd10      	pop	{r4, pc}
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001698:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800169a:	089b      	lsrs	r3, r3, #2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4909      	ldr	r1, [pc, #36]	; (80016c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>)
 80016a0:	468c      	mov	ip, r1
 80016a2:	4463      	add	r3, ip
 80016a4:	6483      	str	r3, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80016a6:	20ff      	movs	r0, #255	; 0xff
 80016a8:	4010      	ands	r0, r2
 80016aa:	3808      	subs	r0, #8
 80016ac:	2114      	movs	r1, #20
 80016ae:	f7fe fd29 	bl	8000104 <__udivsi3>
 80016b2:	1dc3      	adds	r3, r0, #7
 80016b4:	e7e8      	b.n	8001688 <DMA_CalcDMAMUXChannelBaseAndMask+0x28>
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	40020407 	.word	0x40020407
 80016bc:	40020800 	.word	0x40020800
 80016c0:	40020880 	.word	0x40020880
 80016c4:	4002081c 	.word	0x4002081c

080016c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80016c8:	6842      	ldr	r2, [r0, #4]
 80016ca:	237f      	movs	r3, #127	; 0x7f
 80016cc:	4013      	ands	r3, r2

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80016ce:	4a06      	ldr	r2, [pc, #24]	; (80016e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 80016d0:	189a      	adds	r2, r3, r2
 80016d2:	0092      	lsls	r2, r2, #2
 80016d4:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80016d6:	4a05      	ldr	r2, [pc, #20]	; (80016ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 80016d8:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80016da:	3b01      	subs	r3, #1
 80016dc:	2203      	movs	r2, #3
 80016de:	401a      	ands	r2, r3
 80016e0:	2301      	movs	r3, #1
 80016e2:	4093      	lsls	r3, r2
 80016e4:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 80016e6:	4770      	bx	lr
 80016e8:	1000823f 	.word	0x1000823f
 80016ec:	40020940 	.word	0x40020940

080016f0 <HAL_DMA_Init>:
{
 80016f0:	b570      	push	{r4, r5, r6, lr}
 80016f2:	1e04      	subs	r4, r0, #0
  if (hdma == NULL)
 80016f4:	d05c      	beq.n	80017b0 <HAL_DMA_Init+0xc0>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80016f6:	6805      	ldr	r5, [r0, #0]
 80016f8:	4b2e      	ldr	r3, [pc, #184]	; (80017b4 <HAL_DMA_Init+0xc4>)
 80016fa:	429d      	cmp	r5, r3
 80016fc:	d841      	bhi.n	8001782 <HAL_DMA_Init+0x92>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80016fe:	2114      	movs	r1, #20
 8001700:	4b2d      	ldr	r3, [pc, #180]	; (80017b8 <HAL_DMA_Init+0xc8>)
 8001702:	18e8      	adds	r0, r5, r3
 8001704:	f7fe fcfe 	bl	8000104 <__udivsi3>
 8001708:	0080      	lsls	r0, r0, #2
 800170a:	6460      	str	r0, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800170c:	4b2b      	ldr	r3, [pc, #172]	; (80017bc <HAL_DMA_Init+0xcc>)
 800170e:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8001710:	2325      	movs	r3, #37	; 0x25
 8001712:	2202      	movs	r2, #2
 8001714:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001716:	682b      	ldr	r3, [r5, #0]
 8001718:	4a29      	ldr	r2, [pc, #164]	; (80017c0 <HAL_DMA_Init+0xd0>)
 800171a:	4013      	ands	r3, r2
 800171c:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800171e:	6821      	ldr	r1, [r4, #0]
 8001720:	680a      	ldr	r2, [r1, #0]
 8001722:	68a3      	ldr	r3, [r4, #8]
 8001724:	68e0      	ldr	r0, [r4, #12]
 8001726:	4303      	orrs	r3, r0
 8001728:	6920      	ldr	r0, [r4, #16]
 800172a:	4303      	orrs	r3, r0
 800172c:	6960      	ldr	r0, [r4, #20]
 800172e:	4303      	orrs	r3, r0
 8001730:	69a0      	ldr	r0, [r4, #24]
 8001732:	4303      	orrs	r3, r0
 8001734:	69e0      	ldr	r0, [r4, #28]
 8001736:	4303      	orrs	r3, r0
 8001738:	6a20      	ldr	r0, [r4, #32]
 800173a:	4303      	orrs	r3, r0
 800173c:	4313      	orrs	r3, r2
 800173e:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001740:	0020      	movs	r0, r4
 8001742:	f7ff ff8d 	bl	8001660 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001746:	68a2      	ldr	r2, [r4, #8]
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	01db      	lsls	r3, r3, #7
 800174c:	429a      	cmp	r2, r3
 800174e:	d022      	beq.n	8001796 <HAL_DMA_Init+0xa6>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001750:	6861      	ldr	r1, [r4, #4]
 8001752:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001754:	237f      	movs	r3, #127	; 0x7f
 8001756:	400b      	ands	r3, r1
 8001758:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800175a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800175c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800175e:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001760:	6863      	ldr	r3, [r4, #4]
 8001762:	3b01      	subs	r3, #1
 8001764:	2b03      	cmp	r3, #3
 8001766:	d919      	bls.n	800179c <HAL_DMA_Init+0xac>
    hdma->DMAmuxRequestGen = 0U;
 8001768:	2300      	movs	r3, #0
 800176a:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800176c:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800176e:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001770:	2300      	movs	r3, #0
 8001772:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8001774:	2225      	movs	r2, #37	; 0x25
 8001776:	2101      	movs	r1, #1
 8001778:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 800177a:	3a01      	subs	r2, #1
 800177c:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 800177e:	2000      	movs	r0, #0
}
 8001780:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001782:	2114      	movs	r1, #20
 8001784:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <HAL_DMA_Init+0xd4>)
 8001786:	18e8      	adds	r0, r5, r3
 8001788:	f7fe fcbc 	bl	8000104 <__udivsi3>
 800178c:	0080      	lsls	r0, r0, #2
 800178e:	6460      	str	r0, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001790:	4b0d      	ldr	r3, [pc, #52]	; (80017c8 <HAL_DMA_Init+0xd8>)
 8001792:	6423      	str	r3, [r4, #64]	; 0x40
 8001794:	e7bc      	b.n	8001710 <HAL_DMA_Init+0x20>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001796:	2300      	movs	r3, #0
 8001798:	6063      	str	r3, [r4, #4]
 800179a:	e7d9      	b.n	8001750 <HAL_DMA_Init+0x60>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800179c:	0020      	movs	r0, r4
 800179e:	f7ff ff93 	bl	80016c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80017a2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80017aa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	e7df      	b.n	8001770 <HAL_DMA_Init+0x80>
    return HAL_ERROR;
 80017b0:	2001      	movs	r0, #1
 80017b2:	e7e5      	b.n	8001780 <HAL_DMA_Init+0x90>
 80017b4:	40020407 	.word	0x40020407
 80017b8:	bffdfff8 	.word	0xbffdfff8
 80017bc:	40020000 	.word	0x40020000
 80017c0:	ffff800f 	.word	0xffff800f
 80017c4:	bffdfbf8 	.word	0xbffdfbf8
 80017c8:	40020400 	.word	0x40020400

080017cc <HAL_DMA_Abort>:
  if (NULL == hdma)
 80017cc:	2800      	cmp	r0, #0
 80017ce:	d034      	beq.n	800183a <HAL_DMA_Abort+0x6e>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80017d0:	2325      	movs	r3, #37	; 0x25
 80017d2:	5cc3      	ldrb	r3, [r0, r3]
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d006      	beq.n	80017e6 <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017d8:	2304      	movs	r3, #4
 80017da:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80017dc:	3320      	adds	r3, #32
 80017de:	2200      	movs	r2, #0
 80017e0:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 80017e2:	2001      	movs	r0, #1
}
 80017e4:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017e6:	6802      	ldr	r2, [r0, #0]
 80017e8:	6813      	ldr	r3, [r2, #0]
 80017ea:	210e      	movs	r1, #14
 80017ec:	438b      	bics	r3, r1
 80017ee:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80017f0:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80017f2:	6813      	ldr	r3, [r2, #0]
 80017f4:	4912      	ldr	r1, [pc, #72]	; (8001840 <HAL_DMA_Abort+0x74>)
 80017f6:	400b      	ands	r3, r1
 80017f8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80017fa:	6801      	ldr	r1, [r0, #0]
 80017fc:	680a      	ldr	r2, [r1, #0]
 80017fe:	2301      	movs	r3, #1
 8001800:	439a      	bics	r2, r3
 8001802:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001804:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001806:	221c      	movs	r2, #28
 8001808:	400a      	ands	r2, r1
 800180a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800180c:	4093      	lsls	r3, r2
 800180e:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001810:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001812:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001814:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8001816:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001818:	2b00      	cmp	r3, #0
 800181a:	d006      	beq.n	800182a <HAL_DMA_Abort+0x5e>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	4908      	ldr	r1, [pc, #32]	; (8001840 <HAL_DMA_Abort+0x74>)
 8001820:	400a      	ands	r2, r1
 8001822:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001824:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001826:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001828:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800182a:	2325      	movs	r3, #37	; 0x25
 800182c:	2201      	movs	r2, #1
 800182e:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8001830:	3b01      	subs	r3, #1
 8001832:	2200      	movs	r2, #0
 8001834:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8001836:	2000      	movs	r0, #0
 8001838:	e7d4      	b.n	80017e4 <HAL_DMA_Abort+0x18>
    return HAL_ERROR;
 800183a:	2001      	movs	r0, #1
 800183c:	e7d2      	b.n	80017e4 <HAL_DMA_Abort+0x18>
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	fffffeff 	.word	0xfffffeff

08001844 <HAL_DMA_Abort_IT>:
{
 8001844:	b510      	push	{r4, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001846:	2325      	movs	r3, #37	; 0x25
 8001848:	5cc3      	ldrb	r3, [r0, r3]
 800184a:	2b02      	cmp	r3, #2
 800184c:	d003      	beq.n	8001856 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800184e:	2304      	movs	r3, #4
 8001850:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8001852:	2001      	movs	r0, #1
}
 8001854:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001856:	6802      	ldr	r2, [r0, #0]
 8001858:	6813      	ldr	r3, [r2, #0]
 800185a:	210e      	movs	r1, #14
 800185c:	438b      	bics	r3, r1
 800185e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001860:	6801      	ldr	r1, [r0, #0]
 8001862:	680a      	ldr	r2, [r1, #0]
 8001864:	2301      	movs	r3, #1
 8001866:	439a      	bics	r2, r3
 8001868:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800186a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800186c:	680a      	ldr	r2, [r1, #0]
 800186e:	4c11      	ldr	r4, [pc, #68]	; (80018b4 <HAL_DMA_Abort_IT+0x70>)
 8001870:	4022      	ands	r2, r4
 8001872:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001874:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001876:	221c      	movs	r2, #28
 8001878:	400a      	ands	r2, r1
 800187a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800187c:	4093      	lsls	r3, r2
 800187e:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001880:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001882:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001884:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8001886:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001888:	2b00      	cmp	r3, #0
 800188a:	d005      	beq.n	8001898 <HAL_DMA_Abort_IT+0x54>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	4022      	ands	r2, r4
 8001890:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001892:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001894:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001896:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001898:	2325      	movs	r3, #37	; 0x25
 800189a:	2201      	movs	r2, #1
 800189c:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 800189e:	3b01      	subs	r3, #1
 80018a0:	2200      	movs	r2, #0
 80018a2:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 80018a4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d002      	beq.n	80018b0 <HAL_DMA_Abort_IT+0x6c>
      hdma->XferAbortCallback(hdma);
 80018aa:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80018ac:	2000      	movs	r0, #0
 80018ae:	e7d1      	b.n	8001854 <HAL_DMA_Abort_IT+0x10>
 80018b0:	2000      	movs	r0, #0
 80018b2:	e7cf      	b.n	8001854 <HAL_DMA_Abort_IT+0x10>
 80018b4:	fffffeff 	.word	0xfffffeff

080018b8 <HAL_DMA_IRQHandler>:
{
 80018b8:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018ba:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80018bc:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80018be:	6804      	ldr	r4, [r0, #0]
 80018c0:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80018c2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80018c4:	231c      	movs	r3, #28
 80018c6:	4013      	ands	r3, r2
 80018c8:	2204      	movs	r2, #4
 80018ca:	409a      	lsls	r2, r3
 80018cc:	4211      	tst	r1, r2
 80018ce:	d014      	beq.n	80018fa <HAL_DMA_IRQHandler+0x42>
 80018d0:	076a      	lsls	r2, r5, #29
 80018d2:	d512      	bpl.n	80018fa <HAL_DMA_IRQHandler+0x42>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018d4:	6823      	ldr	r3, [r4, #0]
 80018d6:	069b      	lsls	r3, r3, #26
 80018d8:	d403      	bmi.n	80018e2 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018da:	6823      	ldr	r3, [r4, #0]
 80018dc:	2204      	movs	r2, #4
 80018de:	4393      	bics	r3, r2
 80018e0:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80018e2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80018e4:	221c      	movs	r2, #28
 80018e6:	401a      	ands	r2, r3
 80018e8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80018ea:	2304      	movs	r3, #4
 80018ec:	4093      	lsls	r3, r2
 80018ee:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 80018f0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d000      	beq.n	80018f8 <HAL_DMA_IRQHandler+0x40>
        hdma->XferHalfCpltCallback(hdma);
 80018f6:	4798      	blx	r3
}
 80018f8:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80018fa:	2202      	movs	r2, #2
 80018fc:	409a      	lsls	r2, r3
 80018fe:	4211      	tst	r1, r2
 8001900:	d026      	beq.n	8001950 <HAL_DMA_IRQHandler+0x98>
 8001902:	07aa      	lsls	r2, r5, #30
 8001904:	d524      	bpl.n	8001950 <HAL_DMA_IRQHandler+0x98>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001906:	6823      	ldr	r3, [r4, #0]
 8001908:	069b      	lsls	r3, r3, #26
 800190a:	d406      	bmi.n	800191a <HAL_DMA_IRQHandler+0x62>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800190c:	6823      	ldr	r3, [r4, #0]
 800190e:	220a      	movs	r2, #10
 8001910:	4393      	bics	r3, r2
 8001912:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8001914:	2325      	movs	r3, #37	; 0x25
 8001916:	3a09      	subs	r2, #9
 8001918:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800191a:	6802      	ldr	r2, [r0, #0]
 800191c:	4b1b      	ldr	r3, [pc, #108]	; (800198c <HAL_DMA_IRQHandler+0xd4>)
 800191e:	429a      	cmp	r2, r3
 8001920:	d90e      	bls.n	8001940 <HAL_DMA_IRQHandler+0x88>
 8001922:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001924:	221c      	movs	r2, #28
 8001926:	401a      	ands	r2, r3
 8001928:	2302      	movs	r3, #2
 800192a:	4093      	lsls	r3, r2
 800192c:	4a18      	ldr	r2, [pc, #96]	; (8001990 <HAL_DMA_IRQHandler+0xd8>)
 800192e:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 8001930:	2324      	movs	r3, #36	; 0x24
 8001932:	2200      	movs	r2, #0
 8001934:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 8001936:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0dd      	beq.n	80018f8 <HAL_DMA_IRQHandler+0x40>
        hdma->XferCpltCallback(hdma);
 800193c:	4798      	blx	r3
 800193e:	e7db      	b.n	80018f8 <HAL_DMA_IRQHandler+0x40>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001940:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001942:	221c      	movs	r2, #28
 8001944:	401a      	ands	r2, r3
 8001946:	2302      	movs	r3, #2
 8001948:	4093      	lsls	r3, r2
 800194a:	4a12      	ldr	r2, [pc, #72]	; (8001994 <HAL_DMA_IRQHandler+0xdc>)
 800194c:	6053      	str	r3, [r2, #4]
 800194e:	e7ef      	b.n	8001930 <HAL_DMA_IRQHandler+0x78>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001950:	2208      	movs	r2, #8
 8001952:	409a      	lsls	r2, r3
 8001954:	4211      	tst	r1, r2
 8001956:	d0cf      	beq.n	80018f8 <HAL_DMA_IRQHandler+0x40>
 8001958:	072d      	lsls	r5, r5, #28
 800195a:	d5cd      	bpl.n	80018f8 <HAL_DMA_IRQHandler+0x40>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800195c:	6823      	ldr	r3, [r4, #0]
 800195e:	220e      	movs	r2, #14
 8001960:	4393      	bics	r3, r2
 8001962:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001964:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001966:	320e      	adds	r2, #14
 8001968:	401a      	ands	r2, r3
 800196a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800196c:	2301      	movs	r3, #1
 800196e:	001c      	movs	r4, r3
 8001970:	4094      	lsls	r4, r2
 8001972:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001974:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001976:	2225      	movs	r2, #37	; 0x25
 8001978:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 800197a:	3323      	adds	r3, #35	; 0x23
 800197c:	2200      	movs	r2, #0
 800197e:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8001980:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0b8      	beq.n	80018f8 <HAL_DMA_IRQHandler+0x40>
      hdma->XferErrorCallback(hdma);
 8001986:	4798      	blx	r3
  return;
 8001988:	e7b6      	b.n	80018f8 <HAL_DMA_IRQHandler+0x40>
 800198a:	46c0      	nop			; (mov r8, r8)
 800198c:	40020080 	.word	0x40020080
 8001990:	40020400 	.word	0x40020400
 8001994:	40020000 	.word	0x40020000

08001998 <HAL_DMA_GetState>:
  return hdma->State;
 8001998:	2325      	movs	r3, #37	; 0x25
 800199a:	5cc0      	ldrb	r0, [r0, r3]
 800199c:	b2c0      	uxtb	r0, r0
}
 800199e:	4770      	bx	lr

080019a0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80019a0:	b530      	push	{r4, r5, lr}
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80019a2:	6804      	ldr	r4, [r0, #0]
 80019a4:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <FDCAN_CalcultateRamBlockAddresses+0x68>)
 80019a6:	429c      	cmp	r4, r3
 80019a8:	d023      	beq.n	80019f2 <FDCAN_CalcultateRamBlockAddresses+0x52>
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80019aa:	4918      	ldr	r1, [pc, #96]	; (8001a0c <FDCAN_CalcultateRamBlockAddresses+0x6c>)
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80019ac:	6401      	str	r1, [r0, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80019ae:	2280      	movs	r2, #128	; 0x80
 80019b0:	58a3      	ldr	r3, [r4, r2]
 80019b2:	4d17      	ldr	r5, [pc, #92]	; (8001a10 <FDCAN_CalcultateRamBlockAddresses+0x70>)
 80019b4:	402b      	ands	r3, r5
 80019b6:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80019b8:	042d      	lsls	r5, r5, #16
 80019ba:	432b      	orrs	r3, r5
 80019bc:	50a3      	str	r3, [r4, r2]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80019be:	000b      	movs	r3, r1
 80019c0:	3370      	adds	r3, #112	; 0x70
 80019c2:	6443      	str	r3, [r0, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80019c4:	6805      	ldr	r5, [r0, #0]
 80019c6:	58ab      	ldr	r3, [r5, r2]
 80019c8:	4c12      	ldr	r4, [pc, #72]	; (8001a14 <FDCAN_CalcultateRamBlockAddresses+0x74>)
 80019ca:	4023      	ands	r3, r4
 80019cc:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80019ce:	0624      	lsls	r4, r4, #24
 80019d0:	4323      	orrs	r3, r4
 80019d2:	50ab      	str	r3, [r5, r2]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80019d4:	000b      	movs	r3, r1
 80019d6:	33b0      	adds	r3, #176	; 0xb0
 80019d8:	6483      	str	r3, [r0, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80019da:	33d8      	adds	r3, #216	; 0xd8
 80019dc:	64c3      	str	r3, [r0, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80019de:	2398      	movs	r3, #152	; 0x98
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	18cb      	adds	r3, r1, r3
 80019e4:	6503      	str	r3, [r0, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80019e6:	239e      	movs	r3, #158	; 0x9e
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	18cb      	adds	r3, r1, r3
 80019ec:	6543      	str	r3, [r0, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80019ee:	000b      	movs	r3, r1
 80019f0:	e003      	b.n	80019fa <FDCAN_CalcultateRamBlockAddresses+0x5a>
    SramCanInstanceBase += SRAMCAN_SIZE;
 80019f2:	4909      	ldr	r1, [pc, #36]	; (8001a18 <FDCAN_CalcultateRamBlockAddresses+0x78>)
 80019f4:	e7da      	b.n	80019ac <FDCAN_CalcultateRamBlockAddresses+0xc>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80019f6:	2200      	movs	r2, #0
 80019f8:	c304      	stmia	r3!, {r2}
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80019fa:	22d4      	movs	r2, #212	; 0xd4
 80019fc:	0092      	lsls	r2, r2, #2
 80019fe:	188a      	adds	r2, r1, r2
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d8f8      	bhi.n	80019f6 <FDCAN_CalcultateRamBlockAddresses+0x56>
  }
}
 8001a04:	bd30      	pop	{r4, r5, pc}
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	40006800 	.word	0x40006800
 8001a0c:	4000b400 	.word	0x4000b400
 8001a10:	ffe0ffff 	.word	0xffe0ffff
 8001a14:	f0ffffff 	.word	0xf0ffffff
 8001a18:	4000b750 	.word	0x4000b750

08001a1c <HAL_FDCAN_Init>:
{
 8001a1c:	b570      	push	{r4, r5, r6, lr}
 8001a1e:	1e04      	subs	r4, r0, #0
  if (hfdcan == NULL)
 8001a20:	d100      	bne.n	8001a24 <HAL_FDCAN_Init+0x8>
 8001a22:	e0e1      	b.n	8001be8 <HAL_FDCAN_Init+0x1cc>
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001a24:	235c      	movs	r3, #92	; 0x5c
 8001a26:	5cc3      	ldrb	r3, [r0, r3]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d019      	beq.n	8001a60 <HAL_FDCAN_Init+0x44>
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001a2c:	6822      	ldr	r2, [r4, #0]
 8001a2e:	6993      	ldr	r3, [r2, #24]
 8001a30:	2110      	movs	r1, #16
 8001a32:	438b      	bics	r3, r1
 8001a34:	6193      	str	r3, [r2, #24]
  tickstart = HAL_GetTick();
 8001a36:	f7ff fd97 	bl	8001568 <HAL_GetTick>
 8001a3a:	0005      	movs	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001a3c:	6822      	ldr	r2, [r4, #0]
 8001a3e:	6993      	ldr	r3, [r2, #24]
 8001a40:	071b      	lsls	r3, r3, #28
 8001a42:	d513      	bpl.n	8001a6c <HAL_FDCAN_Init+0x50>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001a44:	f7ff fd90 	bl	8001568 <HAL_GetTick>
 8001a48:	1b40      	subs	r0, r0, r5
 8001a4a:	280a      	cmp	r0, #10
 8001a4c:	d9f6      	bls.n	8001a3c <HAL_FDCAN_Init+0x20>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001a4e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001a50:	2201      	movs	r2, #1
 8001a52:	4313      	orrs	r3, r2
 8001a54:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001a56:	235c      	movs	r3, #92	; 0x5c
 8001a58:	3202      	adds	r2, #2
 8001a5a:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 8001a5c:	2001      	movs	r0, #1
}
 8001a5e:	bd70      	pop	{r4, r5, r6, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 8001a60:	335d      	adds	r3, #93	; 0x5d
 8001a62:	2200      	movs	r2, #0
 8001a64:	54c2      	strb	r2, [r0, r3]
    HAL_FDCAN_MspInit(hfdcan);
 8001a66:	f7fe fe55 	bl	8000714 <HAL_FDCAN_MspInit>
 8001a6a:	e7df      	b.n	8001a2c <HAL_FDCAN_Init+0x10>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001a6c:	6993      	ldr	r3, [r2, #24]
 8001a6e:	2101      	movs	r1, #1
 8001a70:	430b      	orrs	r3, r1
 8001a72:	6193      	str	r3, [r2, #24]
  tickstart = HAL_GetTick();
 8001a74:	f7ff fd78 	bl	8001568 <HAL_GetTick>
 8001a78:	0005      	movs	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001a7a:	6822      	ldr	r2, [r4, #0]
 8001a7c:	6993      	ldr	r3, [r2, #24]
 8001a7e:	07db      	lsls	r3, r3, #31
 8001a80:	d40d      	bmi.n	8001a9e <HAL_FDCAN_Init+0x82>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001a82:	f7ff fd71 	bl	8001568 <HAL_GetTick>
 8001a86:	1b40      	subs	r0, r0, r5
 8001a88:	280a      	cmp	r0, #10
 8001a8a:	d9f6      	bls.n	8001a7a <HAL_FDCAN_Init+0x5e>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001a8c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001a8e:	2201      	movs	r2, #1
 8001a90:	4313      	orrs	r3, r2
 8001a92:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001a94:	235c      	movs	r3, #92	; 0x5c
 8001a96:	3202      	adds	r2, #2
 8001a98:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 8001a9a:	2001      	movs	r0, #1
 8001a9c:	e7df      	b.n	8001a5e <HAL_FDCAN_Init+0x42>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001a9e:	6993      	ldr	r3, [r2, #24]
 8001aa0:	2102      	movs	r1, #2
 8001aa2:	430b      	orrs	r3, r1
 8001aa4:	6193      	str	r3, [r2, #24]
  if (hfdcan->Instance == FDCAN1)
 8001aa6:	6822      	ldr	r2, [r4, #0]
 8001aa8:	4b50      	ldr	r3, [pc, #320]	; (8001bec <HAL_FDCAN_Init+0x1d0>)
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d043      	beq.n	8001b36 <HAL_FDCAN_Init+0x11a>
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001aae:	7c23      	ldrb	r3, [r4, #16]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d044      	beq.n	8001b3e <HAL_FDCAN_Init+0x122>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001ab4:	6822      	ldr	r2, [r4, #0]
 8001ab6:	6993      	ldr	r3, [r2, #24]
 8001ab8:	2140      	movs	r1, #64	; 0x40
 8001aba:	430b      	orrs	r3, r1
 8001abc:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001abe:	7c63      	ldrb	r3, [r4, #17]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d042      	beq.n	8001b4a <HAL_FDCAN_Init+0x12e>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001ac4:	6822      	ldr	r2, [r4, #0]
 8001ac6:	6993      	ldr	r3, [r2, #24]
 8001ac8:	4949      	ldr	r1, [pc, #292]	; (8001bf0 <HAL_FDCAN_Init+0x1d4>)
 8001aca:	400b      	ands	r3, r1
 8001acc:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001ace:	7ca3      	ldrb	r3, [r4, #18]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d041      	beq.n	8001b58 <HAL_FDCAN_Init+0x13c>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001ad4:	6822      	ldr	r2, [r4, #0]
 8001ad6:	6991      	ldr	r1, [r2, #24]
 8001ad8:	2380      	movs	r3, #128	; 0x80
 8001ada:	015b      	lsls	r3, r3, #5
 8001adc:	430b      	orrs	r3, r1
 8001ade:	6193      	str	r3, [r2, #24]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001ae0:	6822      	ldr	r2, [r4, #0]
 8001ae2:	6993      	ldr	r3, [r2, #24]
 8001ae4:	4943      	ldr	r1, [pc, #268]	; (8001bf4 <HAL_FDCAN_Init+0x1d8>)
 8001ae6:	400b      	ands	r3, r1
 8001ae8:	68a1      	ldr	r1, [r4, #8]
 8001aea:	430b      	orrs	r3, r1
 8001aec:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001aee:	6822      	ldr	r2, [r4, #0]
 8001af0:	6993      	ldr	r3, [r2, #24]
 8001af2:	21a4      	movs	r1, #164	; 0xa4
 8001af4:	438b      	bics	r3, r1
 8001af6:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001af8:	6822      	ldr	r2, [r4, #0]
 8001afa:	6913      	ldr	r3, [r2, #16]
 8001afc:	3994      	subs	r1, #148	; 0x94
 8001afe:	438b      	bics	r3, r1
 8001b00:	6113      	str	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001b02:	68e3      	ldr	r3, [r4, #12]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d02d      	beq.n	8001b64 <HAL_FDCAN_Init+0x148>
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d030      	beq.n	8001b6e <HAL_FDCAN_Init+0x152>
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d054      	beq.n	8001bba <HAL_FDCAN_Init+0x19e>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001b10:	6822      	ldr	r2, [r4, #0]
 8001b12:	6993      	ldr	r3, [r2, #24]
 8001b14:	2180      	movs	r1, #128	; 0x80
 8001b16:	430b      	orrs	r3, r1
 8001b18:	6193      	str	r3, [r2, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001b1a:	6822      	ldr	r2, [r4, #0]
 8001b1c:	6913      	ldr	r3, [r2, #16]
 8001b1e:	3970      	subs	r1, #112	; 0x70
 8001b20:	430b      	orrs	r3, r1
 8001b22:	6113      	str	r3, [r2, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001b24:	68e3      	ldr	r3, [r4, #12]
 8001b26:	2b03      	cmp	r3, #3
 8001b28:	d121      	bne.n	8001b6e <HAL_FDCAN_Init+0x152>
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001b2a:	6822      	ldr	r2, [r4, #0]
 8001b2c:	6993      	ldr	r3, [r2, #24]
 8001b2e:	3110      	adds	r1, #16
 8001b30:	430b      	orrs	r3, r1
 8001b32:	6193      	str	r3, [r2, #24]
 8001b34:	e01b      	b.n	8001b6e <HAL_FDCAN_Init+0x152>
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001b36:	6862      	ldr	r2, [r4, #4]
 8001b38:	4b2f      	ldr	r3, [pc, #188]	; (8001bf8 <HAL_FDCAN_Init+0x1dc>)
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	e7b7      	b.n	8001aae <HAL_FDCAN_Init+0x92>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001b3e:	6822      	ldr	r2, [r4, #0]
 8001b40:	6993      	ldr	r3, [r2, #24]
 8001b42:	2140      	movs	r1, #64	; 0x40
 8001b44:	438b      	bics	r3, r1
 8001b46:	6193      	str	r3, [r2, #24]
 8001b48:	e7b9      	b.n	8001abe <HAL_FDCAN_Init+0xa2>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001b4a:	6822      	ldr	r2, [r4, #0]
 8001b4c:	6991      	ldr	r1, [r2, #24]
 8001b4e:	2380      	movs	r3, #128	; 0x80
 8001b50:	01db      	lsls	r3, r3, #7
 8001b52:	430b      	orrs	r3, r1
 8001b54:	6193      	str	r3, [r2, #24]
 8001b56:	e7ba      	b.n	8001ace <HAL_FDCAN_Init+0xb2>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001b58:	6822      	ldr	r2, [r4, #0]
 8001b5a:	6993      	ldr	r3, [r2, #24]
 8001b5c:	4927      	ldr	r1, [pc, #156]	; (8001bfc <HAL_FDCAN_Init+0x1e0>)
 8001b5e:	400b      	ands	r3, r1
 8001b60:	6193      	str	r3, [r2, #24]
 8001b62:	e7bd      	b.n	8001ae0 <HAL_FDCAN_Init+0xc4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001b64:	6822      	ldr	r2, [r4, #0]
 8001b66:	6993      	ldr	r3, [r2, #24]
 8001b68:	390c      	subs	r1, #12
 8001b6a:	430b      	orrs	r3, r1
 8001b6c:	6193      	str	r3, [r2, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001b6e:	69a3      	ldr	r3, [r4, #24]
 8001b70:	3b01      	subs	r3, #1
 8001b72:	065b      	lsls	r3, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001b74:	69e2      	ldr	r2, [r4, #28]
 8001b76:	3a01      	subs	r2, #1
 8001b78:	0212      	lsls	r2, r2, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001b7a:	4313      	orrs	r3, r2
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001b7c:	6a22      	ldr	r2, [r4, #32]
 8001b7e:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001b80:	4313      	orrs	r3, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001b82:	6962      	ldr	r2, [r4, #20]
 8001b84:	3a01      	subs	r2, #1
 8001b86:	0412      	lsls	r2, r2, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001b88:	6821      	ldr	r1, [r4, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001b8a:	4313      	orrs	r3, r2
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001b8c:	61cb      	str	r3, [r1, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001b8e:	68a2      	ldr	r2, [r4, #8]
 8001b90:	23c0      	movs	r3, #192	; 0xc0
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d016      	beq.n	8001bc6 <HAL_FDCAN_Init+0x1aa>
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001b98:	6821      	ldr	r1, [r4, #0]
 8001b9a:	22c0      	movs	r2, #192	; 0xc0
 8001b9c:	588b      	ldr	r3, [r1, r2]
 8001b9e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001ba0:	4303      	orrs	r3, r0
 8001ba2:	508b      	str	r3, [r1, r2]
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001ba4:	0020      	movs	r0, r4
 8001ba6:	f7ff fefb 	bl	80019a0 <FDCAN_CalcultateRamBlockAddresses>
  hfdcan->LatestTxFifoQRequest = 0U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	65a3      	str	r3, [r4, #88]	; 0x58
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001bae:	6623      	str	r3, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001bb0:	335c      	adds	r3, #92	; 0x5c
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	e751      	b.n	8001a5e <HAL_FDCAN_Init+0x42>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001bba:	6822      	ldr	r2, [r4, #0]
 8001bbc:	6993      	ldr	r3, [r2, #24]
 8001bbe:	2120      	movs	r1, #32
 8001bc0:	430b      	orrs	r3, r1
 8001bc2:	6193      	str	r3, [r2, #24]
 8001bc4:	e7d3      	b.n	8001b6e <HAL_FDCAN_Init+0x152>
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001bc6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001bc8:	3b01      	subs	r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001bca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001bcc:	3a01      	subs	r2, #1
 8001bce:	0212      	lsls	r2, r2, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001bd0:	4313      	orrs	r3, r2
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001bd2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001bd4:	3a01      	subs	r2, #1
 8001bd6:	0112      	lsls	r2, r2, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001bd8:	4313      	orrs	r3, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001bda:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001bdc:	3a01      	subs	r2, #1
 8001bde:	0412      	lsls	r2, r2, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001be0:	6821      	ldr	r1, [r4, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001be2:	4313      	orrs	r3, r2
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001be4:	60cb      	str	r3, [r1, #12]
 8001be6:	e7d7      	b.n	8001b98 <HAL_FDCAN_Init+0x17c>
    return HAL_ERROR;
 8001be8:	2001      	movs	r0, #1
 8001bea:	e738      	b.n	8001a5e <HAL_FDCAN_Init+0x42>
 8001bec:	40006400 	.word	0x40006400
 8001bf0:	ffffbfff 	.word	0xffffbfff
 8001bf4:	fffffcff 	.word	0xfffffcff
 8001bf8:	40006500 	.word	0x40006500
 8001bfc:	ffffefff 	.word	0xffffefff

08001c00 <HAL_FDCAN_TxEventFifoCallback>:
}
 8001c00:	4770      	bx	lr

08001c02 <HAL_FDCAN_RxFifo0Callback>:
}
 8001c02:	4770      	bx	lr

08001c04 <HAL_FDCAN_RxFifo1Callback>:
}
 8001c04:	4770      	bx	lr

08001c06 <HAL_FDCAN_TxFifoEmptyCallback>:
}
 8001c06:	4770      	bx	lr

08001c08 <HAL_FDCAN_TxBufferCompleteCallback>:
}
 8001c08:	4770      	bx	lr

08001c0a <HAL_FDCAN_TxBufferAbortCallback>:
}
 8001c0a:	4770      	bx	lr

08001c0c <HAL_FDCAN_TimestampWraparoundCallback>:
}
 8001c0c:	4770      	bx	lr

08001c0e <HAL_FDCAN_TimeoutOccurredCallback>:
}
 8001c0e:	4770      	bx	lr

08001c10 <HAL_FDCAN_HighPriorityMessageCallback>:
}
 8001c10:	4770      	bx	lr

08001c12 <HAL_FDCAN_ErrorCallback>:
}
 8001c12:	4770      	bx	lr

08001c14 <HAL_FDCAN_ErrorStatusCallback>:
}
 8001c14:	4770      	bx	lr

08001c16 <HAL_FDCAN_IRQHandler>:
{
 8001c16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c18:	46de      	mov	lr, fp
 8001c1a:	4657      	mov	r7, sl
 8001c1c:	464e      	mov	r6, r9
 8001c1e:	4645      	mov	r5, r8
 8001c20:	b5e0      	push	{r5, r6, r7, lr}
 8001c22:	0004      	movs	r4, r0
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001c24:	6803      	ldr	r3, [r0, #0]
 8001c26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c28:	21e0      	movs	r1, #224	; 0xe0
 8001c2a:	0149      	lsls	r1, r1, #5
 8001c2c:	400a      	ands	r2, r1
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001c2e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001c30:	4011      	ands	r1, r2
 8001c32:	468b      	mov	fp, r1
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001c34:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001c36:	2207      	movs	r2, #7
 8001c38:	400a      	ands	r2, r1
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001c3a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001c3c:	4011      	ands	r1, r2
 8001c3e:	468a      	mov	sl, r1
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001c40:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001c42:	2238      	movs	r2, #56	; 0x38
 8001c44:	400a      	ands	r2, r1
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001c46:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001c48:	4011      	ands	r1, r2
 8001c4a:	4689      	mov	r9, r1
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001c4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c4e:	21f1      	movs	r1, #241	; 0xf1
 8001c50:	0409      	lsls	r1, r1, #16
 8001c52:	400a      	ands	r2, r1
  Errors &= hfdcan->Instance->IE;
 8001c54:	6d5e      	ldr	r6, [r3, #84]	; 0x54
 8001c56:	4016      	ands	r6, r2
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001c58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c5a:	21e0      	movs	r1, #224	; 0xe0
 8001c5c:	0309      	lsls	r1, r1, #12
 8001c5e:	400a      	ands	r2, r1
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001c60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001c62:	4011      	ands	r1, r2
 8001c64:	4688      	mov	r8, r1
  itsource = hfdcan->Instance->IE;
 8001c66:	6d5f      	ldr	r7, [r3, #84]	; 0x54
  itflag = hfdcan->Instance->IR;
 8001c68:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001c6a:	066a      	lsls	r2, r5, #25
 8001c6c:	d501      	bpl.n	8001c72 <HAL_FDCAN_IRQHandler+0x5c>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001c6e:	067a      	lsls	r2, r7, #25
 8001c70:	d43b      	bmi.n	8001cea <HAL_FDCAN_IRQHandler+0xd4>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001c72:	05eb      	lsls	r3, r5, #23
 8001c74:	d501      	bpl.n	8001c7a <HAL_FDCAN_IRQHandler+0x64>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001c76:	05fb      	lsls	r3, r7, #23
 8001c78:	d43c      	bmi.n	8001cf4 <HAL_FDCAN_IRQHandler+0xde>
  if (TxEventFifoITs != 0U)
 8001c7a:	465b      	mov	r3, fp
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d146      	bne.n	8001d0e <HAL_FDCAN_IRQHandler+0xf8>
  if (RxFifo0ITs != 0U)
 8001c80:	4653      	mov	r3, sl
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d14b      	bne.n	8001d1e <HAL_FDCAN_IRQHandler+0x108>
  if (RxFifo1ITs != 0U)
 8001c86:	464b      	mov	r3, r9
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d150      	bne.n	8001d2e <HAL_FDCAN_IRQHandler+0x118>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001c8c:	05ab      	lsls	r3, r5, #22
 8001c8e:	d501      	bpl.n	8001c94 <HAL_FDCAN_IRQHandler+0x7e>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001c90:	05bb      	lsls	r3, r7, #22
 8001c92:	d454      	bmi.n	8001d3e <HAL_FDCAN_IRQHandler+0x128>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001c94:	062b      	lsls	r3, r5, #24
 8001c96:	d501      	bpl.n	8001c9c <HAL_FDCAN_IRQHandler+0x86>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001c98:	063b      	lsls	r3, r7, #24
 8001c9a:	d458      	bmi.n	8001d4e <HAL_FDCAN_IRQHandler+0x138>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001c9c:	04ab      	lsls	r3, r5, #18
 8001c9e:	d501      	bpl.n	8001ca4 <HAL_FDCAN_IRQHandler+0x8e>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001ca0:	04bb      	lsls	r3, r7, #18
 8001ca2:	d460      	bmi.n	8001d66 <HAL_FDCAN_IRQHandler+0x150>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001ca4:	042b      	lsls	r3, r5, #16
 8001ca6:	d501      	bpl.n	8001cac <HAL_FDCAN_IRQHandler+0x96>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001ca8:	043b      	lsls	r3, r7, #16
 8001caa:	d464      	bmi.n	8001d76 <HAL_FDCAN_IRQHandler+0x160>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001cac:	046d      	lsls	r5, r5, #17
 8001cae:	d509      	bpl.n	8001cc4 <HAL_FDCAN_IRQHandler+0xae>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001cb0:	047f      	lsls	r7, r7, #17
 8001cb2:	d507      	bpl.n	8001cc4 <HAL_FDCAN_IRQHandler+0xae>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001cb4:	6823      	ldr	r3, [r4, #0]
 8001cb6:	2280      	movs	r2, #128	; 0x80
 8001cb8:	01d2      	lsls	r2, r2, #7
 8001cba:	651a      	str	r2, [r3, #80]	; 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001cbc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001cbe:	2280      	movs	r2, #128	; 0x80
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	6623      	str	r3, [r4, #96]	; 0x60
  if (ErrorStatusITs != 0U)
 8001cc4:	4643      	mov	r3, r8
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d15d      	bne.n	8001d86 <HAL_FDCAN_IRQHandler+0x170>
  if (Errors != 0U)
 8001cca:	2e00      	cmp	r6, #0
 8001ccc:	d004      	beq.n	8001cd8 <HAL_FDCAN_IRQHandler+0xc2>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001cce:	6823      	ldr	r3, [r4, #0]
 8001cd0:	651e      	str	r6, [r3, #80]	; 0x50
    hfdcan->ErrorCode |= Errors;
 8001cd2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001cd4:	4333      	orrs	r3, r6
 8001cd6:	6623      	str	r3, [r4, #96]	; 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001cd8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d15b      	bne.n	8001d96 <HAL_FDCAN_IRQHandler+0x180>
}
 8001cde:	bcf0      	pop	{r4, r5, r6, r7}
 8001ce0:	46bb      	mov	fp, r7
 8001ce2:	46b2      	mov	sl, r6
 8001ce4:	46a9      	mov	r9, r5
 8001ce6:	46a0      	mov	r8, r4
 8001ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001cea:	2240      	movs	r2, #64	; 0x40
 8001cec:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001cee:	f7ff ff8f 	bl	8001c10 <HAL_FDCAN_HighPriorityMessageCallback>
 8001cf2:	e7be      	b.n	8001c72 <HAL_FDCAN_IRQHandler+0x5c>
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001cf4:	6823      	ldr	r3, [r4, #0]
 8001cf6:	22d8      	movs	r2, #216	; 0xd8
 8001cf8:	589a      	ldr	r2, [r3, r2]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001cfa:	21e0      	movs	r1, #224	; 0xe0
 8001cfc:	5859      	ldr	r1, [r3, r1]
 8001cfe:	4011      	ands	r1, r2
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001d00:	2280      	movs	r2, #128	; 0x80
 8001d02:	0052      	lsls	r2, r2, #1
 8001d04:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001d06:	0020      	movs	r0, r4
 8001d08:	f7ff ff7f 	bl	8001c0a <HAL_FDCAN_TxBufferAbortCallback>
 8001d0c:	e7b5      	b.n	8001c7a <HAL_FDCAN_IRQHandler+0x64>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001d0e:	6823      	ldr	r3, [r4, #0]
 8001d10:	465a      	mov	r2, fp
 8001d12:	651a      	str	r2, [r3, #80]	; 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001d14:	4659      	mov	r1, fp
 8001d16:	0020      	movs	r0, r4
 8001d18:	f7ff ff72 	bl	8001c00 <HAL_FDCAN_TxEventFifoCallback>
 8001d1c:	e7b0      	b.n	8001c80 <HAL_FDCAN_IRQHandler+0x6a>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001d1e:	6823      	ldr	r3, [r4, #0]
 8001d20:	4652      	mov	r2, sl
 8001d22:	651a      	str	r2, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001d24:	4651      	mov	r1, sl
 8001d26:	0020      	movs	r0, r4
 8001d28:	f7ff ff6b 	bl	8001c02 <HAL_FDCAN_RxFifo0Callback>
 8001d2c:	e7ab      	b.n	8001c86 <HAL_FDCAN_IRQHandler+0x70>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001d2e:	6823      	ldr	r3, [r4, #0]
 8001d30:	464a      	mov	r2, r9
 8001d32:	651a      	str	r2, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001d34:	4649      	mov	r1, r9
 8001d36:	0020      	movs	r0, r4
 8001d38:	f7ff ff64 	bl	8001c04 <HAL_FDCAN_RxFifo1Callback>
 8001d3c:	e7a6      	b.n	8001c8c <HAL_FDCAN_IRQHandler+0x76>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001d3e:	6823      	ldr	r3, [r4, #0]
 8001d40:	2280      	movs	r2, #128	; 0x80
 8001d42:	0092      	lsls	r2, r2, #2
 8001d44:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001d46:	0020      	movs	r0, r4
 8001d48:	f7ff ff5d 	bl	8001c06 <HAL_FDCAN_TxFifoEmptyCallback>
 8001d4c:	e7a2      	b.n	8001c94 <HAL_FDCAN_IRQHandler+0x7e>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001d4e:	6823      	ldr	r3, [r4, #0]
 8001d50:	22d4      	movs	r2, #212	; 0xd4
 8001d52:	589a      	ldr	r2, [r3, r2]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001d54:	21dc      	movs	r1, #220	; 0xdc
 8001d56:	5859      	ldr	r1, [r3, r1]
 8001d58:	4011      	ands	r1, r2
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001d5a:	2280      	movs	r2, #128	; 0x80
 8001d5c:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001d5e:	0020      	movs	r0, r4
 8001d60:	f7ff ff52 	bl	8001c08 <HAL_FDCAN_TxBufferCompleteCallback>
 8001d64:	e79a      	b.n	8001c9c <HAL_FDCAN_IRQHandler+0x86>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001d66:	6823      	ldr	r3, [r4, #0]
 8001d68:	2280      	movs	r2, #128	; 0x80
 8001d6a:	0192      	lsls	r2, r2, #6
 8001d6c:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001d6e:	0020      	movs	r0, r4
 8001d70:	f7ff ff4c 	bl	8001c0c <HAL_FDCAN_TimestampWraparoundCallback>
 8001d74:	e796      	b.n	8001ca4 <HAL_FDCAN_IRQHandler+0x8e>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001d76:	6823      	ldr	r3, [r4, #0]
 8001d78:	2280      	movs	r2, #128	; 0x80
 8001d7a:	0212      	lsls	r2, r2, #8
 8001d7c:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001d7e:	0020      	movs	r0, r4
 8001d80:	f7ff ff45 	bl	8001c0e <HAL_FDCAN_TimeoutOccurredCallback>
 8001d84:	e792      	b.n	8001cac <HAL_FDCAN_IRQHandler+0x96>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001d86:	6823      	ldr	r3, [r4, #0]
 8001d88:	4642      	mov	r2, r8
 8001d8a:	651a      	str	r2, [r3, #80]	; 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001d8c:	4641      	mov	r1, r8
 8001d8e:	0020      	movs	r0, r4
 8001d90:	f7ff ff40 	bl	8001c14 <HAL_FDCAN_ErrorStatusCallback>
 8001d94:	e799      	b.n	8001cca <HAL_FDCAN_IRQHandler+0xb4>
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001d96:	0020      	movs	r0, r4
 8001d98:	f7ff ff3b 	bl	8001c12 <HAL_FDCAN_ErrorCallback>
}
 8001d9c:	e79f      	b.n	8001cde <HAL_FDCAN_IRQHandler+0xc8>
	...

08001da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0x00u;
 8001da2:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001da4:	e059      	b.n	8001e5a <HAL_GPIO_Init+0xba>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001da6:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001da8:	005f      	lsls	r7, r3, #1
 8001daa:	2403      	movs	r4, #3
 8001dac:	40bc      	lsls	r4, r7
 8001dae:	43a6      	bics	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001db0:	68cc      	ldr	r4, [r1, #12]
 8001db2:	40bc      	lsls	r4, r7
 8001db4:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8001db6:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001db8:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dba:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dbc:	684e      	ldr	r6, [r1, #4]
 8001dbe:	0936      	lsrs	r6, r6, #4
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	4032      	ands	r2, r6
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001dc8:	6042      	str	r2, [r0, #4]
 8001dca:	e056      	b.n	8001e7a <HAL_GPIO_Init+0xda>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dcc:	08de      	lsrs	r6, r3, #3
 8001dce:	3608      	adds	r6, #8
 8001dd0:	00b6      	lsls	r6, r6, #2
 8001dd2:	5837      	ldr	r7, [r6, r0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dd4:	3205      	adds	r2, #5
 8001dd6:	401a      	ands	r2, r3
 8001dd8:	0092      	lsls	r2, r2, #2
 8001dda:	240f      	movs	r4, #15
 8001ddc:	4094      	lsls	r4, r2
 8001dde:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001de0:	690c      	ldr	r4, [r1, #16]
 8001de2:	4094      	lsls	r4, r2
 8001de4:	0022      	movs	r2, r4
 8001de6:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3u] = temp;
 8001de8:	5032      	str	r2, [r6, r0]
 8001dea:	e059      	b.n	8001ea0 <HAL_GPIO_Init+0x100>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001dec:	2604      	movs	r6, #4
 8001dee:	e000      	b.n	8001df2 <HAL_GPIO_Init+0x52>
 8001df0:	2600      	movs	r6, #0
 8001df2:	40a6      	lsls	r6, r4
 8001df4:	0034      	movs	r4, r6
 8001df6:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2u] = temp;
 8001df8:	4e44      	ldr	r6, [pc, #272]	; (8001f0c <HAL_GPIO_Init+0x16c>)
 8001dfa:	3218      	adds	r2, #24
 8001dfc:	0092      	lsls	r2, r2, #2
 8001dfe:	5194      	str	r4, [r2, r6]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e00:	6837      	ldr	r7, [r6, #0]
        temp &= ~(iocurrent);
 8001e02:	43ea      	mvns	r2, r5
 8001e04:	003e      	movs	r6, r7
 8001e06:	43ae      	bics	r6, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e08:	684c      	ldr	r4, [r1, #4]
 8001e0a:	02e4      	lsls	r4, r4, #11
 8001e0c:	d501      	bpl.n	8001e12 <HAL_GPIO_Init+0x72>
        {
          temp |= iocurrent;
 8001e0e:	003e      	movs	r6, r7
 8001e10:	432e      	orrs	r6, r5
        }
        EXTI->RTSR1 = temp;
 8001e12:	4c3e      	ldr	r4, [pc, #248]	; (8001f0c <HAL_GPIO_Init+0x16c>)
 8001e14:	6026      	str	r6, [r4, #0]

        temp = EXTI->FTSR1;
 8001e16:	6867      	ldr	r7, [r4, #4]
        temp &= ~(iocurrent);
 8001e18:	003e      	movs	r6, r7
 8001e1a:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e1c:	684c      	ldr	r4, [r1, #4]
 8001e1e:	02a4      	lsls	r4, r4, #10
 8001e20:	d501      	bpl.n	8001e26 <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 8001e22:	003e      	movs	r6, r7
 8001e24:	432e      	orrs	r6, r5
        }
        EXTI->FTSR1 = temp;
 8001e26:	4c39      	ldr	r4, [pc, #228]	; (8001f0c <HAL_GPIO_Init+0x16c>)
 8001e28:	6066      	str	r6, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e2a:	2684      	movs	r6, #132	; 0x84
 8001e2c:	59a7      	ldr	r7, [r4, r6]
        temp &= ~(iocurrent);
 8001e2e:	003e      	movs	r6, r7
 8001e30:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e32:	684c      	ldr	r4, [r1, #4]
 8001e34:	03a4      	lsls	r4, r4, #14
 8001e36:	d501      	bpl.n	8001e3c <HAL_GPIO_Init+0x9c>
        {
          temp |= iocurrent;
 8001e38:	003e      	movs	r6, r7
 8001e3a:	432e      	orrs	r6, r5
        }
        EXTI->EMR1 = temp;
 8001e3c:	4c33      	ldr	r4, [pc, #204]	; (8001f0c <HAL_GPIO_Init+0x16c>)
 8001e3e:	2784      	movs	r7, #132	; 0x84
 8001e40:	51e6      	str	r6, [r4, r7]

        temp = EXTI->IMR1;
 8001e42:	2680      	movs	r6, #128	; 0x80
 8001e44:	59a6      	ldr	r6, [r4, r6]
        temp &= ~(iocurrent);
 8001e46:	4032      	ands	r2, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e48:	684c      	ldr	r4, [r1, #4]
 8001e4a:	03e4      	lsls	r4, r4, #15
 8001e4c:	d501      	bpl.n	8001e52 <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 8001e4e:	002a      	movs	r2, r5
 8001e50:	4332      	orrs	r2, r6
        }
        EXTI->IMR1 = temp;
 8001e52:	4d2e      	ldr	r5, [pc, #184]	; (8001f0c <HAL_GPIO_Init+0x16c>)
 8001e54:	2480      	movs	r4, #128	; 0x80
 8001e56:	512a      	str	r2, [r5, r4]
      }
    }

    position++;
 8001e58:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e5a:	680c      	ldr	r4, [r1, #0]
 8001e5c:	0022      	movs	r2, r4
 8001e5e:	40da      	lsrs	r2, r3
 8001e60:	d053      	beq.n	8001f0a <HAL_GPIO_Init+0x16a>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e62:	2201      	movs	r2, #1
 8001e64:	409a      	lsls	r2, r3
 8001e66:	0025      	movs	r5, r4
 8001e68:	4015      	ands	r5, r2
    if (iocurrent != 0x00u)
 8001e6a:	4214      	tst	r4, r2
 8001e6c:	d0f4      	beq.n	8001e58 <HAL_GPIO_Init+0xb8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e6e:	684e      	ldr	r6, [r1, #4]
 8001e70:	2403      	movs	r4, #3
 8001e72:	4034      	ands	r4, r6
 8001e74:	3c01      	subs	r4, #1
 8001e76:	2c01      	cmp	r4, #1
 8001e78:	d995      	bls.n	8001da6 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e7a:	684c      	ldr	r4, [r1, #4]
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	4022      	ands	r2, r4
 8001e80:	2a03      	cmp	r2, #3
 8001e82:	d008      	beq.n	8001e96 <HAL_GPIO_Init+0xf6>
        temp = GPIOx->PUPDR;
 8001e84:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e86:	005e      	lsls	r6, r3, #1
 8001e88:	2203      	movs	r2, #3
 8001e8a:	40b2      	lsls	r2, r6
 8001e8c:	4394      	bics	r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e8e:	688a      	ldr	r2, [r1, #8]
 8001e90:	40b2      	lsls	r2, r6
 8001e92:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001e94:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e96:	684c      	ldr	r4, [r1, #4]
 8001e98:	2203      	movs	r2, #3
 8001e9a:	4022      	ands	r2, r4
 8001e9c:	2a02      	cmp	r2, #2
 8001e9e:	d095      	beq.n	8001dcc <HAL_GPIO_Init+0x2c>
      temp = GPIOx->MODER;
 8001ea0:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ea2:	005e      	lsls	r6, r3, #1
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	0017      	movs	r7, r2
 8001ea8:	40b7      	lsls	r7, r6
 8001eaa:	43bc      	bics	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001eac:	684f      	ldr	r7, [r1, #4]
 8001eae:	403a      	ands	r2, r7
 8001eb0:	40b2      	lsls	r2, r6
 8001eb2:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001eb4:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001eb6:	684c      	ldr	r4, [r1, #4]
 8001eb8:	22c0      	movs	r2, #192	; 0xc0
 8001eba:	0292      	lsls	r2, r2, #10
 8001ebc:	4214      	tst	r4, r2
 8001ebe:	d0cb      	beq.n	8001e58 <HAL_GPIO_Init+0xb8>
        temp = EXTI->EXTICR[position >> 2u];
 8001ec0:	089a      	lsrs	r2, r3, #2
 8001ec2:	0014      	movs	r4, r2
 8001ec4:	3418      	adds	r4, #24
 8001ec6:	00a4      	lsls	r4, r4, #2
 8001ec8:	4e10      	ldr	r6, [pc, #64]	; (8001f0c <HAL_GPIO_Init+0x16c>)
 8001eca:	59a7      	ldr	r7, [r4, r6]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001ecc:	2403      	movs	r4, #3
 8001ece:	401c      	ands	r4, r3
 8001ed0:	00e4      	lsls	r4, r4, #3
 8001ed2:	260f      	movs	r6, #15
 8001ed4:	40a6      	lsls	r6, r4
 8001ed6:	43b7      	bics	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001ed8:	26a0      	movs	r6, #160	; 0xa0
 8001eda:	05f6      	lsls	r6, r6, #23
 8001edc:	42b0      	cmp	r0, r6
 8001ede:	d087      	beq.n	8001df0 <HAL_GPIO_Init+0x50>
 8001ee0:	4e0b      	ldr	r6, [pc, #44]	; (8001f10 <HAL_GPIO_Init+0x170>)
 8001ee2:	42b0      	cmp	r0, r6
 8001ee4:	d00b      	beq.n	8001efe <HAL_GPIO_Init+0x15e>
 8001ee6:	4e0b      	ldr	r6, [pc, #44]	; (8001f14 <HAL_GPIO_Init+0x174>)
 8001ee8:	42b0      	cmp	r0, r6
 8001eea:	d00a      	beq.n	8001f02 <HAL_GPIO_Init+0x162>
 8001eec:	4e0a      	ldr	r6, [pc, #40]	; (8001f18 <HAL_GPIO_Init+0x178>)
 8001eee:	42b0      	cmp	r0, r6
 8001ef0:	d009      	beq.n	8001f06 <HAL_GPIO_Init+0x166>
 8001ef2:	4e0a      	ldr	r6, [pc, #40]	; (8001f1c <HAL_GPIO_Init+0x17c>)
 8001ef4:	42b0      	cmp	r0, r6
 8001ef6:	d100      	bne.n	8001efa <HAL_GPIO_Init+0x15a>
 8001ef8:	e778      	b.n	8001dec <HAL_GPIO_Init+0x4c>
 8001efa:	2605      	movs	r6, #5
 8001efc:	e779      	b.n	8001df2 <HAL_GPIO_Init+0x52>
 8001efe:	2601      	movs	r6, #1
 8001f00:	e777      	b.n	8001df2 <HAL_GPIO_Init+0x52>
 8001f02:	2602      	movs	r6, #2
 8001f04:	e775      	b.n	8001df2 <HAL_GPIO_Init+0x52>
 8001f06:	2603      	movs	r6, #3
 8001f08:	e773      	b.n	8001df2 <HAL_GPIO_Init+0x52>
  }
}
 8001f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f0c:	40021800 	.word	0x40021800
 8001f10:	50000400 	.word	0x50000400
 8001f14:	50000800 	.word	0x50000800
 8001f18:	50000c00 	.word	0x50000c00
 8001f1c:	50001000 	.word	0x50001000

08001f20 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f20:	2a00      	cmp	r2, #0
 8001f22:	d001      	beq.n	8001f28 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f24:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f26:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f28:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001f2a:	e7fc      	b.n	8001f26 <HAL_GPIO_WritePin+0x6>

08001f2c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001f2c:	6802      	ldr	r2, [r0, #0]
 8001f2e:	6993      	ldr	r3, [r2, #24]
 8001f30:	079b      	lsls	r3, r3, #30
 8001f32:	d501      	bpl.n	8001f38 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	6293      	str	r3, [r2, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f38:	6803      	ldr	r3, [r0, #0]
 8001f3a:	699a      	ldr	r2, [r3, #24]
 8001f3c:	07d2      	lsls	r2, r2, #31
 8001f3e:	d403      	bmi.n	8001f48 <I2C_Flush_TXDR+0x1c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f40:	699a      	ldr	r2, [r3, #24]
 8001f42:	2101      	movs	r1, #1
 8001f44:	430a      	orrs	r2, r1
 8001f46:	619a      	str	r2, [r3, #24]
  }
}
 8001f48:	4770      	bx	lr

08001f4a <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8001f4a:	b530      	push	{r4, r5, lr}
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8001f4c:	07cb      	lsls	r3, r1, #31
 8001f4e:	d509      	bpl.n	8001f64 <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001f50:	2341      	movs	r3, #65	; 0x41
 8001f52:	5cc3      	ldrb	r3, [r0, r3]
 8001f54:	2228      	movs	r2, #40	; 0x28
 8001f56:	4013      	ands	r3, r2
 8001f58:	2b28      	cmp	r3, #40	; 0x28
 8001f5a:	d001      	beq.n	8001f60 <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001f5c:	23f2      	movs	r3, #242	; 0xf2
 8001f5e:	e002      	b.n	8001f66 <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8001f60:	331a      	adds	r3, #26
 8001f62:	e000      	b.n	8001f66 <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 8001f64:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8001f66:	078a      	lsls	r2, r1, #30
 8001f68:	d509      	bpl.n	8001f7e <I2C_Disable_IRQ+0x34>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8001f6a:	2444      	movs	r4, #68	; 0x44
 8001f6c:	431c      	orrs	r4, r3

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001f6e:	2241      	movs	r2, #65	; 0x41
 8001f70:	5c82      	ldrb	r2, [r0, r2]
 8001f72:	2528      	movs	r5, #40	; 0x28
 8001f74:	402a      	ands	r2, r5
 8001f76:	2a28      	cmp	r2, #40	; 0x28
 8001f78:	d00f      	beq.n	8001f9a <I2C_Disable_IRQ+0x50>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001f7a:	22f4      	movs	r2, #244	; 0xf4
 8001f7c:	4313      	orrs	r3, r2
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8001f7e:	b20a      	sxth	r2, r1
 8001f80:	2a00      	cmp	r2, #0
 8001f82:	db0c      	blt.n	8001f9e <I2C_Disable_IRQ+0x54>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8001f84:	2910      	cmp	r1, #16
 8001f86:	d00d      	beq.n	8001fa4 <I2C_Disable_IRQ+0x5a>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8001f88:	2920      	cmp	r1, #32
 8001f8a:	d00e      	beq.n	8001faa <I2C_Disable_IRQ+0x60>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8001f8c:	2940      	cmp	r1, #64	; 0x40
 8001f8e:	d00f      	beq.n	8001fb0 <I2C_Disable_IRQ+0x66>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001f90:	6801      	ldr	r1, [r0, #0]
 8001f92:	680a      	ldr	r2, [r1, #0]
 8001f94:	439a      	bics	r2, r3
 8001f96:	600a      	str	r2, [r1, #0]
}
 8001f98:	bd30      	pop	{r4, r5, pc}
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8001f9a:	0023      	movs	r3, r4
 8001f9c:	e7ef      	b.n	8001f7e <I2C_Disable_IRQ+0x34>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001f9e:	22b8      	movs	r2, #184	; 0xb8
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	e7ef      	b.n	8001f84 <I2C_Disable_IRQ+0x3a>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8001fa4:	2290      	movs	r2, #144	; 0x90
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	e7ee      	b.n	8001f88 <I2C_Disable_IRQ+0x3e>
    tmpisr |= I2C_IT_STOPI;
 8001faa:	2220      	movs	r2, #32
 8001fac:	4313      	orrs	r3, r2
 8001fae:	e7ed      	b.n	8001f8c <I2C_Disable_IRQ+0x42>
    tmpisr |= I2C_IT_TCI;
 8001fb0:	2240      	movs	r2, #64	; 0x40
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	e7ec      	b.n	8001f90 <I2C_Disable_IRQ+0x46>
	...

08001fb8 <HAL_I2C_Init>:
{
 8001fb8:	b510      	push	{r4, lr}
 8001fba:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 8001fbc:	d059      	beq.n	8002072 <HAL_I2C_Init+0xba>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fbe:	2341      	movs	r3, #65	; 0x41
 8001fc0:	5cc3      	ldrb	r3, [r0, r3]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d043      	beq.n	800204e <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fc6:	2341      	movs	r3, #65	; 0x41
 8001fc8:	2224      	movs	r2, #36	; 0x24
 8001fca:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 8001fcc:	6822      	ldr	r2, [r4, #0]
 8001fce:	6813      	ldr	r3, [r2, #0]
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	438b      	bics	r3, r1
 8001fd4:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fd6:	6863      	ldr	r3, [r4, #4]
 8001fd8:	6822      	ldr	r2, [r4, #0]
 8001fda:	4927      	ldr	r1, [pc, #156]	; (8002078 <HAL_I2C_Init+0xc0>)
 8001fdc:	400b      	ands	r3, r1
 8001fde:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fe0:	6822      	ldr	r2, [r4, #0]
 8001fe2:	6893      	ldr	r3, [r2, #8]
 8001fe4:	4925      	ldr	r1, [pc, #148]	; (800207c <HAL_I2C_Init+0xc4>)
 8001fe6:	400b      	ands	r3, r1
 8001fe8:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fea:	68e3      	ldr	r3, [r4, #12]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d034      	beq.n	800205a <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ff0:	68a1      	ldr	r1, [r4, #8]
 8001ff2:	6822      	ldr	r2, [r4, #0]
 8001ff4:	2384      	movs	r3, #132	; 0x84
 8001ff6:	021b      	lsls	r3, r3, #8
 8001ff8:	430b      	orrs	r3, r1
 8001ffa:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ffc:	68e3      	ldr	r3, [r4, #12]
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d032      	beq.n	8002068 <HAL_I2C_Init+0xb0>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002002:	6822      	ldr	r2, [r4, #0]
 8002004:	6851      	ldr	r1, [r2, #4]
 8002006:	4b1e      	ldr	r3, [pc, #120]	; (8002080 <HAL_I2C_Init+0xc8>)
 8002008:	430b      	orrs	r3, r1
 800200a:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800200c:	6822      	ldr	r2, [r4, #0]
 800200e:	68d3      	ldr	r3, [r2, #12]
 8002010:	491a      	ldr	r1, [pc, #104]	; (800207c <HAL_I2C_Init+0xc4>)
 8002012:	400b      	ands	r3, r1
 8002014:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002016:	6923      	ldr	r3, [r4, #16]
 8002018:	6962      	ldr	r2, [r4, #20]
 800201a:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800201c:	69a2      	ldr	r2, [r4, #24]
 800201e:	0212      	lsls	r2, r2, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002020:	6821      	ldr	r1, [r4, #0]
 8002022:	4313      	orrs	r3, r2
 8002024:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002026:	69e3      	ldr	r3, [r4, #28]
 8002028:	6a21      	ldr	r1, [r4, #32]
 800202a:	6822      	ldr	r2, [r4, #0]
 800202c:	430b      	orrs	r3, r1
 800202e:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002030:	6822      	ldr	r2, [r4, #0]
 8002032:	6813      	ldr	r3, [r2, #0]
 8002034:	2101      	movs	r1, #1
 8002036:	430b      	orrs	r3, r1
 8002038:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800203a:	2300      	movs	r3, #0
 800203c:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800203e:	2241      	movs	r2, #65	; 0x41
 8002040:	311f      	adds	r1, #31
 8002042:	54a1      	strb	r1, [r4, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002044:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002046:	3201      	adds	r2, #1
 8002048:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 800204a:	2000      	movs	r0, #0
}
 800204c:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800204e:	3340      	adds	r3, #64	; 0x40
 8002050:	2200      	movs	r2, #0
 8002052:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8002054:	f7fe fcca 	bl	80009ec <HAL_I2C_MspInit>
 8002058:	e7b5      	b.n	8001fc6 <HAL_I2C_Init+0xe>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800205a:	68a1      	ldr	r1, [r4, #8]
 800205c:	6822      	ldr	r2, [r4, #0]
 800205e:	2380      	movs	r3, #128	; 0x80
 8002060:	021b      	lsls	r3, r3, #8
 8002062:	430b      	orrs	r3, r1
 8002064:	6093      	str	r3, [r2, #8]
 8002066:	e7c9      	b.n	8001ffc <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002068:	6823      	ldr	r3, [r4, #0]
 800206a:	2280      	movs	r2, #128	; 0x80
 800206c:	0112      	lsls	r2, r2, #4
 800206e:	605a      	str	r2, [r3, #4]
 8002070:	e7c7      	b.n	8002002 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8002072:	2001      	movs	r0, #1
 8002074:	e7ea      	b.n	800204c <HAL_I2C_Init+0x94>
 8002076:	46c0      	nop			; (mov r8, r8)
 8002078:	f0ffffff 	.word	0xf0ffffff
 800207c:	ffff7fff 	.word	0xffff7fff
 8002080:	02008000 	.word	0x02008000

08002084 <HAL_I2C_EV_IRQHandler>:
{
 8002084:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002086:	6803      	ldr	r3, [r0, #0]
 8002088:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800208a:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 800208c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800208e:	2b00      	cmp	r3, #0
 8002090:	d000      	beq.n	8002094 <HAL_I2C_EV_IRQHandler+0x10>
    hi2c->XferISR(hi2c, itflags, itsources);
 8002092:	4798      	blx	r3
}
 8002094:	bd10      	pop	{r4, pc}

08002096 <HAL_I2C_SlaveTxCpltCallback>:
}
 8002096:	4770      	bx	lr

08002098 <HAL_I2C_SlaveRxCpltCallback>:
}
 8002098:	4770      	bx	lr
	...

0800209c <I2C_ITSlaveSeqCplt>:
{
 800209c:	b510      	push	{r4, lr}
 800209e:	0004      	movs	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80020a0:	6803      	ldr	r3, [r0, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a4:	2142      	movs	r1, #66	; 0x42
 80020a6:	2000      	movs	r0, #0
 80020a8:	5460      	strb	r0, [r4, r1]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80020aa:	0451      	lsls	r1, r2, #17
 80020ac:	d50c      	bpl.n	80020c8 <I2C_ITSlaveSeqCplt+0x2c>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	4919      	ldr	r1, [pc, #100]	; (8002118 <I2C_ITSlaveSeqCplt+0x7c>)
 80020b2:	400a      	ands	r2, r1
 80020b4:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80020b6:	2341      	movs	r3, #65	; 0x41
 80020b8:	5ce3      	ldrb	r3, [r4, r3]
 80020ba:	2b29      	cmp	r3, #41	; 0x29
 80020bc:	d00b      	beq.n	80020d6 <I2C_ITSlaveSeqCplt+0x3a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80020be:	2341      	movs	r3, #65	; 0x41
 80020c0:	5ce3      	ldrb	r3, [r4, r3]
 80020c2:	2b2a      	cmp	r3, #42	; 0x2a
 80020c4:	d017      	beq.n	80020f6 <I2C_ITSlaveSeqCplt+0x5a>
}
 80020c6:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80020c8:	0412      	lsls	r2, r2, #16
 80020ca:	d5f4      	bpl.n	80020b6 <I2C_ITSlaveSeqCplt+0x1a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	4913      	ldr	r1, [pc, #76]	; (800211c <I2C_ITSlaveSeqCplt+0x80>)
 80020d0:	400a      	ands	r2, r1
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	e7ef      	b.n	80020b6 <I2C_ITSlaveSeqCplt+0x1a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80020d6:	3318      	adds	r3, #24
 80020d8:	2228      	movs	r2, #40	; 0x28
 80020da:	54e2      	strb	r2, [r4, r3]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80020dc:	3b20      	subs	r3, #32
 80020de:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80020e0:	2101      	movs	r1, #1
 80020e2:	0020      	movs	r0, r4
 80020e4:	f7ff ff31 	bl	8001f4a <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80020e8:	2340      	movs	r3, #64	; 0x40
 80020ea:	2200      	movs	r2, #0
 80020ec:	54e2      	strb	r2, [r4, r3]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80020ee:	0020      	movs	r0, r4
 80020f0:	f7ff ffd1 	bl	8002096 <HAL_I2C_SlaveTxCpltCallback>
 80020f4:	e7e7      	b.n	80020c6 <I2C_ITSlaveSeqCplt+0x2a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80020f6:	3317      	adds	r3, #23
 80020f8:	2228      	movs	r2, #40	; 0x28
 80020fa:	54e2      	strb	r2, [r4, r3]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80020fc:	3b1f      	subs	r3, #31
 80020fe:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002100:	2102      	movs	r1, #2
 8002102:	0020      	movs	r0, r4
 8002104:	f7ff ff21 	bl	8001f4a <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002108:	2340      	movs	r3, #64	; 0x40
 800210a:	2200      	movs	r2, #0
 800210c:	54e2      	strb	r2, [r4, r3]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800210e:	0020      	movs	r0, r4
 8002110:	f7ff ffc2 	bl	8002098 <HAL_I2C_SlaveRxCpltCallback>
}
 8002114:	e7d7      	b.n	80020c6 <I2C_ITSlaveSeqCplt+0x2a>
 8002116:	46c0      	nop			; (mov r8, r8)
 8002118:	ffffbfff 	.word	0xffffbfff
 800211c:	ffff7fff 	.word	0xffff7fff

08002120 <HAL_I2C_AddrCallback>:
}
 8002120:	4770      	bx	lr

08002122 <I2C_ITAddrCplt>:
{
 8002122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002124:	0004      	movs	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002126:	2341      	movs	r3, #65	; 0x41
 8002128:	5cc3      	ldrb	r3, [r0, r3]
 800212a:	2228      	movs	r2, #40	; 0x28
 800212c:	4013      	ands	r3, r2
 800212e:	2b28      	cmp	r3, #40	; 0x28
 8002130:	d006      	beq.n	8002140 <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002132:	6803      	ldr	r3, [r0, #0]
 8002134:	2208      	movs	r2, #8
 8002136:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002138:	2340      	movs	r3, #64	; 0x40
 800213a:	2200      	movs	r2, #0
 800213c:	54c2      	strb	r2, [r0, r3]
}
 800213e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 8002140:	6800      	ldr	r0, [r0, #0]
 8002142:	6985      	ldr	r5, [r0, #24]
 8002144:	0c2d      	lsrs	r5, r5, #16
 8002146:	3b27      	subs	r3, #39	; 0x27
 8002148:	401d      	ands	r5, r3
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800214a:	6986      	ldr	r6, [r0, #24]
 800214c:	0c36      	lsrs	r6, r6, #16
 800214e:	21fe      	movs	r1, #254	; 0xfe
 8002150:	400e      	ands	r6, r1
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002152:	6883      	ldr	r3, [r0, #8]
 8002154:	059b      	lsls	r3, r3, #22
 8002156:	0d9b      	lsrs	r3, r3, #22
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002158:	68c7      	ldr	r7, [r0, #12]
 800215a:	400f      	ands	r7, r1
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800215c:	68e2      	ldr	r2, [r4, #12]
 800215e:	2a02      	cmp	r2, #2
 8002160:	d124      	bne.n	80021ac <I2C_ITAddrCplt+0x8a>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002162:	09da      	lsrs	r2, r3, #7
 8002164:	4072      	eors	r2, r6
 8002166:	39f8      	subs	r1, #248	; 0xf8
 8002168:	4211      	tst	r1, r2
 800216a:	d111      	bne.n	8002190 <I2C_ITAddrCplt+0x6e>
        hi2c->AddrEventCount++;
 800216c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800216e:	3201      	adds	r2, #1
 8002170:	64a2      	str	r2, [r4, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002172:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002174:	2a02      	cmp	r2, #2
 8002176:	d1e2      	bne.n	800213e <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
 8002178:	2200      	movs	r2, #0
 800217a:	64a2      	str	r2, [r4, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800217c:	3102      	adds	r1, #2
 800217e:	61c1      	str	r1, [r0, #28]
          __HAL_UNLOCK(hi2c);
 8002180:	3138      	adds	r1, #56	; 0x38
 8002182:	5462      	strb	r2, [r4, r1]
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002184:	001a      	movs	r2, r3
 8002186:	0029      	movs	r1, r5
 8002188:	0020      	movs	r0, r4
 800218a:	f7ff ffc9 	bl	8002120 <HAL_I2C_AddrCallback>
 800218e:	e7d6      	b.n	800213e <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002190:	2180      	movs	r1, #128	; 0x80
 8002192:	0209      	lsls	r1, r1, #8
 8002194:	0020      	movs	r0, r4
 8002196:	f7ff fed8 	bl	8001f4a <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800219a:	2340      	movs	r3, #64	; 0x40
 800219c:	2200      	movs	r2, #0
 800219e:	54e2      	strb	r2, [r4, r3]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80021a0:	003a      	movs	r2, r7
 80021a2:	0029      	movs	r1, r5
 80021a4:	0020      	movs	r0, r4
 80021a6:	f7ff ffbb 	bl	8002120 <HAL_I2C_AddrCallback>
 80021aa:	e7c8      	b.n	800213e <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80021ac:	2180      	movs	r1, #128	; 0x80
 80021ae:	0209      	lsls	r1, r1, #8
 80021b0:	0020      	movs	r0, r4
 80021b2:	f7ff feca 	bl	8001f4a <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80021b6:	2340      	movs	r3, #64	; 0x40
 80021b8:	2200      	movs	r2, #0
 80021ba:	54e2      	strb	r2, [r4, r3]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80021bc:	0032      	movs	r2, r6
 80021be:	0029      	movs	r1, r5
 80021c0:	0020      	movs	r0, r4
 80021c2:	f7ff ffad 	bl	8002120 <HAL_I2C_AddrCallback>
 80021c6:	e7ba      	b.n	800213e <I2C_ITAddrCplt+0x1c>

080021c8 <HAL_I2C_ListenCpltCallback>:
}
 80021c8:	4770      	bx	lr
	...

080021cc <I2C_ITListenCplt>:
{
 80021cc:	b510      	push	{r4, lr}
 80021ce:	0004      	movs	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021d0:	4b16      	ldr	r3, [pc, #88]	; (800222c <I2C_ITListenCplt+0x60>)
 80021d2:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80021d4:	2300      	movs	r3, #0
 80021d6:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80021d8:	2241      	movs	r2, #65	; 0x41
 80021da:	2020      	movs	r0, #32
 80021dc:	54a0      	strb	r0, [r4, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021de:	3201      	adds	r2, #1
 80021e0:	54a3      	strb	r3, [r4, r2]
  hi2c->XferISR = NULL;
 80021e2:	6363      	str	r3, [r4, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80021e4:	0749      	lsls	r1, r1, #29
 80021e6:	d513      	bpl.n	8002210 <I2C_ITListenCplt+0x44>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80021e8:	6823      	ldr	r3, [r4, #0]
 80021ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80021ee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80021f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80021f2:	3301      	adds	r3, #1
 80021f4:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80021f6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d009      	beq.n	8002210 <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 80021fc:	3b01      	subs	r3, #1
 80021fe:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002200:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002202:	3b01      	subs	r3, #1
 8002204:	b29b      	uxth	r3, r3
 8002206:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002208:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800220a:	2204      	movs	r2, #4
 800220c:	4313      	orrs	r3, r2
 800220e:	6463      	str	r3, [r4, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002210:	4907      	ldr	r1, [pc, #28]	; (8002230 <I2C_ITListenCplt+0x64>)
 8002212:	0020      	movs	r0, r4
 8002214:	f7ff fe99 	bl	8001f4a <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002218:	6823      	ldr	r3, [r4, #0]
 800221a:	2210      	movs	r2, #16
 800221c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800221e:	2340      	movs	r3, #64	; 0x40
 8002220:	2200      	movs	r2, #0
 8002222:	54e2      	strb	r2, [r4, r3]
  HAL_I2C_ListenCpltCallback(hi2c);
 8002224:	0020      	movs	r0, r4
 8002226:	f7ff ffcf 	bl	80021c8 <HAL_I2C_ListenCpltCallback>
}
 800222a:	bd10      	pop	{r4, pc}
 800222c:	ffff0000 	.word	0xffff0000
 8002230:	00008003 	.word	0x00008003

08002234 <HAL_I2C_ErrorCallback>:
}
 8002234:	4770      	bx	lr

08002236 <HAL_I2C_AbortCpltCallback>:
}
 8002236:	4770      	bx	lr

08002238 <I2C_TreatErrorCallback>:
{
 8002238:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800223a:	2341      	movs	r3, #65	; 0x41
 800223c:	5cc3      	ldrb	r3, [r0, r3]
 800223e:	2b60      	cmp	r3, #96	; 0x60
 8002240:	d006      	beq.n	8002250 <I2C_TreatErrorCallback+0x18>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002242:	2300      	movs	r3, #0
 8002244:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002246:	2240      	movs	r2, #64	; 0x40
 8002248:	5483      	strb	r3, [r0, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800224a:	f7ff fff3 	bl	8002234 <HAL_I2C_ErrorCallback>
}
 800224e:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8002250:	3b1f      	subs	r3, #31
 8002252:	2220      	movs	r2, #32
 8002254:	54c2      	strb	r2, [r0, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002256:	2300      	movs	r3, #0
 8002258:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800225a:	3220      	adds	r2, #32
 800225c:	5483      	strb	r3, [r0, r2]
    HAL_I2C_AbortCpltCallback(hi2c);
 800225e:	f7ff ffea 	bl	8002236 <HAL_I2C_AbortCpltCallback>
 8002262:	e7f4      	b.n	800224e <I2C_TreatErrorCallback+0x16>

08002264 <I2C_ITError>:
{
 8002264:	b510      	push	{r4, lr}
 8002266:	0004      	movs	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002268:	2341      	movs	r3, #65	; 0x41
 800226a:	5cc3      	ldrb	r3, [r0, r3]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800226c:	2200      	movs	r2, #0
 800226e:	2042      	movs	r0, #66	; 0x42
 8002270:	5422      	strb	r2, [r4, r0]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002272:	483a      	ldr	r0, [pc, #232]	; (800235c <I2C_ITError+0xf8>)
 8002274:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002276:	8562      	strh	r2, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8002278:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800227a:	430a      	orrs	r2, r1
 800227c:	6462      	str	r2, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800227e:	3b28      	subs	r3, #40	; 0x28
 8002280:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002282:	2b02      	cmp	r3, #2
 8002284:	d81b      	bhi.n	80022be <I2C_ITError+0x5a>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002286:	2103      	movs	r1, #3
 8002288:	0020      	movs	r0, r4
 800228a:	f7ff fe5e 	bl	8001f4a <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800228e:	2341      	movs	r3, #65	; 0x41
 8002290:	2228      	movs	r2, #40	; 0x28
 8002292:	54e2      	strb	r2, [r4, r3]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002294:	4b32      	ldr	r3, [pc, #200]	; (8002360 <I2C_ITError+0xfc>)
 8002296:	6363      	str	r3, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 8002298:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800229a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800229c:	2a00      	cmp	r2, #0
 800229e:	d003      	beq.n	80022a8 <I2C_ITError+0x44>
 80022a0:	2b11      	cmp	r3, #17
 80022a2:	d01a      	beq.n	80022da <I2C_ITError+0x76>
 80022a4:	2b21      	cmp	r3, #33	; 0x21
 80022a6:	d018      	beq.n	80022da <I2C_ITError+0x76>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80022a8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80022aa:	2a00      	cmp	r2, #0
 80022ac:	d003      	beq.n	80022b6 <I2C_ITError+0x52>
 80022ae:	2b12      	cmp	r3, #18
 80022b0:	d033      	beq.n	800231a <I2C_ITError+0xb6>
 80022b2:	2b22      	cmp	r3, #34	; 0x22
 80022b4:	d031      	beq.n	800231a <I2C_ITError+0xb6>
    I2C_TreatErrorCallback(hi2c);
 80022b6:	0020      	movs	r0, r4
 80022b8:	f7ff ffbe 	bl	8002238 <I2C_TreatErrorCallback>
}
 80022bc:	bd10      	pop	{r4, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80022be:	4929      	ldr	r1, [pc, #164]	; (8002364 <I2C_ITError+0x100>)
 80022c0:	0020      	movs	r0, r4
 80022c2:	f7ff fe42 	bl	8001f4a <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80022c6:	2341      	movs	r3, #65	; 0x41
 80022c8:	5ce3      	ldrb	r3, [r4, r3]
 80022ca:	2b60      	cmp	r3, #96	; 0x60
 80022cc:	d002      	beq.n	80022d4 <I2C_ITError+0x70>
      hi2c->State         = HAL_I2C_STATE_READY;
 80022ce:	2341      	movs	r3, #65	; 0x41
 80022d0:	2220      	movs	r2, #32
 80022d2:	54e2      	strb	r2, [r4, r3]
    hi2c->XferISR       = NULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	6363      	str	r3, [r4, #52]	; 0x34
 80022d8:	e7de      	b.n	8002298 <I2C_ITError+0x34>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80022da:	6822      	ldr	r2, [r4, #0]
 80022dc:	6813      	ldr	r3, [r2, #0]
 80022de:	045b      	lsls	r3, r3, #17
 80022e0:	d503      	bpl.n	80022ea <I2C_ITError+0x86>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80022e2:	6813      	ldr	r3, [r2, #0]
 80022e4:	4920      	ldr	r1, [pc, #128]	; (8002368 <I2C_ITError+0x104>)
 80022e6:	400b      	ands	r3, r1
 80022e8:	6013      	str	r3, [r2, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80022ea:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80022ec:	f7ff fb54 	bl	8001998 <HAL_DMA_GetState>
 80022f0:	2801      	cmp	r0, #1
 80022f2:	d00e      	beq.n	8002312 <I2C_ITError+0xae>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80022f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80022f6:	4a1d      	ldr	r2, [pc, #116]	; (800236c <I2C_ITError+0x108>)
 80022f8:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 80022fa:	2340      	movs	r3, #64	; 0x40
 80022fc:	2200      	movs	r2, #0
 80022fe:	54e2      	strb	r2, [r4, r3]
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002300:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002302:	f7ff fa9f 	bl	8001844 <HAL_DMA_Abort_IT>
 8002306:	2800      	cmp	r0, #0
 8002308:	d0d8      	beq.n	80022bc <I2C_ITError+0x58>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800230a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800230c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800230e:	4798      	blx	r3
 8002310:	e7d4      	b.n	80022bc <I2C_ITError+0x58>
      I2C_TreatErrorCallback(hi2c);
 8002312:	0020      	movs	r0, r4
 8002314:	f7ff ff90 	bl	8002238 <I2C_TreatErrorCallback>
 8002318:	e7d0      	b.n	80022bc <I2C_ITError+0x58>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800231a:	6823      	ldr	r3, [r4, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	0412      	lsls	r2, r2, #16
 8002320:	d503      	bpl.n	800232a <I2C_ITError+0xc6>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	4912      	ldr	r1, [pc, #72]	; (8002370 <I2C_ITError+0x10c>)
 8002326:	400a      	ands	r2, r1
 8002328:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800232a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800232c:	f7ff fb34 	bl	8001998 <HAL_DMA_GetState>
 8002330:	2801      	cmp	r0, #1
 8002332:	d00e      	beq.n	8002352 <I2C_ITError+0xee>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002334:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002336:	4a0d      	ldr	r2, [pc, #52]	; (800236c <I2C_ITError+0x108>)
 8002338:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800233a:	2340      	movs	r3, #64	; 0x40
 800233c:	2200      	movs	r2, #0
 800233e:	54e2      	strb	r2, [r4, r3]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002340:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002342:	f7ff fa7f 	bl	8001844 <HAL_DMA_Abort_IT>
 8002346:	2800      	cmp	r0, #0
 8002348:	d0b8      	beq.n	80022bc <I2C_ITError+0x58>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800234a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800234c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800234e:	4798      	blx	r3
 8002350:	e7b4      	b.n	80022bc <I2C_ITError+0x58>
      I2C_TreatErrorCallback(hi2c);
 8002352:	0020      	movs	r0, r4
 8002354:	f7ff ff70 	bl	8002238 <I2C_TreatErrorCallback>
 8002358:	e7b0      	b.n	80022bc <I2C_ITError+0x58>
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	ffff0000 	.word	0xffff0000
 8002360:	080024dd 	.word	0x080024dd
 8002364:	00008003 	.word	0x00008003
 8002368:	ffffbfff 	.word	0xffffbfff
 800236c:	08002683 	.word	0x08002683
 8002370:	ffff7fff 	.word	0xffff7fff

08002374 <I2C_ITSlaveCplt>:
{
 8002374:	b570      	push	{r4, r5, r6, lr}
 8002376:	0004      	movs	r4, r0
 8002378:	000d      	movs	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800237a:	6802      	ldr	r2, [r0, #0]
 800237c:	6816      	ldr	r6, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800237e:	2341      	movs	r3, #65	; 0x41
 8002380:	5cc3      	ldrb	r3, [r0, r3]
 8002382:	b2d9      	uxtb	r1, r3
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002384:	2020      	movs	r0, #32
 8002386:	61d0      	str	r0, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002388:	2b21      	cmp	r3, #33	; 0x21
 800238a:	d00c      	beq.n	80023a6 <I2C_ITSlaveCplt+0x32>
 800238c:	2929      	cmp	r1, #41	; 0x29
 800238e:	d00a      	beq.n	80023a6 <I2C_ITSlaveCplt+0x32>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002390:	2922      	cmp	r1, #34	; 0x22
 8002392:	d001      	beq.n	8002398 <I2C_ITSlaveCplt+0x24>
 8002394:	292a      	cmp	r1, #42	; 0x2a
 8002396:	d10c      	bne.n	80023b2 <I2C_ITSlaveCplt+0x3e>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002398:	494a      	ldr	r1, [pc, #296]	; (80024c4 <I2C_ITSlaveCplt+0x150>)
 800239a:	0020      	movs	r0, r4
 800239c:	f7ff fdd5 	bl	8001f4a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80023a0:	2322      	movs	r3, #34	; 0x22
 80023a2:	6323      	str	r3, [r4, #48]	; 0x30
 80023a4:	e005      	b.n	80023b2 <I2C_ITSlaveCplt+0x3e>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80023a6:	4948      	ldr	r1, [pc, #288]	; (80024c8 <I2C_ITSlaveCplt+0x154>)
 80023a8:	0020      	movs	r0, r4
 80023aa:	f7ff fdce 	bl	8001f4a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80023ae:	2321      	movs	r3, #33	; 0x21
 80023b0:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80023b2:	6822      	ldr	r2, [r4, #0]
 80023b4:	6851      	ldr	r1, [r2, #4]
 80023b6:	2380      	movs	r3, #128	; 0x80
 80023b8:	021b      	lsls	r3, r3, #8
 80023ba:	430b      	orrs	r3, r1
 80023bc:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 80023be:	6822      	ldr	r2, [r4, #0]
 80023c0:	6853      	ldr	r3, [r2, #4]
 80023c2:	4942      	ldr	r1, [pc, #264]	; (80024cc <I2C_ITSlaveCplt+0x158>)
 80023c4:	400b      	ands	r3, r1
 80023c6:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 80023c8:	0020      	movs	r0, r4
 80023ca:	f7ff fdaf 	bl	8001f2c <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80023ce:	0473      	lsls	r3, r6, #17
 80023d0:	d541      	bpl.n	8002456 <I2C_ITSlaveCplt+0xe2>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80023d2:	6822      	ldr	r2, [r4, #0]
 80023d4:	6813      	ldr	r3, [r2, #0]
 80023d6:	493e      	ldr	r1, [pc, #248]	; (80024d0 <I2C_ITSlaveCplt+0x15c>)
 80023d8:	400b      	ands	r3, r1
 80023da:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 80023dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <I2C_ITSlaveCplt+0x76>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80023ea:	076b      	lsls	r3, r5, #29
 80023ec:	d511      	bpl.n	8002412 <I2C_ITSlaveCplt+0x9e>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80023ee:	2304      	movs	r3, #4
 80023f0:	439d      	bics	r5, r3
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80023f2:	6823      	ldr	r3, [r4, #0]
 80023f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80023f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80023fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80023fc:	3301      	adds	r3, #1
 80023fe:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8002400:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002402:	2b00      	cmp	r3, #0
 8002404:	d005      	beq.n	8002412 <I2C_ITSlaveCplt+0x9e>
      hi2c->XferSize--;
 8002406:	3b01      	subs	r3, #1
 8002408:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800240a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800240c:	3b01      	subs	r3, #1
 800240e:	b29b      	uxth	r3, r3
 8002410:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8002412:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002414:	b29b      	uxth	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <I2C_ITSlaveCplt+0xae>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800241a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800241c:	2204      	movs	r2, #4
 800241e:	4313      	orrs	r3, r2
 8002420:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002422:	2300      	movs	r3, #0
 8002424:	2242      	movs	r2, #66	; 0x42
 8002426:	54a3      	strb	r3, [r4, r2]
  hi2c->XferISR = NULL;
 8002428:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800242a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800242c:	2b00      	cmp	r3, #0
 800242e:	d121      	bne.n	8002474 <I2C_ITSlaveCplt+0x100>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002430:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002432:	4b28      	ldr	r3, [pc, #160]	; (80024d4 <I2C_ITSlaveCplt+0x160>)
 8002434:	429a      	cmp	r2, r3
 8002436:	d12a      	bne.n	800248e <I2C_ITSlaveCplt+0x11a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002438:	2341      	movs	r3, #65	; 0x41
 800243a:	5ce3      	ldrb	r3, [r4, r3]
 800243c:	2b22      	cmp	r3, #34	; 0x22
 800243e:	d036      	beq.n	80024ae <I2C_ITSlaveCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8002440:	2341      	movs	r3, #65	; 0x41
 8002442:	2220      	movs	r2, #32
 8002444:	54e2      	strb	r2, [r4, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002446:	2300      	movs	r3, #0
 8002448:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800244a:	3220      	adds	r2, #32
 800244c:	54a3      	strb	r3, [r4, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800244e:	0020      	movs	r0, r4
 8002450:	f7ff fe21 	bl	8002096 <HAL_I2C_SlaveTxCpltCallback>
}
 8002454:	e02a      	b.n	80024ac <I2C_ITSlaveCplt+0x138>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002456:	0436      	lsls	r6, r6, #16
 8002458:	d5c7      	bpl.n	80023ea <I2C_ITSlaveCplt+0x76>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800245a:	6822      	ldr	r2, [r4, #0]
 800245c:	6813      	ldr	r3, [r2, #0]
 800245e:	491e      	ldr	r1, [pc, #120]	; (80024d8 <I2C_ITSlaveCplt+0x164>)
 8002460:	400b      	ands	r3, r1
 8002462:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 8002464:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0bf      	beq.n	80023ea <I2C_ITSlaveCplt+0x76>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	b29b      	uxth	r3, r3
 8002470:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002472:	e7ba      	b.n	80023ea <I2C_ITSlaveCplt+0x76>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002474:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002476:	0020      	movs	r0, r4
 8002478:	f7ff fef4 	bl	8002264 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800247c:	2341      	movs	r3, #65	; 0x41
 800247e:	5ce3      	ldrb	r3, [r4, r3]
 8002480:	2b28      	cmp	r3, #40	; 0x28
 8002482:	d113      	bne.n	80024ac <I2C_ITSlaveCplt+0x138>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002484:	0029      	movs	r1, r5
 8002486:	0020      	movs	r0, r4
 8002488:	f7ff fea0 	bl	80021cc <I2C_ITListenCplt>
 800248c:	e00e      	b.n	80024ac <I2C_ITSlaveCplt+0x138>
    I2C_ITSlaveSeqCplt(hi2c);
 800248e:	0020      	movs	r0, r4
 8002490:	f7ff fe04 	bl	800209c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002494:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <I2C_ITSlaveCplt+0x160>)
 8002496:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002498:	2341      	movs	r3, #65	; 0x41
 800249a:	2220      	movs	r2, #32
 800249c:	54e2      	strb	r2, [r4, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 800249e:	2300      	movs	r3, #0
 80024a0:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80024a2:	3220      	adds	r2, #32
 80024a4:	54a3      	strb	r3, [r4, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80024a6:	0020      	movs	r0, r4
 80024a8:	f7ff fe8e 	bl	80021c8 <HAL_I2C_ListenCpltCallback>
}
 80024ac:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80024ae:	331f      	adds	r3, #31
 80024b0:	2220      	movs	r2, #32
 80024b2:	54e2      	strb	r2, [r4, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80024b8:	3220      	adds	r2, #32
 80024ba:	54a3      	strb	r3, [r4, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80024bc:	0020      	movs	r0, r4
 80024be:	f7ff fdeb 	bl	8002098 <HAL_I2C_SlaveRxCpltCallback>
 80024c2:	e7f3      	b.n	80024ac <I2C_ITSlaveCplt+0x138>
 80024c4:	00008002 	.word	0x00008002
 80024c8:	00008001 	.word	0x00008001
 80024cc:	fe00e800 	.word	0xfe00e800
 80024d0:	ffffbfff 	.word	0xffffbfff
 80024d4:	ffff0000 	.word	0xffff0000
 80024d8:	ffff7fff 	.word	0xffff7fff

080024dc <I2C_Slave_ISR_IT>:
{
 80024dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024de:	0004      	movs	r4, r0
 80024e0:	000d      	movs	r5, r1
 80024e2:	0016      	movs	r6, r2
  uint32_t tmpoptions = hi2c->XferOptions;
 80024e4:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 80024e6:	2340      	movs	r3, #64	; 0x40
 80024e8:	5cc3      	ldrb	r3, [r0, r3]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d100      	bne.n	80024f0 <I2C_Slave_ISR_IT+0x14>
 80024ee:	e095      	b.n	800261c <I2C_Slave_ISR_IT+0x140>
 80024f0:	2340      	movs	r3, #64	; 0x40
 80024f2:	2201      	movs	r2, #1
 80024f4:	54c2      	strb	r2, [r0, r3]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80024f6:	068b      	lsls	r3, r1, #26
 80024f8:	d501      	bpl.n	80024fe <I2C_Slave_ISR_IT+0x22>
 80024fa:	06b3      	lsls	r3, r6, #26
 80024fc:	d417      	bmi.n	800252e <I2C_Slave_ISR_IT+0x52>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80024fe:	06eb      	lsls	r3, r5, #27
 8002500:	d540      	bpl.n	8002584 <I2C_Slave_ISR_IT+0xa8>
 8002502:	06f3      	lsls	r3, r6, #27
 8002504:	d53e      	bpl.n	8002584 <I2C_Slave_ISR_IT+0xa8>
    if (hi2c->XferCount == 0U)
 8002506:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002508:	b29b      	uxth	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d128      	bne.n	8002560 <I2C_Slave_ISR_IT+0x84>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800250e:	3341      	adds	r3, #65	; 0x41
 8002510:	5ce3      	ldrb	r3, [r4, r3]
 8002512:	2b28      	cmp	r3, #40	; 0x28
 8002514:	d00e      	beq.n	8002534 <I2C_Slave_ISR_IT+0x58>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002516:	2341      	movs	r3, #65	; 0x41
 8002518:	5ce3      	ldrb	r3, [r4, r3]
 800251a:	2b29      	cmp	r3, #41	; 0x29
 800251c:	d013      	beq.n	8002546 <I2C_Slave_ISR_IT+0x6a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800251e:	6823      	ldr	r3, [r4, #0]
 8002520:	2210      	movs	r2, #16
 8002522:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8002524:	2340      	movs	r3, #64	; 0x40
 8002526:	2200      	movs	r2, #0
 8002528:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 800252a:	2000      	movs	r0, #0
}
 800252c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800252e:	f7ff ff21 	bl	8002374 <I2C_ITSlaveCplt>
 8002532:	e7e4      	b.n	80024fe <I2C_Slave_ISR_IT+0x22>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002534:	2380      	movs	r3, #128	; 0x80
 8002536:	049b      	lsls	r3, r3, #18
 8002538:	429f      	cmp	r7, r3
 800253a:	d1ec      	bne.n	8002516 <I2C_Slave_ISR_IT+0x3a>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800253c:	0029      	movs	r1, r5
 800253e:	0020      	movs	r0, r4
 8002540:	f7ff fe44 	bl	80021cc <I2C_ITListenCplt>
 8002544:	e7ee      	b.n	8002524 <I2C_Slave_ISR_IT+0x48>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002546:	4b36      	ldr	r3, [pc, #216]	; (8002620 <I2C_Slave_ISR_IT+0x144>)
 8002548:	429f      	cmp	r7, r3
 800254a:	d0e8      	beq.n	800251e <I2C_Slave_ISR_IT+0x42>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800254c:	6823      	ldr	r3, [r4, #0]
 800254e:	2210      	movs	r2, #16
 8002550:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8002552:	0020      	movs	r0, r4
 8002554:	f7ff fcea 	bl	8001f2c <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8002558:	0020      	movs	r0, r4
 800255a:	f7ff fd9f 	bl	800209c <I2C_ITSlaveSeqCplt>
 800255e:	e7e1      	b.n	8002524 <I2C_Slave_ISR_IT+0x48>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002560:	6823      	ldr	r3, [r4, #0]
 8002562:	2210      	movs	r2, #16
 8002564:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002566:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002568:	3a0c      	subs	r2, #12
 800256a:	4313      	orrs	r3, r2
 800256c:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800256e:	2f00      	cmp	r7, #0
 8002570:	d003      	beq.n	800257a <I2C_Slave_ISR_IT+0x9e>
 8002572:	2380      	movs	r3, #128	; 0x80
 8002574:	045b      	lsls	r3, r3, #17
 8002576:	429f      	cmp	r7, r3
 8002578:	d1d4      	bne.n	8002524 <I2C_Slave_ISR_IT+0x48>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800257a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800257c:	0020      	movs	r0, r4
 800257e:	f7ff fe71 	bl	8002264 <I2C_ITError>
 8002582:	e7cf      	b.n	8002524 <I2C_Slave_ISR_IT+0x48>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002584:	076b      	lsls	r3, r5, #29
 8002586:	d51e      	bpl.n	80025c6 <I2C_Slave_ISR_IT+0xea>
 8002588:	0773      	lsls	r3, r6, #29
 800258a:	d51c      	bpl.n	80025c6 <I2C_Slave_ISR_IT+0xea>
    if (hi2c->XferCount > 0U)
 800258c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800258e:	b29b      	uxth	r3, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00d      	beq.n	80025b0 <I2C_Slave_ISR_IT+0xd4>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002594:	6823      	ldr	r3, [r4, #0]
 8002596:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002598:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800259a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800259c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800259e:	3301      	adds	r3, #1
 80025a0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80025a2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80025a4:	3b01      	subs	r3, #1
 80025a6:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80025a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 80025b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1b5      	bne.n	8002524 <I2C_Slave_ISR_IT+0x48>
 80025b8:	4b19      	ldr	r3, [pc, #100]	; (8002620 <I2C_Slave_ISR_IT+0x144>)
 80025ba:	429f      	cmp	r7, r3
 80025bc:	d0b2      	beq.n	8002524 <I2C_Slave_ISR_IT+0x48>
      I2C_ITSlaveSeqCplt(hi2c);
 80025be:	0020      	movs	r0, r4
 80025c0:	f7ff fd6c 	bl	800209c <I2C_ITSlaveSeqCplt>
 80025c4:	e7ae      	b.n	8002524 <I2C_Slave_ISR_IT+0x48>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80025c6:	072b      	lsls	r3, r5, #28
 80025c8:	d501      	bpl.n	80025ce <I2C_Slave_ISR_IT+0xf2>
 80025ca:	0733      	lsls	r3, r6, #28
 80025cc:	d416      	bmi.n	80025fc <I2C_Slave_ISR_IT+0x120>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80025ce:	07ad      	lsls	r5, r5, #30
 80025d0:	d5a8      	bpl.n	8002524 <I2C_Slave_ISR_IT+0x48>
 80025d2:	07b6      	lsls	r6, r6, #30
 80025d4:	d5a6      	bpl.n	8002524 <I2C_Slave_ISR_IT+0x48>
    if (hi2c->XferCount > 0U)
 80025d6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80025d8:	b29b      	uxth	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d013      	beq.n	8002606 <I2C_Slave_ISR_IT+0x12a>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025de:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80025e0:	6823      	ldr	r3, [r4, #0]
 80025e2:	7812      	ldrb	r2, [r2, #0]
 80025e4:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80025e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025e8:	3301      	adds	r3, #1
 80025ea:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80025ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80025f4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80025f6:	3b01      	subs	r3, #1
 80025f8:	8523      	strh	r3, [r4, #40]	; 0x28
 80025fa:	e793      	b.n	8002524 <I2C_Slave_ISR_IT+0x48>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80025fc:	0029      	movs	r1, r5
 80025fe:	0020      	movs	r0, r4
 8002600:	f7ff fd8f 	bl	8002122 <I2C_ITAddrCplt>
 8002604:	e78e      	b.n	8002524 <I2C_Slave_ISR_IT+0x48>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002606:	2380      	movs	r3, #128	; 0x80
 8002608:	045b      	lsls	r3, r3, #17
 800260a:	429f      	cmp	r7, r3
 800260c:	d002      	beq.n	8002614 <I2C_Slave_ISR_IT+0x138>
 800260e:	2f00      	cmp	r7, #0
 8002610:	d000      	beq.n	8002614 <I2C_Slave_ISR_IT+0x138>
 8002612:	e787      	b.n	8002524 <I2C_Slave_ISR_IT+0x48>
        I2C_ITSlaveSeqCplt(hi2c);
 8002614:	0020      	movs	r0, r4
 8002616:	f7ff fd41 	bl	800209c <I2C_ITSlaveSeqCplt>
 800261a:	e783      	b.n	8002524 <I2C_Slave_ISR_IT+0x48>
  __HAL_LOCK(hi2c);
 800261c:	2002      	movs	r0, #2
 800261e:	e785      	b.n	800252c <I2C_Slave_ISR_IT+0x50>
 8002620:	ffff0000 	.word	0xffff0000

08002624 <HAL_I2C_ER_IRQHandler>:
{
 8002624:	b570      	push	{r4, r5, r6, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002626:	6802      	ldr	r2, [r0, #0]
 8002628:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800262a:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800262c:	05dc      	lsls	r4, r3, #23
 800262e:	d508      	bpl.n	8002642 <HAL_I2C_ER_IRQHandler+0x1e>
 8002630:	060c      	lsls	r4, r1, #24
 8002632:	d506      	bpl.n	8002642 <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002634:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002636:	2501      	movs	r5, #1
 8002638:	432c      	orrs	r4, r5
 800263a:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800263c:	2480      	movs	r4, #128	; 0x80
 800263e:	0064      	lsls	r4, r4, #1
 8002640:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002642:	055a      	lsls	r2, r3, #21
 8002644:	d509      	bpl.n	800265a <HAL_I2C_ER_IRQHandler+0x36>
 8002646:	060a      	lsls	r2, r1, #24
 8002648:	d507      	bpl.n	800265a <HAL_I2C_ER_IRQHandler+0x36>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800264a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800264c:	2408      	movs	r4, #8
 800264e:	4322      	orrs	r2, r4
 8002650:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002652:	6802      	ldr	r2, [r0, #0]
 8002654:	2480      	movs	r4, #128	; 0x80
 8002656:	00e4      	lsls	r4, r4, #3
 8002658:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800265a:	059b      	lsls	r3, r3, #22
 800265c:	d509      	bpl.n	8002672 <HAL_I2C_ER_IRQHandler+0x4e>
 800265e:	0609      	lsls	r1, r1, #24
 8002660:	d507      	bpl.n	8002672 <HAL_I2C_ER_IRQHandler+0x4e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002662:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002664:	2202      	movs	r2, #2
 8002666:	4313      	orrs	r3, r2
 8002668:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800266a:	6803      	ldr	r3, [r0, #0]
 800266c:	32ff      	adds	r2, #255	; 0xff
 800266e:	32ff      	adds	r2, #255	; 0xff
 8002670:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 8002672:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002674:	230b      	movs	r3, #11
 8002676:	420b      	tst	r3, r1
 8002678:	d100      	bne.n	800267c <HAL_I2C_ER_IRQHandler+0x58>
}
 800267a:	bd70      	pop	{r4, r5, r6, pc}
    I2C_ITError(hi2c, tmperror);
 800267c:	f7ff fdf2 	bl	8002264 <I2C_ITError>
}
 8002680:	e7fb      	b.n	800267a <HAL_I2C_ER_IRQHandler+0x56>

08002682 <I2C_DMAAbort>:
{
 8002682:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002684:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (hi2c->hdmatx != NULL)
 8002686:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <I2C_DMAAbort+0xe>
    hi2c->hdmatx->XferAbortCallback = NULL;
 800268c:	2200      	movs	r2, #0
 800268e:	639a      	str	r2, [r3, #56]	; 0x38
  if (hi2c->hdmarx != NULL)
 8002690:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <I2C_DMAAbort+0x18>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002696:	2200      	movs	r2, #0
 8002698:	639a      	str	r2, [r3, #56]	; 0x38
  I2C_TreatErrorCallback(hi2c);
 800269a:	f7ff fdcd 	bl	8002238 <I2C_TreatErrorCallback>
}
 800269e:	bd10      	pop	{r4, pc}

080026a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026a2:	2341      	movs	r3, #65	; 0x41
 80026a4:	5cc3      	ldrb	r3, [r0, r3]
 80026a6:	2b20      	cmp	r3, #32
 80026a8:	d120      	bne.n	80026ec <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026aa:	3320      	adds	r3, #32
 80026ac:	5cc3      	ldrb	r3, [r0, r3]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d01e      	beq.n	80026f0 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80026b2:	2440      	movs	r4, #64	; 0x40
 80026b4:	2201      	movs	r2, #1
 80026b6:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026b8:	2541      	movs	r5, #65	; 0x41
 80026ba:	2324      	movs	r3, #36	; 0x24
 80026bc:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026be:	6806      	ldr	r6, [r0, #0]
 80026c0:	6833      	ldr	r3, [r6, #0]
 80026c2:	4393      	bics	r3, r2
 80026c4:	6033      	str	r3, [r6, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80026c6:	6806      	ldr	r6, [r0, #0]
 80026c8:	6833      	ldr	r3, [r6, #0]
 80026ca:	4f0a      	ldr	r7, [pc, #40]	; (80026f4 <HAL_I2CEx_ConfigAnalogFilter+0x54>)
 80026cc:	403b      	ands	r3, r7
 80026ce:	6033      	str	r3, [r6, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80026d0:	6806      	ldr	r6, [r0, #0]
 80026d2:	6833      	ldr	r3, [r6, #0]
 80026d4:	430b      	orrs	r3, r1
 80026d6:	6033      	str	r3, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026d8:	6801      	ldr	r1, [r0, #0]
 80026da:	680b      	ldr	r3, [r1, #0]
 80026dc:	4313      	orrs	r3, r2
 80026de:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026e0:	2320      	movs	r3, #32
 80026e2:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026e4:	2300      	movs	r3, #0
 80026e6:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 80026e8:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80026ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80026ec:	2002      	movs	r0, #2
 80026ee:	e7fc      	b.n	80026ea <HAL_I2CEx_ConfigAnalogFilter+0x4a>
    __HAL_LOCK(hi2c);
 80026f0:	2002      	movs	r0, #2
 80026f2:	e7fa      	b.n	80026ea <HAL_I2CEx_ConfigAnalogFilter+0x4a>
 80026f4:	ffffefff 	.word	0xffffefff

080026f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026f8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026fa:	2341      	movs	r3, #65	; 0x41
 80026fc:	5cc3      	ldrb	r3, [r0, r3]
 80026fe:	2b20      	cmp	r3, #32
 8002700:	d11e      	bne.n	8002740 <HAL_I2CEx_ConfigDigitalFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002702:	3320      	adds	r3, #32
 8002704:	5cc3      	ldrb	r3, [r0, r3]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d01c      	beq.n	8002744 <HAL_I2CEx_ConfigDigitalFilter+0x4c>
 800270a:	2440      	movs	r4, #64	; 0x40
 800270c:	2201      	movs	r2, #1
 800270e:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002710:	2541      	movs	r5, #65	; 0x41
 8002712:	2324      	movs	r3, #36	; 0x24
 8002714:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002716:	6806      	ldr	r6, [r0, #0]
 8002718:	6833      	ldr	r3, [r6, #0]
 800271a:	4393      	bics	r3, r2
 800271c:	6033      	str	r3, [r6, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800271e:	6806      	ldr	r6, [r0, #0]
 8002720:	6833      	ldr	r3, [r6, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002722:	4f09      	ldr	r7, [pc, #36]	; (8002748 <HAL_I2CEx_ConfigDigitalFilter+0x50>)
 8002724:	403b      	ands	r3, r7

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002726:	0209      	lsls	r1, r1, #8
 8002728:	4319      	orrs	r1, r3

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800272a:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 800272c:	6801      	ldr	r1, [r0, #0]
 800272e:	680b      	ldr	r3, [r1, #0]
 8002730:	4313      	orrs	r3, r2
 8002732:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002734:	2320      	movs	r3, #32
 8002736:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002738:	2300      	movs	r3, #0
 800273a:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 800273c:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 800273e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8002740:	2002      	movs	r0, #2
 8002742:	e7fc      	b.n	800273e <HAL_I2CEx_ConfigDigitalFilter+0x46>
    __HAL_LOCK(hi2c);
 8002744:	2002      	movs	r0, #2
 8002746:	e7fa      	b.n	800273e <HAL_I2CEx_ConfigDigitalFilter+0x46>
 8002748:	fffff0ff 	.word	0xfffff0ff

0800274c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800274c:	b570      	push	{r4, r5, r6, lr}
 800274e:	b08a      	sub	sp, #40	; 0x28
 8002750:	1e04      	subs	r4, r0, #0
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002752:	d100      	bne.n	8002756 <HAL_PCD_Init+0xa>
 8002754:	e06c      	b.n	8002830 <HAL_PCD_Init+0xe4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002756:	4b37      	ldr	r3, [pc, #220]	; (8002834 <HAL_PCD_Init+0xe8>)
 8002758:	5cc3      	ldrb	r3, [r0, r3]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d009      	beq.n	8002772 <HAL_PCD_Init+0x26>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800275e:	4b35      	ldr	r3, [pc, #212]	; (8002834 <HAL_PCD_Init+0xe8>)
 8002760:	2203      	movs	r2, #3
 8002762:	54e2      	strb	r2, [r4, r3]

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 8002764:	2300      	movs	r3, #0
 8002766:	6123      	str	r3, [r4, #16]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002768:	6820      	ldr	r0, [r4, #0]
 800276a:	f001 ffeb 	bl	8004744 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800276e:	2200      	movs	r2, #0
 8002770:	e01b      	b.n	80027aa <HAL_PCD_Init+0x5e>
    hpcd->Lock = HAL_UNLOCKED;
 8002772:	23af      	movs	r3, #175	; 0xaf
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	2200      	movs	r2, #0
 8002778:	54c2      	strb	r2, [r0, r3]
    HAL_PCD_MspInit(hpcd);
 800277a:	f003 fb25 	bl	8005dc8 <HAL_PCD_MspInit>
 800277e:	e7ee      	b.n	800275e <HAL_PCD_Init+0x12>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002780:	0091      	lsls	r1, r2, #2
 8002782:	188b      	adds	r3, r1, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	18e3      	adds	r3, r4, r3
 8002788:	0018      	movs	r0, r3
 800278a:	303d      	adds	r0, #61	; 0x3d
 800278c:	2501      	movs	r5, #1
 800278e:	7005      	strb	r5, [r0, #0]
    hpcd->IN_ep[i].num = i;
 8002790:	3801      	subs	r0, #1
 8002792:	7002      	strb	r2, [r0, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002794:	300c      	adds	r0, #12
 8002796:	8002      	strh	r2, [r0, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002798:	001d      	movs	r5, r3
 800279a:	353f      	adds	r5, #63	; 0x3f
 800279c:	2000      	movs	r0, #0
 800279e:	7028      	strb	r0, [r5, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80027a0:	64d8      	str	r0, [r3, #76]	; 0x4c
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027a2:	6518      	str	r0, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_len = 0U;
 80027a4:	6558      	str	r0, [r3, #84]	; 0x54
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027a6:	3201      	adds	r2, #1
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	6860      	ldr	r0, [r4, #4]
 80027ac:	4282      	cmp	r2, r0
 80027ae:	d3e7      	bcc.n	8002780 <HAL_PCD_Init+0x34>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027b0:	2100      	movs	r1, #0
 80027b2:	e019      	b.n	80027e8 <HAL_PCD_Init+0x9c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027b4:	008a      	lsls	r2, r1, #2
 80027b6:	1853      	adds	r3, r2, r1
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	18e3      	adds	r3, r4, r3
 80027bc:	001e      	movs	r6, r3
 80027be:	367e      	adds	r6, #126	; 0x7e
 80027c0:	36ff      	adds	r6, #255	; 0xff
 80027c2:	2500      	movs	r5, #0
 80027c4:	7035      	strb	r5, [r6, #0]
    hpcd->OUT_ep[i].num = i;
 80027c6:	3e01      	subs	r6, #1
 80027c8:	7031      	strb	r1, [r6, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027ca:	3603      	adds	r6, #3
 80027cc:	7035      	strb	r5, [r6, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027ce:	360d      	adds	r6, #13
 80027d0:	6035      	str	r5, [r6, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027d2:	3391      	adds	r3, #145	; 0x91
 80027d4:	33ff      	adds	r3, #255	; 0xff
 80027d6:	601d      	str	r5, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027d8:	1852      	adds	r2, r2, r1
 80027da:	00d2      	lsls	r2, r2, #3
 80027dc:	18a2      	adds	r2, r4, r2
 80027de:	3295      	adds	r2, #149	; 0x95
 80027e0:	32ff      	adds	r2, #255	; 0xff
 80027e2:	6015      	str	r5, [r2, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027e4:	3101      	adds	r1, #1
 80027e6:	b2c9      	uxtb	r1, r1
 80027e8:	4288      	cmp	r0, r1
 80027ea:	d8e3      	bhi.n	80027b4 <HAL_PCD_Init+0x68>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80027ec:	6820      	ldr	r0, [r4, #0]
 80027ee:	0023      	movs	r3, r4
 80027f0:	3310      	adds	r3, #16
 80027f2:	466a      	mov	r2, sp
 80027f4:	cb62      	ldmia	r3!, {r1, r5, r6}
 80027f6:	c262      	stmia	r2!, {r1, r5, r6}
 80027f8:	cb62      	ldmia	r3!, {r1, r5, r6}
 80027fa:	c262      	stmia	r2!, {r1, r5, r6}
 80027fc:	cb62      	ldmia	r3!, {r1, r5, r6}
 80027fe:	c262      	stmia	r2!, {r1, r5, r6}
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6013      	str	r3, [r2, #0]
 8002804:	6861      	ldr	r1, [r4, #4]
 8002806:	68a2      	ldr	r2, [r4, #8]
 8002808:	68e3      	ldr	r3, [r4, #12]
 800280a:	f001 ffb1 	bl	8004770 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800280e:	2338      	movs	r3, #56	; 0x38
 8002810:	2200      	movs	r2, #0
 8002812:	54e2      	strb	r2, [r4, r3]
  hpcd->State = HAL_PCD_STATE_READY;
 8002814:	4b07      	ldr	r3, [pc, #28]	; (8002834 <HAL_PCD_Init+0xe8>)
 8002816:	3201      	adds	r2, #1
 8002818:	54e2      	strb	r2, [r4, r3]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800281a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800281c:	2b01      	cmp	r3, #1
 800281e:	d002      	beq.n	8002826 <HAL_PCD_Init+0xda>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }

  return HAL_OK;
 8002820:	2000      	movs	r0, #0
}
 8002822:	b00a      	add	sp, #40	; 0x28
 8002824:	bd70      	pop	{r4, r5, r6, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002826:	0020      	movs	r0, r4
 8002828:	f000 f8e3 	bl	80029f2 <HAL_PCDEx_ActivateLPM>
  return HAL_OK;
 800282c:	2000      	movs	r0, #0
 800282e:	e7f8      	b.n	8002822 <HAL_PCD_Init+0xd6>
    return HAL_ERROR;
 8002830:	2001      	movs	r0, #1
 8002832:	e7f6      	b.n	8002822 <HAL_PCD_Init+0xd6>
 8002834:	000002bd 	.word	0x000002bd

08002838 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002838:	b570      	push	{r4, r5, r6, lr}
 800283a:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 800283c:	23af      	movs	r3, #175	; 0xaf
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	5cc3      	ldrb	r3, [r0, r3]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d00d      	beq.n	8002862 <HAL_PCD_Start+0x2a>
 8002846:	25af      	movs	r5, #175	; 0xaf
 8002848:	00ad      	lsls	r5, r5, #2
 800284a:	2301      	movs	r3, #1
 800284c:	5543      	strb	r3, [r0, r5]
  __HAL_PCD_ENABLE(hpcd);
 800284e:	6800      	ldr	r0, [r0, #0]
 8002850:	f001 ff70 	bl	8004734 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002854:	6820      	ldr	r0, [r4, #0]
 8002856:	f001 ffc5 	bl	80047e4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800285a:	2300      	movs	r3, #0
 800285c:	5563      	strb	r3, [r4, r5]

  return HAL_OK;
 800285e:	2000      	movs	r0, #0
}
 8002860:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8002862:	2002      	movs	r0, #2
 8002864:	e7fc      	b.n	8002860 <HAL_PCD_Start+0x28>

08002866 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8002866:	b570      	push	{r4, r5, r6, lr}
 8002868:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 800286a:	23af      	movs	r3, #175	; 0xaf
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	5cc3      	ldrb	r3, [r0, r3]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d00d      	beq.n	8002890 <HAL_PCD_Stop+0x2a>
 8002874:	25af      	movs	r5, #175	; 0xaf
 8002876:	00ad      	lsls	r5, r5, #2
 8002878:	2301      	movs	r3, #1
 800287a:	5543      	strb	r3, [r0, r5]
  __HAL_PCD_DISABLE(hpcd);
 800287c:	6800      	ldr	r0, [r0, #0]
 800287e:	f001 ff61 	bl	8004744 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8002882:	6820      	ldr	r0, [r4, #0]
 8002884:	f001 ffb6 	bl	80047f4 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8002888:	2300      	movs	r3, #0
 800288a:	5563      	strb	r3, [r4, r5]

  return HAL_OK;
 800288c:	2000      	movs	r0, #0
}
 800288e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8002890:	2002      	movs	r0, #2
 8002892:	e7fc      	b.n	800288e <HAL_PCD_Stop+0x28>

08002894 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002896:	2607      	movs	r6, #7
 8002898:	400e      	ands	r6, r1
 800289a:	00b4      	lsls	r4, r6, #2
 800289c:	19a1      	adds	r1, r4, r6
 800289e:	00c9      	lsls	r1, r1, #3
 80028a0:	3179      	adds	r1, #121	; 0x79
 80028a2:	31ff      	adds	r1, #255	; 0xff
 80028a4:	1841      	adds	r1, r0, r1
 80028a6:	3104      	adds	r1, #4

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028a8:	19a5      	adds	r5, r4, r6
 80028aa:	00ed      	lsls	r5, r5, #3
 80028ac:	1945      	adds	r5, r0, r5
 80028ae:	002f      	movs	r7, r5
 80028b0:	3791      	adds	r7, #145	; 0x91
 80028b2:	37ff      	adds	r7, #255	; 0xff
 80028b4:	603a      	str	r2, [r7, #0]
  ep->xfer_len = len;
 80028b6:	002a      	movs	r2, r5
 80028b8:	3295      	adds	r2, #149	; 0x95
 80028ba:	32ff      	adds	r2, #255	; 0xff
 80028bc:	6013      	str	r3, [r2, #0]
  ep->xfer_count = 0U;
 80028be:	3204      	adds	r2, #4
 80028c0:	2300      	movs	r3, #0
 80028c2:	6013      	str	r3, [r2, #0]
  ep->is_in = 0U;
 80028c4:	357e      	adds	r5, #126	; 0x7e
 80028c6:	35ff      	adds	r5, #255	; 0xff
 80028c8:	702b      	strb	r3, [r5, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028ca:	19a4      	adds	r4, r4, r6
 80028cc:	00e4      	lsls	r4, r4, #3
 80028ce:	1904      	adds	r4, r0, r4
 80028d0:	347d      	adds	r4, #125	; 0x7d
 80028d2:	34ff      	adds	r4, #255	; 0xff
 80028d4:	7026      	strb	r6, [r4, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028d6:	2e00      	cmp	r6, #0
 80028d8:	d104      	bne.n	80028e4 <HAL_PCD_EP_Receive+0x50>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80028da:	6800      	ldr	r0, [r0, #0]
 80028dc:	f001 ffc0 	bl	8004860 <USB_EPStartXfer>
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
  }

  return HAL_OK;
}
 80028e0:	2000      	movs	r0, #0
 80028e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028e4:	6800      	ldr	r0, [r0, #0]
 80028e6:	f001 ffbb 	bl	8004860 <USB_EPStartXfer>
 80028ea:	e7f9      	b.n	80028e0 <HAL_PCD_EP_Receive+0x4c>

080028ec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028ee:	2607      	movs	r6, #7
 80028f0:	400e      	ands	r6, r1
 80028f2:	00b5      	lsls	r5, r6, #2
 80028f4:	19a9      	adds	r1, r5, r6
 80028f6:	00c9      	lsls	r1, r1, #3
 80028f8:	3138      	adds	r1, #56	; 0x38
 80028fa:	1841      	adds	r1, r0, r1
 80028fc:	3104      	adds	r1, #4

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028fe:	19ac      	adds	r4, r5, r6
 8002900:	00e4      	lsls	r4, r4, #3
 8002902:	1904      	adds	r4, r0, r4
 8002904:	6522      	str	r2, [r4, #80]	; 0x50
  ep->xfer_len = len;
 8002906:	6563      	str	r3, [r4, #84]	; 0x54
  ep->xfer_fill_db = 1U;
 8002908:	0027      	movs	r7, r4
 800290a:	3760      	adds	r7, #96	; 0x60
 800290c:	2201      	movs	r2, #1
 800290e:	703a      	strb	r2, [r7, #0]
  ep->xfer_len_db = len;
 8002910:	65e3      	str	r3, [r4, #92]	; 0x5c
  ep->xfer_count = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	65a3      	str	r3, [r4, #88]	; 0x58
  ep->is_in = 1U;
 8002916:	343d      	adds	r4, #61	; 0x3d
 8002918:	7022      	strb	r2, [r4, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 800291a:	19ad      	adds	r5, r5, r6
 800291c:	00ed      	lsls	r5, r5, #3
 800291e:	1945      	adds	r5, r0, r5
 8002920:	353c      	adds	r5, #60	; 0x3c
 8002922:	702e      	strb	r6, [r5, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002924:	2e00      	cmp	r6, #0
 8002926:	d104      	bne.n	8002932 <HAL_PCD_EP_Transmit+0x46>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002928:	6800      	ldr	r0, [r0, #0]
 800292a:	f001 ff99 	bl	8004860 <USB_EPStartXfer>
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
  }

  return HAL_OK;
}
 800292e:	2000      	movs	r0, #0
 8002930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002932:	6800      	ldr	r0, [r0, #0]
 8002934:	f001 ff94 	bl	8004860 <USB_EPStartXfer>
 8002938:	e7f9      	b.n	800292e <HAL_PCD_EP_Transmit+0x42>

0800293a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800293a:	b570      	push	{r4, r5, r6, lr}
 800293c:	0004      	movs	r4, r0
 800293e:	000b      	movs	r3, r1
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002940:	2007      	movs	r0, #7
 8002942:	4008      	ands	r0, r1
 8002944:	6862      	ldr	r2, [r4, #4]
 8002946:	4290      	cmp	r0, r2
 8002948:	d830      	bhi.n	80029ac <HAL_PCD_EP_SetStall+0x72>
  {
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
 800294a:	b24a      	sxtb	r2, r1
 800294c:	2a00      	cmp	r2, #0
 800294e:	db20      	blt.n	8002992 <HAL_PCD_EP_SetStall+0x58>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002950:	008a      	lsls	r2, r1, #2
 8002952:	1851      	adds	r1, r2, r1
 8002954:	00c9      	lsls	r1, r1, #3
 8002956:	3179      	adds	r1, #121	; 0x79
 8002958:	31ff      	adds	r1, #255	; 0xff
 800295a:	1861      	adds	r1, r4, r1
 800295c:	3104      	adds	r1, #4
    ep->is_in = 0U;
 800295e:	18d2      	adds	r2, r2, r3
 8002960:	00d2      	lsls	r2, r2, #3
 8002962:	18a2      	adds	r2, r4, r2
 8002964:	327e      	adds	r2, #126	; 0x7e
 8002966:	32ff      	adds	r2, #255	; 0xff
 8002968:	2300      	movs	r3, #0
 800296a:	7013      	strb	r3, [r2, #0]
  }

  ep->is_stall = 1U;
 800296c:	2301      	movs	r3, #1
 800296e:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002970:	7008      	strb	r0, [r1, #0]

  __HAL_LOCK(hpcd);
 8002972:	23af      	movs	r3, #175	; 0xaf
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	5ce3      	ldrb	r3, [r4, r3]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d019      	beq.n	80029b0 <HAL_PCD_EP_SetStall+0x76>
 800297c:	25af      	movs	r5, #175	; 0xaf
 800297e:	00ad      	lsls	r5, r5, #2
 8002980:	2301      	movs	r3, #1
 8002982:	5563      	strb	r3, [r4, r5]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002984:	6820      	ldr	r0, [r4, #0]
 8002986:	f001 ff09 	bl	800479c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800298a:	2300      	movs	r3, #0
 800298c:	5563      	strb	r3, [r4, r5]

  return HAL_OK;
 800298e:	2000      	movs	r0, #0
}
 8002990:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002992:	0083      	lsls	r3, r0, #2
 8002994:	1819      	adds	r1, r3, r0
 8002996:	00c9      	lsls	r1, r1, #3
 8002998:	3138      	adds	r1, #56	; 0x38
 800299a:	1861      	adds	r1, r4, r1
 800299c:	3104      	adds	r1, #4
    ep->is_in = 1U;
 800299e:	181b      	adds	r3, r3, r0
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	18e3      	adds	r3, r4, r3
 80029a4:	333d      	adds	r3, #61	; 0x3d
 80029a6:	2201      	movs	r2, #1
 80029a8:	701a      	strb	r2, [r3, #0]
 80029aa:	e7df      	b.n	800296c <HAL_PCD_EP_SetStall+0x32>
    return HAL_ERROR;
 80029ac:	2001      	movs	r0, #1
 80029ae:	e7ef      	b.n	8002990 <HAL_PCD_EP_SetStall+0x56>
  __HAL_LOCK(hpcd);
 80029b0:	2002      	movs	r0, #2
 80029b2:	e7ed      	b.n	8002990 <HAL_PCD_EP_SetStall+0x56>

080029b4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80029b4:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80029b6:	060c      	lsls	r4, r1, #24
 80029b8:	d50d      	bpl.n	80029d6 <HAL_PCDEx_PMAConfig+0x22>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029ba:	2407      	movs	r4, #7
 80029bc:	400c      	ands	r4, r1
 80029be:	00a1      	lsls	r1, r4, #2
 80029c0:	1909      	adds	r1, r1, r4
 80029c2:	00c9      	lsls	r1, r1, #3
 80029c4:	3138      	adds	r1, #56	; 0x38
 80029c6:	1840      	adds	r0, r0, r1
 80029c8:	3004      	adds	r0, #4
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80029ca:	2a00      	cmp	r2, #0
 80029cc:	d10b      	bne.n	80029e6 <HAL_PCDEx_PMAConfig+0x32>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80029ce:	7282      	strb	r2, [r0, #10]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80029d0:	8083      	strh	r3, [r0, #4]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 80029d2:	2000      	movs	r0, #0
 80029d4:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 80029d6:	008c      	lsls	r4, r1, #2
 80029d8:	1861      	adds	r1, r4, r1
 80029da:	00c9      	lsls	r1, r1, #3
 80029dc:	3179      	adds	r1, #121	; 0x79
 80029de:	31ff      	adds	r1, #255	; 0xff
 80029e0:	1840      	adds	r0, r0, r1
 80029e2:	3004      	adds	r0, #4
 80029e4:	e7f1      	b.n	80029ca <HAL_PCDEx_PMAConfig+0x16>
    ep->doublebuffer = 1U;
 80029e6:	2201      	movs	r2, #1
 80029e8:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80029ea:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80029ec:	0c1b      	lsrs	r3, r3, #16
 80029ee:	8103      	strh	r3, [r0, #8]
 80029f0:	e7ef      	b.n	80029d2 <HAL_PCDEx_PMAConfig+0x1e>

080029f2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80029f2:	b510      	push	{r4, lr}

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 80029f4:	6803      	ldr	r3, [r0, #0]
  hpcd->lpm_active = 1U;
 80029f6:	2101      	movs	r1, #1
 80029f8:	22bf      	movs	r2, #191	; 0xbf
 80029fa:	0092      	lsls	r2, r2, #2
 80029fc:	5081      	str	r1, [r0, r2]
  hpcd->LPM_State = LPM_L0;
 80029fe:	3a08      	subs	r2, #8
 8002a00:	2400      	movs	r4, #0
 8002a02:	5484      	strb	r4, [r0, r2]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002a04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a06:	430a      	orrs	r2, r1
 8002a08:	655a      	str	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002a0a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a0c:	3101      	adds	r1, #1
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
}
 8002a12:	2000      	movs	r0, #0
 8002a14:	bd10      	pop	{r4, pc}
	...

08002a18 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002a18:	4a03      	ldr	r2, [pc, #12]	; (8002a28 <HAL_PWREx_EnableVddUSB+0x10>)
 8002a1a:	6851      	ldr	r1, [r2, #4]
 8002a1c:	2380      	movs	r3, #128	; 0x80
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	430b      	orrs	r3, r1
 8002a22:	6053      	str	r3, [r2, #4]
}
 8002a24:	4770      	bx	lr
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	40007000 	.word	0x40007000

08002a2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a2c:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002a2e:	4a10      	ldr	r2, [pc, #64]	; (8002a70 <HAL_PWREx_ControlVoltageScaling+0x44>)
 8002a30:	6813      	ldr	r3, [r2, #0]
 8002a32:	4910      	ldr	r1, [pc, #64]	; (8002a74 <HAL_PWREx_ControlVoltageScaling+0x48>)
 8002a34:	400b      	ands	r3, r1
 8002a36:	4303      	orrs	r3, r0
 8002a38:	6013      	str	r3, [r2, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a3a:	2380      	movs	r3, #128	; 0x80
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4298      	cmp	r0, r3
 8002a40:	d001      	beq.n	8002a46 <HAL_PWREx_ControlVoltageScaling+0x1a>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8002a42:	2000      	movs	r0, #0
}
 8002a44:	bd10      	pop	{r4, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002a46:	4b0c      	ldr	r3, [pc, #48]	; (8002a78 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	0058      	lsls	r0, r3, #1
 8002a4c:	18c0      	adds	r0, r0, r3
 8002a4e:	0040      	lsls	r0, r0, #1
 8002a50:	490a      	ldr	r1, [pc, #40]	; (8002a7c <HAL_PWREx_ControlVoltageScaling+0x50>)
 8002a52:	f7fd fb57 	bl	8000104 <__udivsi3>
 8002a56:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a58:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <HAL_PWREx_ControlVoltageScaling+0x44>)
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	055b      	lsls	r3, r3, #21
 8002a5e:	d503      	bpl.n	8002a68 <HAL_PWREx_ControlVoltageScaling+0x3c>
      if (wait_loop_index != 0U)
 8002a60:	2800      	cmp	r0, #0
 8002a62:	d003      	beq.n	8002a6c <HAL_PWREx_ControlVoltageScaling+0x40>
        wait_loop_index--;
 8002a64:	3801      	subs	r0, #1
 8002a66:	e7f7      	b.n	8002a58 <HAL_PWREx_ControlVoltageScaling+0x2c>
  return HAL_OK;
 8002a68:	2000      	movs	r0, #0
 8002a6a:	e7eb      	b.n	8002a44 <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 8002a6c:	2003      	movs	r0, #3
 8002a6e:	e7e9      	b.n	8002a44 <HAL_PWREx_ControlVoltageScaling+0x18>
 8002a70:	40007000 	.word	0x40007000
 8002a74:	fffff9ff 	.word	0xfffff9ff
 8002a78:	20000000 	.word	0x20000000
 8002a7c:	000f4240 	.word	0x000f4240

08002a80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a80:	b570      	push	{r4, r5, r6, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a86:	d100      	bne.n	8002a8a <HAL_RCC_OscConfig+0xa>
 8002a88:	e25e      	b.n	8002f48 <HAL_RCC_OscConfig+0x4c8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a8a:	6803      	ldr	r3, [r0, #0]
 8002a8c:	07db      	lsls	r3, r3, #31
 8002a8e:	d539      	bpl.n	8002b04 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a90:	4ac1      	ldr	r2, [pc, #772]	; (8002d98 <HAL_RCC_OscConfig+0x318>)
 8002a92:	6891      	ldr	r1, [r2, #8]
 8002a94:	2338      	movs	r3, #56	; 0x38
 8002a96:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a98:	68d1      	ldr	r1, [r2, #12]
 8002a9a:	2203      	movs	r2, #3
 8002a9c:	400a      	ands	r2, r1

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002a9e:	2b10      	cmp	r3, #16
 8002aa0:	d026      	beq.n	8002af0 <HAL_RCC_OscConfig+0x70>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002aa2:	2b08      	cmp	r3, #8
 8002aa4:	d026      	beq.n	8002af4 <HAL_RCC_OscConfig+0x74>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aa6:	6863      	ldr	r3, [r4, #4]
 8002aa8:	2280      	movs	r2, #128	; 0x80
 8002aaa:	0252      	lsls	r2, r2, #9
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d07f      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x130>
 8002ab0:	22a0      	movs	r2, #160	; 0xa0
 8002ab2:	02d2      	lsls	r2, r2, #11
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d100      	bne.n	8002aba <HAL_RCC_OscConfig+0x3a>
 8002ab8:	e081      	b.n	8002bbe <HAL_RCC_OscConfig+0x13e>
 8002aba:	4bb7      	ldr	r3, [pc, #732]	; (8002d98 <HAL_RCC_OscConfig+0x318>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	49b7      	ldr	r1, [pc, #732]	; (8002d9c <HAL_RCC_OscConfig+0x31c>)
 8002ac0:	400a      	ands	r2, r1
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	49b6      	ldr	r1, [pc, #728]	; (8002da0 <HAL_RCC_OscConfig+0x320>)
 8002ac8:	400a      	ands	r2, r1
 8002aca:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002acc:	6863      	ldr	r3, [r4, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d100      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x54>
 8002ad2:	e080      	b.n	8002bd6 <HAL_RCC_OscConfig+0x156>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad4:	f7fe fd48 	bl	8001568 <HAL_GetTick>
 8002ad8:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ada:	4baf      	ldr	r3, [pc, #700]	; (8002d98 <HAL_RCC_OscConfig+0x318>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	039b      	lsls	r3, r3, #14
 8002ae0:	d410      	bmi.n	8002b04 <HAL_RCC_OscConfig+0x84>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae2:	f7fe fd41 	bl	8001568 <HAL_GetTick>
 8002ae6:	1b40      	subs	r0, r0, r5
 8002ae8:	2864      	cmp	r0, #100	; 0x64
 8002aea:	d9f6      	bls.n	8002ada <HAL_RCC_OscConfig+0x5a>
          {
            return HAL_TIMEOUT;
 8002aec:	2003      	movs	r0, #3
 8002aee:	e22c      	b.n	8002f4a <HAL_RCC_OscConfig+0x4ca>
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002af0:	2a03      	cmp	r2, #3
 8002af2:	d1d6      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x22>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af4:	4ba8      	ldr	r3, [pc, #672]	; (8002d98 <HAL_RCC_OscConfig+0x318>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	039b      	lsls	r3, r3, #14
 8002afa:	d503      	bpl.n	8002b04 <HAL_RCC_OscConfig+0x84>
 8002afc:	6863      	ldr	r3, [r4, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d100      	bne.n	8002b04 <HAL_RCC_OscConfig+0x84>
 8002b02:	e224      	b.n	8002f4e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b04:	6823      	ldr	r3, [r4, #0]
 8002b06:	079b      	lsls	r3, r3, #30
 8002b08:	d531      	bpl.n	8002b6e <HAL_RCC_OscConfig+0xee>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b0a:	4aa3      	ldr	r2, [pc, #652]	; (8002d98 <HAL_RCC_OscConfig+0x318>)
 8002b0c:	6891      	ldr	r1, [r2, #8]
 8002b0e:	2338      	movs	r3, #56	; 0x38
 8002b10:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b12:	68d1      	ldr	r1, [r2, #12]
 8002b14:	2203      	movs	r2, #3
 8002b16:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002b18:	2b10      	cmp	r3, #16
 8002b1a:	d06a      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x172>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d16b      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x178>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b20:	4a9d      	ldr	r2, [pc, #628]	; (8002d98 <HAL_RCC_OscConfig+0x318>)
 8002b22:	6812      	ldr	r2, [r2, #0]
 8002b24:	0552      	lsls	r2, r2, #21
 8002b26:	d503      	bpl.n	8002b30 <HAL_RCC_OscConfig+0xb0>
 8002b28:	68e2      	ldr	r2, [r4, #12]
 8002b2a:	2a00      	cmp	r2, #0
 8002b2c:	d100      	bne.n	8002b30 <HAL_RCC_OscConfig+0xb0>
 8002b2e:	e210      	b.n	8002f52 <HAL_RCC_OscConfig+0x4d2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b30:	4899      	ldr	r0, [pc, #612]	; (8002d98 <HAL_RCC_OscConfig+0x318>)
 8002b32:	6842      	ldr	r2, [r0, #4]
 8002b34:	499b      	ldr	r1, [pc, #620]	; (8002da4 <HAL_RCC_OscConfig+0x324>)
 8002b36:	400a      	ands	r2, r1
 8002b38:	6961      	ldr	r1, [r4, #20]
 8002b3a:	0209      	lsls	r1, r1, #8
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	6042      	str	r2, [r0, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10d      	bne.n	8002b60 <HAL_RCC_OscConfig+0xe0>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002b44:	6803      	ldr	r3, [r0, #0]
 8002b46:	4998      	ldr	r1, [pc, #608]	; (8002da8 <HAL_RCC_OscConfig+0x328>)
 8002b48:	400b      	ands	r3, r1
 8002b4a:	6921      	ldr	r1, [r4, #16]
 8002b4c:	430b      	orrs	r3, r1
 8002b4e:	6003      	str	r3, [r0, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002b50:	6803      	ldr	r3, [r0, #0]
 8002b52:	0adb      	lsrs	r3, r3, #11
 8002b54:	2207      	movs	r2, #7
 8002b56:	401a      	ands	r2, r3
 8002b58:	4b94      	ldr	r3, [pc, #592]	; (8002dac <HAL_RCC_OscConfig+0x32c>)
 8002b5a:	40d3      	lsrs	r3, r2
 8002b5c:	4a94      	ldr	r2, [pc, #592]	; (8002db0 <HAL_RCC_OscConfig+0x330>)
 8002b5e:	6013      	str	r3, [r2, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b60:	4b94      	ldr	r3, [pc, #592]	; (8002db4 <HAL_RCC_OscConfig+0x334>)
 8002b62:	6818      	ldr	r0, [r3, #0]
 8002b64:	f7fe fcb4 	bl	80014d0 <HAL_InitTick>
 8002b68:	2800      	cmp	r0, #0
 8002b6a:	d000      	beq.n	8002b6e <HAL_RCC_OscConfig+0xee>
 8002b6c:	e1f3      	b.n	8002f56 <HAL_RCC_OscConfig+0x4d6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b6e:	6823      	ldr	r3, [r4, #0]
 8002b70:	071b      	lsls	r3, r3, #28
 8002b72:	d400      	bmi.n	8002b76 <HAL_RCC_OscConfig+0xf6>
 8002b74:	e081      	b.n	8002c7a <HAL_RCC_OscConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002b76:	4b88      	ldr	r3, [pc, #544]	; (8002d98 <HAL_RCC_OscConfig+0x318>)
 8002b78:	689a      	ldr	r2, [r3, #8]
 8002b7a:	2338      	movs	r3, #56	; 0x38
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	2b18      	cmp	r3, #24
 8002b80:	d073      	beq.n	8002c6a <HAL_RCC_OscConfig+0x1ea>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b82:	69a3      	ldr	r3, [r4, #24]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d100      	bne.n	8002b8a <HAL_RCC_OscConfig+0x10a>
 8002b88:	e0b4      	b.n	8002cf4 <HAL_RCC_OscConfig+0x274>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002b8a:	4a83      	ldr	r2, [pc, #524]	; (8002d98 <HAL_RCC_OscConfig+0x318>)
 8002b8c:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8002b8e:	2101      	movs	r1, #1
 8002b90:	430b      	orrs	r3, r1
 8002b92:	6613      	str	r3, [r2, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b94:	f7fe fce8 	bl	8001568 <HAL_GetTick>
 8002b98:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b9a:	4b7f      	ldr	r3, [pc, #508]	; (8002d98 <HAL_RCC_OscConfig+0x318>)
 8002b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b9e:	079b      	lsls	r3, r3, #30
 8002ba0:	d46b      	bmi.n	8002c7a <HAL_RCC_OscConfig+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba2:	f7fe fce1 	bl	8001568 <HAL_GetTick>
 8002ba6:	1b40      	subs	r0, r0, r5
 8002ba8:	2802      	cmp	r0, #2
 8002baa:	d9f6      	bls.n	8002b9a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002bac:	2003      	movs	r0, #3
 8002bae:	e1cc      	b.n	8002f4a <HAL_RCC_OscConfig+0x4ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bb0:	4a79      	ldr	r2, [pc, #484]	; (8002d98 <HAL_RCC_OscConfig+0x318>)
 8002bb2:	6811      	ldr	r1, [r2, #0]
 8002bb4:	2380      	movs	r3, #128	; 0x80
 8002bb6:	025b      	lsls	r3, r3, #9
 8002bb8:	430b      	orrs	r3, r1
 8002bba:	6013      	str	r3, [r2, #0]
 8002bbc:	e786      	b.n	8002acc <HAL_RCC_OscConfig+0x4c>
 8002bbe:	4b76      	ldr	r3, [pc, #472]	; (8002d98 <HAL_RCC_OscConfig+0x318>)
 8002bc0:	6819      	ldr	r1, [r3, #0]
 8002bc2:	2280      	movs	r2, #128	; 0x80
 8002bc4:	02d2      	lsls	r2, r2, #11
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	6819      	ldr	r1, [r3, #0]
 8002bcc:	2280      	movs	r2, #128	; 0x80
 8002bce:	0252      	lsls	r2, r2, #9
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	e77a      	b.n	8002acc <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8002bd6:	f7fe fcc7 	bl	8001568 <HAL_GetTick>
 8002bda:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bdc:	4b6e      	ldr	r3, [pc, #440]	; (8002d98 <HAL_RCC_OscConfig+0x318>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	039b      	lsls	r3, r3, #14
 8002be2:	d58f      	bpl.n	8002b04 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002be4:	f7fe fcc0 	bl	8001568 <HAL_GetTick>
 8002be8:	1b40      	subs	r0, r0, r5
 8002bea:	2864      	cmp	r0, #100	; 0x64
 8002bec:	d9f6      	bls.n	8002bdc <HAL_RCC_OscConfig+0x15c>
            return HAL_TIMEOUT;
 8002bee:	2003      	movs	r0, #3
 8002bf0:	e1ab      	b.n	8002f4a <HAL_RCC_OscConfig+0x4ca>
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002bf2:	2a02      	cmp	r2, #2
 8002bf4:	d192      	bne.n	8002b1c <HAL_RCC_OscConfig+0x9c>
 8002bf6:	e793      	b.n	8002b20 <HAL_RCC_OscConfig+0xa0>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bf8:	68e3      	ldr	r3, [r4, #12]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d022      	beq.n	8002c44 <HAL_RCC_OscConfig+0x1c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002bfe:	4a66      	ldr	r2, [pc, #408]	; (8002d98 <HAL_RCC_OscConfig+0x318>)
 8002c00:	6813      	ldr	r3, [r2, #0]
 8002c02:	4969      	ldr	r1, [pc, #420]	; (8002da8 <HAL_RCC_OscConfig+0x328>)
 8002c04:	400b      	ands	r3, r1
 8002c06:	6921      	ldr	r1, [r4, #16]
 8002c08:	430b      	orrs	r3, r1
 8002c0a:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 8002c0c:	6811      	ldr	r1, [r2, #0]
 8002c0e:	2380      	movs	r3, #128	; 0x80
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	430b      	orrs	r3, r1
 8002c14:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002c16:	f7fe fca7 	bl	8001568 <HAL_GetTick>
 8002c1a:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c1c:	4b5e      	ldr	r3, [pc, #376]	; (8002d98 <HAL_RCC_OscConfig+0x318>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	055b      	lsls	r3, r3, #21
 8002c22:	d406      	bmi.n	8002c32 <HAL_RCC_OscConfig+0x1b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c24:	f7fe fca0 	bl	8001568 <HAL_GetTick>
 8002c28:	1b40      	subs	r0, r0, r5
 8002c2a:	2802      	cmp	r0, #2
 8002c2c:	d9f6      	bls.n	8002c1c <HAL_RCC_OscConfig+0x19c>
            return HAL_TIMEOUT;
 8002c2e:	2003      	movs	r0, #3
 8002c30:	e18b      	b.n	8002f4a <HAL_RCC_OscConfig+0x4ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c32:	4959      	ldr	r1, [pc, #356]	; (8002d98 <HAL_RCC_OscConfig+0x318>)
 8002c34:	684b      	ldr	r3, [r1, #4]
 8002c36:	4a5b      	ldr	r2, [pc, #364]	; (8002da4 <HAL_RCC_OscConfig+0x324>)
 8002c38:	4013      	ands	r3, r2
 8002c3a:	6962      	ldr	r2, [r4, #20]
 8002c3c:	0212      	lsls	r2, r2, #8
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	604b      	str	r3, [r1, #4]
 8002c42:	e794      	b.n	8002b6e <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 8002c44:	4a54      	ldr	r2, [pc, #336]	; (8002d98 <HAL_RCC_OscConfig+0x318>)
 8002c46:	6813      	ldr	r3, [r2, #0]
 8002c48:	495b      	ldr	r1, [pc, #364]	; (8002db8 <HAL_RCC_OscConfig+0x338>)
 8002c4a:	400b      	ands	r3, r1
 8002c4c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002c4e:	f7fe fc8b 	bl	8001568 <HAL_GetTick>
 8002c52:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c54:	4b50      	ldr	r3, [pc, #320]	; (8002d98 <HAL_RCC_OscConfig+0x318>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	055b      	lsls	r3, r3, #21
 8002c5a:	d588      	bpl.n	8002b6e <HAL_RCC_OscConfig+0xee>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c5c:	f7fe fc84 	bl	8001568 <HAL_GetTick>
 8002c60:	1b40      	subs	r0, r0, r5
 8002c62:	2802      	cmp	r0, #2
 8002c64:	d9f6      	bls.n	8002c54 <HAL_RCC_OscConfig+0x1d4>
            return HAL_TIMEOUT;
 8002c66:	2003      	movs	r0, #3
 8002c68:	e16f      	b.n	8002f4a <HAL_RCC_OscConfig+0x4ca>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002c6a:	4b4b      	ldr	r3, [pc, #300]	; (8002d98 <HAL_RCC_OscConfig+0x318>)
 8002c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c6e:	079b      	lsls	r3, r3, #30
 8002c70:	d503      	bpl.n	8002c7a <HAL_RCC_OscConfig+0x1fa>
 8002c72:	69a3      	ldr	r3, [r4, #24]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d100      	bne.n	8002c7a <HAL_RCC_OscConfig+0x1fa>
 8002c78:	e16f      	b.n	8002f5a <HAL_RCC_OscConfig+0x4da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c7a:	6823      	ldr	r3, [r4, #0]
 8002c7c:	075b      	lsls	r3, r3, #29
 8002c7e:	d400      	bmi.n	8002c82 <HAL_RCC_OscConfig+0x202>
 8002c80:	e0a2      	b.n	8002dc8 <HAL_RCC_OscConfig+0x348>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002c82:	4b45      	ldr	r3, [pc, #276]	; (8002d98 <HAL_RCC_OscConfig+0x318>)
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	2338      	movs	r3, #56	; 0x38
 8002c88:	4013      	ands	r3, r2
 8002c8a:	2b20      	cmp	r3, #32
 8002c8c:	d045      	beq.n	8002d1a <HAL_RCC_OscConfig+0x29a>
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c8e:	4b42      	ldr	r3, [pc, #264]	; (8002d98 <HAL_RCC_OscConfig+0x318>)
 8002c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	d44a      	bmi.n	8002d2c <HAL_RCC_OscConfig+0x2ac>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002c96:	4b40      	ldr	r3, [pc, #256]	; (8002d98 <HAL_RCC_OscConfig+0x318>)
 8002c98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c9a:	2180      	movs	r1, #128	; 0x80
 8002c9c:	0549      	lsls	r1, r1, #21
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca4:	400b      	ands	r3, r1
 8002ca6:	9301      	str	r3, [sp, #4]
 8002ca8:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 8002caa:	2501      	movs	r5, #1
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cac:	4b43      	ldr	r3, [pc, #268]	; (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	05db      	lsls	r3, r3, #23
 8002cb2:	d53d      	bpl.n	8002d30 <HAL_RCC_OscConfig+0x2b0>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cb4:	68a3      	ldr	r3, [r4, #8]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d04e      	beq.n	8002d58 <HAL_RCC_OscConfig+0x2d8>
 8002cba:	2b05      	cmp	r3, #5
 8002cbc:	d052      	beq.n	8002d64 <HAL_RCC_OscConfig+0x2e4>
 8002cbe:	4b36      	ldr	r3, [pc, #216]	; (8002d98 <HAL_RCC_OscConfig+0x318>)
 8002cc0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	438a      	bics	r2, r1
 8002cc6:	65da      	str	r2, [r3, #92]	; 0x5c
 8002cc8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cca:	3103      	adds	r1, #3
 8002ccc:	438a      	bics	r2, r1
 8002cce:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cd0:	68a3      	ldr	r3, [r4, #8]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d050      	beq.n	8002d78 <HAL_RCC_OscConfig+0x2f8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd6:	f7fe fc47 	bl	8001568 <HAL_GetTick>
 8002cda:	0006      	movs	r6, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cdc:	4b2e      	ldr	r3, [pc, #184]	; (8002d98 <HAL_RCC_OscConfig+0x318>)
 8002cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce0:	079b      	lsls	r3, r3, #30
 8002ce2:	d46f      	bmi.n	8002dc4 <HAL_RCC_OscConfig+0x344>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce4:	f7fe fc40 	bl	8001568 <HAL_GetTick>
 8002ce8:	1b80      	subs	r0, r0, r6
 8002cea:	4b35      	ldr	r3, [pc, #212]	; (8002dc0 <HAL_RCC_OscConfig+0x340>)
 8002cec:	4298      	cmp	r0, r3
 8002cee:	d9f5      	bls.n	8002cdc <HAL_RCC_OscConfig+0x25c>
          {
            return HAL_TIMEOUT;
 8002cf0:	2003      	movs	r0, #3
 8002cf2:	e12a      	b.n	8002f4a <HAL_RCC_OscConfig+0x4ca>
        __HAL_RCC_LSI_DISABLE();
 8002cf4:	4a28      	ldr	r2, [pc, #160]	; (8002d98 <HAL_RCC_OscConfig+0x318>)
 8002cf6:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	438b      	bics	r3, r1
 8002cfc:	6613      	str	r3, [r2, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002cfe:	f7fe fc33 	bl	8001568 <HAL_GetTick>
 8002d02:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d04:	4b24      	ldr	r3, [pc, #144]	; (8002d98 <HAL_RCC_OscConfig+0x318>)
 8002d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d08:	079b      	lsls	r3, r3, #30
 8002d0a:	d5b6      	bpl.n	8002c7a <HAL_RCC_OscConfig+0x1fa>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d0c:	f7fe fc2c 	bl	8001568 <HAL_GetTick>
 8002d10:	1b40      	subs	r0, r0, r5
 8002d12:	2802      	cmp	r0, #2
 8002d14:	d9f6      	bls.n	8002d04 <HAL_RCC_OscConfig+0x284>
            return HAL_TIMEOUT;
 8002d16:	2003      	movs	r0, #3
 8002d18:	e117      	b.n	8002f4a <HAL_RCC_OscConfig+0x4ca>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002d1a:	4b1f      	ldr	r3, [pc, #124]	; (8002d98 <HAL_RCC_OscConfig+0x318>)
 8002d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d1e:	079b      	lsls	r3, r3, #30
 8002d20:	d552      	bpl.n	8002dc8 <HAL_RCC_OscConfig+0x348>
 8002d22:	68a3      	ldr	r3, [r4, #8]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d14f      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x348>
        return HAL_ERROR;
 8002d28:	2001      	movs	r0, #1
 8002d2a:	e10e      	b.n	8002f4a <HAL_RCC_OscConfig+0x4ca>
    FlagStatus       pwrclkchanged = RESET;
 8002d2c:	2500      	movs	r5, #0
 8002d2e:	e7bd      	b.n	8002cac <HAL_RCC_OscConfig+0x22c>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d30:	4a22      	ldr	r2, [pc, #136]	; (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002d32:	6811      	ldr	r1, [r2, #0]
 8002d34:	2380      	movs	r3, #128	; 0x80
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	430b      	orrs	r3, r1
 8002d3a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002d3c:	f7fe fc14 	bl	8001568 <HAL_GetTick>
 8002d40:	0006      	movs	r6, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d42:	4b1e      	ldr	r3, [pc, #120]	; (8002dbc <HAL_RCC_OscConfig+0x33c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	05db      	lsls	r3, r3, #23
 8002d48:	d4b4      	bmi.n	8002cb4 <HAL_RCC_OscConfig+0x234>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d4a:	f7fe fc0d 	bl	8001568 <HAL_GetTick>
 8002d4e:	1b80      	subs	r0, r0, r6
 8002d50:	2802      	cmp	r0, #2
 8002d52:	d9f6      	bls.n	8002d42 <HAL_RCC_OscConfig+0x2c2>
            return HAL_TIMEOUT;
 8002d54:	2003      	movs	r0, #3
 8002d56:	e0f8      	b.n	8002f4a <HAL_RCC_OscConfig+0x4ca>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d58:	4a0f      	ldr	r2, [pc, #60]	; (8002d98 <HAL_RCC_OscConfig+0x318>)
 8002d5a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	430b      	orrs	r3, r1
 8002d60:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002d62:	e7b5      	b.n	8002cd0 <HAL_RCC_OscConfig+0x250>
 8002d64:	4b0c      	ldr	r3, [pc, #48]	; (8002d98 <HAL_RCC_OscConfig+0x318>)
 8002d66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d68:	2104      	movs	r1, #4
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d70:	3903      	subs	r1, #3
 8002d72:	430a      	orrs	r2, r1
 8002d74:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d76:	e7ab      	b.n	8002cd0 <HAL_RCC_OscConfig+0x250>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d78:	f7fe fbf6 	bl	8001568 <HAL_GetTick>
 8002d7c:	0006      	movs	r6, r0

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d7e:	4b06      	ldr	r3, [pc, #24]	; (8002d98 <HAL_RCC_OscConfig+0x318>)
 8002d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d82:	079b      	lsls	r3, r3, #30
 8002d84:	d51e      	bpl.n	8002dc4 <HAL_RCC_OscConfig+0x344>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d86:	f7fe fbef 	bl	8001568 <HAL_GetTick>
 8002d8a:	1b80      	subs	r0, r0, r6
 8002d8c:	4b0c      	ldr	r3, [pc, #48]	; (8002dc0 <HAL_RCC_OscConfig+0x340>)
 8002d8e:	4298      	cmp	r0, r3
 8002d90:	d9f5      	bls.n	8002d7e <HAL_RCC_OscConfig+0x2fe>
          {
            return HAL_TIMEOUT;
 8002d92:	2003      	movs	r0, #3
 8002d94:	e0d9      	b.n	8002f4a <HAL_RCC_OscConfig+0x4ca>
 8002d96:	46c0      	nop			; (mov r8, r8)
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	fffeffff 	.word	0xfffeffff
 8002da0:	fffbffff 	.word	0xfffbffff
 8002da4:	ffff80ff 	.word	0xffff80ff
 8002da8:	ffffc7ff 	.word	0xffffc7ff
 8002dac:	00f42400 	.word	0x00f42400
 8002db0:	20000000 	.word	0x20000000
 8002db4:	20000008 	.word	0x20000008
 8002db8:	fffffeff 	.word	0xfffffeff
 8002dbc:	40007000 	.word	0x40007000
 8002dc0:	00001388 	.word	0x00001388
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002dc4:	2d01      	cmp	r5, #1
 8002dc6:	d019      	beq.n	8002dfc <HAL_RCC_OscConfig+0x37c>
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002dc8:	6823      	ldr	r3, [r4, #0]
 8002dca:	069b      	lsls	r3, r3, #26
 8002dcc:	d52f      	bpl.n	8002e2e <HAL_RCC_OscConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002dce:	69e3      	ldr	r3, [r4, #28]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d019      	beq.n	8002e08 <HAL_RCC_OscConfig+0x388>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002dd4:	4a6a      	ldr	r2, [pc, #424]	; (8002f80 <HAL_RCC_OscConfig+0x500>)
 8002dd6:	6811      	ldr	r1, [r2, #0]
 8002dd8:	2380      	movs	r3, #128	; 0x80
 8002dda:	03db      	lsls	r3, r3, #15
 8002ddc:	430b      	orrs	r3, r1
 8002dde:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de0:	f7fe fbc2 	bl	8001568 <HAL_GetTick>
 8002de4:	0005      	movs	r5, r0

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002de6:	4b66      	ldr	r3, [pc, #408]	; (8002f80 <HAL_RCC_OscConfig+0x500>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	021b      	lsls	r3, r3, #8
 8002dec:	d41f      	bmi.n	8002e2e <HAL_RCC_OscConfig+0x3ae>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dee:	f7fe fbbb 	bl	8001568 <HAL_GetTick>
 8002df2:	1b40      	subs	r0, r0, r5
 8002df4:	2802      	cmp	r0, #2
 8002df6:	d9f6      	bls.n	8002de6 <HAL_RCC_OscConfig+0x366>
        {
          return HAL_TIMEOUT;
 8002df8:	2003      	movs	r0, #3
 8002dfa:	e0a6      	b.n	8002f4a <HAL_RCC_OscConfig+0x4ca>
        __HAL_RCC_PWR_CLK_DISABLE();
 8002dfc:	4a60      	ldr	r2, [pc, #384]	; (8002f80 <HAL_RCC_OscConfig+0x500>)
 8002dfe:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8002e00:	4960      	ldr	r1, [pc, #384]	; (8002f84 <HAL_RCC_OscConfig+0x504>)
 8002e02:	400b      	ands	r3, r1
 8002e04:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002e06:	e7df      	b.n	8002dc8 <HAL_RCC_OscConfig+0x348>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e08:	4a5d      	ldr	r2, [pc, #372]	; (8002f80 <HAL_RCC_OscConfig+0x500>)
 8002e0a:	6813      	ldr	r3, [r2, #0]
 8002e0c:	495e      	ldr	r1, [pc, #376]	; (8002f88 <HAL_RCC_OscConfig+0x508>)
 8002e0e:	400b      	ands	r3, r1
 8002e10:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e12:	f7fe fba9 	bl	8001568 <HAL_GetTick>
 8002e16:	0005      	movs	r5, r0

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002e18:	4b59      	ldr	r3, [pc, #356]	; (8002f80 <HAL_RCC_OscConfig+0x500>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	021b      	lsls	r3, r3, #8
 8002e1e:	d506      	bpl.n	8002e2e <HAL_RCC_OscConfig+0x3ae>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e20:	f7fe fba2 	bl	8001568 <HAL_GetTick>
 8002e24:	1b40      	subs	r0, r0, r5
 8002e26:	2802      	cmp	r0, #2
 8002e28:	d9f6      	bls.n	8002e18 <HAL_RCC_OscConfig+0x398>
        {
          return HAL_TIMEOUT;
 8002e2a:	2003      	movs	r0, #3
 8002e2c:	e08d      	b.n	8002f4a <HAL_RCC_OscConfig+0x4ca>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e2e:	6a23      	ldr	r3, [r4, #32]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d100      	bne.n	8002e36 <HAL_RCC_OscConfig+0x3b6>
 8002e34:	e093      	b.n	8002f5e <HAL_RCC_OscConfig+0x4de>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e36:	4a52      	ldr	r2, [pc, #328]	; (8002f80 <HAL_RCC_OscConfig+0x500>)
 8002e38:	6891      	ldr	r1, [r2, #8]
 8002e3a:	2238      	movs	r2, #56	; 0x38
 8002e3c:	400a      	ands	r2, r1
 8002e3e:	2a10      	cmp	r2, #16
 8002e40:	d05a      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x478>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d012      	beq.n	8002e6c <HAL_RCC_OscConfig+0x3ec>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e46:	4a4e      	ldr	r2, [pc, #312]	; (8002f80 <HAL_RCC_OscConfig+0x500>)
 8002e48:	6813      	ldr	r3, [r2, #0]
 8002e4a:	4950      	ldr	r1, [pc, #320]	; (8002f8c <HAL_RCC_OscConfig+0x50c>)
 8002e4c:	400b      	ands	r3, r1
 8002e4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e50:	f7fe fb8a 	bl	8001568 <HAL_GetTick>
 8002e54:	0004      	movs	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e56:	4b4a      	ldr	r3, [pc, #296]	; (8002f80 <HAL_RCC_OscConfig+0x500>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	019b      	lsls	r3, r3, #6
 8002e5c:	d545      	bpl.n	8002eea <HAL_RCC_OscConfig+0x46a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e5e:	f7fe fb83 	bl	8001568 <HAL_GetTick>
 8002e62:	1b00      	subs	r0, r0, r4
 8002e64:	2802      	cmp	r0, #2
 8002e66:	d9f6      	bls.n	8002e56 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8002e68:	2003      	movs	r0, #3
 8002e6a:	e06e      	b.n	8002f4a <HAL_RCC_OscConfig+0x4ca>
        __HAL_RCC_PLL_DISABLE();
 8002e6c:	4a44      	ldr	r2, [pc, #272]	; (8002f80 <HAL_RCC_OscConfig+0x500>)
 8002e6e:	6813      	ldr	r3, [r2, #0]
 8002e70:	4946      	ldr	r1, [pc, #280]	; (8002f8c <HAL_RCC_OscConfig+0x50c>)
 8002e72:	400b      	ands	r3, r1
 8002e74:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002e76:	f7fe fb77 	bl	8001568 <HAL_GetTick>
 8002e7a:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e7c:	4b40      	ldr	r3, [pc, #256]	; (8002f80 <HAL_RCC_OscConfig+0x500>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	019b      	lsls	r3, r3, #6
 8002e82:	d506      	bpl.n	8002e92 <HAL_RCC_OscConfig+0x412>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e84:	f7fe fb70 	bl	8001568 <HAL_GetTick>
 8002e88:	1b40      	subs	r0, r0, r5
 8002e8a:	2802      	cmp	r0, #2
 8002e8c:	d9f6      	bls.n	8002e7c <HAL_RCC_OscConfig+0x3fc>
            return HAL_TIMEOUT;
 8002e8e:	2003      	movs	r0, #3
 8002e90:	e05b      	b.n	8002f4a <HAL_RCC_OscConfig+0x4ca>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e92:	4a3b      	ldr	r2, [pc, #236]	; (8002f80 <HAL_RCC_OscConfig+0x500>)
 8002e94:	68d3      	ldr	r3, [r2, #12]
 8002e96:	493e      	ldr	r1, [pc, #248]	; (8002f90 <HAL_RCC_OscConfig+0x510>)
 8002e98:	4019      	ands	r1, r3
 8002e9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e9c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002e9e:	4303      	orrs	r3, r0
 8002ea0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002ea2:	0200      	lsls	r0, r0, #8
 8002ea4:	4303      	orrs	r3, r0
 8002ea6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002ea8:	4303      	orrs	r3, r0
 8002eaa:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002eac:	4303      	orrs	r3, r0
 8002eae:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002eb0:	4303      	orrs	r3, r0
 8002eb2:	430b      	orrs	r3, r1
 8002eb4:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8002eb6:	6811      	ldr	r1, [r2, #0]
 8002eb8:	2380      	movs	r3, #128	; 0x80
 8002eba:	045b      	lsls	r3, r3, #17
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002ec0:	68d1      	ldr	r1, [r2, #12]
 8002ec2:	2380      	movs	r3, #128	; 0x80
 8002ec4:	055b      	lsls	r3, r3, #21
 8002ec6:	430b      	orrs	r3, r1
 8002ec8:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8002eca:	f7fe fb4d 	bl	8001568 <HAL_GetTick>
 8002ece:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ed0:	4b2b      	ldr	r3, [pc, #172]	; (8002f80 <HAL_RCC_OscConfig+0x500>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	019b      	lsls	r3, r3, #6
 8002ed6:	d406      	bmi.n	8002ee6 <HAL_RCC_OscConfig+0x466>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed8:	f7fe fb46 	bl	8001568 <HAL_GetTick>
 8002edc:	1b00      	subs	r0, r0, r4
 8002ede:	2802      	cmp	r0, #2
 8002ee0:	d9f6      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x450>
            return HAL_TIMEOUT;
 8002ee2:	2003      	movs	r0, #3
 8002ee4:	e031      	b.n	8002f4a <HAL_RCC_OscConfig+0x4ca>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	e02f      	b.n	8002f4a <HAL_RCC_OscConfig+0x4ca>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002eea:	4a25      	ldr	r2, [pc, #148]	; (8002f80 <HAL_RCC_OscConfig+0x500>)
 8002eec:	68d3      	ldr	r3, [r2, #12]
 8002eee:	4929      	ldr	r1, [pc, #164]	; (8002f94 <HAL_RCC_OscConfig+0x514>)
 8002ef0:	400b      	ands	r3, r1
 8002ef2:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	e028      	b.n	8002f4a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d032      	beq.n	8002f62 <HAL_RCC_OscConfig+0x4e2>
        temp_pllckcfg = RCC->PLLCFGR;
 8002efc:	4b20      	ldr	r3, [pc, #128]	; (8002f80 <HAL_RCC_OscConfig+0x500>)
 8002efe:	68da      	ldr	r2, [r3, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f00:	2303      	movs	r3, #3
 8002f02:	4013      	ands	r3, r2
 8002f04:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002f06:	428b      	cmp	r3, r1
 8002f08:	d12d      	bne.n	8002f66 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f0a:	2370      	movs	r3, #112	; 0x70
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f10:	428b      	cmp	r3, r1
 8002f12:	d12a      	bne.n	8002f6a <HAL_RCC_OscConfig+0x4ea>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f14:	21fe      	movs	r1, #254	; 0xfe
 8002f16:	01c9      	lsls	r1, r1, #7
 8002f18:	4011      	ands	r1, r2
 8002f1a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f1c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f1e:	4299      	cmp	r1, r3
 8002f20:	d125      	bne.n	8002f6e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f22:	23f8      	movs	r3, #248	; 0xf8
 8002f24:	039b      	lsls	r3, r3, #14
 8002f26:	4013      	ands	r3, r2
 8002f28:	6b21      	ldr	r1, [r4, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f2a:	428b      	cmp	r3, r1
 8002f2c:	d121      	bne.n	8002f72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002f2e:	23e0      	movs	r3, #224	; 0xe0
 8002f30:	051b      	lsls	r3, r3, #20
 8002f32:	4013      	ands	r3, r2
 8002f34:	6b61      	ldr	r1, [r4, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f36:	428b      	cmp	r3, r1
 8002f38:	d11d      	bne.n	8002f76 <HAL_RCC_OscConfig+0x4f6>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002f3a:	0f52      	lsrs	r2, r2, #29
 8002f3c:	0752      	lsls	r2, r2, #29
 8002f3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d11a      	bne.n	8002f7a <HAL_RCC_OscConfig+0x4fa>
  return HAL_OK;
 8002f44:	2000      	movs	r0, #0
 8002f46:	e000      	b.n	8002f4a <HAL_RCC_OscConfig+0x4ca>
    return HAL_ERROR;
 8002f48:	2001      	movs	r0, #1
}
 8002f4a:	b002      	add	sp, #8
 8002f4c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002f4e:	2001      	movs	r0, #1
 8002f50:	e7fb      	b.n	8002f4a <HAL_RCC_OscConfig+0x4ca>
        return HAL_ERROR;
 8002f52:	2001      	movs	r0, #1
 8002f54:	e7f9      	b.n	8002f4a <HAL_RCC_OscConfig+0x4ca>
          return HAL_ERROR;
 8002f56:	2001      	movs	r0, #1
 8002f58:	e7f7      	b.n	8002f4a <HAL_RCC_OscConfig+0x4ca>
        return HAL_ERROR;
 8002f5a:	2001      	movs	r0, #1
 8002f5c:	e7f5      	b.n	8002f4a <HAL_RCC_OscConfig+0x4ca>
  return HAL_OK;
 8002f5e:	2000      	movs	r0, #0
 8002f60:	e7f3      	b.n	8002f4a <HAL_RCC_OscConfig+0x4ca>
        return HAL_ERROR;
 8002f62:	2001      	movs	r0, #1
 8002f64:	e7f1      	b.n	8002f4a <HAL_RCC_OscConfig+0x4ca>
          return HAL_ERROR;
 8002f66:	2001      	movs	r0, #1
 8002f68:	e7ef      	b.n	8002f4a <HAL_RCC_OscConfig+0x4ca>
 8002f6a:	2001      	movs	r0, #1
 8002f6c:	e7ed      	b.n	8002f4a <HAL_RCC_OscConfig+0x4ca>
 8002f6e:	2001      	movs	r0, #1
 8002f70:	e7eb      	b.n	8002f4a <HAL_RCC_OscConfig+0x4ca>
 8002f72:	2001      	movs	r0, #1
 8002f74:	e7e9      	b.n	8002f4a <HAL_RCC_OscConfig+0x4ca>
 8002f76:	2001      	movs	r0, #1
 8002f78:	e7e7      	b.n	8002f4a <HAL_RCC_OscConfig+0x4ca>
 8002f7a:	2001      	movs	r0, #1
 8002f7c:	e7e5      	b.n	8002f4a <HAL_RCC_OscConfig+0x4ca>
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	40021000 	.word	0x40021000
 8002f84:	efffffff 	.word	0xefffffff
 8002f88:	ffbfffff 	.word	0xffbfffff
 8002f8c:	feffffff 	.word	0xfeffffff
 8002f90:	11c1808c 	.word	0x11c1808c
 8002f94:	eefefffc 	.word	0xeefefffc

08002f98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f98:	b510      	push	{r4, lr}
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f9a:	4b2a      	ldr	r3, [pc, #168]	; (8003044 <HAL_RCC_GetSysClockFreq+0xac>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	2238      	movs	r2, #56	; 0x38
 8002fa0:	421a      	tst	r2, r3
 8002fa2:	d107      	bne.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x1c>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002fa4:	4b27      	ldr	r3, [pc, #156]	; (8003044 <HAL_RCC_GetSysClockFreq+0xac>)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	0ad2      	lsrs	r2, r2, #11
 8002faa:	2307      	movs	r3, #7
 8002fac:	4013      	ands	r3, r2

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002fae:	4826      	ldr	r0, [pc, #152]	; (8003048 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002fb0:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8002fb2:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fb4:	4b23      	ldr	r3, [pc, #140]	; (8003044 <HAL_RCC_GetSysClockFreq+0xac>)
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	2338      	movs	r3, #56	; 0x38
 8002fba:	4013      	ands	r3, r2
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	d03b      	beq.n	8003038 <HAL_RCC_GetSysClockFreq+0xa0>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fc0:	4b20      	ldr	r3, [pc, #128]	; (8003044 <HAL_RCC_GetSysClockFreq+0xac>)
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	2338      	movs	r3, #56	; 0x38
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	2b10      	cmp	r3, #16
 8002fca:	d00d      	beq.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x50>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002fcc:	4b1d      	ldr	r3, [pc, #116]	; (8003044 <HAL_RCC_GetSysClockFreq+0xac>)
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	2338      	movs	r3, #56	; 0x38
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	2b20      	cmp	r3, #32
 8002fd6:	d031      	beq.n	800303c <HAL_RCC_GetSysClockFreq+0xa4>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002fd8:	4b1a      	ldr	r3, [pc, #104]	; (8003044 <HAL_RCC_GetSysClockFreq+0xac>)
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	2338      	movs	r3, #56	; 0x38
 8002fde:	4013      	ands	r3, r2
 8002fe0:	2b18      	cmp	r3, #24
 8002fe2:	d026      	beq.n	8003032 <HAL_RCC_GetSysClockFreq+0x9a>
    sysclockfreq = 0U;
 8002fe4:	2000      	movs	r0, #0
  return sysclockfreq;
 8002fe6:	e7e4      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x1a>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002fe8:	4a16      	ldr	r2, [pc, #88]	; (8003044 <HAL_RCC_GetSysClockFreq+0xac>)
 8002fea:	68d1      	ldr	r1, [r2, #12]
 8002fec:	3b0d      	subs	r3, #13
 8002fee:	400b      	ands	r3, r1
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ff0:	68d2      	ldr	r2, [r2, #12]
 8002ff2:	0912      	lsrs	r2, r2, #4
 8002ff4:	2107      	movs	r1, #7
 8002ff6:	4011      	ands	r1, r2
 8002ff8:	3101      	adds	r1, #1
    switch (pllsource)
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d00f      	beq.n	800301e <HAL_RCC_GetSysClockFreq+0x86>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002ffe:	4812      	ldr	r0, [pc, #72]	; (8003048 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003000:	f7fd f880 	bl	8000104 <__udivsi3>
 8003004:	4b0f      	ldr	r3, [pc, #60]	; (8003044 <HAL_RCC_GetSysClockFreq+0xac>)
 8003006:	68da      	ldr	r2, [r3, #12]
 8003008:	0a12      	lsrs	r2, r2, #8
 800300a:	237f      	movs	r3, #127	; 0x7f
 800300c:	4013      	ands	r3, r2
 800300e:	4358      	muls	r0, r3
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003010:	4b0c      	ldr	r3, [pc, #48]	; (8003044 <HAL_RCC_GetSysClockFreq+0xac>)
 8003012:	68d9      	ldr	r1, [r3, #12]
 8003014:	0f49      	lsrs	r1, r1, #29
 8003016:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8003018:	f7fd f874 	bl	8000104 <__udivsi3>
 800301c:	e7c9      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x1a>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800301e:	480b      	ldr	r0, [pc, #44]	; (800304c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003020:	f7fd f870 	bl	8000104 <__udivsi3>
 8003024:	4b07      	ldr	r3, [pc, #28]	; (8003044 <HAL_RCC_GetSysClockFreq+0xac>)
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	0a12      	lsrs	r2, r2, #8
 800302a:	237f      	movs	r3, #127	; 0x7f
 800302c:	4013      	ands	r3, r2
 800302e:	4358      	muls	r0, r3
        break;
 8003030:	e7ee      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0x78>
    sysclockfreq = LSI_VALUE;
 8003032:	20fa      	movs	r0, #250	; 0xfa
 8003034:	01c0      	lsls	r0, r0, #7
 8003036:	e7bc      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = HSE_VALUE;
 8003038:	4804      	ldr	r0, [pc, #16]	; (800304c <HAL_RCC_GetSysClockFreq+0xb4>)
 800303a:	e7ba      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = LSE_VALUE;
 800303c:	2080      	movs	r0, #128	; 0x80
 800303e:	0200      	lsls	r0, r0, #8
 8003040:	e7b7      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x1a>
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	40021000 	.word	0x40021000
 8003048:	00f42400 	.word	0x00f42400
 800304c:	007a1200 	.word	0x007a1200

08003050 <HAL_RCC_ClockConfig>:
{
 8003050:	b570      	push	{r4, r5, r6, lr}
 8003052:	0004      	movs	r4, r0
 8003054:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8003056:	2800      	cmp	r0, #0
 8003058:	d100      	bne.n	800305c <HAL_RCC_ClockConfig+0xc>
 800305a:	e0aa      	b.n	80031b2 <HAL_RCC_ClockConfig+0x162>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800305c:	4b57      	ldr	r3, [pc, #348]	; (80031bc <HAL_RCC_ClockConfig+0x16c>)
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	2307      	movs	r3, #7
 8003062:	4013      	ands	r3, r2
 8003064:	428b      	cmp	r3, r1
 8003066:	d321      	bcc.n	80030ac <HAL_RCC_ClockConfig+0x5c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003068:	6823      	ldr	r3, [r4, #0]
 800306a:	079a      	lsls	r2, r3, #30
 800306c:	d50e      	bpl.n	800308c <HAL_RCC_ClockConfig+0x3c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800306e:	075b      	lsls	r3, r3, #29
 8003070:	d505      	bpl.n	800307e <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003072:	4a53      	ldr	r2, [pc, #332]	; (80031c0 <HAL_RCC_ClockConfig+0x170>)
 8003074:	6891      	ldr	r1, [r2, #8]
 8003076:	23e0      	movs	r3, #224	; 0xe0
 8003078:	01db      	lsls	r3, r3, #7
 800307a:	430b      	orrs	r3, r1
 800307c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800307e:	4a50      	ldr	r2, [pc, #320]	; (80031c0 <HAL_RCC_ClockConfig+0x170>)
 8003080:	6893      	ldr	r3, [r2, #8]
 8003082:	4950      	ldr	r1, [pc, #320]	; (80031c4 <HAL_RCC_ClockConfig+0x174>)
 8003084:	400b      	ands	r3, r1
 8003086:	68a1      	ldr	r1, [r4, #8]
 8003088:	430b      	orrs	r3, r1
 800308a:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800308c:	6823      	ldr	r3, [r4, #0]
 800308e:	07db      	lsls	r3, r3, #31
 8003090:	d554      	bpl.n	800313c <HAL_RCC_ClockConfig+0xec>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003092:	6863      	ldr	r3, [r4, #4]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d020      	beq.n	80030da <HAL_RCC_ClockConfig+0x8a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003098:	2b02      	cmp	r3, #2
 800309a:	d03b      	beq.n	8003114 <HAL_RCC_ClockConfig+0xc4>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800309c:	2b00      	cmp	r3, #0
 800309e:	d13f      	bne.n	8003120 <HAL_RCC_ClockConfig+0xd0>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030a0:	4a47      	ldr	r2, [pc, #284]	; (80031c0 <HAL_RCC_ClockConfig+0x170>)
 80030a2:	6812      	ldr	r2, [r2, #0]
 80030a4:	0552      	lsls	r2, r2, #21
 80030a6:	d41c      	bmi.n	80030e2 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 80030a8:	2001      	movs	r0, #1
 80030aa:	e06a      	b.n	8003182 <HAL_RCC_ClockConfig+0x132>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ac:	4a43      	ldr	r2, [pc, #268]	; (80031bc <HAL_RCC_ClockConfig+0x16c>)
 80030ae:	6813      	ldr	r3, [r2, #0]
 80030b0:	2107      	movs	r1, #7
 80030b2:	438b      	bics	r3, r1
 80030b4:	432b      	orrs	r3, r5
 80030b6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80030b8:	f7fe fa56 	bl	8001568 <HAL_GetTick>
 80030bc:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80030be:	4b3f      	ldr	r3, [pc, #252]	; (80031bc <HAL_RCC_ClockConfig+0x16c>)
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	2307      	movs	r3, #7
 80030c4:	4013      	ands	r3, r2
 80030c6:	42ab      	cmp	r3, r5
 80030c8:	d0ce      	beq.n	8003068 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ca:	f7fe fa4d 	bl	8001568 <HAL_GetTick>
 80030ce:	1b80      	subs	r0, r0, r6
 80030d0:	4a3d      	ldr	r2, [pc, #244]	; (80031c8 <HAL_RCC_ClockConfig+0x178>)
 80030d2:	4290      	cmp	r0, r2
 80030d4:	d9f3      	bls.n	80030be <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 80030d6:	2003      	movs	r0, #3
 80030d8:	e053      	b.n	8003182 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030da:	4a39      	ldr	r2, [pc, #228]	; (80031c0 <HAL_RCC_ClockConfig+0x170>)
 80030dc:	6812      	ldr	r2, [r2, #0]
 80030de:	0392      	lsls	r2, r2, #14
 80030e0:	d569      	bpl.n	80031b6 <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030e2:	4937      	ldr	r1, [pc, #220]	; (80031c0 <HAL_RCC_ClockConfig+0x170>)
 80030e4:	688a      	ldr	r2, [r1, #8]
 80030e6:	2007      	movs	r0, #7
 80030e8:	4382      	bics	r2, r0
 80030ea:	4313      	orrs	r3, r2
 80030ec:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80030ee:	f7fe fa3b 	bl	8001568 <HAL_GetTick>
 80030f2:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f4:	4b32      	ldr	r3, [pc, #200]	; (80031c0 <HAL_RCC_ClockConfig+0x170>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2238      	movs	r2, #56	; 0x38
 80030fa:	401a      	ands	r2, r3
 80030fc:	6863      	ldr	r3, [r4, #4]
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	429a      	cmp	r2, r3
 8003102:	d01b      	beq.n	800313c <HAL_RCC_ClockConfig+0xec>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003104:	f7fe fa30 	bl	8001568 <HAL_GetTick>
 8003108:	1b80      	subs	r0, r0, r6
 800310a:	4b2f      	ldr	r3, [pc, #188]	; (80031c8 <HAL_RCC_ClockConfig+0x178>)
 800310c:	4298      	cmp	r0, r3
 800310e:	d9f1      	bls.n	80030f4 <HAL_RCC_ClockConfig+0xa4>
        return HAL_TIMEOUT;
 8003110:	2003      	movs	r0, #3
 8003112:	e036      	b.n	8003182 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003114:	4a2a      	ldr	r2, [pc, #168]	; (80031c0 <HAL_RCC_ClockConfig+0x170>)
 8003116:	6812      	ldr	r2, [r2, #0]
 8003118:	0192      	lsls	r2, r2, #6
 800311a:	d4e2      	bmi.n	80030e2 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 800311c:	2001      	movs	r0, #1
 800311e:	e030      	b.n	8003182 <HAL_RCC_ClockConfig+0x132>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003120:	2b03      	cmp	r3, #3
 8003122:	d005      	beq.n	8003130 <HAL_RCC_ClockConfig+0xe0>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003124:	4a26      	ldr	r2, [pc, #152]	; (80031c0 <HAL_RCC_ClockConfig+0x170>)
 8003126:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003128:	0792      	lsls	r2, r2, #30
 800312a:	d4da      	bmi.n	80030e2 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 800312c:	2001      	movs	r0, #1
 800312e:	e028      	b.n	8003182 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003130:	4a23      	ldr	r2, [pc, #140]	; (80031c0 <HAL_RCC_ClockConfig+0x170>)
 8003132:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8003134:	0792      	lsls	r2, r2, #30
 8003136:	d4d4      	bmi.n	80030e2 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8003138:	2001      	movs	r0, #1
 800313a:	e022      	b.n	8003182 <HAL_RCC_ClockConfig+0x132>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800313c:	4b1f      	ldr	r3, [pc, #124]	; (80031bc <HAL_RCC_ClockConfig+0x16c>)
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	2307      	movs	r3, #7
 8003142:	4013      	ands	r3, r2
 8003144:	42ab      	cmp	r3, r5
 8003146:	d81d      	bhi.n	8003184 <HAL_RCC_ClockConfig+0x134>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003148:	6823      	ldr	r3, [r4, #0]
 800314a:	075b      	lsls	r3, r3, #29
 800314c:	d506      	bpl.n	800315c <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800314e:	4a1c      	ldr	r2, [pc, #112]	; (80031c0 <HAL_RCC_ClockConfig+0x170>)
 8003150:	6893      	ldr	r3, [r2, #8]
 8003152:	491e      	ldr	r1, [pc, #120]	; (80031cc <HAL_RCC_ClockConfig+0x17c>)
 8003154:	400b      	ands	r3, r1
 8003156:	68e1      	ldr	r1, [r4, #12]
 8003158:	430b      	orrs	r3, r1
 800315a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800315c:	f7ff ff1c 	bl	8002f98 <HAL_RCC_GetSysClockFreq>
 8003160:	4b17      	ldr	r3, [pc, #92]	; (80031c0 <HAL_RCC_ClockConfig+0x170>)
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	0a12      	lsrs	r2, r2, #8
 8003166:	230f      	movs	r3, #15
 8003168:	4013      	ands	r3, r2
 800316a:	4a19      	ldr	r2, [pc, #100]	; (80031d0 <HAL_RCC_ClockConfig+0x180>)
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	589a      	ldr	r2, [r3, r2]
 8003170:	231f      	movs	r3, #31
 8003172:	4013      	ands	r3, r2
 8003174:	40d8      	lsrs	r0, r3
 8003176:	4b17      	ldr	r3, [pc, #92]	; (80031d4 <HAL_RCC_ClockConfig+0x184>)
 8003178:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 800317a:	4b17      	ldr	r3, [pc, #92]	; (80031d8 <HAL_RCC_ClockConfig+0x188>)
 800317c:	6818      	ldr	r0, [r3, #0]
 800317e:	f7fe f9a7 	bl	80014d0 <HAL_InitTick>
}
 8003182:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003184:	4a0d      	ldr	r2, [pc, #52]	; (80031bc <HAL_RCC_ClockConfig+0x16c>)
 8003186:	6813      	ldr	r3, [r2, #0]
 8003188:	2107      	movs	r1, #7
 800318a:	438b      	bics	r3, r1
 800318c:	432b      	orrs	r3, r5
 800318e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003190:	f7fe f9ea 	bl	8001568 <HAL_GetTick>
 8003194:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003196:	4b09      	ldr	r3, [pc, #36]	; (80031bc <HAL_RCC_ClockConfig+0x16c>)
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	2307      	movs	r3, #7
 800319c:	4013      	ands	r3, r2
 800319e:	42ab      	cmp	r3, r5
 80031a0:	d0d2      	beq.n	8003148 <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a2:	f7fe f9e1 	bl	8001568 <HAL_GetTick>
 80031a6:	1b80      	subs	r0, r0, r6
 80031a8:	4b07      	ldr	r3, [pc, #28]	; (80031c8 <HAL_RCC_ClockConfig+0x178>)
 80031aa:	4298      	cmp	r0, r3
 80031ac:	d9f3      	bls.n	8003196 <HAL_RCC_ClockConfig+0x146>
        return HAL_TIMEOUT;
 80031ae:	2003      	movs	r0, #3
 80031b0:	e7e7      	b.n	8003182 <HAL_RCC_ClockConfig+0x132>
    return HAL_ERROR;
 80031b2:	2001      	movs	r0, #1
 80031b4:	e7e5      	b.n	8003182 <HAL_RCC_ClockConfig+0x132>
        return HAL_ERROR;
 80031b6:	2001      	movs	r0, #1
 80031b8:	e7e3      	b.n	8003182 <HAL_RCC_ClockConfig+0x132>
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	40022000 	.word	0x40022000
 80031c0:	40021000 	.word	0x40021000
 80031c4:	fffff0ff 	.word	0xfffff0ff
 80031c8:	00001388 	.word	0x00001388
 80031cc:	ffff8fff 	.word	0xffff8fff
 80031d0:	08005f8c 	.word	0x08005f8c
 80031d4:	20000000 	.word	0x20000000
 80031d8:	20000008 	.word	0x20000008

080031dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80031dc:	4b01      	ldr	r3, [pc, #4]	; (80031e4 <HAL_RCC_GetHCLKFreq+0x8>)
 80031de:	6818      	ldr	r0, [r3, #0]
}
 80031e0:	4770      	bx	lr
 80031e2:	46c0      	nop			; (mov r8, r8)
 80031e4:	20000000 	.word	0x20000000

080031e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031e8:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80031ea:	f7ff fff7 	bl	80031dc <HAL_RCC_GetHCLKFreq>
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80031ee:	4b06      	ldr	r3, [pc, #24]	; (8003208 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	0b12      	lsrs	r2, r2, #12
 80031f4:	2307      	movs	r3, #7
 80031f6:	4013      	ands	r3, r2
 80031f8:	4a04      	ldr	r2, [pc, #16]	; (800320c <HAL_RCC_GetPCLK1Freq+0x24>)
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	589a      	ldr	r2, [r3, r2]
 80031fe:	231f      	movs	r3, #31
 8003200:	4013      	ands	r3, r2
 8003202:	40d8      	lsrs	r0, r3
}
 8003204:	bd10      	pop	{r4, pc}
 8003206:	46c0      	nop			; (mov r8, r8)
 8003208:	40021000 	.word	0x40021000
 800320c:	08005fcc 	.word	0x08005fcc

08003210 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003212:	b083      	sub	sp, #12
 8003214:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003216:	6803      	ldr	r3, [r0, #0]
 8003218:	039b      	lsls	r3, r3, #14
 800321a:	d562      	bpl.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800321c:	4bae      	ldr	r3, [pc, #696]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800321e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	d41e      	bmi.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x52>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003224:	4bac      	ldr	r3, [pc, #688]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003226:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003228:	2180      	movs	r1, #128	; 0x80
 800322a:	0549      	lsls	r1, r1, #21
 800322c:	430a      	orrs	r2, r1
 800322e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003232:	400b      	ands	r3, r1
 8003234:	9301      	str	r3, [sp, #4]
 8003236:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003238:	2601      	movs	r6, #1
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800323a:	4aa8      	ldr	r2, [pc, #672]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800323c:	6811      	ldr	r1, [r2, #0]
 800323e:	2380      	movs	r3, #128	; 0x80
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	430b      	orrs	r3, r1
 8003244:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003246:	f7fe f98f 	bl	8001568 <HAL_GetTick>
 800324a:	0005      	movs	r5, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800324c:	4ba3      	ldr	r3, [pc, #652]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	05db      	lsls	r3, r3, #23
 8003252:	d408      	bmi.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003254:	f7fe f988 	bl	8001568 <HAL_GetTick>
 8003258:	1b40      	subs	r0, r0, r5
 800325a:	2802      	cmp	r0, #2
 800325c:	d9f6      	bls.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x3c>
      {
        ret = HAL_TIMEOUT;
 800325e:	2503      	movs	r5, #3
 8003260:	e002      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x58>
    FlagStatus       pwrclkchanged = RESET;
 8003262:	2600      	movs	r6, #0
 8003264:	e7e9      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x2a>
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003266:	2500      	movs	r5, #0
        break;
      }
    }

    if (ret == HAL_OK)
 8003268:	2d00      	cmp	r5, #0
 800326a:	d123      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800326c:	4b9a      	ldr	r3, [pc, #616]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800326e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003270:	22c0      	movs	r2, #192	; 0xc0
 8003272:	0092      	lsls	r2, r2, #2
 8003274:	000b      	movs	r3, r1
 8003276:	4013      	ands	r3, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003278:	4211      	tst	r1, r2
 800327a:	d010      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x8e>
 800327c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800327e:	429a      	cmp	r2, r3
 8003280:	d00d      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003282:	4a95      	ldr	r2, [pc, #596]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003284:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8003286:	4996      	ldr	r1, [pc, #600]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8003288:	400b      	ands	r3, r1
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800328a:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 800328c:	2180      	movs	r1, #128	; 0x80
 800328e:	0249      	lsls	r1, r1, #9
 8003290:	4301      	orrs	r1, r0
 8003292:	65d1      	str	r1, [r2, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003294:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8003296:	4893      	ldr	r0, [pc, #588]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003298:	4001      	ands	r1, r0
 800329a:	65d1      	str	r1, [r2, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800329c:	65d3      	str	r3, [r2, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800329e:	07db      	lsls	r3, r3, #31
 80032a0:	d410      	bmi.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
            break;
          }
        }
      }

      if (ret == HAL_OK)
 80032a2:	2d00      	cmp	r5, #0
 80032a4:	d106      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032a6:	4a8c      	ldr	r2, [pc, #560]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80032a8:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80032aa:	498d      	ldr	r1, [pc, #564]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80032ac:	400b      	ands	r3, r1
 80032ae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80032b0:	430b      	orrs	r3, r1
 80032b2:	65d3      	str	r3, [r2, #92]	; 0x5c
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032b4:	2e01      	cmp	r6, #1
 80032b6:	d115      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032b8:	4a87      	ldr	r2, [pc, #540]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80032ba:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80032bc:	498a      	ldr	r1, [pc, #552]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80032be:	400b      	ands	r3, r1
 80032c0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80032c2:	e00f      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
        tickstart = HAL_GetTick();
 80032c4:	f7fe f950 	bl	8001568 <HAL_GetTick>
 80032c8:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ca:	4b83      	ldr	r3, [pc, #524]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80032cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ce:	079b      	lsls	r3, r3, #30
 80032d0:	d4e7      	bmi.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x92>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d2:	f7fe f949 	bl	8001568 <HAL_GetTick>
 80032d6:	1bc0      	subs	r0, r0, r7
 80032d8:	4b84      	ldr	r3, [pc, #528]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80032da:	4298      	cmp	r0, r3
 80032dc:	d9f5      	bls.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xba>
            ret = HAL_TIMEOUT;
 80032de:	2503      	movs	r5, #3
 80032e0:	e7df      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x92>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032e2:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032e4:	6823      	ldr	r3, [r4, #0]
 80032e6:	07db      	lsls	r3, r3, #31
 80032e8:	d506      	bpl.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032ea:	4a7b      	ldr	r2, [pc, #492]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80032ec:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80032ee:	2103      	movs	r1, #3
 80032f0:	438b      	bics	r3, r1
 80032f2:	6861      	ldr	r1, [r4, #4]
 80032f4:	430b      	orrs	r3, r1
 80032f6:	6553      	str	r3, [r2, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032f8:	6823      	ldr	r3, [r4, #0]
 80032fa:	079b      	lsls	r3, r3, #30
 80032fc:	d506      	bpl.n	800330c <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032fe:	4a76      	ldr	r2, [pc, #472]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003300:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003302:	210c      	movs	r1, #12
 8003304:	438b      	bics	r3, r1
 8003306:	68a1      	ldr	r1, [r4, #8]
 8003308:	430b      	orrs	r3, r1
 800330a:	6553      	str	r3, [r2, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800330c:	6823      	ldr	r3, [r4, #0]
 800330e:	075b      	lsls	r3, r3, #29
 8003310:	d506      	bpl.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003312:	4a71      	ldr	r2, [pc, #452]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003314:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003316:	2130      	movs	r1, #48	; 0x30
 8003318:	438b      	bics	r3, r1
 800331a:	68e1      	ldr	r1, [r4, #12]
 800331c:	430b      	orrs	r3, r1
 800331e:	6553      	str	r3, [r2, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003320:	6823      	ldr	r3, [r4, #0]
 8003322:	06db      	lsls	r3, r3, #27
 8003324:	d506      	bpl.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003326:	4a6c      	ldr	r2, [pc, #432]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003328:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800332a:	4971      	ldr	r1, [pc, #452]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800332c:	400b      	ands	r3, r1
 800332e:	6921      	ldr	r1, [r4, #16]
 8003330:	430b      	orrs	r3, r1
 8003332:	6553      	str	r3, [r2, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8003334:	6823      	ldr	r3, [r4, #0]
 8003336:	04db      	lsls	r3, r3, #19
 8003338:	d506      	bpl.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800333a:	4a67      	ldr	r2, [pc, #412]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800333c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800333e:	4968      	ldr	r1, [pc, #416]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8003340:	400b      	ands	r3, r1
 8003342:	6961      	ldr	r1, [r4, #20]
 8003344:	430b      	orrs	r3, r1
 8003346:	6553      	str	r3, [r2, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003348:	6823      	ldr	r3, [r4, #0]
 800334a:	059b      	lsls	r3, r3, #22
 800334c:	d506      	bpl.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800334e:	4a62      	ldr	r2, [pc, #392]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003350:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003352:	4968      	ldr	r1, [pc, #416]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003354:	400b      	ands	r3, r1
 8003356:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003358:	430b      	orrs	r3, r1
 800335a:	6553      	str	r3, [r2, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800335c:	6823      	ldr	r3, [r4, #0]
 800335e:	055b      	lsls	r3, r3, #21
 8003360:	d506      	bpl.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003362:	4a5d      	ldr	r2, [pc, #372]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003364:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003366:	4964      	ldr	r1, [pc, #400]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003368:	400b      	ands	r3, r1
 800336a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800336c:	430b      	orrs	r3, r1
 800336e:	6553      	str	r3, [r2, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003370:	6823      	ldr	r3, [r4, #0]
 8003372:	069b      	lsls	r3, r3, #26
 8003374:	d506      	bpl.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003376:	4a58      	ldr	r2, [pc, #352]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003378:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800337a:	4960      	ldr	r1, [pc, #384]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800337c:	400b      	ands	r3, r1
 800337e:	69a1      	ldr	r1, [r4, #24]
 8003380:	430b      	orrs	r3, r1
 8003382:	6553      	str	r3, [r2, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003384:	6823      	ldr	r3, [r4, #0]
 8003386:	065b      	lsls	r3, r3, #25
 8003388:	d506      	bpl.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800338a:	4a53      	ldr	r2, [pc, #332]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800338c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800338e:	495c      	ldr	r1, [pc, #368]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003390:	400b      	ands	r3, r1
 8003392:	69e1      	ldr	r1, [r4, #28]
 8003394:	430b      	orrs	r3, r1
 8003396:	6553      	str	r3, [r2, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003398:	6823      	ldr	r3, [r4, #0]
 800339a:	045b      	lsls	r3, r3, #17
 800339c:	d50b      	bpl.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800339e:	4a4e      	ldr	r2, [pc, #312]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80033a0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	089b      	lsrs	r3, r3, #2
 80033a6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80033a8:	430b      	orrs	r3, r1
 80033aa:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80033ac:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80033ae:	2380      	movs	r3, #128	; 0x80
 80033b0:	05db      	lsls	r3, r3, #23
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d062      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x26c>
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80033b6:	6823      	ldr	r3, [r4, #0]
 80033b8:	031b      	lsls	r3, r3, #12
 80033ba:	d506      	bpl.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033bc:	4a46      	ldr	r2, [pc, #280]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80033be:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80033c0:	2140      	movs	r1, #64	; 0x40
 80033c2:	438b      	bics	r3, r1
 80033c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033c6:	430b      	orrs	r3, r1
 80033c8:	6553      	str	r3, [r2, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80033ca:	6823      	ldr	r3, [r4, #0]
 80033cc:	029b      	lsls	r3, r3, #10
 80033ce:	d50b      	bpl.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80033d0:	4a41      	ldr	r2, [pc, #260]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80033d2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80033d4:	494b      	ldr	r1, [pc, #300]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033d6:	400b      	ands	r3, r1
 80033d8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80033da:	430b      	orrs	r3, r1
 80033dc:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80033de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80033e0:	2380      	movs	r3, #128	; 0x80
 80033e2:	03db      	lsls	r3, r3, #15
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d050      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80033e8:	6823      	ldr	r3, [r4, #0]
 80033ea:	025b      	lsls	r3, r3, #9
 80033ec:	d50b      	bpl.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80033ee:	4a3a      	ldr	r2, [pc, #232]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80033f0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80033f2:	4945      	ldr	r1, [pc, #276]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80033f4:	400b      	ands	r3, r1
 80033f6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80033f8:	430b      	orrs	r3, r1
 80033fa:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80033fc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80033fe:	2380      	movs	r3, #128	; 0x80
 8003400:	045b      	lsls	r3, r3, #17
 8003402:	429a      	cmp	r2, r3
 8003404:	d048      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x288>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003406:	6823      	ldr	r3, [r4, #0]
 8003408:	051b      	lsls	r3, r3, #20
 800340a:	d509      	bpl.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800340c:	4a32      	ldr	r2, [pc, #200]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800340e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003410:	2103      	movs	r1, #3
 8003412:	438b      	bics	r3, r1
 8003414:	6a21      	ldr	r1, [r4, #32]
 8003416:	430b      	orrs	r3, r1
 8003418:	6593      	str	r3, [r2, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800341a:	6a23      	ldr	r3, [r4, #32]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d040      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x292>
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003420:	6823      	ldr	r3, [r4, #0]
 8003422:	049b      	lsls	r3, r3, #18
 8003424:	d509      	bpl.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003426:	4a2c      	ldr	r2, [pc, #176]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003428:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800342a:	210c      	movs	r1, #12
 800342c:	438b      	bics	r3, r1
 800342e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003430:	430b      	orrs	r3, r1
 8003432:	6593      	str	r3, [r2, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003434:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003436:	2b04      	cmp	r3, #4
 8003438:	d039      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x29e>
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800343a:	6823      	ldr	r3, [r4, #0]
 800343c:	01db      	lsls	r3, r3, #7
 800343e:	d50b      	bpl.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003440:	4a25      	ldr	r2, [pc, #148]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003442:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003444:	492d      	ldr	r1, [pc, #180]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003446:	400b      	ands	r3, r1
 8003448:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800344a:	430b      	orrs	r3, r1
 800344c:	6593      	str	r3, [r2, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800344e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003450:	2380      	movs	r3, #128	; 0x80
 8003452:	019b      	lsls	r3, r3, #6
 8003454:	429a      	cmp	r2, r3
 8003456:	d030      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003458:	6823      	ldr	r3, [r4, #0]
 800345a:	019b      	lsls	r3, r3, #6
 800345c:	d50b      	bpl.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800345e:	4a1e      	ldr	r2, [pc, #120]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003460:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003462:	491f      	ldr	r1, [pc, #124]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8003464:	400b      	ands	r3, r1
 8003466:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003468:	430b      	orrs	r3, r1
 800346a:	6593      	str	r3, [r2, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800346c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800346e:	2380      	movs	r3, #128	; 0x80
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	429a      	cmp	r2, r3
 8003474:	d028      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8003476:	0028      	movs	r0, r5
 8003478:	b003      	add	sp, #12
 800347a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800347c:	4a16      	ldr	r2, [pc, #88]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800347e:	68d1      	ldr	r1, [r2, #12]
 8003480:	2380      	movs	r3, #128	; 0x80
 8003482:	025b      	lsls	r3, r3, #9
 8003484:	430b      	orrs	r3, r1
 8003486:	60d3      	str	r3, [r2, #12]
 8003488:	e795      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800348a:	4a13      	ldr	r2, [pc, #76]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800348c:	68d1      	ldr	r1, [r2, #12]
 800348e:	2380      	movs	r3, #128	; 0x80
 8003490:	045b      	lsls	r3, r3, #17
 8003492:	430b      	orrs	r3, r1
 8003494:	60d3      	str	r3, [r2, #12]
 8003496:	e7a7      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003498:	4a0f      	ldr	r2, [pc, #60]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800349a:	68d1      	ldr	r1, [r2, #12]
 800349c:	430b      	orrs	r3, r1
 800349e:	60d3      	str	r3, [r2, #12]
 80034a0:	e7b1      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80034a2:	68d1      	ldr	r1, [r2, #12]
 80034a4:	2380      	movs	r3, #128	; 0x80
 80034a6:	025b      	lsls	r3, r3, #9
 80034a8:	430b      	orrs	r3, r1
 80034aa:	60d3      	str	r3, [r2, #12]
 80034ac:	e7b8      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x210>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80034ae:	68d1      	ldr	r1, [r2, #12]
 80034b0:	2380      	movs	r3, #128	; 0x80
 80034b2:	025b      	lsls	r3, r3, #9
 80034b4:	430b      	orrs	r3, r1
 80034b6:	60d3      	str	r3, [r2, #12]
 80034b8:	e7bf      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80034ba:	4a07      	ldr	r2, [pc, #28]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80034bc:	68d1      	ldr	r1, [r2, #12]
 80034be:	2380      	movs	r3, #128	; 0x80
 80034c0:	045b      	lsls	r3, r3, #17
 80034c2:	430b      	orrs	r3, r1
 80034c4:	60d3      	str	r3, [r2, #12]
 80034c6:	e7c7      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x248>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80034c8:	4a03      	ldr	r2, [pc, #12]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80034ca:	68d1      	ldr	r1, [r2, #12]
 80034cc:	2380      	movs	r3, #128	; 0x80
 80034ce:	045b      	lsls	r3, r3, #17
 80034d0:	430b      	orrs	r3, r1
 80034d2:	60d3      	str	r3, [r2, #12]
 80034d4:	e7cf      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x266>
 80034d6:	46c0      	nop			; (mov r8, r8)
 80034d8:	40021000 	.word	0x40021000
 80034dc:	40007000 	.word	0x40007000
 80034e0:	fffffcff 	.word	0xfffffcff
 80034e4:	fffeffff 	.word	0xfffeffff
 80034e8:	efffffff 	.word	0xefffffff
 80034ec:	00001388 	.word	0x00001388
 80034f0:	fffff3ff 	.word	0xfffff3ff
 80034f4:	fff3ffff 	.word	0xfff3ffff
 80034f8:	ffcfffff 	.word	0xffcfffff
 80034fc:	ffffcfff 	.word	0xffffcfff
 8003500:	ffff3fff 	.word	0xffff3fff
 8003504:	ffbfffff 	.word	0xffbfffff
 8003508:	feffffff 	.word	0xfeffffff

0800350c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800350c:	b570      	push	{r4, r5, r6, lr}
 800350e:	1e04      	subs	r4, r0, #0
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003510:	d100      	bne.n	8003514 <HAL_SPI_Init+0x8>
 8003512:	e078      	b.n	8003606 <HAL_SPI_Init+0xfa>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003514:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003516:	2b00      	cmp	r3, #0
 8003518:	d107      	bne.n	800352a <HAL_SPI_Init+0x1e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800351a:	6842      	ldr	r2, [r0, #4]
 800351c:	3305      	adds	r3, #5
 800351e:	33ff      	adds	r3, #255	; 0xff
 8003520:	429a      	cmp	r2, r3
 8003522:	d005      	beq.n	8003530 <HAL_SPI_Init+0x24>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003524:	2300      	movs	r3, #0
 8003526:	61c3      	str	r3, [r0, #28]
 8003528:	e002      	b.n	8003530 <HAL_SPI_Init+0x24>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800352a:	2300      	movs	r3, #0
 800352c:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800352e:	6143      	str	r3, [r0, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003530:	2300      	movs	r3, #0
 8003532:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003534:	335d      	adds	r3, #93	; 0x5d
 8003536:	5ce3      	ldrb	r3, [r4, r3]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d05a      	beq.n	80035f2 <HAL_SPI_Init+0xe6>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800353c:	235d      	movs	r3, #93	; 0x5d
 800353e:	2202      	movs	r2, #2
 8003540:	54e2      	strb	r2, [r4, r3]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003542:	6822      	ldr	r2, [r4, #0]
 8003544:	6813      	ldr	r3, [r2, #0]
 8003546:	2140      	movs	r1, #64	; 0x40
 8003548:	438b      	bics	r3, r1
 800354a:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800354c:	68e3      	ldr	r3, [r4, #12]
 800354e:	22e0      	movs	r2, #224	; 0xe0
 8003550:	00d2      	lsls	r2, r2, #3
 8003552:	4293      	cmp	r3, r2
 8003554:	d954      	bls.n	8003600 <HAL_SPI_Init+0xf4>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003556:	2200      	movs	r2, #0
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003558:	21f0      	movs	r1, #240	; 0xf0
 800355a:	0109      	lsls	r1, r1, #4
 800355c:	428b      	cmp	r3, r1
 800355e:	d005      	beq.n	800356c <HAL_SPI_Init+0x60>
 8003560:	21e0      	movs	r1, #224	; 0xe0
 8003562:	00c9      	lsls	r1, r1, #3
 8003564:	428b      	cmp	r3, r1
 8003566:	d001      	beq.n	800356c <HAL_SPI_Init+0x60>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003568:	2300      	movs	r3, #0
 800356a:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800356c:	6863      	ldr	r3, [r4, #4]
 800356e:	2182      	movs	r1, #130	; 0x82
 8003570:	0049      	lsls	r1, r1, #1
 8003572:	400b      	ands	r3, r1
 8003574:	68a1      	ldr	r1, [r4, #8]
 8003576:	2084      	movs	r0, #132	; 0x84
 8003578:	0200      	lsls	r0, r0, #8
 800357a:	4001      	ands	r1, r0
 800357c:	430b      	orrs	r3, r1
 800357e:	6920      	ldr	r0, [r4, #16]
 8003580:	2102      	movs	r1, #2
 8003582:	4001      	ands	r1, r0
 8003584:	430b      	orrs	r3, r1
 8003586:	6960      	ldr	r0, [r4, #20]
 8003588:	2101      	movs	r1, #1
 800358a:	4008      	ands	r0, r1
 800358c:	4303      	orrs	r3, r0
 800358e:	69a0      	ldr	r0, [r4, #24]
 8003590:	2580      	movs	r5, #128	; 0x80
 8003592:	00ad      	lsls	r5, r5, #2
 8003594:	4028      	ands	r0, r5
 8003596:	4303      	orrs	r3, r0
 8003598:	69e5      	ldr	r5, [r4, #28]
 800359a:	2038      	movs	r0, #56	; 0x38
 800359c:	4028      	ands	r0, r5
 800359e:	4303      	orrs	r3, r0
 80035a0:	6a25      	ldr	r5, [r4, #32]
 80035a2:	2080      	movs	r0, #128	; 0x80
 80035a4:	4028      	ands	r0, r5
 80035a6:	4303      	orrs	r3, r0
 80035a8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80035aa:	2580      	movs	r5, #128	; 0x80
 80035ac:	01ad      	lsls	r5, r5, #6
 80035ae:	4028      	ands	r0, r5
 80035b0:	6825      	ldr	r5, [r4, #0]
 80035b2:	4303      	orrs	r3, r0
 80035b4:	602b      	str	r3, [r5, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80035b6:	8b60      	ldrh	r0, [r4, #26]
 80035b8:	2304      	movs	r3, #4
 80035ba:	4003      	ands	r3, r0
 80035bc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80035be:	2010      	movs	r0, #16
 80035c0:	4028      	ands	r0, r5
 80035c2:	4303      	orrs	r3, r0
 80035c4:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80035c6:	2008      	movs	r0, #8
 80035c8:	4028      	ands	r0, r5
 80035ca:	4303      	orrs	r3, r0
 80035cc:	68e0      	ldr	r0, [r4, #12]
 80035ce:	25f0      	movs	r5, #240	; 0xf0
 80035d0:	012d      	lsls	r5, r5, #4
 80035d2:	4028      	ands	r0, r5
 80035d4:	4303      	orrs	r3, r0
 80035d6:	6820      	ldr	r0, [r4, #0]
 80035d8:	4313      	orrs	r3, r2
 80035da:	6043      	str	r3, [r0, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035dc:	6822      	ldr	r2, [r4, #0]
 80035de:	69d3      	ldr	r3, [r2, #28]
 80035e0:	480a      	ldr	r0, [pc, #40]	; (800360c <HAL_SPI_Init+0x100>)
 80035e2:	4003      	ands	r3, r0
 80035e4:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035e6:	2300      	movs	r3, #0
 80035e8:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80035ea:	335d      	adds	r3, #93	; 0x5d
 80035ec:	54e1      	strb	r1, [r4, r3]

  return HAL_OK;
 80035ee:	2000      	movs	r0, #0
}
 80035f0:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 80035f2:	335c      	adds	r3, #92	; 0x5c
 80035f4:	2200      	movs	r2, #0
 80035f6:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 80035f8:	0020      	movs	r0, r4
 80035fa:	f7fd fad7 	bl	8000bac <HAL_SPI_MspInit>
 80035fe:	e79d      	b.n	800353c <HAL_SPI_Init+0x30>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003600:	2280      	movs	r2, #128	; 0x80
 8003602:	0152      	lsls	r2, r2, #5
 8003604:	e7a8      	b.n	8003558 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8003606:	2001      	movs	r0, #1
 8003608:	e7f2      	b.n	80035f0 <HAL_SPI_Init+0xe4>
 800360a:	46c0      	nop			; (mov r8, r8)
 800360c:	fffff7ff 	.word	0xfffff7ff

08003610 <HAL_SPI_ErrorCallback>:
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003610:	4770      	bx	lr
	...

08003614 <HAL_SPI_IRQHandler>:
{
 8003614:	b530      	push	{r4, r5, lr}
 8003616:	b085      	sub	sp, #20
 8003618:	0004      	movs	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 800361a:	6801      	ldr	r1, [r0, #0]
 800361c:	6848      	ldr	r0, [r1, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800361e:	688b      	ldr	r3, [r1, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003620:	2241      	movs	r2, #65	; 0x41
 8003622:	401a      	ands	r2, r3
 8003624:	2a01      	cmp	r2, #1
 8003626:	d064      	beq.n	80036f2 <HAL_SPI_IRQHandler+0xde>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003628:	079a      	lsls	r2, r3, #30
 800362a:	d501      	bpl.n	8003630 <HAL_SPI_IRQHandler+0x1c>
 800362c:	0602      	lsls	r2, r0, #24
 800362e:	d466      	bmi.n	80036fe <HAL_SPI_IRQHandler+0xea>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003630:	22b0      	movs	r2, #176	; 0xb0
 8003632:	0052      	lsls	r2, r2, #1
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003634:	4213      	tst	r3, r2
 8003636:	d065      	beq.n	8003704 <HAL_SPI_IRQHandler+0xf0>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003638:	0682      	lsls	r2, r0, #26
 800363a:	d563      	bpl.n	8003704 <HAL_SPI_IRQHandler+0xf0>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800363c:	065a      	lsls	r2, r3, #25
 800363e:	d50e      	bpl.n	800365e <HAL_SPI_IRQHandler+0x4a>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003640:	225d      	movs	r2, #93	; 0x5d
 8003642:	5ca2      	ldrb	r2, [r4, r2]
 8003644:	2a03      	cmp	r2, #3
 8003646:	d05f      	beq.n	8003708 <HAL_SPI_IRQHandler+0xf4>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003648:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800364a:	2504      	movs	r5, #4
 800364c:	432a      	orrs	r2, r5
 800364e:	6622      	str	r2, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003650:	2200      	movs	r2, #0
 8003652:	9200      	str	r2, [sp, #0]
 8003654:	68ca      	ldr	r2, [r1, #12]
 8003656:	9200      	str	r2, [sp, #0]
 8003658:	688a      	ldr	r2, [r1, #8]
 800365a:	9200      	str	r2, [sp, #0]
 800365c:	9a00      	ldr	r2, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800365e:	069a      	lsls	r2, r3, #26
 8003660:	d50c      	bpl.n	800367c <HAL_SPI_IRQHandler+0x68>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003662:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003664:	2501      	movs	r5, #1
 8003666:	432a      	orrs	r2, r5
 8003668:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800366a:	2200      	movs	r2, #0
 800366c:	9202      	str	r2, [sp, #8]
 800366e:	688a      	ldr	r2, [r1, #8]
 8003670:	9202      	str	r2, [sp, #8]
 8003672:	680a      	ldr	r2, [r1, #0]
 8003674:	353f      	adds	r5, #63	; 0x3f
 8003676:	43aa      	bics	r2, r5
 8003678:	600a      	str	r2, [r1, #0]
 800367a:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800367c:	05db      	lsls	r3, r3, #23
 800367e:	d509      	bpl.n	8003694 <HAL_SPI_IRQHandler+0x80>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003680:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003682:	2208      	movs	r2, #8
 8003684:	4313      	orrs	r3, r2
 8003686:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003688:	2300      	movs	r3, #0
 800368a:	9303      	str	r3, [sp, #12]
 800368c:	6823      	ldr	r3, [r4, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	9303      	str	r3, [sp, #12]
 8003692:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003694:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003696:	2b00      	cmp	r3, #0
 8003698:	d034      	beq.n	8003704 <HAL_SPI_IRQHandler+0xf0>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800369a:	6822      	ldr	r2, [r4, #0]
 800369c:	6853      	ldr	r3, [r2, #4]
 800369e:	21e0      	movs	r1, #224	; 0xe0
 80036a0:	438b      	bics	r3, r1
 80036a2:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 80036a4:	235d      	movs	r3, #93	; 0x5d
 80036a6:	2201      	movs	r2, #1
 80036a8:	54e2      	strb	r2, [r4, r3]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80036aa:	0780      	lsls	r0, r0, #30
 80036ac:	d034      	beq.n	8003718 <HAL_SPI_IRQHandler+0x104>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80036ae:	6822      	ldr	r2, [r4, #0]
 80036b0:	6853      	ldr	r3, [r2, #4]
 80036b2:	39dd      	subs	r1, #221	; 0xdd
 80036b4:	438b      	bics	r3, r1
 80036b6:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 80036b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00a      	beq.n	80036d4 <HAL_SPI_IRQHandler+0xc0>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80036be:	4a18      	ldr	r2, [pc, #96]	; (8003720 <HAL_SPI_IRQHandler+0x10c>)
 80036c0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80036c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036c4:	f7fe f8be 	bl	8001844 <HAL_DMA_Abort_IT>
 80036c8:	2800      	cmp	r0, #0
 80036ca:	d003      	beq.n	80036d4 <HAL_SPI_IRQHandler+0xc0>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80036cc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80036ce:	2240      	movs	r2, #64	; 0x40
 80036d0:	4313      	orrs	r3, r2
 80036d2:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80036d4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d014      	beq.n	8003704 <HAL_SPI_IRQHandler+0xf0>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80036da:	4a11      	ldr	r2, [pc, #68]	; (8003720 <HAL_SPI_IRQHandler+0x10c>)
 80036dc:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80036de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80036e0:	f7fe f8b0 	bl	8001844 <HAL_DMA_Abort_IT>
 80036e4:	2800      	cmp	r0, #0
 80036e6:	d00d      	beq.n	8003704 <HAL_SPI_IRQHandler+0xf0>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80036e8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80036ea:	2240      	movs	r2, #64	; 0x40
 80036ec:	4313      	orrs	r3, r2
 80036ee:	6623      	str	r3, [r4, #96]	; 0x60
 80036f0:	e008      	b.n	8003704 <HAL_SPI_IRQHandler+0xf0>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80036f2:	0642      	lsls	r2, r0, #25
 80036f4:	d598      	bpl.n	8003628 <HAL_SPI_IRQHandler+0x14>
    hspi->RxISR(hspi);
 80036f6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80036f8:	0020      	movs	r0, r4
 80036fa:	4798      	blx	r3
    return;
 80036fc:	e002      	b.n	8003704 <HAL_SPI_IRQHandler+0xf0>
    hspi->TxISR(hspi);
 80036fe:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003700:	0020      	movs	r0, r4
 8003702:	4798      	blx	r3
}
 8003704:	b005      	add	sp, #20
 8003706:	bd30      	pop	{r4, r5, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003708:	2300      	movs	r3, #0
 800370a:	9301      	str	r3, [sp, #4]
 800370c:	68cb      	ldr	r3, [r1, #12]
 800370e:	9301      	str	r3, [sp, #4]
 8003710:	688b      	ldr	r3, [r1, #8]
 8003712:	9301      	str	r3, [sp, #4]
 8003714:	9b01      	ldr	r3, [sp, #4]
        return;
 8003716:	e7f5      	b.n	8003704 <HAL_SPI_IRQHandler+0xf0>
        HAL_SPI_ErrorCallback(hspi);
 8003718:	0020      	movs	r0, r4
 800371a:	f7ff ff79 	bl	8003610 <HAL_SPI_ErrorCallback>
    return;
 800371e:	e7f1      	b.n	8003704 <HAL_SPI_IRQHandler+0xf0>
 8003720:	08003725 	.word	0x08003725

08003724 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003724:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003726:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 8003728:	2300      	movs	r3, #0
 800372a:	2246      	movs	r2, #70	; 0x46
 800372c:	5283      	strh	r3, [r0, r2]
  hspi->TxXferCount = 0U;
 800372e:	87c3      	strh	r3, [r0, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003730:	f7ff ff6e 	bl	8003610 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003734:	bd10      	pop	{r4, pc}

08003736 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003736:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003738:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800373a:	6a04      	ldr	r4, [r0, #32]
 800373c:	2501      	movs	r5, #1
 800373e:	43ac      	bics	r4, r5
 8003740:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003742:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003744:	35ef      	adds	r5, #239	; 0xef
 8003746:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003748:	0112      	lsls	r2, r2, #4
 800374a:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800374c:	240a      	movs	r4, #10
 800374e:	43a3      	bics	r3, r4
  tmpccer |= TIM_ICPolarity;
 8003750:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003752:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003754:	6203      	str	r3, [r0, #32]
}
 8003756:	bd30      	pop	{r4, r5, pc}

08003758 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003758:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800375a:	6a03      	ldr	r3, [r0, #32]
 800375c:	2410      	movs	r4, #16
 800375e:	43a3      	bics	r3, r4
 8003760:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003762:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003764:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003766:	4d05      	ldr	r5, [pc, #20]	; (800377c <TIM_TI2_ConfigInputStage+0x24>)
 8003768:	402c      	ands	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800376a:	0312      	lsls	r2, r2, #12
 800376c:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800376e:	24a0      	movs	r4, #160	; 0xa0
 8003770:	43a3      	bics	r3, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8003772:	0109      	lsls	r1, r1, #4
 8003774:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003776:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003778:	6201      	str	r1, [r0, #32]
}
 800377a:	bd30      	pop	{r4, r5, pc}
 800377c:	ffff0fff 	.word	0xffff0fff

08003780 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003780:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003782:	4a03      	ldr	r2, [pc, #12]	; (8003790 <TIM_ITRx_SetConfig+0x10>)
 8003784:	4013      	ands	r3, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003786:	430b      	orrs	r3, r1
 8003788:	2207      	movs	r2, #7
 800378a:	4313      	orrs	r3, r2
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800378c:	6083      	str	r3, [r0, #8]
}
 800378e:	4770      	bx	lr
 8003790:	ffcfff8f 	.word	0xffcfff8f

08003794 <HAL_TIM_PeriodElapsedCallback>:
}
 8003794:	4770      	bx	lr

08003796 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8003796:	4770      	bx	lr

08003798 <HAL_TIM_IC_CaptureCallback>:
}
 8003798:	4770      	bx	lr

0800379a <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800379a:	4770      	bx	lr

0800379c <HAL_TIM_TriggerCallback>:
}
 800379c:	4770      	bx	lr
	...

080037a0 <HAL_TIM_IRQHandler>:
{
 80037a0:	b510      	push	{r4, lr}
 80037a2:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037a4:	6802      	ldr	r2, [r0, #0]
 80037a6:	6913      	ldr	r3, [r2, #16]
 80037a8:	079b      	lsls	r3, r3, #30
 80037aa:	d50f      	bpl.n	80037cc <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037ac:	68d3      	ldr	r3, [r2, #12]
 80037ae:	079b      	lsls	r3, r3, #30
 80037b0:	d50c      	bpl.n	80037cc <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037b2:	2303      	movs	r3, #3
 80037b4:	425b      	negs	r3, r3
 80037b6:	6113      	str	r3, [r2, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037b8:	3304      	adds	r3, #4
 80037ba:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037bc:	6803      	ldr	r3, [r0, #0]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	079b      	lsls	r3, r3, #30
 80037c2:	d06a      	beq.n	800389a <HAL_TIM_IRQHandler+0xfa>
          HAL_TIM_IC_CaptureCallback(htim);
 80037c4:	f7ff ffe8 	bl	8003798 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037c8:	2300      	movs	r3, #0
 80037ca:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037cc:	6822      	ldr	r2, [r4, #0]
 80037ce:	6913      	ldr	r3, [r2, #16]
 80037d0:	075b      	lsls	r3, r3, #29
 80037d2:	d512      	bpl.n	80037fa <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037d4:	68d3      	ldr	r3, [r2, #12]
 80037d6:	075b      	lsls	r3, r3, #29
 80037d8:	d50f      	bpl.n	80037fa <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037da:	2305      	movs	r3, #5
 80037dc:	425b      	negs	r3, r3
 80037de:	6113      	str	r3, [r2, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037e0:	3307      	adds	r3, #7
 80037e2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037e4:	6823      	ldr	r3, [r4, #0]
 80037e6:	699a      	ldr	r2, [r3, #24]
 80037e8:	23c0      	movs	r3, #192	; 0xc0
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	421a      	tst	r2, r3
 80037ee:	d05a      	beq.n	80038a6 <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_IC_CaptureCallback(htim);
 80037f0:	0020      	movs	r0, r4
 80037f2:	f7ff ffd1 	bl	8003798 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037f6:	2300      	movs	r3, #0
 80037f8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037fa:	6822      	ldr	r2, [r4, #0]
 80037fc:	6913      	ldr	r3, [r2, #16]
 80037fe:	071b      	lsls	r3, r3, #28
 8003800:	d510      	bpl.n	8003824 <HAL_TIM_IRQHandler+0x84>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003802:	68d3      	ldr	r3, [r2, #12]
 8003804:	071b      	lsls	r3, r3, #28
 8003806:	d50d      	bpl.n	8003824 <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003808:	2309      	movs	r3, #9
 800380a:	425b      	negs	r3, r3
 800380c:	6113      	str	r3, [r2, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800380e:	330d      	adds	r3, #13
 8003810:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003812:	6823      	ldr	r3, [r4, #0]
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	079b      	lsls	r3, r3, #30
 8003818:	d04c      	beq.n	80038b4 <HAL_TIM_IRQHandler+0x114>
        HAL_TIM_IC_CaptureCallback(htim);
 800381a:	0020      	movs	r0, r4
 800381c:	f7ff ffbc 	bl	8003798 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003820:	2300      	movs	r3, #0
 8003822:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003824:	6822      	ldr	r2, [r4, #0]
 8003826:	6913      	ldr	r3, [r2, #16]
 8003828:	06db      	lsls	r3, r3, #27
 800382a:	d512      	bpl.n	8003852 <HAL_TIM_IRQHandler+0xb2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800382c:	68d3      	ldr	r3, [r2, #12]
 800382e:	06db      	lsls	r3, r3, #27
 8003830:	d50f      	bpl.n	8003852 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003832:	2311      	movs	r3, #17
 8003834:	425b      	negs	r3, r3
 8003836:	6113      	str	r3, [r2, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003838:	3319      	adds	r3, #25
 800383a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800383c:	6823      	ldr	r3, [r4, #0]
 800383e:	69da      	ldr	r2, [r3, #28]
 8003840:	23c0      	movs	r3, #192	; 0xc0
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	421a      	tst	r2, r3
 8003846:	d03c      	beq.n	80038c2 <HAL_TIM_IRQHandler+0x122>
        HAL_TIM_IC_CaptureCallback(htim);
 8003848:	0020      	movs	r0, r4
 800384a:	f7ff ffa5 	bl	8003798 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800384e:	2300      	movs	r3, #0
 8003850:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003852:	6822      	ldr	r2, [r4, #0]
 8003854:	6913      	ldr	r3, [r2, #16]
 8003856:	07db      	lsls	r3, r3, #31
 8003858:	d502      	bpl.n	8003860 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800385a:	68d3      	ldr	r3, [r2, #12]
 800385c:	07db      	lsls	r3, r3, #31
 800385e:	d437      	bmi.n	80038d0 <HAL_TIM_IRQHandler+0x130>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003860:	6822      	ldr	r2, [r4, #0]
 8003862:	6913      	ldr	r3, [r2, #16]
 8003864:	061b      	lsls	r3, r3, #24
 8003866:	d502      	bpl.n	800386e <HAL_TIM_IRQHandler+0xce>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003868:	68d3      	ldr	r3, [r2, #12]
 800386a:	061b      	lsls	r3, r3, #24
 800386c:	d437      	bmi.n	80038de <HAL_TIM_IRQHandler+0x13e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800386e:	6822      	ldr	r2, [r4, #0]
 8003870:	6913      	ldr	r3, [r2, #16]
 8003872:	05db      	lsls	r3, r3, #23
 8003874:	d502      	bpl.n	800387c <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003876:	68d3      	ldr	r3, [r2, #12]
 8003878:	061b      	lsls	r3, r3, #24
 800387a:	d437      	bmi.n	80038ec <HAL_TIM_IRQHandler+0x14c>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800387c:	6822      	ldr	r2, [r4, #0]
 800387e:	6913      	ldr	r3, [r2, #16]
 8003880:	065b      	lsls	r3, r3, #25
 8003882:	d502      	bpl.n	800388a <HAL_TIM_IRQHandler+0xea>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003884:	68d3      	ldr	r3, [r2, #12]
 8003886:	065b      	lsls	r3, r3, #25
 8003888:	d436      	bmi.n	80038f8 <HAL_TIM_IRQHandler+0x158>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800388a:	6822      	ldr	r2, [r4, #0]
 800388c:	6913      	ldr	r3, [r2, #16]
 800388e:	069b      	lsls	r3, r3, #26
 8003890:	d502      	bpl.n	8003898 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003892:	68d3      	ldr	r3, [r2, #12]
 8003894:	069b      	lsls	r3, r3, #26
 8003896:	d436      	bmi.n	8003906 <HAL_TIM_IRQHandler+0x166>
}
 8003898:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800389a:	f7ff ff7c 	bl	8003796 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800389e:	0020      	movs	r0, r4
 80038a0:	f7ff ff7b 	bl	800379a <HAL_TIM_PWM_PulseFinishedCallback>
 80038a4:	e790      	b.n	80037c8 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038a6:	0020      	movs	r0, r4
 80038a8:	f7ff ff75 	bl	8003796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ac:	0020      	movs	r0, r4
 80038ae:	f7ff ff74 	bl	800379a <HAL_TIM_PWM_PulseFinishedCallback>
 80038b2:	e7a0      	b.n	80037f6 <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b4:	0020      	movs	r0, r4
 80038b6:	f7ff ff6e 	bl	8003796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ba:	0020      	movs	r0, r4
 80038bc:	f7ff ff6d 	bl	800379a <HAL_TIM_PWM_PulseFinishedCallback>
 80038c0:	e7ae      	b.n	8003820 <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c2:	0020      	movs	r0, r4
 80038c4:	f7ff ff67 	bl	8003796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c8:	0020      	movs	r0, r4
 80038ca:	f7ff ff66 	bl	800379a <HAL_TIM_PWM_PulseFinishedCallback>
 80038ce:	e7be      	b.n	800384e <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038d0:	2302      	movs	r3, #2
 80038d2:	425b      	negs	r3, r3
 80038d4:	6113      	str	r3, [r2, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80038d6:	0020      	movs	r0, r4
 80038d8:	f7ff ff5c 	bl	8003794 <HAL_TIM_PeriodElapsedCallback>
 80038dc:	e7c0      	b.n	8003860 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038de:	2381      	movs	r3, #129	; 0x81
 80038e0:	425b      	negs	r3, r3
 80038e2:	6113      	str	r3, [r2, #16]
      HAL_TIMEx_BreakCallback(htim);
 80038e4:	0020      	movs	r0, r4
 80038e6:	f000 f978 	bl	8003bda <HAL_TIMEx_BreakCallback>
 80038ea:	e7c0      	b.n	800386e <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038ec:	4b09      	ldr	r3, [pc, #36]	; (8003914 <HAL_TIM_IRQHandler+0x174>)
 80038ee:	6113      	str	r3, [r2, #16]
      HAL_TIMEx_Break2Callback(htim);
 80038f0:	0020      	movs	r0, r4
 80038f2:	f000 f973 	bl	8003bdc <HAL_TIMEx_Break2Callback>
 80038f6:	e7c1      	b.n	800387c <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038f8:	2341      	movs	r3, #65	; 0x41
 80038fa:	425b      	negs	r3, r3
 80038fc:	6113      	str	r3, [r2, #16]
      HAL_TIM_TriggerCallback(htim);
 80038fe:	0020      	movs	r0, r4
 8003900:	f7ff ff4c 	bl	800379c <HAL_TIM_TriggerCallback>
 8003904:	e7c1      	b.n	800388a <HAL_TIM_IRQHandler+0xea>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003906:	2321      	movs	r3, #33	; 0x21
 8003908:	425b      	negs	r3, r3
 800390a:	6113      	str	r3, [r2, #16]
      HAL_TIMEx_CommutCallback(htim);
 800390c:	0020      	movs	r0, r4
 800390e:	f000 f963 	bl	8003bd8 <HAL_TIMEx_CommutCallback>
}
 8003912:	e7c1      	b.n	8003898 <HAL_TIM_IRQHandler+0xf8>
 8003914:	fffffeff 	.word	0xfffffeff

08003918 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003918:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800391a:	4a24      	ldr	r2, [pc, #144]	; (80039ac <TIM_Base_SetConfig+0x94>)
 800391c:	4290      	cmp	r0, r2
 800391e:	d009      	beq.n	8003934 <TIM_Base_SetConfig+0x1c>
 8003920:	2280      	movs	r2, #128	; 0x80
 8003922:	05d2      	lsls	r2, r2, #23
 8003924:	4290      	cmp	r0, r2
 8003926:	d005      	beq.n	8003934 <TIM_Base_SetConfig+0x1c>
 8003928:	4a21      	ldr	r2, [pc, #132]	; (80039b0 <TIM_Base_SetConfig+0x98>)
 800392a:	4290      	cmp	r0, r2
 800392c:	d002      	beq.n	8003934 <TIM_Base_SetConfig+0x1c>
 800392e:	4a21      	ldr	r2, [pc, #132]	; (80039b4 <TIM_Base_SetConfig+0x9c>)
 8003930:	4290      	cmp	r0, r2
 8003932:	d103      	bne.n	800393c <TIM_Base_SetConfig+0x24>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003934:	2270      	movs	r2, #112	; 0x70
 8003936:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8003938:	684a      	ldr	r2, [r1, #4]
 800393a:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800393c:	4a1b      	ldr	r2, [pc, #108]	; (80039ac <TIM_Base_SetConfig+0x94>)
 800393e:	4290      	cmp	r0, r2
 8003940:	d015      	beq.n	800396e <TIM_Base_SetConfig+0x56>
 8003942:	2280      	movs	r2, #128	; 0x80
 8003944:	05d2      	lsls	r2, r2, #23
 8003946:	4290      	cmp	r0, r2
 8003948:	d011      	beq.n	800396e <TIM_Base_SetConfig+0x56>
 800394a:	4a19      	ldr	r2, [pc, #100]	; (80039b0 <TIM_Base_SetConfig+0x98>)
 800394c:	4290      	cmp	r0, r2
 800394e:	d00e      	beq.n	800396e <TIM_Base_SetConfig+0x56>
 8003950:	4a18      	ldr	r2, [pc, #96]	; (80039b4 <TIM_Base_SetConfig+0x9c>)
 8003952:	4290      	cmp	r0, r2
 8003954:	d00b      	beq.n	800396e <TIM_Base_SetConfig+0x56>
 8003956:	4a18      	ldr	r2, [pc, #96]	; (80039b8 <TIM_Base_SetConfig+0xa0>)
 8003958:	4290      	cmp	r0, r2
 800395a:	d008      	beq.n	800396e <TIM_Base_SetConfig+0x56>
 800395c:	4a17      	ldr	r2, [pc, #92]	; (80039bc <TIM_Base_SetConfig+0xa4>)
 800395e:	4290      	cmp	r0, r2
 8003960:	d005      	beq.n	800396e <TIM_Base_SetConfig+0x56>
 8003962:	4a17      	ldr	r2, [pc, #92]	; (80039c0 <TIM_Base_SetConfig+0xa8>)
 8003964:	4290      	cmp	r0, r2
 8003966:	d002      	beq.n	800396e <TIM_Base_SetConfig+0x56>
 8003968:	4a16      	ldr	r2, [pc, #88]	; (80039c4 <TIM_Base_SetConfig+0xac>)
 800396a:	4290      	cmp	r0, r2
 800396c:	d103      	bne.n	8003976 <TIM_Base_SetConfig+0x5e>
    tmpcr1 &= ~TIM_CR1_CKD;
 800396e:	4a16      	ldr	r2, [pc, #88]	; (80039c8 <TIM_Base_SetConfig+0xb0>)
 8003970:	401a      	ands	r2, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003972:	68cb      	ldr	r3, [r1, #12]
 8003974:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003976:	2280      	movs	r2, #128	; 0x80
 8003978:	4393      	bics	r3, r2
 800397a:	694a      	ldr	r2, [r1, #20]
 800397c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800397e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003980:	688b      	ldr	r3, [r1, #8]
 8003982:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003984:	680b      	ldr	r3, [r1, #0]
 8003986:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003988:	4b08      	ldr	r3, [pc, #32]	; (80039ac <TIM_Base_SetConfig+0x94>)
 800398a:	4298      	cmp	r0, r3
 800398c:	d008      	beq.n	80039a0 <TIM_Base_SetConfig+0x88>
 800398e:	4b0b      	ldr	r3, [pc, #44]	; (80039bc <TIM_Base_SetConfig+0xa4>)
 8003990:	4298      	cmp	r0, r3
 8003992:	d005      	beq.n	80039a0 <TIM_Base_SetConfig+0x88>
 8003994:	4b0a      	ldr	r3, [pc, #40]	; (80039c0 <TIM_Base_SetConfig+0xa8>)
 8003996:	4298      	cmp	r0, r3
 8003998:	d002      	beq.n	80039a0 <TIM_Base_SetConfig+0x88>
 800399a:	4b0a      	ldr	r3, [pc, #40]	; (80039c4 <TIM_Base_SetConfig+0xac>)
 800399c:	4298      	cmp	r0, r3
 800399e:	d101      	bne.n	80039a4 <TIM_Base_SetConfig+0x8c>
    TIMx->RCR = Structure->RepetitionCounter;
 80039a0:	690b      	ldr	r3, [r1, #16]
 80039a2:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80039a4:	2301      	movs	r3, #1
 80039a6:	6143      	str	r3, [r0, #20]
}
 80039a8:	4770      	bx	lr
 80039aa:	46c0      	nop			; (mov r8, r8)
 80039ac:	40012c00 	.word	0x40012c00
 80039b0:	40000400 	.word	0x40000400
 80039b4:	40000800 	.word	0x40000800
 80039b8:	40002000 	.word	0x40002000
 80039bc:	40014000 	.word	0x40014000
 80039c0:	40014400 	.word	0x40014400
 80039c4:	40014800 	.word	0x40014800
 80039c8:	fffffcff 	.word	0xfffffcff

080039cc <HAL_TIM_Base_Init>:
{
 80039cc:	b570      	push	{r4, r5, r6, lr}
 80039ce:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 80039d0:	d02a      	beq.n	8003a28 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80039d2:	233d      	movs	r3, #61	; 0x3d
 80039d4:	5cc3      	ldrb	r3, [r0, r3]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d020      	beq.n	8003a1c <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 80039da:	253d      	movs	r5, #61	; 0x3d
 80039dc:	2302      	movs	r3, #2
 80039de:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039e0:	0021      	movs	r1, r4
 80039e2:	c901      	ldmia	r1!, {r0}
 80039e4:	f7ff ff98 	bl	8003918 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039e8:	2301      	movs	r3, #1
 80039ea:	2248      	movs	r2, #72	; 0x48
 80039ec:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039ee:	3a0a      	subs	r2, #10
 80039f0:	54a3      	strb	r3, [r4, r2]
 80039f2:	3201      	adds	r2, #1
 80039f4:	54a3      	strb	r3, [r4, r2]
 80039f6:	3201      	adds	r2, #1
 80039f8:	54a3      	strb	r3, [r4, r2]
 80039fa:	3201      	adds	r2, #1
 80039fc:	54a3      	strb	r3, [r4, r2]
 80039fe:	3201      	adds	r2, #1
 8003a00:	54a3      	strb	r3, [r4, r2]
 8003a02:	3201      	adds	r2, #1
 8003a04:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a06:	3201      	adds	r2, #1
 8003a08:	54a3      	strb	r3, [r4, r2]
 8003a0a:	3201      	adds	r2, #1
 8003a0c:	54a3      	strb	r3, [r4, r2]
 8003a0e:	3201      	adds	r2, #1
 8003a10:	54a3      	strb	r3, [r4, r2]
 8003a12:	3201      	adds	r2, #1
 8003a14:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8003a16:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8003a18:	2000      	movs	r0, #0
}
 8003a1a:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8003a1c:	333c      	adds	r3, #60	; 0x3c
 8003a1e:	2200      	movs	r2, #0
 8003a20:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8003a22:	f7fd fa49 	bl	8000eb8 <HAL_TIM_Base_MspInit>
 8003a26:	e7d8      	b.n	80039da <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8003a28:	2001      	movs	r0, #1
 8003a2a:	e7f6      	b.n	8003a1a <HAL_TIM_Base_Init+0x4e>

08003a2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a2c:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a2e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a30:	4d03      	ldr	r5, [pc, #12]	; (8003a40 <TIM_ETR_SetConfig+0x14>)
 8003a32:	402c      	ands	r4, r5

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a34:	021b      	lsls	r3, r3, #8
 8003a36:	4313      	orrs	r3, r2
 8003a38:	430b      	orrs	r3, r1
 8003a3a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a3c:	6083      	str	r3, [r0, #8]
}
 8003a3e:	bd30      	pop	{r4, r5, pc}
 8003a40:	ffff00ff 	.word	0xffff00ff

08003a44 <HAL_TIM_ConfigClockSource>:
{
 8003a44:	b510      	push	{r4, lr}
 8003a46:	0004      	movs	r4, r0
 8003a48:	0008      	movs	r0, r1
  __HAL_LOCK(htim);
 8003a4a:	233c      	movs	r3, #60	; 0x3c
 8003a4c:	5ce3      	ldrb	r3, [r4, r3]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d100      	bne.n	8003a54 <HAL_TIM_ConfigClockSource+0x10>
 8003a52:	e077      	b.n	8003b44 <HAL_TIM_ConfigClockSource+0x100>
 8003a54:	233c      	movs	r3, #60	; 0x3c
 8003a56:	2201      	movs	r2, #1
 8003a58:	54e2      	strb	r2, [r4, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	3201      	adds	r2, #1
 8003a5e:	54e2      	strb	r2, [r4, r3]
  tmpsmcr = htim->Instance->SMCR;
 8003a60:	6822      	ldr	r2, [r4, #0]
 8003a62:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a64:	4938      	ldr	r1, [pc, #224]	; (8003b48 <HAL_TIM_ConfigClockSource+0x104>)
 8003a66:	400b      	ands	r3, r1
  htim->Instance->SMCR = tmpsmcr;
 8003a68:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003a6a:	6801      	ldr	r1, [r0, #0]
 8003a6c:	2960      	cmp	r1, #96	; 0x60
 8003a6e:	d04f      	beq.n	8003b10 <HAL_TIM_ConfigClockSource+0xcc>
 8003a70:	d829      	bhi.n	8003ac6 <HAL_TIM_ConfigClockSource+0x82>
 8003a72:	2940      	cmp	r1, #64	; 0x40
 8003a74:	d057      	beq.n	8003b26 <HAL_TIM_ConfigClockSource+0xe2>
 8003a76:	d90c      	bls.n	8003a92 <HAL_TIM_ConfigClockSource+0x4e>
 8003a78:	2950      	cmp	r1, #80	; 0x50
 8003a7a:	d122      	bne.n	8003ac2 <HAL_TIM_ConfigClockSource+0x7e>
                               sClockSourceConfig->ClockPolarity,
 8003a7c:	6841      	ldr	r1, [r0, #4]
                               sClockSourceConfig->ClockFilter);
 8003a7e:	68c2      	ldr	r2, [r0, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a80:	6820      	ldr	r0, [r4, #0]
 8003a82:	f7ff fe58 	bl	8003736 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a86:	6820      	ldr	r0, [r4, #0]
 8003a88:	2150      	movs	r1, #80	; 0x50
 8003a8a:	f7ff fe79 	bl	8003780 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003a8e:	2000      	movs	r0, #0
      break;
 8003a90:	e005      	b.n	8003a9e <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8003a92:	2920      	cmp	r1, #32
 8003a94:	d00e      	beq.n	8003ab4 <HAL_TIM_ConfigClockSource+0x70>
 8003a96:	d909      	bls.n	8003aac <HAL_TIM_ConfigClockSource+0x68>
 8003a98:	2930      	cmp	r1, #48	; 0x30
 8003a9a:	d00b      	beq.n	8003ab4 <HAL_TIM_ConfigClockSource+0x70>
      status = HAL_ERROR;
 8003a9c:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8003a9e:	233d      	movs	r3, #61	; 0x3d
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	54e2      	strb	r2, [r4, r3]
}
 8003aaa:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8003aac:	2900      	cmp	r1, #0
 8003aae:	d001      	beq.n	8003ab4 <HAL_TIM_ConfigClockSource+0x70>
 8003ab0:	2910      	cmp	r1, #16
 8003ab2:	d104      	bne.n	8003abe <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ab4:	6820      	ldr	r0, [r4, #0]
 8003ab6:	f7ff fe63 	bl	8003780 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003aba:	2000      	movs	r0, #0
      break;
 8003abc:	e7ef      	b.n	8003a9e <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8003abe:	2001      	movs	r0, #1
 8003ac0:	e7ed      	b.n	8003a9e <HAL_TIM_ConfigClockSource+0x5a>
 8003ac2:	2001      	movs	r0, #1
 8003ac4:	e7eb      	b.n	8003a9e <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8003ac6:	2280      	movs	r2, #128	; 0x80
 8003ac8:	0152      	lsls	r2, r2, #5
 8003aca:	4291      	cmp	r1, r2
 8003acc:	d036      	beq.n	8003b3c <HAL_TIM_ConfigClockSource+0xf8>
 8003ace:	2280      	movs	r2, #128	; 0x80
 8003ad0:	0192      	lsls	r2, r2, #6
 8003ad2:	4291      	cmp	r1, r2
 8003ad4:	d10d      	bne.n	8003af2 <HAL_TIM_ConfigClockSource+0xae>
                        sClockSourceConfig->ClockPrescaler,
 8003ad6:	6881      	ldr	r1, [r0, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ad8:	6842      	ldr	r2, [r0, #4]
                        sClockSourceConfig->ClockFilter);
 8003ada:	68c3      	ldr	r3, [r0, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003adc:	6820      	ldr	r0, [r4, #0]
 8003ade:	f7ff ffa5 	bl	8003a2c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ae2:	6822      	ldr	r2, [r4, #0]
 8003ae4:	6891      	ldr	r1, [r2, #8]
 8003ae6:	2380      	movs	r3, #128	; 0x80
 8003ae8:	01db      	lsls	r3, r3, #7
 8003aea:	430b      	orrs	r3, r1
 8003aec:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003aee:	2000      	movs	r0, #0
      break;
 8003af0:	e7d5      	b.n	8003a9e <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8003af2:	2970      	cmp	r1, #112	; 0x70
 8003af4:	d124      	bne.n	8003b40 <HAL_TIM_ConfigClockSource+0xfc>
                        sClockSourceConfig->ClockPrescaler,
 8003af6:	6881      	ldr	r1, [r0, #8]
                        sClockSourceConfig->ClockPolarity,
 8003af8:	6842      	ldr	r2, [r0, #4]
                        sClockSourceConfig->ClockFilter);
 8003afa:	68c3      	ldr	r3, [r0, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003afc:	6820      	ldr	r0, [r4, #0]
 8003afe:	f7ff ff95 	bl	8003a2c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b02:	6822      	ldr	r2, [r4, #0]
 8003b04:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b06:	2177      	movs	r1, #119	; 0x77
 8003b08:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8003b0a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003b0c:	2000      	movs	r0, #0
      break;
 8003b0e:	e7c6      	b.n	8003a9e <HAL_TIM_ConfigClockSource+0x5a>
                               sClockSourceConfig->ClockPolarity,
 8003b10:	6841      	ldr	r1, [r0, #4]
                               sClockSourceConfig->ClockFilter);
 8003b12:	68c2      	ldr	r2, [r0, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b14:	6820      	ldr	r0, [r4, #0]
 8003b16:	f7ff fe1f 	bl	8003758 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b1a:	6820      	ldr	r0, [r4, #0]
 8003b1c:	2160      	movs	r1, #96	; 0x60
 8003b1e:	f7ff fe2f 	bl	8003780 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003b22:	2000      	movs	r0, #0
      break;
 8003b24:	e7bb      	b.n	8003a9e <HAL_TIM_ConfigClockSource+0x5a>
                               sClockSourceConfig->ClockPolarity,
 8003b26:	6841      	ldr	r1, [r0, #4]
                               sClockSourceConfig->ClockFilter);
 8003b28:	68c2      	ldr	r2, [r0, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b2a:	6820      	ldr	r0, [r4, #0]
 8003b2c:	f7ff fe03 	bl	8003736 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b30:	6820      	ldr	r0, [r4, #0]
 8003b32:	2140      	movs	r1, #64	; 0x40
 8003b34:	f7ff fe24 	bl	8003780 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003b38:	2000      	movs	r0, #0
      break;
 8003b3a:	e7b0      	b.n	8003a9e <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	e7ae      	b.n	8003a9e <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8003b40:	2001      	movs	r0, #1
 8003b42:	e7ac      	b.n	8003a9e <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8003b44:	2002      	movs	r0, #2
 8003b46:	e7b0      	b.n	8003aaa <HAL_TIM_ConfigClockSource+0x66>
 8003b48:	ffce0088 	.word	0xffce0088

08003b4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b4c:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b4e:	233c      	movs	r3, #60	; 0x3c
 8003b50:	5cc3      	ldrb	r3, [r0, r3]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d033      	beq.n	8003bbe <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003b56:	233c      	movs	r3, #60	; 0x3c
 8003b58:	2201      	movs	r2, #1
 8003b5a:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	3201      	adds	r2, #1
 8003b60:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b62:	6802      	ldr	r2, [r0, #0]
 8003b64:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b66:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b68:	4c16      	ldr	r4, [pc, #88]	; (8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8003b6a:	42a2      	cmp	r2, r4
 8003b6c:	d022      	beq.n	8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b6e:	2470      	movs	r4, #112	; 0x70
 8003b70:	43a3      	bics	r3, r4
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b72:	680c      	ldr	r4, [r1, #0]
 8003b74:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b76:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b78:	6803      	ldr	r3, [r0, #0]
 8003b7a:	4a12      	ldr	r2, [pc, #72]	; (8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d00c      	beq.n	8003b9a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8003b80:	2280      	movs	r2, #128	; 0x80
 8003b82:	05d2      	lsls	r2, r2, #23
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d008      	beq.n	8003b9a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8003b88:	4a0f      	ldr	r2, [pc, #60]	; (8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d005      	beq.n	8003b9a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8003b8e:	4a0f      	ldr	r2, [pc, #60]	; (8003bcc <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d002      	beq.n	8003b9a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8003b94:	4a0e      	ldr	r2, [pc, #56]	; (8003bd0 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d104      	bne.n	8003ba4 <HAL_TIMEx_MasterConfigSynchronization+0x58>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b9a:	2280      	movs	r2, #128	; 0x80
 8003b9c:	4395      	bics	r5, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b9e:	688a      	ldr	r2, [r1, #8]
 8003ba0:	432a      	orrs	r2, r5

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ba2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ba4:	233d      	movs	r3, #61	; 0x3d
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8003baa:	3b01      	subs	r3, #1
 8003bac:	2200      	movs	r2, #0
 8003bae:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8003bb0:	2000      	movs	r0, #0
}
 8003bb2:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003bb4:	4c07      	ldr	r4, [pc, #28]	; (8003bd4 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8003bb6:	4023      	ands	r3, r4
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003bb8:	684c      	ldr	r4, [r1, #4]
 8003bba:	4323      	orrs	r3, r4
 8003bbc:	e7d7      	b.n	8003b6e <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 8003bbe:	2002      	movs	r0, #2
 8003bc0:	e7f7      	b.n	8003bb2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	40012c00 	.word	0x40012c00
 8003bc8:	40000400 	.word	0x40000400
 8003bcc:	40000800 	.word	0x40000800
 8003bd0:	40014000 	.word	0x40014000
 8003bd4:	ff0fffff 	.word	0xff0fffff

08003bd8 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bd8:	4770      	bx	lr

08003bda <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bda:	4770      	bx	lr

08003bdc <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003bdc:	4770      	bx	lr
	...

08003be0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003be0:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003be2:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be6:	2201      	movs	r2, #1
 8003be8:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003bec:	6801      	ldr	r1, [r0, #0]
 8003bee:	680b      	ldr	r3, [r1, #0]
 8003bf0:	4d12      	ldr	r5, [pc, #72]	; (8003c3c <UART_EndRxTransfer+0x5c>)
 8003bf2:	402b      	ands	r3, r5
 8003bf4:	600b      	str	r3, [r1, #0]
 8003bf6:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bfa:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bfe:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003c02:	6802      	ldr	r2, [r0, #0]
 8003c04:	6893      	ldr	r3, [r2, #8]
 8003c06:	4c0e      	ldr	r4, [pc, #56]	; (8003c40 <UART_EndRxTransfer+0x60>)
 8003c08:	4023      	ands	r3, r4
 8003c0a:	6093      	str	r3, [r2, #8]
 8003c0c:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c10:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d006      	beq.n	8003c24 <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c16:	238c      	movs	r3, #140	; 0x8c
 8003c18:	2220      	movs	r2, #32
 8003c1a:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c20:	6743      	str	r3, [r0, #116]	; 0x74
}
 8003c22:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c24:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c28:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c2c:	6802      	ldr	r2, [r0, #0]
 8003c2e:	6813      	ldr	r3, [r2, #0]
 8003c30:	2410      	movs	r4, #16
 8003c32:	43a3      	bics	r3, r4
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	f381 8810 	msr	PRIMASK, r1
}
 8003c3a:	e7ec      	b.n	8003c16 <UART_EndRxTransfer+0x36>
 8003c3c:	fffffedf 	.word	0xfffffedf
 8003c40:	effffffe 	.word	0xeffffffe

08003c44 <HAL_UART_TxCpltCallback>:
}
 8003c44:	4770      	bx	lr

08003c46 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c46:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c48:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	f383 8810 	msr	PRIMASK, r3
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c52:	6802      	ldr	r2, [r0, #0]
 8003c54:	6813      	ldr	r3, [r2, #0]
 8003c56:	2440      	movs	r4, #64	; 0x40
 8003c58:	43a3      	bics	r3, r4
 8003c5a:	6013      	str	r3, [r2, #0]
 8003c5c:	f381 8810 	msr	PRIMASK, r1

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c60:	2388      	movs	r3, #136	; 0x88
 8003c62:	2220      	movs	r2, #32
 8003c64:	50c2      	str	r2, [r0, r3]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003c66:	2300      	movs	r3, #0
 8003c68:	6783      	str	r3, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c6a:	f7ff ffeb 	bl	8003c44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c6e:	bd10      	pop	{r4, pc}

08003c70 <HAL_UART_ErrorCallback>:
}
 8003c70:	4770      	bx	lr

08003c72 <UART_DMAAbortOnError>:
{
 8003c72:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c74:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	225e      	movs	r2, #94	; 0x5e
 8003c7a:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 8003c7c:	3a08      	subs	r2, #8
 8003c7e:	5283      	strh	r3, [r0, r2]
  HAL_UART_ErrorCallback(huart);
 8003c80:	f7ff fff6 	bl	8003c70 <HAL_UART_ErrorCallback>
}
 8003c84:	bd10      	pop	{r4, pc}

08003c86 <HAL_UARTEx_RxEventCallback>:
}
 8003c86:	4770      	bx	lr

08003c88 <HAL_UART_IRQHandler>:
{
 8003c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8a:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c8c:	6802      	ldr	r2, [r0, #0]
 8003c8e:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c90:	6815      	ldr	r5, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c92:	6890      	ldr	r0, [r2, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c94:	49bd      	ldr	r1, [pc, #756]	; (8003f8c <HAL_UART_IRQHandler+0x304>)
 8003c96:	001e      	movs	r6, r3
 8003c98:	400e      	ands	r6, r1
  if (errorflags == 0U)
 8003c9a:	420b      	tst	r3, r1
 8003c9c:	d105      	bne.n	8003caa <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003c9e:	0699      	lsls	r1, r3, #26
 8003ca0:	d503      	bpl.n	8003caa <HAL_UART_IRQHandler+0x22>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003ca2:	06a9      	lsls	r1, r5, #26
 8003ca4:	d42c      	bmi.n	8003d00 <HAL_UART_IRQHandler+0x78>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003ca6:	00c1      	lsls	r1, r0, #3
 8003ca8:	d42a      	bmi.n	8003d00 <HAL_UART_IRQHandler+0x78>
  if ((errorflags != 0U)
 8003caa:	2e00      	cmp	r6, #0
 8003cac:	d007      	beq.n	8003cbe <HAL_UART_IRQHandler+0x36>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003cae:	49b8      	ldr	r1, [pc, #736]	; (8003f90 <HAL_UART_IRQHandler+0x308>)
 8003cb0:	0006      	movs	r6, r0
 8003cb2:	400e      	ands	r6, r1
 8003cb4:	4208      	tst	r0, r1
 8003cb6:	d129      	bne.n	8003d0c <HAL_UART_IRQHandler+0x84>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003cb8:	49b6      	ldr	r1, [pc, #728]	; (8003f94 <HAL_UART_IRQHandler+0x30c>)
 8003cba:	420d      	tst	r5, r1
 8003cbc:	d126      	bne.n	8003d0c <HAL_UART_IRQHandler+0x84>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cbe:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8003cc0:	2901      	cmp	r1, #1
 8003cc2:	d100      	bne.n	8003cc6 <HAL_UART_IRQHandler+0x3e>
 8003cc4:	e0aa      	b.n	8003e1c <HAL_UART_IRQHandler+0x194>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003cc6:	02d9      	lsls	r1, r3, #11
 8003cc8:	d502      	bpl.n	8003cd0 <HAL_UART_IRQHandler+0x48>
 8003cca:	0241      	lsls	r1, r0, #9
 8003ccc:	d500      	bpl.n	8003cd0 <HAL_UART_IRQHandler+0x48>
 8003cce:	e143      	b.n	8003f58 <HAL_UART_IRQHandler+0x2d0>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003cd0:	061a      	lsls	r2, r3, #24
 8003cd2:	d505      	bpl.n	8003ce0 <HAL_UART_IRQHandler+0x58>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003cd4:	062a      	lsls	r2, r5, #24
 8003cd6:	d500      	bpl.n	8003cda <HAL_UART_IRQHandler+0x52>
 8003cd8:	e145      	b.n	8003f66 <HAL_UART_IRQHandler+0x2de>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003cda:	0200      	lsls	r0, r0, #8
 8003cdc:	d500      	bpl.n	8003ce0 <HAL_UART_IRQHandler+0x58>
 8003cde:	e142      	b.n	8003f66 <HAL_UART_IRQHandler+0x2de>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ce0:	065a      	lsls	r2, r3, #25
 8003ce2:	d502      	bpl.n	8003cea <HAL_UART_IRQHandler+0x62>
 8003ce4:	066a      	lsls	r2, r5, #25
 8003ce6:	d500      	bpl.n	8003cea <HAL_UART_IRQHandler+0x62>
 8003ce8:	e144      	b.n	8003f74 <HAL_UART_IRQHandler+0x2ec>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003cea:	021a      	lsls	r2, r3, #8
 8003cec:	d502      	bpl.n	8003cf4 <HAL_UART_IRQHandler+0x6c>
 8003cee:	006a      	lsls	r2, r5, #1
 8003cf0:	d500      	bpl.n	8003cf4 <HAL_UART_IRQHandler+0x6c>
 8003cf2:	e143      	b.n	8003f7c <HAL_UART_IRQHandler+0x2f4>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003cf4:	01db      	lsls	r3, r3, #7
 8003cf6:	d502      	bpl.n	8003cfe <HAL_UART_IRQHandler+0x76>
 8003cf8:	2d00      	cmp	r5, #0
 8003cfa:	da00      	bge.n	8003cfe <HAL_UART_IRQHandler+0x76>
 8003cfc:	e142      	b.n	8003f84 <HAL_UART_IRQHandler+0x2fc>
}
 8003cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (huart->RxISR != NULL)
 8003d00:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0fb      	beq.n	8003cfe <HAL_UART_IRQHandler+0x76>
        huart->RxISR(huart);
 8003d06:	0020      	movs	r0, r4
 8003d08:	4798      	blx	r3
      return;
 8003d0a:	e7f8      	b.n	8003cfe <HAL_UART_IRQHandler+0x76>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d0c:	07d9      	lsls	r1, r3, #31
 8003d0e:	d507      	bpl.n	8003d20 <HAL_UART_IRQHandler+0x98>
 8003d10:	05e9      	lsls	r1, r5, #23
 8003d12:	d505      	bpl.n	8003d20 <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d14:	2701      	movs	r7, #1
 8003d16:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d18:	2190      	movs	r1, #144	; 0x90
 8003d1a:	5862      	ldr	r2, [r4, r1]
 8003d1c:	433a      	orrs	r2, r7
 8003d1e:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d20:	079a      	lsls	r2, r3, #30
 8003d22:	d509      	bpl.n	8003d38 <HAL_UART_IRQHandler+0xb0>
 8003d24:	07c2      	lsls	r2, r0, #31
 8003d26:	d507      	bpl.n	8003d38 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d28:	6822      	ldr	r2, [r4, #0]
 8003d2a:	2102      	movs	r1, #2
 8003d2c:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d2e:	318e      	adds	r1, #142	; 0x8e
 8003d30:	5862      	ldr	r2, [r4, r1]
 8003d32:	2704      	movs	r7, #4
 8003d34:	433a      	orrs	r2, r7
 8003d36:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d38:	075a      	lsls	r2, r3, #29
 8003d3a:	d509      	bpl.n	8003d50 <HAL_UART_IRQHandler+0xc8>
 8003d3c:	07c2      	lsls	r2, r0, #31
 8003d3e:	d507      	bpl.n	8003d50 <HAL_UART_IRQHandler+0xc8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d40:	6822      	ldr	r2, [r4, #0]
 8003d42:	2104      	movs	r1, #4
 8003d44:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d46:	318c      	adds	r1, #140	; 0x8c
 8003d48:	5862      	ldr	r2, [r4, r1]
 8003d4a:	2702      	movs	r7, #2
 8003d4c:	433a      	orrs	r2, r7
 8003d4e:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d50:	071a      	lsls	r2, r3, #28
 8003d52:	d50a      	bpl.n	8003d6a <HAL_UART_IRQHandler+0xe2>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003d54:	06aa      	lsls	r2, r5, #26
 8003d56:	d401      	bmi.n	8003d5c <HAL_UART_IRQHandler+0xd4>
 8003d58:	2e00      	cmp	r6, #0
 8003d5a:	d006      	beq.n	8003d6a <HAL_UART_IRQHandler+0xe2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d5c:	6822      	ldr	r2, [r4, #0]
 8003d5e:	2608      	movs	r6, #8
 8003d60:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d62:	2190      	movs	r1, #144	; 0x90
 8003d64:	5862      	ldr	r2, [r4, r1]
 8003d66:	4332      	orrs	r2, r6
 8003d68:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d6a:	051a      	lsls	r2, r3, #20
 8003d6c:	d50a      	bpl.n	8003d84 <HAL_UART_IRQHandler+0xfc>
 8003d6e:	016a      	lsls	r2, r5, #5
 8003d70:	d508      	bpl.n	8003d84 <HAL_UART_IRQHandler+0xfc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d72:	6822      	ldr	r2, [r4, #0]
 8003d74:	2180      	movs	r1, #128	; 0x80
 8003d76:	0109      	lsls	r1, r1, #4
 8003d78:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d7a:	2190      	movs	r1, #144	; 0x90
 8003d7c:	5862      	ldr	r2, [r4, r1]
 8003d7e:	2620      	movs	r6, #32
 8003d80:	4332      	orrs	r2, r6
 8003d82:	5062      	str	r2, [r4, r1]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d84:	2290      	movs	r2, #144	; 0x90
 8003d86:	58a2      	ldr	r2, [r4, r2]
 8003d88:	2a00      	cmp	r2, #0
 8003d8a:	d0b8      	beq.n	8003cfe <HAL_UART_IRQHandler+0x76>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003d8c:	069b      	lsls	r3, r3, #26
 8003d8e:	d508      	bpl.n	8003da2 <HAL_UART_IRQHandler+0x11a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003d90:	06ad      	lsls	r5, r5, #26
 8003d92:	d401      	bmi.n	8003d98 <HAL_UART_IRQHandler+0x110>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003d94:	00c0      	lsls	r0, r0, #3
 8003d96:	d504      	bpl.n	8003da2 <HAL_UART_IRQHandler+0x11a>
        if (huart->RxISR != NULL)
 8003d98:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <HAL_UART_IRQHandler+0x11a>
          huart->RxISR(huart);
 8003d9e:	0020      	movs	r0, r4
 8003da0:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8003da2:	2390      	movs	r3, #144	; 0x90
 8003da4:	58e2      	ldr	r2, [r4, r3]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003da6:	6823      	ldr	r3, [r4, #0]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	065b      	lsls	r3, r3, #25
 8003dac:	d402      	bmi.n	8003db4 <HAL_UART_IRQHandler+0x12c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003dae:	2328      	movs	r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003db0:	4213      	tst	r3, r2
 8003db2:	d02c      	beq.n	8003e0e <HAL_UART_IRQHandler+0x186>
        UART_EndRxTransfer(huart);
 8003db4:	0020      	movs	r0, r4
 8003db6:	f7ff ff13 	bl	8003be0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dba:	6823      	ldr	r3, [r4, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	065b      	lsls	r3, r3, #25
 8003dc0:	d521      	bpl.n	8003e06 <HAL_UART_IRQHandler+0x17e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dc2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dcc:	6822      	ldr	r2, [r4, #0]
 8003dce:	6893      	ldr	r3, [r2, #8]
 8003dd0:	2040      	movs	r0, #64	; 0x40
 8003dd2:	4383      	bics	r3, r0
 8003dd4:	6093      	str	r3, [r2, #8]
 8003dd6:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8003dda:	2380      	movs	r3, #128	; 0x80
 8003ddc:	58e3      	ldr	r3, [r4, r3]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00d      	beq.n	8003dfe <HAL_UART_IRQHandler+0x176>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003de2:	4a6d      	ldr	r2, [pc, #436]	; (8003f98 <HAL_UART_IRQHandler+0x310>)
 8003de4:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003de6:	2380      	movs	r3, #128	; 0x80
 8003de8:	58e0      	ldr	r0, [r4, r3]
 8003dea:	f7fd fd2b 	bl	8001844 <HAL_DMA_Abort_IT>
 8003dee:	2800      	cmp	r0, #0
 8003df0:	d100      	bne.n	8003df4 <HAL_UART_IRQHandler+0x16c>
 8003df2:	e784      	b.n	8003cfe <HAL_UART_IRQHandler+0x76>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003df4:	2380      	movs	r3, #128	; 0x80
 8003df6:	58e0      	ldr	r0, [r4, r3]
 8003df8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003dfa:	4798      	blx	r3
 8003dfc:	e77f      	b.n	8003cfe <HAL_UART_IRQHandler+0x76>
            HAL_UART_ErrorCallback(huart);
 8003dfe:	0020      	movs	r0, r4
 8003e00:	f7ff ff36 	bl	8003c70 <HAL_UART_ErrorCallback>
 8003e04:	e77b      	b.n	8003cfe <HAL_UART_IRQHandler+0x76>
          HAL_UART_ErrorCallback(huart);
 8003e06:	0020      	movs	r0, r4
 8003e08:	f7ff ff32 	bl	8003c70 <HAL_UART_ErrorCallback>
 8003e0c:	e777      	b.n	8003cfe <HAL_UART_IRQHandler+0x76>
        HAL_UART_ErrorCallback(huart);
 8003e0e:	0020      	movs	r0, r4
 8003e10:	f7ff ff2e 	bl	8003c70 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e14:	2390      	movs	r3, #144	; 0x90
 8003e16:	2200      	movs	r2, #0
 8003e18:	50e2      	str	r2, [r4, r3]
    return;
 8003e1a:	e770      	b.n	8003cfe <HAL_UART_IRQHandler+0x76>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003e1c:	06d9      	lsls	r1, r3, #27
 8003e1e:	d400      	bmi.n	8003e22 <HAL_UART_IRQHandler+0x19a>
 8003e20:	e751      	b.n	8003cc6 <HAL_UART_IRQHandler+0x3e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e22:	06e9      	lsls	r1, r5, #27
 8003e24:	d400      	bmi.n	8003e28 <HAL_UART_IRQHandler+0x1a0>
 8003e26:	e74e      	b.n	8003cc6 <HAL_UART_IRQHandler+0x3e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e28:	2310      	movs	r3, #16
 8003e2a:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e2c:	6823      	ldr	r3, [r4, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	065b      	lsls	r3, r3, #25
 8003e32:	d555      	bpl.n	8003ee0 <HAL_UART_IRQHandler+0x258>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e34:	2380      	movs	r3, #128	; 0x80
 8003e36:	58e2      	ldr	r2, [r4, r3]
 8003e38:	6813      	ldr	r3, [r2, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d100      	bne.n	8003e44 <HAL_UART_IRQHandler+0x1bc>
 8003e42:	e75c      	b.n	8003cfe <HAL_UART_IRQHandler+0x76>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e44:	215c      	movs	r1, #92	; 0x5c
 8003e46:	5a61      	ldrh	r1, [r4, r1]
 8003e48:	4299      	cmp	r1, r3
 8003e4a:	d800      	bhi.n	8003e4e <HAL_UART_IRQHandler+0x1c6>
 8003e4c:	e757      	b.n	8003cfe <HAL_UART_IRQHandler+0x76>
        huart->RxXferCount = nb_remaining_rx_data;
 8003e4e:	215e      	movs	r1, #94	; 0x5e
 8003e50:	5263      	strh	r3, [r4, r1]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003e52:	6813      	ldr	r3, [r2, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	069b      	lsls	r3, r3, #26
 8003e58:	d50b      	bpl.n	8003e72 <HAL_UART_IRQHandler+0x1ea>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e5e:	335a      	adds	r3, #90	; 0x5a
 8003e60:	5ae1      	ldrh	r1, [r4, r3]
 8003e62:	3302      	adds	r3, #2
 8003e64:	5ae3      	ldrh	r3, [r4, r3]
 8003e66:	1ac9      	subs	r1, r1, r3
 8003e68:	b289      	uxth	r1, r1
 8003e6a:	0020      	movs	r0, r4
 8003e6c:	f7ff ff0b 	bl	8003c86 <HAL_UARTEx_RxEventCallback>
      return;
 8003e70:	e745      	b.n	8003cfe <HAL_UART_IRQHandler+0x76>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e72:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e76:	2301      	movs	r3, #1
 8003e78:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e7c:	6821      	ldr	r1, [r4, #0]
 8003e7e:	680a      	ldr	r2, [r1, #0]
 8003e80:	4d46      	ldr	r5, [pc, #280]	; (8003f9c <HAL_UART_IRQHandler+0x314>)
 8003e82:	402a      	ands	r2, r5
 8003e84:	600a      	str	r2, [r1, #0]
 8003e86:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e8a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e8e:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e92:	6821      	ldr	r1, [r4, #0]
 8003e94:	688a      	ldr	r2, [r1, #8]
 8003e96:	439a      	bics	r2, r3
 8003e98:	608a      	str	r2, [r1, #8]
 8003e9a:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e9e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ea2:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ea6:	6821      	ldr	r1, [r4, #0]
 8003ea8:	688a      	ldr	r2, [r1, #8]
 8003eaa:	3542      	adds	r5, #66	; 0x42
 8003eac:	35ff      	adds	r5, #255	; 0xff
 8003eae:	43aa      	bics	r2, r5
 8003eb0:	608a      	str	r2, [r1, #8]
 8003eb2:	f380 8810 	msr	PRIMASK, r0
          huart->RxState = HAL_UART_STATE_READY;
 8003eb6:	228c      	movs	r2, #140	; 0x8c
 8003eb8:	2120      	movs	r1, #32
 8003eba:	50a1      	str	r1, [r4, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	66e2      	str	r2, [r4, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ec0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ec4:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ec8:	6822      	ldr	r2, [r4, #0]
 8003eca:	6813      	ldr	r3, [r2, #0]
 8003ecc:	2010      	movs	r0, #16
 8003ece:	4383      	bics	r3, r0
 8003ed0:	6013      	str	r3, [r2, #0]
 8003ed2:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ed6:	2380      	movs	r3, #128	; 0x80
 8003ed8:	58e0      	ldr	r0, [r4, r3]
 8003eda:	f7fd fc77 	bl	80017cc <HAL_DMA_Abort>
 8003ede:	e7bc      	b.n	8003e5a <HAL_UART_IRQHandler+0x1d2>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ee0:	235c      	movs	r3, #92	; 0x5c
 8003ee2:	5ae3      	ldrh	r3, [r4, r3]
 8003ee4:	225e      	movs	r2, #94	; 0x5e
 8003ee6:	5aa1      	ldrh	r1, [r4, r2]
 8003ee8:	1a59      	subs	r1, r3, r1
 8003eea:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8003eec:	5aa3      	ldrh	r3, [r4, r2]
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d100      	bne.n	8003ef6 <HAL_UART_IRQHandler+0x26e>
 8003ef4:	e703      	b.n	8003cfe <HAL_UART_IRQHandler+0x76>
          && (nb_rx_data > 0U))
 8003ef6:	2900      	cmp	r1, #0
 8003ef8:	d100      	bne.n	8003efc <HAL_UART_IRQHandler+0x274>
 8003efa:	e700      	b.n	8003cfe <HAL_UART_IRQHandler+0x76>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003efc:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f00:	2301      	movs	r3, #1
 8003f02:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f06:	6820      	ldr	r0, [r4, #0]
 8003f08:	6802      	ldr	r2, [r0, #0]
 8003f0a:	4e25      	ldr	r6, [pc, #148]	; (8003fa0 <HAL_UART_IRQHandler+0x318>)
 8003f0c:	4032      	ands	r2, r6
 8003f0e:	6002      	str	r2, [r0, #0]
 8003f10:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f14:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f18:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003f1c:	6820      	ldr	r0, [r4, #0]
 8003f1e:	6882      	ldr	r2, [r0, #8]
 8003f20:	4e20      	ldr	r6, [pc, #128]	; (8003fa4 <HAL_UART_IRQHandler+0x31c>)
 8003f22:	4032      	ands	r2, r6
 8003f24:	6082      	str	r2, [r0, #8]
 8003f26:	f385 8810 	msr	PRIMASK, r5
        huart->RxState = HAL_UART_STATE_READY;
 8003f2a:	228c      	movs	r2, #140	; 0x8c
 8003f2c:	2020      	movs	r0, #32
 8003f2e:	50a0      	str	r0, [r4, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f30:	2200      	movs	r2, #0
 8003f32:	66e2      	str	r2, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8003f34:	6762      	str	r2, [r4, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f36:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f3a:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f3e:	6822      	ldr	r2, [r4, #0]
 8003f40:	6813      	ldr	r3, [r2, #0]
 8003f42:	2510      	movs	r5, #16
 8003f44:	43ab      	bics	r3, r5
 8003f46:	6013      	str	r3, [r2, #0]
 8003f48:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f50:	0020      	movs	r0, r4
 8003f52:	f7ff fe98 	bl	8003c86 <HAL_UARTEx_RxEventCallback>
      return;
 8003f56:	e6d2      	b.n	8003cfe <HAL_UART_IRQHandler+0x76>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003f58:	2380      	movs	r3, #128	; 0x80
 8003f5a:	035b      	lsls	r3, r3, #13
 8003f5c:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8003f5e:	0020      	movs	r0, r4
 8003f60:	f000 fb76 	bl	8004650 <HAL_UARTEx_WakeupCallback>
    return;
 8003f64:	e6cb      	b.n	8003cfe <HAL_UART_IRQHandler+0x76>
    if (huart->TxISR != NULL)
 8003f66:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d100      	bne.n	8003f6e <HAL_UART_IRQHandler+0x2e6>
 8003f6c:	e6c7      	b.n	8003cfe <HAL_UART_IRQHandler+0x76>
      huart->TxISR(huart);
 8003f6e:	0020      	movs	r0, r4
 8003f70:	4798      	blx	r3
    return;
 8003f72:	e6c4      	b.n	8003cfe <HAL_UART_IRQHandler+0x76>
    UART_EndTransmit_IT(huart);
 8003f74:	0020      	movs	r0, r4
 8003f76:	f7ff fe66 	bl	8003c46 <UART_EndTransmit_IT>
    return;
 8003f7a:	e6c0      	b.n	8003cfe <HAL_UART_IRQHandler+0x76>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003f7c:	0020      	movs	r0, r4
 8003f7e:	f000 fb69 	bl	8004654 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8003f82:	e6bc      	b.n	8003cfe <HAL_UART_IRQHandler+0x76>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003f84:	0020      	movs	r0, r4
 8003f86:	f000 fb64 	bl	8004652 <HAL_UARTEx_RxFifoFullCallback>
    return;
 8003f8a:	e6b8      	b.n	8003cfe <HAL_UART_IRQHandler+0x76>
 8003f8c:	0000080f 	.word	0x0000080f
 8003f90:	10000001 	.word	0x10000001
 8003f94:	04000120 	.word	0x04000120
 8003f98:	08003c73 	.word	0x08003c73
 8003f9c:	fffffeff 	.word	0xfffffeff
 8003fa0:	fffffedf 	.word	0xfffffedf
 8003fa4:	effffffe 	.word	0xeffffffe

08003fa8 <UART_SetConfig>:
{
 8003fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003faa:	0004      	movs	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fac:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fae:	6883      	ldr	r3, [r0, #8]
 8003fb0:	6902      	ldr	r2, [r0, #16]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	6942      	ldr	r2, [r0, #20]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	69c2      	ldr	r2, [r0, #28]
 8003fba:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fbc:	680a      	ldr	r2, [r1, #0]
 8003fbe:	48aa      	ldr	r0, [pc, #680]	; (8004268 <UART_SetConfig+0x2c0>)
 8003fc0:	4002      	ands	r2, r0
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fc6:	6822      	ldr	r2, [r4, #0]
 8003fc8:	6853      	ldr	r3, [r2, #4]
 8003fca:	49a8      	ldr	r1, [pc, #672]	; (800426c <UART_SetConfig+0x2c4>)
 8003fcc:	400b      	ands	r3, r1
 8003fce:	68e1      	ldr	r1, [r4, #12]
 8003fd0:	430b      	orrs	r3, r1
 8003fd2:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fd4:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003fd6:	6822      	ldr	r2, [r4, #0]
 8003fd8:	4ba5      	ldr	r3, [pc, #660]	; (8004270 <UART_SetConfig+0x2c8>)
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d004      	beq.n	8003fe8 <UART_SetConfig+0x40>
 8003fde:	4ba5      	ldr	r3, [pc, #660]	; (8004274 <UART_SetConfig+0x2cc>)
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d001      	beq.n	8003fe8 <UART_SetConfig+0x40>
    tmpreg |= huart->Init.OneBitSampling;
 8003fe4:	6a23      	ldr	r3, [r4, #32]
 8003fe6:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fe8:	6893      	ldr	r3, [r2, #8]
 8003fea:	48a3      	ldr	r0, [pc, #652]	; (8004278 <UART_SetConfig+0x2d0>)
 8003fec:	4003      	ands	r3, r0
 8003fee:	430b      	orrs	r3, r1
 8003ff0:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003ff2:	6822      	ldr	r2, [r4, #0]
 8003ff4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003ff6:	210f      	movs	r1, #15
 8003ff8:	438b      	bics	r3, r1
 8003ffa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003ffc:	430b      	orrs	r3, r1
 8003ffe:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004000:	6822      	ldr	r2, [r4, #0]
 8004002:	4b9e      	ldr	r3, [pc, #632]	; (800427c <UART_SetConfig+0x2d4>)
 8004004:	429a      	cmp	r2, r3
 8004006:	d01a      	beq.n	800403e <UART_SetConfig+0x96>
 8004008:	4b9d      	ldr	r3, [pc, #628]	; (8004280 <UART_SetConfig+0x2d8>)
 800400a:	429a      	cmp	r2, r3
 800400c:	d05b      	beq.n	80040c6 <UART_SetConfig+0x11e>
 800400e:	4b9d      	ldr	r3, [pc, #628]	; (8004284 <UART_SetConfig+0x2dc>)
 8004010:	429a      	cmp	r2, r3
 8004012:	d069      	beq.n	80040e8 <UART_SetConfig+0x140>
 8004014:	4b9c      	ldr	r3, [pc, #624]	; (8004288 <UART_SetConfig+0x2e0>)
 8004016:	429a      	cmp	r2, r3
 8004018:	d100      	bne.n	800401c <UART_SetConfig+0x74>
 800401a:	e0bc      	b.n	8004196 <UART_SetConfig+0x1ee>
 800401c:	4b9b      	ldr	r3, [pc, #620]	; (800428c <UART_SetConfig+0x2e4>)
 800401e:	429a      	cmp	r2, r3
 8004020:	d100      	bne.n	8004024 <UART_SetConfig+0x7c>
 8004022:	e0ba      	b.n	800419a <UART_SetConfig+0x1f2>
 8004024:	4b9a      	ldr	r3, [pc, #616]	; (8004290 <UART_SetConfig+0x2e8>)
 8004026:	429a      	cmp	r2, r3
 8004028:	d100      	bne.n	800402c <UART_SetConfig+0x84>
 800402a:	e0b8      	b.n	800419e <UART_SetConfig+0x1f6>
 800402c:	4b90      	ldr	r3, [pc, #576]	; (8004270 <UART_SetConfig+0x2c8>)
 800402e:	429a      	cmp	r2, r3
 8004030:	d06b      	beq.n	800410a <UART_SetConfig+0x162>
 8004032:	4b90      	ldr	r3, [pc, #576]	; (8004274 <UART_SetConfig+0x2cc>)
 8004034:	429a      	cmp	r2, r3
 8004036:	d100      	bne.n	800403a <UART_SetConfig+0x92>
 8004038:	e07f      	b.n	800413a <UART_SetConfig+0x192>
 800403a:	2310      	movs	r3, #16
 800403c:	e00e      	b.n	800405c <UART_SetConfig+0xb4>
 800403e:	4b95      	ldr	r3, [pc, #596]	; (8004294 <UART_SetConfig+0x2ec>)
 8004040:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004042:	2303      	movs	r3, #3
 8004044:	400b      	ands	r3, r1
 8004046:	2b02      	cmp	r3, #2
 8004048:	d100      	bne.n	800404c <UART_SetConfig+0xa4>
 800404a:	e08e      	b.n	800416a <UART_SetConfig+0x1c2>
 800404c:	d837      	bhi.n	80040be <UART_SetConfig+0x116>
 800404e:	2b00      	cmp	r3, #0
 8004050:	d100      	bne.n	8004054 <UART_SetConfig+0xac>
 8004052:	e08c      	b.n	800416e <UART_SetConfig+0x1c6>
 8004054:	2b01      	cmp	r3, #1
 8004056:	d000      	beq.n	800405a <UART_SetConfig+0xb2>
 8004058:	e08b      	b.n	8004172 <UART_SetConfig+0x1ca>
 800405a:	3303      	adds	r3, #3
  if (UART_INSTANCE_LOWPOWER(huart))
 800405c:	4984      	ldr	r1, [pc, #528]	; (8004270 <UART_SetConfig+0x2c8>)
 800405e:	428a      	cmp	r2, r1
 8004060:	d100      	bne.n	8004064 <UART_SetConfig+0xbc>
 8004062:	e0ae      	b.n	80041c2 <UART_SetConfig+0x21a>
 8004064:	4983      	ldr	r1, [pc, #524]	; (8004274 <UART_SetConfig+0x2cc>)
 8004066:	428a      	cmp	r2, r1
 8004068:	d100      	bne.n	800406c <UART_SetConfig+0xc4>
 800406a:	e0aa      	b.n	80041c2 <UART_SetConfig+0x21a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800406c:	69e0      	ldr	r0, [r4, #28]
 800406e:	2280      	movs	r2, #128	; 0x80
 8004070:	0212      	lsls	r2, r2, #8
 8004072:	4290      	cmp	r0, r2
 8004074:	d100      	bne.n	8004078 <UART_SetConfig+0xd0>
 8004076:	e119      	b.n	80042ac <UART_SetConfig+0x304>
    switch (clocksource)
 8004078:	2b04      	cmp	r3, #4
 800407a:	d100      	bne.n	800407e <UART_SetConfig+0xd6>
 800407c:	e159      	b.n	8004332 <UART_SetConfig+0x38a>
 800407e:	d900      	bls.n	8004082 <UART_SetConfig+0xda>
 8004080:	e149      	b.n	8004316 <UART_SetConfig+0x36e>
 8004082:	2b00      	cmp	r3, #0
 8004084:	d100      	bne.n	8004088 <UART_SetConfig+0xe0>
 8004086:	e14d      	b.n	8004324 <UART_SetConfig+0x37c>
 8004088:	2b02      	cmp	r3, #2
 800408a:	d000      	beq.n	800408e <UART_SetConfig+0xe6>
 800408c:	e141      	b.n	8004312 <UART_SetConfig+0x36a>
 800408e:	4882      	ldr	r0, [pc, #520]	; (8004298 <UART_SetConfig+0x2f0>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004090:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004092:	4b82      	ldr	r3, [pc, #520]	; (800429c <UART_SetConfig+0x2f4>)
 8004094:	0052      	lsls	r2, r2, #1
 8004096:	5ad1      	ldrh	r1, [r2, r3]
 8004098:	f7fc f834 	bl	8000104 <__udivsi3>
 800409c:	6861      	ldr	r1, [r4, #4]
 800409e:	084b      	lsrs	r3, r1, #1
 80040a0:	18c0      	adds	r0, r0, r3
 80040a2:	f7fc f82f 	bl	8000104 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040a6:	0002      	movs	r2, r0
 80040a8:	3a10      	subs	r2, #16
 80040aa:	4b7d      	ldr	r3, [pc, #500]	; (80042a0 <UART_SetConfig+0x2f8>)
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d900      	bls.n	80040b2 <UART_SetConfig+0x10a>
 80040b0:	e14a      	b.n	8004348 <UART_SetConfig+0x3a0>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	0400      	lsls	r0, r0, #16
 80040b6:	0c00      	lsrs	r0, r0, #16
 80040b8:	60d8      	str	r0, [r3, #12]
 80040ba:	2000      	movs	r0, #0
 80040bc:	e0bf      	b.n	800423e <UART_SetConfig+0x296>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040be:	2b03      	cmp	r3, #3
 80040c0:	d159      	bne.n	8004176 <UART_SetConfig+0x1ce>
 80040c2:	3305      	adds	r3, #5
 80040c4:	e7ca      	b.n	800405c <UART_SetConfig+0xb4>
 80040c6:	4b73      	ldr	r3, [pc, #460]	; (8004294 <UART_SetConfig+0x2ec>)
 80040c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80040ca:	230c      	movs	r3, #12
 80040cc:	400b      	ands	r3, r1
 80040ce:	2b08      	cmp	r3, #8
 80040d0:	d053      	beq.n	800417a <UART_SetConfig+0x1d2>
 80040d2:	d805      	bhi.n	80040e0 <UART_SetConfig+0x138>
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d052      	beq.n	800417e <UART_SetConfig+0x1d6>
 80040d8:	2b04      	cmp	r3, #4
 80040da:	d0bf      	beq.n	800405c <UART_SetConfig+0xb4>
 80040dc:	2310      	movs	r3, #16
 80040de:	e7bd      	b.n	800405c <UART_SetConfig+0xb4>
 80040e0:	2b0c      	cmp	r3, #12
 80040e2:	d14e      	bne.n	8004182 <UART_SetConfig+0x1da>
 80040e4:	3b04      	subs	r3, #4
 80040e6:	e7b9      	b.n	800405c <UART_SetConfig+0xb4>
 80040e8:	4b6a      	ldr	r3, [pc, #424]	; (8004294 <UART_SetConfig+0x2ec>)
 80040ea:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80040ec:	2330      	movs	r3, #48	; 0x30
 80040ee:	400b      	ands	r3, r1
 80040f0:	2b20      	cmp	r3, #32
 80040f2:	d048      	beq.n	8004186 <UART_SetConfig+0x1de>
 80040f4:	d805      	bhi.n	8004102 <UART_SetConfig+0x15a>
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d047      	beq.n	800418a <UART_SetConfig+0x1e2>
 80040fa:	2b10      	cmp	r3, #16
 80040fc:	d147      	bne.n	800418e <UART_SetConfig+0x1e6>
 80040fe:	3b0c      	subs	r3, #12
 8004100:	e7ac      	b.n	800405c <UART_SetConfig+0xb4>
 8004102:	2b30      	cmp	r3, #48	; 0x30
 8004104:	d145      	bne.n	8004192 <UART_SetConfig+0x1ea>
 8004106:	3b28      	subs	r3, #40	; 0x28
 8004108:	e7a8      	b.n	800405c <UART_SetConfig+0xb4>
 800410a:	4b62      	ldr	r3, [pc, #392]	; (8004294 <UART_SetConfig+0x2ec>)
 800410c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410e:	21c0      	movs	r1, #192	; 0xc0
 8004110:	0109      	lsls	r1, r1, #4
 8004112:	400b      	ands	r3, r1
 8004114:	2180      	movs	r1, #128	; 0x80
 8004116:	0109      	lsls	r1, r1, #4
 8004118:	428b      	cmp	r3, r1
 800411a:	d042      	beq.n	80041a2 <UART_SetConfig+0x1fa>
 800411c:	d807      	bhi.n	800412e <UART_SetConfig+0x186>
 800411e:	2b00      	cmp	r3, #0
 8004120:	d041      	beq.n	80041a6 <UART_SetConfig+0x1fe>
 8004122:	2180      	movs	r1, #128	; 0x80
 8004124:	00c9      	lsls	r1, r1, #3
 8004126:	428b      	cmp	r3, r1
 8004128:	d13f      	bne.n	80041aa <UART_SetConfig+0x202>
 800412a:	2304      	movs	r3, #4
 800412c:	e796      	b.n	800405c <UART_SetConfig+0xb4>
 800412e:	21c0      	movs	r1, #192	; 0xc0
 8004130:	0109      	lsls	r1, r1, #4
 8004132:	428b      	cmp	r3, r1
 8004134:	d13b      	bne.n	80041ae <UART_SetConfig+0x206>
 8004136:	2308      	movs	r3, #8
 8004138:	e790      	b.n	800405c <UART_SetConfig+0xb4>
 800413a:	4b56      	ldr	r3, [pc, #344]	; (8004294 <UART_SetConfig+0x2ec>)
 800413c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413e:	21c0      	movs	r1, #192	; 0xc0
 8004140:	0089      	lsls	r1, r1, #2
 8004142:	400b      	ands	r3, r1
 8004144:	3901      	subs	r1, #1
 8004146:	39ff      	subs	r1, #255	; 0xff
 8004148:	428b      	cmp	r3, r1
 800414a:	d032      	beq.n	80041b2 <UART_SetConfig+0x20a>
 800414c:	d807      	bhi.n	800415e <UART_SetConfig+0x1b6>
 800414e:	2b00      	cmp	r3, #0
 8004150:	d031      	beq.n	80041b6 <UART_SetConfig+0x20e>
 8004152:	3901      	subs	r1, #1
 8004154:	39ff      	subs	r1, #255	; 0xff
 8004156:	428b      	cmp	r3, r1
 8004158:	d12f      	bne.n	80041ba <UART_SetConfig+0x212>
 800415a:	2304      	movs	r3, #4
 800415c:	e77e      	b.n	800405c <UART_SetConfig+0xb4>
 800415e:	21c0      	movs	r1, #192	; 0xc0
 8004160:	0089      	lsls	r1, r1, #2
 8004162:	428b      	cmp	r3, r1
 8004164:	d12b      	bne.n	80041be <UART_SetConfig+0x216>
 8004166:	2308      	movs	r3, #8
 8004168:	e778      	b.n	800405c <UART_SetConfig+0xb4>
 800416a:	2302      	movs	r3, #2
 800416c:	e776      	b.n	800405c <UART_SetConfig+0xb4>
 800416e:	2300      	movs	r3, #0
 8004170:	e774      	b.n	800405c <UART_SetConfig+0xb4>
 8004172:	2310      	movs	r3, #16
 8004174:	e772      	b.n	800405c <UART_SetConfig+0xb4>
 8004176:	2310      	movs	r3, #16
 8004178:	e770      	b.n	800405c <UART_SetConfig+0xb4>
 800417a:	2302      	movs	r3, #2
 800417c:	e76e      	b.n	800405c <UART_SetConfig+0xb4>
 800417e:	2300      	movs	r3, #0
 8004180:	e76c      	b.n	800405c <UART_SetConfig+0xb4>
 8004182:	2310      	movs	r3, #16
 8004184:	e76a      	b.n	800405c <UART_SetConfig+0xb4>
 8004186:	2302      	movs	r3, #2
 8004188:	e768      	b.n	800405c <UART_SetConfig+0xb4>
 800418a:	2300      	movs	r3, #0
 800418c:	e766      	b.n	800405c <UART_SetConfig+0xb4>
 800418e:	2310      	movs	r3, #16
 8004190:	e764      	b.n	800405c <UART_SetConfig+0xb4>
 8004192:	2310      	movs	r3, #16
 8004194:	e762      	b.n	800405c <UART_SetConfig+0xb4>
 8004196:	2300      	movs	r3, #0
 8004198:	e760      	b.n	800405c <UART_SetConfig+0xb4>
 800419a:	2300      	movs	r3, #0
 800419c:	e75e      	b.n	800405c <UART_SetConfig+0xb4>
 800419e:	2300      	movs	r3, #0
 80041a0:	e75c      	b.n	800405c <UART_SetConfig+0xb4>
 80041a2:	2302      	movs	r3, #2
 80041a4:	e75a      	b.n	800405c <UART_SetConfig+0xb4>
 80041a6:	2300      	movs	r3, #0
 80041a8:	e758      	b.n	800405c <UART_SetConfig+0xb4>
 80041aa:	2310      	movs	r3, #16
 80041ac:	e756      	b.n	800405c <UART_SetConfig+0xb4>
 80041ae:	2310      	movs	r3, #16
 80041b0:	e754      	b.n	800405c <UART_SetConfig+0xb4>
 80041b2:	2302      	movs	r3, #2
 80041b4:	e752      	b.n	800405c <UART_SetConfig+0xb4>
 80041b6:	2300      	movs	r3, #0
 80041b8:	e750      	b.n	800405c <UART_SetConfig+0xb4>
 80041ba:	2310      	movs	r3, #16
 80041bc:	e74e      	b.n	800405c <UART_SetConfig+0xb4>
 80041be:	2310      	movs	r3, #16
 80041c0:	e74c      	b.n	800405c <UART_SetConfig+0xb4>
    switch (clocksource)
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d04b      	beq.n	800425e <UART_SetConfig+0x2b6>
 80041c6:	d834      	bhi.n	8004232 <UART_SetConfig+0x28a>
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d041      	beq.n	8004250 <UART_SetConfig+0x2a8>
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d12e      	bne.n	800422e <UART_SetConfig+0x286>
        pclk = (uint32_t) HSI_VALUE;
 80041d0:	4d31      	ldr	r5, [pc, #196]	; (8004298 <UART_SetConfig+0x2f0>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80041d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80041d4:	4b31      	ldr	r3, [pc, #196]	; (800429c <UART_SetConfig+0x2f4>)
 80041d6:	0052      	lsls	r2, r2, #1
 80041d8:	5ad7      	ldrh	r7, [r2, r3]
 80041da:	0039      	movs	r1, r7
 80041dc:	0028      	movs	r0, r5
 80041de:	f7fb ff91 	bl	8000104 <__udivsi3>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041e2:	6866      	ldr	r6, [r4, #4]
 80041e4:	0073      	lsls	r3, r6, #1
 80041e6:	199b      	adds	r3, r3, r6
 80041e8:	4283      	cmp	r3, r0
 80041ea:	d900      	bls.n	80041ee <UART_SetConfig+0x246>
 80041ec:	e0a4      	b.n	8004338 <UART_SetConfig+0x390>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80041ee:	0333      	lsls	r3, r6, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041f0:	4283      	cmp	r3, r0
 80041f2:	d200      	bcs.n	80041f6 <UART_SetConfig+0x24e>
 80041f4:	e0a2      	b.n	800433c <UART_SetConfig+0x394>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041f6:	003a      	movs	r2, r7
 80041f8:	2300      	movs	r3, #0
 80041fa:	0028      	movs	r0, r5
 80041fc:	2100      	movs	r1, #0
 80041fe:	f7fc f8f7 	bl	80003f0 <__aeabi_uldivmod>
 8004202:	0e05      	lsrs	r5, r0, #24
 8004204:	020b      	lsls	r3, r1, #8
 8004206:	432b      	orrs	r3, r5
 8004208:	0202      	lsls	r2, r0, #8
 800420a:	0870      	lsrs	r0, r6, #1
 800420c:	2100      	movs	r1, #0
 800420e:	1880      	adds	r0, r0, r2
 8004210:	4159      	adcs	r1, r3
 8004212:	0032      	movs	r2, r6
 8004214:	2300      	movs	r3, #0
 8004216:	f7fc f8eb 	bl	80003f0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800421a:	4b22      	ldr	r3, [pc, #136]	; (80042a4 <UART_SetConfig+0x2fc>)
 800421c:	18c2      	adds	r2, r0, r3
 800421e:	4b22      	ldr	r3, [pc, #136]	; (80042a8 <UART_SetConfig+0x300>)
 8004220:	429a      	cmp	r2, r3
 8004222:	d900      	bls.n	8004226 <UART_SetConfig+0x27e>
 8004224:	e08c      	b.n	8004340 <UART_SetConfig+0x398>
          huart->Instance->BRR = usartdiv;
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	60d8      	str	r0, [r3, #12]
 800422a:	2000      	movs	r0, #0
 800422c:	e007      	b.n	800423e <UART_SetConfig+0x296>
    switch (clocksource)
 800422e:	2001      	movs	r0, #1
 8004230:	e005      	b.n	800423e <UART_SetConfig+0x296>
 8004232:	2b08      	cmp	r3, #8
 8004234:	d102      	bne.n	800423c <UART_SetConfig+0x294>
 8004236:	2580      	movs	r5, #128	; 0x80
 8004238:	022d      	lsls	r5, r5, #8
 800423a:	e7ca      	b.n	80041d2 <UART_SetConfig+0x22a>
 800423c:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
 800423e:	2301      	movs	r3, #1
 8004240:	226a      	movs	r2, #106	; 0x6a
 8004242:	52a3      	strh	r3, [r4, r2]
  huart->NbRxDataToProcess = 1;
 8004244:	3a02      	subs	r2, #2
 8004246:	52a3      	strh	r3, [r4, r2]
  huart->RxISR = NULL;
 8004248:	2300      	movs	r3, #0
 800424a:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 800424c:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800424e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 8004250:	f7fe ffca 	bl	80031e8 <HAL_RCC_GetPCLK1Freq>
 8004254:	0005      	movs	r5, r0
    if (pclk != 0U)
 8004256:	2d00      	cmp	r5, #0
 8004258:	d1bb      	bne.n	80041d2 <UART_SetConfig+0x22a>
 800425a:	2000      	movs	r0, #0
 800425c:	e7ef      	b.n	800423e <UART_SetConfig+0x296>
        pclk = HAL_RCC_GetSysClockFreq();
 800425e:	f7fe fe9b 	bl	8002f98 <HAL_RCC_GetSysClockFreq>
 8004262:	0005      	movs	r5, r0
        break;
 8004264:	e7f7      	b.n	8004256 <UART_SetConfig+0x2ae>
 8004266:	46c0      	nop			; (mov r8, r8)
 8004268:	cfff69f3 	.word	0xcfff69f3
 800426c:	ffffcfff 	.word	0xffffcfff
 8004270:	40008000 	.word	0x40008000
 8004274:	40008400 	.word	0x40008400
 8004278:	11fff4ff 	.word	0x11fff4ff
 800427c:	40013800 	.word	0x40013800
 8004280:	40004400 	.word	0x40004400
 8004284:	40004800 	.word	0x40004800
 8004288:	40004c00 	.word	0x40004c00
 800428c:	40005000 	.word	0x40005000
 8004290:	40013c00 	.word	0x40013c00
 8004294:	40021000 	.word	0x40021000
 8004298:	00f42400 	.word	0x00f42400
 800429c:	08005fec 	.word	0x08005fec
 80042a0:	0000ffef 	.word	0x0000ffef
 80042a4:	fffffd00 	.word	0xfffffd00
 80042a8:	000ffcff 	.word	0x000ffcff
    switch (clocksource)
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d02d      	beq.n	800430c <UART_SetConfig+0x364>
 80042b0:	d822      	bhi.n	80042f8 <UART_SetConfig+0x350>
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d024      	beq.n	8004300 <UART_SetConfig+0x358>
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d11c      	bne.n	80042f4 <UART_SetConfig+0x34c>
 80042ba:	4824      	ldr	r0, [pc, #144]	; (800434c <UART_SetConfig+0x3a4>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80042be:	4b24      	ldr	r3, [pc, #144]	; (8004350 <UART_SetConfig+0x3a8>)
 80042c0:	0052      	lsls	r2, r2, #1
 80042c2:	5ad1      	ldrh	r1, [r2, r3]
 80042c4:	f7fb ff1e 	bl	8000104 <__udivsi3>
 80042c8:	0040      	lsls	r0, r0, #1
 80042ca:	6861      	ldr	r1, [r4, #4]
 80042cc:	084b      	lsrs	r3, r1, #1
 80042ce:	18c0      	adds	r0, r0, r3
 80042d0:	f7fb ff18 	bl	8000104 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042d4:	0002      	movs	r2, r0
 80042d6:	3a10      	subs	r2, #16
 80042d8:	4b1e      	ldr	r3, [pc, #120]	; (8004354 <UART_SetConfig+0x3ac>)
 80042da:	429a      	cmp	r2, r3
 80042dc:	d832      	bhi.n	8004344 <UART_SetConfig+0x39c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042de:	b282      	uxth	r2, r0
 80042e0:	230f      	movs	r3, #15
 80042e2:	439a      	bics	r2, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042e4:	0840      	lsrs	r0, r0, #1
 80042e6:	3b08      	subs	r3, #8
 80042e8:	4003      	ands	r3, r0
 80042ea:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 80042ec:	6822      	ldr	r2, [r4, #0]
 80042ee:	60d3      	str	r3, [r2, #12]
 80042f0:	2000      	movs	r0, #0
 80042f2:	e7a4      	b.n	800423e <UART_SetConfig+0x296>
    switch (clocksource)
 80042f4:	2001      	movs	r0, #1
 80042f6:	e7a2      	b.n	800423e <UART_SetConfig+0x296>
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d0df      	beq.n	80042bc <UART_SetConfig+0x314>
 80042fc:	2001      	movs	r0, #1
 80042fe:	e79e      	b.n	800423e <UART_SetConfig+0x296>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004300:	f7fe ff72 	bl	80031e8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004304:	2800      	cmp	r0, #0
 8004306:	d1d9      	bne.n	80042bc <UART_SetConfig+0x314>
 8004308:	2000      	movs	r0, #0
 800430a:	e798      	b.n	800423e <UART_SetConfig+0x296>
        pclk = HAL_RCC_GetSysClockFreq();
 800430c:	f7fe fe44 	bl	8002f98 <HAL_RCC_GetSysClockFreq>
        break;
 8004310:	e7f8      	b.n	8004304 <UART_SetConfig+0x35c>
    switch (clocksource)
 8004312:	2001      	movs	r0, #1
 8004314:	e793      	b.n	800423e <UART_SetConfig+0x296>
 8004316:	2b08      	cmp	r3, #8
 8004318:	d102      	bne.n	8004320 <UART_SetConfig+0x378>
        pclk = (uint32_t) LSE_VALUE;
 800431a:	2080      	movs	r0, #128	; 0x80
 800431c:	0200      	lsls	r0, r0, #8
 800431e:	e6b7      	b.n	8004090 <UART_SetConfig+0xe8>
    switch (clocksource)
 8004320:	2001      	movs	r0, #1
 8004322:	e78c      	b.n	800423e <UART_SetConfig+0x296>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004324:	f7fe ff60 	bl	80031e8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004328:	2800      	cmp	r0, #0
 800432a:	d000      	beq.n	800432e <UART_SetConfig+0x386>
 800432c:	e6b0      	b.n	8004090 <UART_SetConfig+0xe8>
 800432e:	2000      	movs	r0, #0
 8004330:	e785      	b.n	800423e <UART_SetConfig+0x296>
        pclk = HAL_RCC_GetSysClockFreq();
 8004332:	f7fe fe31 	bl	8002f98 <HAL_RCC_GetSysClockFreq>
        break;
 8004336:	e7f7      	b.n	8004328 <UART_SetConfig+0x380>
        ret = HAL_ERROR;
 8004338:	2001      	movs	r0, #1
 800433a:	e780      	b.n	800423e <UART_SetConfig+0x296>
 800433c:	2001      	movs	r0, #1
 800433e:	e77e      	b.n	800423e <UART_SetConfig+0x296>
          ret = HAL_ERROR;
 8004340:	2001      	movs	r0, #1
 8004342:	e77c      	b.n	800423e <UART_SetConfig+0x296>
        ret = HAL_ERROR;
 8004344:	2001      	movs	r0, #1
 8004346:	e77a      	b.n	800423e <UART_SetConfig+0x296>
        ret = HAL_ERROR;
 8004348:	2001      	movs	r0, #1
 800434a:	e778      	b.n	800423e <UART_SetConfig+0x296>
 800434c:	00f42400 	.word	0x00f42400
 8004350:	08005fec 	.word	0x08005fec
 8004354:	0000ffef 	.word	0x0000ffef

08004358 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004358:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800435a:	07db      	lsls	r3, r3, #31
 800435c:	d506      	bpl.n	800436c <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800435e:	6802      	ldr	r2, [r0, #0]
 8004360:	6853      	ldr	r3, [r2, #4]
 8004362:	492c      	ldr	r1, [pc, #176]	; (8004414 <UART_AdvFeatureConfig+0xbc>)
 8004364:	400b      	ands	r3, r1
 8004366:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004368:	430b      	orrs	r3, r1
 800436a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800436c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800436e:	079b      	lsls	r3, r3, #30
 8004370:	d506      	bpl.n	8004380 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004372:	6802      	ldr	r2, [r0, #0]
 8004374:	6853      	ldr	r3, [r2, #4]
 8004376:	4928      	ldr	r1, [pc, #160]	; (8004418 <UART_AdvFeatureConfig+0xc0>)
 8004378:	400b      	ands	r3, r1
 800437a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800437c:	430b      	orrs	r3, r1
 800437e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004380:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004382:	075b      	lsls	r3, r3, #29
 8004384:	d506      	bpl.n	8004394 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004386:	6802      	ldr	r2, [r0, #0]
 8004388:	6853      	ldr	r3, [r2, #4]
 800438a:	4924      	ldr	r1, [pc, #144]	; (800441c <UART_AdvFeatureConfig+0xc4>)
 800438c:	400b      	ands	r3, r1
 800438e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004390:	430b      	orrs	r3, r1
 8004392:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004394:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004396:	071b      	lsls	r3, r3, #28
 8004398:	d506      	bpl.n	80043a8 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800439a:	6802      	ldr	r2, [r0, #0]
 800439c:	6853      	ldr	r3, [r2, #4]
 800439e:	4920      	ldr	r1, [pc, #128]	; (8004420 <UART_AdvFeatureConfig+0xc8>)
 80043a0:	400b      	ands	r3, r1
 80043a2:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80043a4:	430b      	orrs	r3, r1
 80043a6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80043aa:	06db      	lsls	r3, r3, #27
 80043ac:	d506      	bpl.n	80043bc <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043ae:	6802      	ldr	r2, [r0, #0]
 80043b0:	6893      	ldr	r3, [r2, #8]
 80043b2:	491c      	ldr	r1, [pc, #112]	; (8004424 <UART_AdvFeatureConfig+0xcc>)
 80043b4:	400b      	ands	r3, r1
 80043b6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80043b8:	430b      	orrs	r3, r1
 80043ba:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043bc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80043be:	069b      	lsls	r3, r3, #26
 80043c0:	d506      	bpl.n	80043d0 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043c2:	6802      	ldr	r2, [r0, #0]
 80043c4:	6893      	ldr	r3, [r2, #8]
 80043c6:	4918      	ldr	r1, [pc, #96]	; (8004428 <UART_AdvFeatureConfig+0xd0>)
 80043c8:	400b      	ands	r3, r1
 80043ca:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80043cc:	430b      	orrs	r3, r1
 80043ce:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80043d2:	065b      	lsls	r3, r3, #25
 80043d4:	d50b      	bpl.n	80043ee <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043d6:	6802      	ldr	r2, [r0, #0]
 80043d8:	6853      	ldr	r3, [r2, #4]
 80043da:	4914      	ldr	r1, [pc, #80]	; (800442c <UART_AdvFeatureConfig+0xd4>)
 80043dc:	400b      	ands	r3, r1
 80043de:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80043e0:	430b      	orrs	r3, r1
 80043e2:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80043e6:	2380      	movs	r3, #128	; 0x80
 80043e8:	035b      	lsls	r3, r3, #13
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d00a      	beq.n	8004404 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043ee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80043f0:	061b      	lsls	r3, r3, #24
 80043f2:	d506      	bpl.n	8004402 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043f4:	6802      	ldr	r2, [r0, #0]
 80043f6:	6853      	ldr	r3, [r2, #4]
 80043f8:	490d      	ldr	r1, [pc, #52]	; (8004430 <UART_AdvFeatureConfig+0xd8>)
 80043fa:	400b      	ands	r3, r1
 80043fc:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80043fe:	430b      	orrs	r3, r1
 8004400:	6053      	str	r3, [r2, #4]
}
 8004402:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004404:	6802      	ldr	r2, [r0, #0]
 8004406:	6853      	ldr	r3, [r2, #4]
 8004408:	490a      	ldr	r1, [pc, #40]	; (8004434 <UART_AdvFeatureConfig+0xdc>)
 800440a:	400b      	ands	r3, r1
 800440c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800440e:	430b      	orrs	r3, r1
 8004410:	6053      	str	r3, [r2, #4]
 8004412:	e7ec      	b.n	80043ee <UART_AdvFeatureConfig+0x96>
 8004414:	fffdffff 	.word	0xfffdffff
 8004418:	fffeffff 	.word	0xfffeffff
 800441c:	fffbffff 	.word	0xfffbffff
 8004420:	ffff7fff 	.word	0xffff7fff
 8004424:	ffffefff 	.word	0xffffefff
 8004428:	ffffdfff 	.word	0xffffdfff
 800442c:	ffefffff 	.word	0xffefffff
 8004430:	fff7ffff 	.word	0xfff7ffff
 8004434:	ff9fffff 	.word	0xff9fffff

08004438 <UART_WaitOnFlagUntilTimeout>:
{
 8004438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800443a:	46ce      	mov	lr, r9
 800443c:	4647      	mov	r7, r8
 800443e:	b580      	push	{r7, lr}
 8004440:	0006      	movs	r6, r0
 8004442:	000d      	movs	r5, r1
 8004444:	0017      	movs	r7, r2
 8004446:	4699      	mov	r9, r3
 8004448:	9b08      	ldr	r3, [sp, #32]
 800444a:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800444c:	6833      	ldr	r3, [r6, #0]
 800444e:	69dc      	ldr	r4, [r3, #28]
 8004450:	402c      	ands	r4, r5
 8004452:	1b64      	subs	r4, r4, r5
 8004454:	4263      	negs	r3, r4
 8004456:	415c      	adcs	r4, r3
 8004458:	42bc      	cmp	r4, r7
 800445a:	d157      	bne.n	800450c <UART_WaitOnFlagUntilTimeout+0xd4>
    if (Timeout != HAL_MAX_DELAY)
 800445c:	4643      	mov	r3, r8
 800445e:	3301      	adds	r3, #1
 8004460:	d0f4      	beq.n	800444c <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004462:	f7fd f881 	bl	8001568 <HAL_GetTick>
 8004466:	464b      	mov	r3, r9
 8004468:	1ac0      	subs	r0, r0, r3
 800446a:	4540      	cmp	r0, r8
 800446c:	d82e      	bhi.n	80044cc <UART_WaitOnFlagUntilTimeout+0x94>
 800446e:	4643      	mov	r3, r8
 8004470:	2b00      	cmp	r3, #0
 8004472:	d02b      	beq.n	80044cc <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004474:	6832      	ldr	r2, [r6, #0]
 8004476:	6813      	ldr	r3, [r2, #0]
 8004478:	075b      	lsls	r3, r3, #29
 800447a:	d5e7      	bpl.n	800444c <UART_WaitOnFlagUntilTimeout+0x14>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800447c:	69d3      	ldr	r3, [r2, #28]
 800447e:	051b      	lsls	r3, r3, #20
 8004480:	d5e4      	bpl.n	800444c <UART_WaitOnFlagUntilTimeout+0x14>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004482:	2380      	movs	r3, #128	; 0x80
 8004484:	011b      	lsls	r3, r3, #4
 8004486:	6213      	str	r3, [r2, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004488:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800448c:	2201      	movs	r2, #1
 800448e:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004492:	6831      	ldr	r1, [r6, #0]
 8004494:	680b      	ldr	r3, [r1, #0]
 8004496:	4c20      	ldr	r4, [pc, #128]	; (8004518 <UART_WaitOnFlagUntilTimeout+0xe0>)
 8004498:	4023      	ands	r3, r4
 800449a:	600b      	str	r3, [r1, #0]
 800449c:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044a0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044a4:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a8:	6831      	ldr	r1, [r6, #0]
 80044aa:	688b      	ldr	r3, [r1, #8]
 80044ac:	4393      	bics	r3, r2
 80044ae:	608b      	str	r3, [r1, #8]
 80044b0:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 80044b4:	2320      	movs	r3, #32
 80044b6:	3287      	adds	r2, #135	; 0x87
 80044b8:	50b3      	str	r3, [r6, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80044ba:	3204      	adds	r2, #4
 80044bc:	50b3      	str	r3, [r6, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044be:	3204      	adds	r2, #4
 80044c0:	50b3      	str	r3, [r6, r2]
          __HAL_UNLOCK(huart);
 80044c2:	3364      	adds	r3, #100	; 0x64
 80044c4:	2200      	movs	r2, #0
 80044c6:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 80044c8:	2003      	movs	r0, #3
 80044ca:	e020      	b.n	800450e <UART_WaitOnFlagUntilTimeout+0xd6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044cc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044d0:	2201      	movs	r2, #1
 80044d2:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80044d6:	6831      	ldr	r1, [r6, #0]
 80044d8:	680b      	ldr	r3, [r1, #0]
 80044da:	4c0f      	ldr	r4, [pc, #60]	; (8004518 <UART_WaitOnFlagUntilTimeout+0xe0>)
 80044dc:	4023      	ands	r3, r4
 80044de:	600b      	str	r3, [r1, #0]
 80044e0:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044e4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044e8:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ec:	6831      	ldr	r1, [r6, #0]
 80044ee:	688b      	ldr	r3, [r1, #8]
 80044f0:	4393      	bics	r3, r2
 80044f2:	608b      	str	r3, [r1, #8]
 80044f4:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 80044f8:	2320      	movs	r3, #32
 80044fa:	3287      	adds	r2, #135	; 0x87
 80044fc:	50b3      	str	r3, [r6, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80044fe:	3204      	adds	r2, #4
 8004500:	50b3      	str	r3, [r6, r2]
        __HAL_UNLOCK(huart);
 8004502:	3364      	adds	r3, #100	; 0x64
 8004504:	2200      	movs	r2, #0
 8004506:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 8004508:	2003      	movs	r0, #3
 800450a:	e000      	b.n	800450e <UART_WaitOnFlagUntilTimeout+0xd6>
  return HAL_OK;
 800450c:	2000      	movs	r0, #0
}
 800450e:	bcc0      	pop	{r6, r7}
 8004510:	46b9      	mov	r9, r7
 8004512:	46b0      	mov	r8, r6
 8004514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004516:	46c0      	nop			; (mov r8, r8)
 8004518:	fffffe5f 	.word	0xfffffe5f

0800451c <UART_CheckIdleState>:
{
 800451c:	b530      	push	{r4, r5, lr}
 800451e:	b083      	sub	sp, #12
 8004520:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004522:	2390      	movs	r3, #144	; 0x90
 8004524:	2200      	movs	r2, #0
 8004526:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8004528:	f7fd f81e 	bl	8001568 <HAL_GetTick>
 800452c:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	071b      	lsls	r3, r3, #28
 8004534:	d410      	bmi.n	8004558 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004536:	6823      	ldr	r3, [r4, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	075b      	lsls	r3, r3, #29
 800453c:	d419      	bmi.n	8004572 <UART_CheckIdleState+0x56>
  huart->gState = HAL_UART_STATE_READY;
 800453e:	2320      	movs	r3, #32
 8004540:	2288      	movs	r2, #136	; 0x88
 8004542:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004544:	3204      	adds	r2, #4
 8004546:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004548:	2300      	movs	r3, #0
 800454a:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800454c:	6723      	str	r3, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 800454e:	3a08      	subs	r2, #8
 8004550:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8004552:	2000      	movs	r0, #0
}
 8004554:	b003      	add	sp, #12
 8004556:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004558:	2180      	movs	r1, #128	; 0x80
 800455a:	4b0c      	ldr	r3, [pc, #48]	; (800458c <UART_CheckIdleState+0x70>)
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	0003      	movs	r3, r0
 8004560:	2200      	movs	r2, #0
 8004562:	0389      	lsls	r1, r1, #14
 8004564:	0020      	movs	r0, r4
 8004566:	f7ff ff67 	bl	8004438 <UART_WaitOnFlagUntilTimeout>
 800456a:	2800      	cmp	r0, #0
 800456c:	d0e3      	beq.n	8004536 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 800456e:	2003      	movs	r0, #3
 8004570:	e7f0      	b.n	8004554 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004572:	2180      	movs	r1, #128	; 0x80
 8004574:	4b05      	ldr	r3, [pc, #20]	; (800458c <UART_CheckIdleState+0x70>)
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	002b      	movs	r3, r5
 800457a:	2200      	movs	r2, #0
 800457c:	03c9      	lsls	r1, r1, #15
 800457e:	0020      	movs	r0, r4
 8004580:	f7ff ff5a 	bl	8004438 <UART_WaitOnFlagUntilTimeout>
 8004584:	2800      	cmp	r0, #0
 8004586:	d0da      	beq.n	800453e <UART_CheckIdleState+0x22>
      return HAL_TIMEOUT;
 8004588:	2003      	movs	r0, #3
 800458a:	e7e3      	b.n	8004554 <UART_CheckIdleState+0x38>
 800458c:	01ffffff 	.word	0x01ffffff

08004590 <HAL_UART_Init>:
{
 8004590:	b510      	push	{r4, lr}
 8004592:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8004594:	d030      	beq.n	80045f8 <HAL_UART_Init+0x68>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004596:	2388      	movs	r3, #136	; 0x88
 8004598:	58c3      	ldr	r3, [r0, r3]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d022      	beq.n	80045e4 <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 800459e:	2388      	movs	r3, #136	; 0x88
 80045a0:	2224      	movs	r2, #36	; 0x24
 80045a2:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 80045a4:	6822      	ldr	r2, [r4, #0]
 80045a6:	6813      	ldr	r3, [r2, #0]
 80045a8:	2101      	movs	r1, #1
 80045aa:	438b      	bics	r3, r1
 80045ac:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045ae:	0020      	movs	r0, r4
 80045b0:	f7ff fcfa 	bl	8003fa8 <UART_SetConfig>
 80045b4:	2801      	cmp	r0, #1
 80045b6:	d014      	beq.n	80045e2 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d118      	bne.n	80045f0 <HAL_UART_Init+0x60>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045be:	6822      	ldr	r2, [r4, #0]
 80045c0:	6853      	ldr	r3, [r2, #4]
 80045c2:	490e      	ldr	r1, [pc, #56]	; (80045fc <HAL_UART_Init+0x6c>)
 80045c4:	400b      	ands	r3, r1
 80045c6:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045c8:	6822      	ldr	r2, [r4, #0]
 80045ca:	6893      	ldr	r3, [r2, #8]
 80045cc:	212a      	movs	r1, #42	; 0x2a
 80045ce:	438b      	bics	r3, r1
 80045d0:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80045d2:	6822      	ldr	r2, [r4, #0]
 80045d4:	6813      	ldr	r3, [r2, #0]
 80045d6:	3929      	subs	r1, #41	; 0x29
 80045d8:	430b      	orrs	r3, r1
 80045da:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80045dc:	0020      	movs	r0, r4
 80045de:	f7ff ff9d 	bl	800451c <UART_CheckIdleState>
}
 80045e2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80045e4:	3384      	adds	r3, #132	; 0x84
 80045e6:	2200      	movs	r2, #0
 80045e8:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 80045ea:	f7fc fd89 	bl	8001100 <HAL_UART_MspInit>
 80045ee:	e7d6      	b.n	800459e <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 80045f0:	0020      	movs	r0, r4
 80045f2:	f7ff feb1 	bl	8004358 <UART_AdvFeatureConfig>
 80045f6:	e7e2      	b.n	80045be <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 80045f8:	2001      	movs	r0, #1
 80045fa:	e7f2      	b.n	80045e2 <HAL_UART_Init+0x52>
 80045fc:	ffffb7ff 	.word	0xffffb7ff

08004600 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004602:	0004      	movs	r4, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004604:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8004606:	2b00      	cmp	r3, #0
 8004608:	d105      	bne.n	8004616 <UARTEx_SetNbDataToProcess+0x16>
  {
    huart->NbTxDataToProcess = 1U;
 800460a:	3301      	adds	r3, #1
 800460c:	226a      	movs	r2, #106	; 0x6a
 800460e:	5283      	strh	r3, [r0, r2]
    huart->NbRxDataToProcess = 1U;
 8004610:	3a02      	subs	r2, #2
 8004612:	5283      	strh	r3, [r0, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004616:	6802      	ldr	r2, [r0, #0]
 8004618:	6895      	ldr	r5, [r2, #8]
 800461a:	0e6d      	lsrs	r5, r5, #25
 800461c:	2307      	movs	r3, #7
 800461e:	401d      	ands	r5, r3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004620:	6892      	ldr	r2, [r2, #8]
 8004622:	0f52      	lsrs	r2, r2, #29
 8004624:	4013      	ands	r3, r2
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004626:	4f08      	ldr	r7, [pc, #32]	; (8004648 <UARTEx_SetNbDataToProcess+0x48>)
 8004628:	5cf8      	ldrb	r0, [r7, r3]
 800462a:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800462c:	4e07      	ldr	r6, [pc, #28]	; (800464c <UARTEx_SetNbDataToProcess+0x4c>)
 800462e:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004630:	f7fb fdf2 	bl	8000218 <__divsi3>
 8004634:	236a      	movs	r3, #106	; 0x6a
 8004636:	52e0      	strh	r0, [r4, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004638:	5d78      	ldrb	r0, [r7, r5]
 800463a:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 800463c:	5d71      	ldrb	r1, [r6, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800463e:	f7fb fdeb 	bl	8000218 <__divsi3>
 8004642:	2368      	movs	r3, #104	; 0x68
 8004644:	52e0      	strh	r0, [r4, r3]
}
 8004646:	e7e5      	b.n	8004614 <UARTEx_SetNbDataToProcess+0x14>
 8004648:	0800600c 	.word	0x0800600c
 800464c:	08006004 	.word	0x08006004

08004650 <HAL_UARTEx_WakeupCallback>:
}
 8004650:	4770      	bx	lr

08004652 <HAL_UARTEx_RxFifoFullCallback>:
}
 8004652:	4770      	bx	lr

08004654 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8004654:	4770      	bx	lr
	...

08004658 <HAL_UARTEx_DisableFifoMode>:
{
 8004658:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800465a:	2384      	movs	r3, #132	; 0x84
 800465c:	5cc3      	ldrb	r3, [r0, r3]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d015      	beq.n	800468e <HAL_UARTEx_DisableFifoMode+0x36>
 8004662:	2484      	movs	r4, #132	; 0x84
 8004664:	2601      	movs	r6, #1
 8004666:	5506      	strb	r6, [r0, r4]
  huart->gState = HAL_UART_STATE_BUSY;
 8004668:	2588      	movs	r5, #136	; 0x88
 800466a:	2324      	movs	r3, #36	; 0x24
 800466c:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800466e:	6802      	ldr	r2, [r0, #0]
 8004670:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8004672:	6811      	ldr	r1, [r2, #0]
 8004674:	43b1      	bics	r1, r6
 8004676:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004678:	4a06      	ldr	r2, [pc, #24]	; (8004694 <HAL_UARTEx_DisableFifoMode+0x3c>)
 800467a:	4013      	ands	r3, r2
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800467c:	2200      	movs	r2, #0
 800467e:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004680:	6801      	ldr	r1, [r0, #0]
 8004682:	600b      	str	r3, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004684:	2320      	movs	r3, #32
 8004686:	5143      	str	r3, [r0, r5]
  __HAL_UNLOCK(huart);
 8004688:	5502      	strb	r2, [r0, r4]
  return HAL_OK;
 800468a:	2000      	movs	r0, #0
}
 800468c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 800468e:	2002      	movs	r0, #2
 8004690:	e7fc      	b.n	800468c <HAL_UARTEx_DisableFifoMode+0x34>
 8004692:	46c0      	nop			; (mov r8, r8)
 8004694:	dfffffff 	.word	0xdfffffff

08004698 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8004698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469a:	0004      	movs	r4, r0
 800469c:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 800469e:	2384      	movs	r3, #132	; 0x84
 80046a0:	5cc3      	ldrb	r3, [r0, r3]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d01b      	beq.n	80046de <HAL_UARTEx_SetTxFifoThreshold+0x46>
 80046a6:	2584      	movs	r5, #132	; 0x84
 80046a8:	2001      	movs	r0, #1
 80046aa:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 80046ac:	2688      	movs	r6, #136	; 0x88
 80046ae:	2324      	movs	r3, #36	; 0x24
 80046b0:	51a3      	str	r3, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046b2:	6823      	ldr	r3, [r4, #0]
 80046b4:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80046b6:	6819      	ldr	r1, [r3, #0]
 80046b8:	4381      	bics	r1, r0
 80046ba:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80046bc:	6820      	ldr	r0, [r4, #0]
 80046be:	6883      	ldr	r3, [r0, #8]
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	08d9      	lsrs	r1, r3, #3
 80046c4:	4311      	orrs	r1, r2
 80046c6:	6081      	str	r1, [r0, #8]
  UARTEx_SetNbDataToProcess(huart);
 80046c8:	0020      	movs	r0, r4
 80046ca:	f7ff ff99 	bl	8004600 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046ce:	6823      	ldr	r3, [r4, #0]
 80046d0:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80046d2:	2320      	movs	r3, #32
 80046d4:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 80046d6:	2300      	movs	r3, #0
 80046d8:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80046da:	2000      	movs	r0, #0
}
 80046dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 80046de:	2002      	movs	r0, #2
 80046e0:	e7fc      	b.n	80046dc <HAL_UARTEx_SetTxFifoThreshold+0x44>
	...

080046e4 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80046e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e6:	0004      	movs	r4, r0
 80046e8:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 80046ea:	2284      	movs	r2, #132	; 0x84
 80046ec:	5c82      	ldrb	r2, [r0, r2]
 80046ee:	2a01      	cmp	r2, #1
 80046f0:	d01b      	beq.n	800472a <HAL_UARTEx_SetRxFifoThreshold+0x46>
 80046f2:	2584      	movs	r5, #132	; 0x84
 80046f4:	2001      	movs	r0, #1
 80046f6:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 80046f8:	2688      	movs	r6, #136	; 0x88
 80046fa:	2224      	movs	r2, #36	; 0x24
 80046fc:	51a2      	str	r2, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046fe:	6822      	ldr	r2, [r4, #0]
 8004700:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8004702:	6811      	ldr	r1, [r2, #0]
 8004704:	4381      	bics	r1, r0
 8004706:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004708:	6822      	ldr	r2, [r4, #0]
 800470a:	6891      	ldr	r1, [r2, #8]
 800470c:	4808      	ldr	r0, [pc, #32]	; (8004730 <HAL_UARTEx_SetRxFifoThreshold+0x4c>)
 800470e:	4001      	ands	r1, r0
 8004710:	4319      	orrs	r1, r3
 8004712:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004714:	0020      	movs	r0, r4
 8004716:	f7ff ff73 	bl	8004600 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800471a:	6823      	ldr	r3, [r4, #0]
 800471c:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800471e:	2320      	movs	r3, #32
 8004720:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 8004722:	2300      	movs	r3, #0
 8004724:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8004726:	2000      	movs	r0, #0
}
 8004728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 800472a:	2002      	movs	r0, #2
 800472c:	e7fc      	b.n	8004728 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 800472e:	46c0      	nop			; (mov r8, r8)
 8004730:	f1ffffff 	.word	0xf1ffffff

08004734 <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004734:	2300      	movs	r3, #0
 8004736:	6443      	str	r3, [r0, #68]	; 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 8004738:	4b01      	ldr	r3, [pc, #4]	; (8004740 <USB_EnableGlobalInt+0xc>)
 800473a:	6403      	str	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 800473c:	2000      	movs	r0, #0
 800473e:	4770      	bx	lr
 8004740:	0000bf80 	.word	0x0000bf80

08004744 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8004744:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004746:	4a02      	ldr	r2, [pc, #8]	; (8004750 <USB_DisableGlobalInt+0xc>)
 8004748:	4013      	ands	r3, r2
 800474a:	6403      	str	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 800474c:	2000      	movs	r0, #0
 800474e:	4770      	bx	lr
 8004750:	ffff407f 	.word	0xffff407f

08004754 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
  if (mode == USB_DEVICE_MODE)
 8004754:	2900      	cmp	r1, #0
 8004756:	d105      	bne.n	8004764 <USB_SetCurrentMode+0x10>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8004758:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800475a:	005b      	lsls	r3, r3, #1
 800475c:	085b      	lsrs	r3, r3, #1
 800475e:	6403      	str	r3, [r0, #64]	; 0x40
  {
    USBx->CNTR |= USB_CNTR_HOST;
  }

  return HAL_OK;
}
 8004760:	2000      	movs	r0, #0
 8004762:	4770      	bx	lr
    USBx->CNTR |= USB_CNTR_HOST;
 8004764:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004766:	2380      	movs	r3, #128	; 0x80
 8004768:	061b      	lsls	r3, r3, #24
 800476a:	4313      	orrs	r3, r2
 800476c:	6403      	str	r3, [r0, #64]	; 0x40
 800476e:	e7f7      	b.n	8004760 <USB_SetCurrentMode+0xc>

08004770 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8004770:	b084      	sub	sp, #16
 8004772:	b510      	push	{r4, lr}
 8004774:	0004      	movs	r4, r0
 8004776:	9103      	str	r1, [sp, #12]
 8004778:	9204      	str	r2, [sp, #16]
 800477a:	9305      	str	r3, [sp, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);
  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800477c:	2201      	movs	r2, #1
 800477e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8004780:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004782:	4393      	bics	r3, r2
 8004784:	6403      	str	r3, [r0, #64]	; 0x40

  /* Set the Device Mode */
  (void)USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8004786:	2100      	movs	r1, #0
 8004788:	f7ff ffe4 	bl	8004754 <USB_SetCurrentMode>

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800478c:	2300      	movs	r3, #0
 800478e:	6463      	str	r3, [r4, #68]	; 0x44

  return HAL_OK;
}
 8004790:	2000      	movs	r0, #0
 8004792:	bc10      	pop	{r4}
 8004794:	bc08      	pop	{r3}
 8004796:	b004      	add	sp, #16
 8004798:	4718      	bx	r3
	...

0800479c <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 800479c:	784b      	ldrb	r3, [r1, #1]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00c      	beq.n	80047bc <USB_EPSetStall+0x20>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80047a2:	780b      	ldrb	r3, [r1, #0]
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	18c0      	adds	r0, r0, r3
 80047a8:	6803      	ldr	r3, [r0, #0]
 80047aa:	4a0b      	ldr	r2, [pc, #44]	; (80047d8 <USB_EPSetStall+0x3c>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	2210      	movs	r2, #16
 80047b0:	4053      	eors	r3, r2
 80047b2:	4a0a      	ldr	r2, [pc, #40]	; (80047dc <USB_EPSetStall+0x40>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	6003      	str	r3, [r0, #0]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 80047b8:	2000      	movs	r0, #0
 80047ba:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80047bc:	780b      	ldrb	r3, [r1, #0]
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	18c0      	adds	r0, r0, r3
 80047c2:	6803      	ldr	r3, [r0, #0]
 80047c4:	4a06      	ldr	r2, [pc, #24]	; (80047e0 <USB_EPSetStall+0x44>)
 80047c6:	4013      	ands	r3, r2
 80047c8:	2280      	movs	r2, #128	; 0x80
 80047ca:	0152      	lsls	r2, r2, #5
 80047cc:	405a      	eors	r2, r3
 80047ce:	4b03      	ldr	r3, [pc, #12]	; (80047dc <USB_EPSetStall+0x40>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	6003      	str	r3, [r0, #0]
 80047d4:	e7f0      	b.n	80047b8 <USB_EPSetStall+0x1c>
 80047d6:	46c0      	nop			; (mov r8, r8)
 80047d8:	07ff8fbf 	.word	0x07ff8fbf
 80047dc:	00008080 	.word	0x00008080
 80047e0:	07ffbf8f 	.word	0x07ffbf8f

080047e4 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 80047e4:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80047e6:	2380      	movs	r3, #128	; 0x80
 80047e8:	021b      	lsls	r3, r3, #8
 80047ea:	4313      	orrs	r3, r2
 80047ec:	6583      	str	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 80047ee:	2000      	movs	r0, #0
 80047f0:	4770      	bx	lr
	...

080047f4 <USB_DevDisconnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 80047f4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80047f6:	4a02      	ldr	r2, [pc, #8]	; (8004800 <USB_DevDisconnect+0xc>)
 80047f8:	4013      	ands	r3, r2
 80047fa:	6583      	str	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 80047fc:	2000      	movs	r0, #0
 80047fe:	4770      	bx	lr
 8004800:	ffff7fff 	.word	0xffff7fff

08004804 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004804:	b570      	push	{r4, r5, r6, lr}
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8004806:	1cdc      	adds	r4, r3, #3
 8004808:	08a4      	lsrs	r4, r4, #2
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800480a:	2003      	movs	r0, #3
 800480c:	0005      	movs	r5, r0
 800480e:	401d      	ands	r5, r3
  uint8_t *pBuf = pbUsrBuf;

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 8004810:	4218      	tst	r0, r3
 8004812:	d000      	beq.n	8004816 <USB_WritePMA+0x12>
  {
    NbWords--;
 8004814:	3c01      	subs	r4, #1
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8004816:	4b11      	ldr	r3, [pc, #68]	; (800485c <USB_WritePMA+0x58>)
 8004818:	469c      	mov	ip, r3
 800481a:	4462      	add	r2, ip

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800481c:	e00c      	b.n	8004838 <USB_WritePMA+0x34>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800481e:	7808      	ldrb	r0, [r1, #0]
 8004820:	784b      	ldrb	r3, [r1, #1]
 8004822:	021b      	lsls	r3, r3, #8
 8004824:	4303      	orrs	r3, r0
 8004826:	7888      	ldrb	r0, [r1, #2]
 8004828:	0400      	lsls	r0, r0, #16
 800482a:	4318      	orrs	r0, r3
 800482c:	78cb      	ldrb	r3, [r1, #3]
 800482e:	061b      	lsls	r3, r3, #24
 8004830:	4303      	orrs	r3, r0
 8004832:	c208      	stmia	r2!, {r3}
    pdwVal++;
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
    pBuf++;
    pBuf++;
    pBuf++;
 8004834:	3104      	adds	r1, #4
  for (count = NbWords; count != 0U; count--)
 8004836:	3c01      	subs	r4, #1
 8004838:	2c00      	cmp	r4, #0
 800483a:	d1f0      	bne.n	800481e <USB_WritePMA+0x1a>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800483c:	2d00      	cmp	r5, #0
 800483e:	d00b      	beq.n	8004858 <USB_WritePMA+0x54>
 8004840:	0020      	movs	r0, r4
  {
    WrVal = 0U;

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 8004842:	780b      	ldrb	r3, [r1, #0]
 8004844:	00c6      	lsls	r6, r0, #3
 8004846:	40b3      	lsls	r3, r6
 8004848:	431c      	orrs	r4, r3
      count++;
 800484a:	3001      	adds	r0, #1
      pBuf++;
 800484c:	3101      	adds	r1, #1
      remaining_bytes--;
 800484e:	3d01      	subs	r5, #1
 8004850:	b2ad      	uxth	r5, r5
    } while (remaining_bytes != 0U);
 8004852:	2d00      	cmp	r5, #0
 8004854:	d1f5      	bne.n	8004842 <USB_WritePMA+0x3e>

    *pdwVal = WrVal;
 8004856:	6014      	str	r4, [r2, #0]
  }
}
 8004858:	bd70      	pop	{r4, r5, r6, pc}
 800485a:	46c0      	nop			; (mov r8, r8)
 800485c:	40009800 	.word	0x40009800

08004860 <USB_EPStartXfer>:
{
 8004860:	b570      	push	{r4, r5, r6, lr}
 8004862:	0005      	movs	r5, r0
 8004864:	000c      	movs	r4, r1
  if (ep->is_in == 1U)
 8004866:	784b      	ldrb	r3, [r1, #1]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d034      	beq.n	80048d6 <USB_EPStartXfer+0x76>
    if (ep->doublebuffer == 0U)
 800486c:	7a8a      	ldrb	r2, [r1, #10]
 800486e:	2a00      	cmp	r2, #0
 8004870:	d000      	beq.n	8004874 <USB_EPStartXfer+0x14>
 8004872:	e300      	b.n	8004e76 <USB_EPStartXfer+0x616>
      if (ep->xfer_len > ep->maxpacket)
 8004874:	698b      	ldr	r3, [r1, #24]
 8004876:	690a      	ldr	r2, [r1, #16]
 8004878:	4293      	cmp	r3, r2
 800487a:	d800      	bhi.n	800487e <USB_EPStartXfer+0x1e>
 800487c:	e2d5      	b.n	8004e2a <USB_EPStartXfer+0x5ca>
        ep->xfer_len -= len;
 800487e:	1a9b      	subs	r3, r3, r2
 8004880:	618b      	str	r3, [r1, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004882:	7823      	ldrb	r3, [r4, #0]
 8004884:	00db      	lsls	r3, r3, #3
 8004886:	49cb      	ldr	r1, [pc, #812]	; (8004bb4 <USB_EPStartXfer+0x354>)
 8004888:	468c      	mov	ip, r1
 800488a:	4463      	add	r3, ip
 800488c:	6859      	ldr	r1, [r3, #4]
 800488e:	0409      	lsls	r1, r1, #16
 8004890:	0c09      	lsrs	r1, r1, #16
 8004892:	6059      	str	r1, [r3, #4]
 8004894:	2a3e      	cmp	r2, #62	; 0x3e
 8004896:	d800      	bhi.n	800489a <USB_EPStartXfer+0x3a>
 8004898:	e2cb      	b.n	8004e32 <USB_EPStartXfer+0x5d2>
 800489a:	0951      	lsrs	r1, r2, #5
 800489c:	06d2      	lsls	r2, r2, #27
 800489e:	d100      	bne.n	80048a2 <USB_EPStartXfer+0x42>
 80048a0:	3901      	subs	r1, #1
 80048a2:	7823      	ldrb	r3, [r4, #0]
 80048a4:	00db      	lsls	r3, r3, #3
 80048a6:	4ac3      	ldr	r2, [pc, #780]	; (8004bb4 <USB_EPStartXfer+0x354>)
 80048a8:	4694      	mov	ip, r2
 80048aa:	4463      	add	r3, ip
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	0689      	lsls	r1, r1, #26
 80048b0:	4311      	orrs	r1, r2
 80048b2:	2280      	movs	r2, #128	; 0x80
 80048b4:	0612      	lsls	r2, r2, #24
 80048b6:	430a      	orrs	r2, r1
 80048b8:	605a      	str	r2, [r3, #4]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048ba:	7823      	ldrb	r3, [r4, #0]
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	18ed      	adds	r5, r5, r3
 80048c0:	682b      	ldr	r3, [r5, #0]
 80048c2:	4abd      	ldr	r2, [pc, #756]	; (8004bb8 <USB_EPStartXfer+0x358>)
 80048c4:	4013      	ands	r3, r2
 80048c6:	22c0      	movs	r2, #192	; 0xc0
 80048c8:	0192      	lsls	r2, r2, #6
 80048ca:	405a      	eors	r2, r3
 80048cc:	4bbb      	ldr	r3, [pc, #748]	; (8004bbc <USB_EPStartXfer+0x35c>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	602b      	str	r3, [r5, #0]
  return HAL_OK;
 80048d2:	2000      	movs	r0, #0
}
 80048d4:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len > ep->maxpacket)
 80048d6:	698e      	ldr	r6, [r1, #24]
 80048d8:	690a      	ldr	r2, [r1, #16]
 80048da:	4296      	cmp	r6, r2
 80048dc:	d900      	bls.n	80048e0 <USB_EPStartXfer+0x80>
      len = ep->maxpacket;
 80048de:	0016      	movs	r6, r2
    if (ep->doublebuffer == 0U)
 80048e0:	7aa1      	ldrb	r1, [r4, #10]
 80048e2:	2900      	cmp	r1, #0
 80048e4:	d02b      	beq.n	800493e <USB_EPStartXfer+0xde>
      if (ep->type == EP_TYPE_BULK)
 80048e6:	78e1      	ldrb	r1, [r4, #3]
 80048e8:	2902      	cmp	r1, #2
 80048ea:	d04b      	beq.n	8004984 <USB_EPStartXfer+0x124>
        ep->xfer_len_db -= len;
 80048ec:	6a22      	ldr	r2, [r4, #32]
 80048ee:	1b92      	subs	r2, r2, r6
 80048f0:	6222      	str	r2, [r4, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80048f2:	7822      	ldrb	r2, [r4, #0]
 80048f4:	0091      	lsls	r1, r2, #2
 80048f6:	1869      	adds	r1, r5, r1
 80048f8:	6809      	ldr	r1, [r1, #0]
 80048fa:	0649      	lsls	r1, r1, #25
 80048fc:	d400      	bmi.n	8004900 <USB_EPStartXfer+0xa0>
 80048fe:	e23f      	b.n	8004d80 <USB_EPStartXfer+0x520>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004900:	2b00      	cmp	r3, #0
 8004902:	d000      	beq.n	8004906 <USB_EPStartXfer+0xa6>
 8004904:	e226      	b.n	8004d54 <USB_EPStartXfer+0x4f4>
 8004906:	00d2      	lsls	r2, r2, #3
 8004908:	4baa      	ldr	r3, [pc, #680]	; (8004bb4 <USB_EPStartXfer+0x354>)
 800490a:	469c      	mov	ip, r3
 800490c:	4462      	add	r2, ip
 800490e:	6853      	ldr	r3, [r2, #4]
 8004910:	041b      	lsls	r3, r3, #16
 8004912:	0c1b      	lsrs	r3, r3, #16
 8004914:	6053      	str	r3, [r2, #4]
 8004916:	2e3e      	cmp	r6, #62	; 0x3e
 8004918:	d800      	bhi.n	800491c <USB_EPStartXfer+0xbc>
 800491a:	e1f9      	b.n	8004d10 <USB_EPStartXfer+0x4b0>
 800491c:	0972      	lsrs	r2, r6, #5
 800491e:	06f3      	lsls	r3, r6, #27
 8004920:	d100      	bne.n	8004924 <USB_EPStartXfer+0xc4>
 8004922:	3a01      	subs	r2, #1
 8004924:	7823      	ldrb	r3, [r4, #0]
 8004926:	00db      	lsls	r3, r3, #3
 8004928:	49a2      	ldr	r1, [pc, #648]	; (8004bb4 <USB_EPStartXfer+0x354>)
 800492a:	468c      	mov	ip, r1
 800492c:	4463      	add	r3, ip
 800492e:	6859      	ldr	r1, [r3, #4]
 8004930:	0692      	lsls	r2, r2, #26
 8004932:	4311      	orrs	r1, r2
 8004934:	2280      	movs	r2, #128	; 0x80
 8004936:	0612      	lsls	r2, r2, #24
 8004938:	430a      	orrs	r2, r1
 800493a:	605a      	str	r2, [r3, #4]
 800493c:	e219      	b.n	8004d72 <USB_EPStartXfer+0x512>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800493e:	b2b3      	uxth	r3, r6
 8004940:	88a2      	ldrh	r2, [r4, #4]
 8004942:	6961      	ldr	r1, [r4, #20]
 8004944:	0028      	movs	r0, r5
 8004946:	f7ff ff5d 	bl	8004804 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800494a:	7823      	ldrb	r3, [r4, #0]
 800494c:	00db      	lsls	r3, r3, #3
 800494e:	4a99      	ldr	r2, [pc, #612]	; (8004bb4 <USB_EPStartXfer+0x354>)
 8004950:	4694      	mov	ip, r2
 8004952:	4463      	add	r3, ip
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	0412      	lsls	r2, r2, #16
 8004958:	0c12      	lsrs	r2, r2, #16
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	7822      	ldrb	r2, [r4, #0]
 800495e:	00d2      	lsls	r2, r2, #3
 8004960:	4462      	add	r2, ip
 8004962:	6811      	ldr	r1, [r2, #0]
 8004964:	0436      	lsls	r6, r6, #16
 8004966:	430e      	orrs	r6, r1
 8004968:	6016      	str	r6, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800496a:	7823      	ldrb	r3, [r4, #0]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	18eb      	adds	r3, r5, r3
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	4993      	ldr	r1, [pc, #588]	; (8004bc0 <USB_EPStartXfer+0x360>)
 8004974:	400a      	ands	r2, r1
 8004976:	2130      	movs	r1, #48	; 0x30
 8004978:	404a      	eors	r2, r1
 800497a:	4990      	ldr	r1, [pc, #576]	; (8004bbc <USB_EPStartXfer+0x35c>)
 800497c:	430a      	orrs	r2, r1
 800497e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004980:	2000      	movs	r0, #0
 8004982:	e7a7      	b.n	80048d4 <USB_EPStartXfer+0x74>
        if (ep->xfer_len_db > ep->maxpacket)
 8004984:	6a23      	ldr	r3, [r4, #32]
 8004986:	429a      	cmp	r2, r3
 8004988:	d300      	bcc.n	800498c <USB_EPStartXfer+0x12c>
 800498a:	e1a1      	b.n	8004cd0 <USB_EPStartXfer+0x470>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800498c:	7823      	ldrb	r3, [r4, #0]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	18eb      	adds	r3, r5, r3
 8004992:	6819      	ldr	r1, [r3, #0]
 8004994:	4a8b      	ldr	r2, [pc, #556]	; (8004bc4 <USB_EPStartXfer+0x364>)
 8004996:	4011      	ands	r1, r2
 8004998:	4a8b      	ldr	r2, [pc, #556]	; (8004bc8 <USB_EPStartXfer+0x368>)
 800499a:	430a      	orrs	r2, r1
 800499c:	601a      	str	r2, [r3, #0]
          ep->xfer_len_db -= len;
 800499e:	6a23      	ldr	r3, [r4, #32]
 80049a0:	1b9b      	subs	r3, r3, r6
 80049a2:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80049a4:	7823      	ldrb	r3, [r4, #0]
 80049a6:	009a      	lsls	r2, r3, #2
 80049a8:	18aa      	adds	r2, r5, r2
 80049aa:	6812      	ldr	r2, [r2, #0]
 80049ac:	0652      	lsls	r2, r2, #25
 80049ae:	d400      	bmi.n	80049b2 <USB_EPStartXfer+0x152>
 80049b0:	e0bf      	b.n	8004b32 <USB_EPStartXfer+0x2d2>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80049b2:	7862      	ldrb	r2, [r4, #1]
 80049b4:	2a00      	cmp	r2, #0
 80049b6:	d13c      	bne.n	8004a32 <USB_EPStartXfer+0x1d2>
 80049b8:	00db      	lsls	r3, r3, #3
 80049ba:	4a7e      	ldr	r2, [pc, #504]	; (8004bb4 <USB_EPStartXfer+0x354>)
 80049bc:	4694      	mov	ip, r2
 80049be:	4463      	add	r3, ip
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	0412      	lsls	r2, r2, #16
 80049c4:	0c12      	lsrs	r2, r2, #16
 80049c6:	605a      	str	r2, [r3, #4]
 80049c8:	2e3e      	cmp	r6, #62	; 0x3e
 80049ca:	d910      	bls.n	80049ee <USB_EPStartXfer+0x18e>
 80049cc:	0972      	lsrs	r2, r6, #5
 80049ce:	06f3      	lsls	r3, r6, #27
 80049d0:	d100      	bne.n	80049d4 <USB_EPStartXfer+0x174>
 80049d2:	3a01      	subs	r2, #1
 80049d4:	7823      	ldrb	r3, [r4, #0]
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	4976      	ldr	r1, [pc, #472]	; (8004bb4 <USB_EPStartXfer+0x354>)
 80049da:	468c      	mov	ip, r1
 80049dc:	4463      	add	r3, ip
 80049de:	6859      	ldr	r1, [r3, #4]
 80049e0:	0692      	lsls	r2, r2, #26
 80049e2:	4311      	orrs	r1, r2
 80049e4:	2280      	movs	r2, #128	; 0x80
 80049e6:	0612      	lsls	r2, r2, #24
 80049e8:	430a      	orrs	r2, r1
 80049ea:	605a      	str	r2, [r3, #4]
 80049ec:	e023      	b.n	8004a36 <USB_EPStartXfer+0x1d6>
 80049ee:	2e00      	cmp	r6, #0
 80049f0:	d111      	bne.n	8004a16 <USB_EPStartXfer+0x1b6>
 80049f2:	7823      	ldrb	r3, [r4, #0]
 80049f4:	00db      	lsls	r3, r3, #3
 80049f6:	4a6f      	ldr	r2, [pc, #444]	; (8004bb4 <USB_EPStartXfer+0x354>)
 80049f8:	4694      	mov	ip, r2
 80049fa:	4463      	add	r3, ip
 80049fc:	685a      	ldr	r2, [r3, #4]
 80049fe:	4973      	ldr	r1, [pc, #460]	; (8004bcc <USB_EPStartXfer+0x36c>)
 8004a00:	400a      	ands	r2, r1
 8004a02:	605a      	str	r2, [r3, #4]
 8004a04:	7823      	ldrb	r3, [r4, #0]
 8004a06:	00db      	lsls	r3, r3, #3
 8004a08:	4463      	add	r3, ip
 8004a0a:	6859      	ldr	r1, [r3, #4]
 8004a0c:	2280      	movs	r2, #128	; 0x80
 8004a0e:	0612      	lsls	r2, r2, #24
 8004a10:	430a      	orrs	r2, r1
 8004a12:	605a      	str	r2, [r3, #4]
 8004a14:	e00f      	b.n	8004a36 <USB_EPStartXfer+0x1d6>
 8004a16:	0872      	lsrs	r2, r6, #1
 8004a18:	07f3      	lsls	r3, r6, #31
 8004a1a:	d500      	bpl.n	8004a1e <USB_EPStartXfer+0x1be>
 8004a1c:	3201      	adds	r2, #1
 8004a1e:	7823      	ldrb	r3, [r4, #0]
 8004a20:	00db      	lsls	r3, r3, #3
 8004a22:	4964      	ldr	r1, [pc, #400]	; (8004bb4 <USB_EPStartXfer+0x354>)
 8004a24:	468c      	mov	ip, r1
 8004a26:	4463      	add	r3, ip
 8004a28:	6859      	ldr	r1, [r3, #4]
 8004a2a:	0692      	lsls	r2, r2, #26
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	605a      	str	r2, [r3, #4]
 8004a30:	e001      	b.n	8004a36 <USB_EPStartXfer+0x1d6>
 8004a32:	2a01      	cmp	r2, #1
 8004a34:	d02d      	beq.n	8004a92 <USB_EPStartXfer+0x232>
            pmabuffer = ep->pmaaddr1;
 8004a36:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a38:	b2b3      	uxth	r3, r6
 8004a3a:	6961      	ldr	r1, [r4, #20]
 8004a3c:	0028      	movs	r0, r5
 8004a3e:	f7ff fee1 	bl	8004804 <USB_WritePMA>
            ep->xfer_buff += len;
 8004a42:	6963      	ldr	r3, [r4, #20]
 8004a44:	199b      	adds	r3, r3, r6
 8004a46:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8004a48:	6a23      	ldr	r3, [r4, #32]
 8004a4a:	6922      	ldr	r2, [r4, #16]
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d930      	bls.n	8004ab2 <USB_EPStartXfer+0x252>
              ep->xfer_len_db -= len;
 8004a50:	1b9b      	subs	r3, r3, r6
 8004a52:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004a54:	7863      	ldrb	r3, [r4, #1]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d151      	bne.n	8004afe <USB_EPStartXfer+0x29e>
 8004a5a:	7823      	ldrb	r3, [r4, #0]
 8004a5c:	00db      	lsls	r3, r3, #3
 8004a5e:	4a55      	ldr	r2, [pc, #340]	; (8004bb4 <USB_EPStartXfer+0x354>)
 8004a60:	4694      	mov	ip, r2
 8004a62:	4463      	add	r3, ip
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	0412      	lsls	r2, r2, #16
 8004a68:	0c12      	lsrs	r2, r2, #16
 8004a6a:	601a      	str	r2, [r3, #0]
 8004a6c:	2e3e      	cmp	r6, #62	; 0x3e
 8004a6e:	d924      	bls.n	8004aba <USB_EPStartXfer+0x25a>
 8004a70:	0972      	lsrs	r2, r6, #5
 8004a72:	06f3      	lsls	r3, r6, #27
 8004a74:	d100      	bne.n	8004a78 <USB_EPStartXfer+0x218>
 8004a76:	3a01      	subs	r2, #1
 8004a78:	7823      	ldrb	r3, [r4, #0]
 8004a7a:	00db      	lsls	r3, r3, #3
 8004a7c:	494d      	ldr	r1, [pc, #308]	; (8004bb4 <USB_EPStartXfer+0x354>)
 8004a7e:	468c      	mov	ip, r1
 8004a80:	4463      	add	r3, ip
 8004a82:	6819      	ldr	r1, [r3, #0]
 8004a84:	0692      	lsls	r2, r2, #26
 8004a86:	4311      	orrs	r1, r2
 8004a88:	2280      	movs	r2, #128	; 0x80
 8004a8a:	0612      	lsls	r2, r2, #24
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	601a      	str	r2, [r3, #0]
 8004a90:	e037      	b.n	8004b02 <USB_EPStartXfer+0x2a2>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	4a47      	ldr	r2, [pc, #284]	; (8004bb4 <USB_EPStartXfer+0x354>)
 8004a96:	4694      	mov	ip, r2
 8004a98:	4463      	add	r3, ip
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	0412      	lsls	r2, r2, #16
 8004a9e:	0c12      	lsrs	r2, r2, #16
 8004aa0:	605a      	str	r2, [r3, #4]
 8004aa2:	7823      	ldrb	r3, [r4, #0]
 8004aa4:	00db      	lsls	r3, r3, #3
 8004aa6:	4463      	add	r3, ip
 8004aa8:	685a      	ldr	r2, [r3, #4]
 8004aaa:	0431      	lsls	r1, r6, #16
 8004aac:	430a      	orrs	r2, r1
 8004aae:	605a      	str	r2, [r3, #4]
 8004ab0:	e7c1      	b.n	8004a36 <USB_EPStartXfer+0x1d6>
              ep->xfer_len_db = 0U;
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8004ab6:	001e      	movs	r6, r3
 8004ab8:	e7cc      	b.n	8004a54 <USB_EPStartXfer+0x1f4>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004aba:	2e00      	cmp	r6, #0
 8004abc:	d111      	bne.n	8004ae2 <USB_EPStartXfer+0x282>
 8004abe:	7823      	ldrb	r3, [r4, #0]
 8004ac0:	00db      	lsls	r3, r3, #3
 8004ac2:	4a3c      	ldr	r2, [pc, #240]	; (8004bb4 <USB_EPStartXfer+0x354>)
 8004ac4:	4694      	mov	ip, r2
 8004ac6:	4463      	add	r3, ip
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	4940      	ldr	r1, [pc, #256]	; (8004bcc <USB_EPStartXfer+0x36c>)
 8004acc:	400a      	ands	r2, r1
 8004ace:	601a      	str	r2, [r3, #0]
 8004ad0:	7823      	ldrb	r3, [r4, #0]
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	4463      	add	r3, ip
 8004ad6:	6819      	ldr	r1, [r3, #0]
 8004ad8:	2280      	movs	r2, #128	; 0x80
 8004ada:	0612      	lsls	r2, r2, #24
 8004adc:	430a      	orrs	r2, r1
 8004ade:	601a      	str	r2, [r3, #0]
 8004ae0:	e00f      	b.n	8004b02 <USB_EPStartXfer+0x2a2>
 8004ae2:	0872      	lsrs	r2, r6, #1
 8004ae4:	07f3      	lsls	r3, r6, #31
 8004ae6:	d500      	bpl.n	8004aea <USB_EPStartXfer+0x28a>
 8004ae8:	3201      	adds	r2, #1
 8004aea:	7823      	ldrb	r3, [r4, #0]
 8004aec:	00db      	lsls	r3, r3, #3
 8004aee:	4931      	ldr	r1, [pc, #196]	; (8004bb4 <USB_EPStartXfer+0x354>)
 8004af0:	468c      	mov	ip, r1
 8004af2:	4463      	add	r3, ip
 8004af4:	6819      	ldr	r1, [r3, #0]
 8004af6:	0692      	lsls	r2, r2, #26
 8004af8:	430a      	orrs	r2, r1
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	e001      	b.n	8004b02 <USB_EPStartXfer+0x2a2>
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d006      	beq.n	8004b10 <USB_EPStartXfer+0x2b0>
            pmabuffer = ep->pmaaddr0;
 8004b02:	88e2      	ldrh	r2, [r4, #6]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b04:	b2b3      	uxth	r3, r6
 8004b06:	6961      	ldr	r1, [r4, #20]
 8004b08:	0028      	movs	r0, r5
 8004b0a:	f7ff fe7b 	bl	8004804 <USB_WritePMA>
 8004b0e:	e72c      	b.n	800496a <USB_EPStartXfer+0x10a>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004b10:	7823      	ldrb	r3, [r4, #0]
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	4a27      	ldr	r2, [pc, #156]	; (8004bb4 <USB_EPStartXfer+0x354>)
 8004b16:	4694      	mov	ip, r2
 8004b18:	4463      	add	r3, ip
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	0412      	lsls	r2, r2, #16
 8004b1e:	0c12      	lsrs	r2, r2, #16
 8004b20:	601a      	str	r2, [r3, #0]
 8004b22:	7823      	ldrb	r3, [r4, #0]
 8004b24:	00db      	lsls	r3, r3, #3
 8004b26:	4463      	add	r3, ip
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	0431      	lsls	r1, r6, #16
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	e7e7      	b.n	8004b02 <USB_EPStartXfer+0x2a2>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004b32:	7862      	ldrb	r2, [r4, #1]
 8004b34:	2a00      	cmp	r2, #0
 8004b36:	d14b      	bne.n	8004bd0 <USB_EPStartXfer+0x370>
 8004b38:	00db      	lsls	r3, r3, #3
 8004b3a:	4a1e      	ldr	r2, [pc, #120]	; (8004bb4 <USB_EPStartXfer+0x354>)
 8004b3c:	4694      	mov	ip, r2
 8004b3e:	4463      	add	r3, ip
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	0412      	lsls	r2, r2, #16
 8004b44:	0c12      	lsrs	r2, r2, #16
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	2e3e      	cmp	r6, #62	; 0x3e
 8004b4a:	d910      	bls.n	8004b6e <USB_EPStartXfer+0x30e>
 8004b4c:	0972      	lsrs	r2, r6, #5
 8004b4e:	06f3      	lsls	r3, r6, #27
 8004b50:	d100      	bne.n	8004b54 <USB_EPStartXfer+0x2f4>
 8004b52:	3a01      	subs	r2, #1
 8004b54:	7823      	ldrb	r3, [r4, #0]
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	4916      	ldr	r1, [pc, #88]	; (8004bb4 <USB_EPStartXfer+0x354>)
 8004b5a:	468c      	mov	ip, r1
 8004b5c:	4463      	add	r3, ip
 8004b5e:	6819      	ldr	r1, [r3, #0]
 8004b60:	0692      	lsls	r2, r2, #26
 8004b62:	4311      	orrs	r1, r2
 8004b64:	2280      	movs	r2, #128	; 0x80
 8004b66:	0612      	lsls	r2, r2, #24
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	e032      	b.n	8004bd4 <USB_EPStartXfer+0x374>
 8004b6e:	2e00      	cmp	r6, #0
 8004b70:	d111      	bne.n	8004b96 <USB_EPStartXfer+0x336>
 8004b72:	7823      	ldrb	r3, [r4, #0]
 8004b74:	00db      	lsls	r3, r3, #3
 8004b76:	4a0f      	ldr	r2, [pc, #60]	; (8004bb4 <USB_EPStartXfer+0x354>)
 8004b78:	4694      	mov	ip, r2
 8004b7a:	4463      	add	r3, ip
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	4913      	ldr	r1, [pc, #76]	; (8004bcc <USB_EPStartXfer+0x36c>)
 8004b80:	400a      	ands	r2, r1
 8004b82:	601a      	str	r2, [r3, #0]
 8004b84:	7823      	ldrb	r3, [r4, #0]
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	4463      	add	r3, ip
 8004b8a:	6819      	ldr	r1, [r3, #0]
 8004b8c:	2280      	movs	r2, #128	; 0x80
 8004b8e:	0612      	lsls	r2, r2, #24
 8004b90:	430a      	orrs	r2, r1
 8004b92:	601a      	str	r2, [r3, #0]
 8004b94:	e01e      	b.n	8004bd4 <USB_EPStartXfer+0x374>
 8004b96:	0872      	lsrs	r2, r6, #1
 8004b98:	07f3      	lsls	r3, r6, #31
 8004b9a:	d500      	bpl.n	8004b9e <USB_EPStartXfer+0x33e>
 8004b9c:	3201      	adds	r2, #1
 8004b9e:	7823      	ldrb	r3, [r4, #0]
 8004ba0:	00db      	lsls	r3, r3, #3
 8004ba2:	4904      	ldr	r1, [pc, #16]	; (8004bb4 <USB_EPStartXfer+0x354>)
 8004ba4:	468c      	mov	ip, r1
 8004ba6:	4463      	add	r3, ip
 8004ba8:	6819      	ldr	r1, [r3, #0]
 8004baa:	0692      	lsls	r2, r2, #26
 8004bac:	430a      	orrs	r2, r1
 8004bae:	601a      	str	r2, [r3, #0]
 8004bb0:	e010      	b.n	8004bd4 <USB_EPStartXfer+0x374>
 8004bb2:	46c0      	nop			; (mov r8, r8)
 8004bb4:	40009800 	.word	0x40009800
 8004bb8:	07ffbf8f 	.word	0x07ffbf8f
 8004bbc:	00008080 	.word	0x00008080
 8004bc0:	07ff8fbf 	.word	0x07ff8fbf
 8004bc4:	07ff8f8f 	.word	0x07ff8f8f
 8004bc8:	00008180 	.word	0x00008180
 8004bcc:	83ffffff 	.word	0x83ffffff
 8004bd0:	2a01      	cmp	r2, #1
 8004bd2:	d02d      	beq.n	8004c30 <USB_EPStartXfer+0x3d0>
            pmabuffer = ep->pmaaddr0;
 8004bd4:	88e2      	ldrh	r2, [r4, #6]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004bd6:	b2b3      	uxth	r3, r6
 8004bd8:	6961      	ldr	r1, [r4, #20]
 8004bda:	0028      	movs	r0, r5
 8004bdc:	f7ff fe12 	bl	8004804 <USB_WritePMA>
            ep->xfer_buff += len;
 8004be0:	6963      	ldr	r3, [r4, #20]
 8004be2:	199b      	adds	r3, r3, r6
 8004be4:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8004be6:	6a23      	ldr	r3, [r4, #32]
 8004be8:	6922      	ldr	r2, [r4, #16]
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d930      	bls.n	8004c50 <USB_EPStartXfer+0x3f0>
              ep->xfer_len_db -= len;
 8004bee:	1b9b      	subs	r3, r3, r6
 8004bf0:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004bf2:	7863      	ldrb	r3, [r4, #1]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d151      	bne.n	8004c9c <USB_EPStartXfer+0x43c>
 8004bf8:	7823      	ldrb	r3, [r4, #0]
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	4ac4      	ldr	r2, [pc, #784]	; (8004f10 <USB_EPStartXfer+0x6b0>)
 8004bfe:	4694      	mov	ip, r2
 8004c00:	4463      	add	r3, ip
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	0412      	lsls	r2, r2, #16
 8004c06:	0c12      	lsrs	r2, r2, #16
 8004c08:	605a      	str	r2, [r3, #4]
 8004c0a:	2e3e      	cmp	r6, #62	; 0x3e
 8004c0c:	d924      	bls.n	8004c58 <USB_EPStartXfer+0x3f8>
 8004c0e:	0972      	lsrs	r2, r6, #5
 8004c10:	06f3      	lsls	r3, r6, #27
 8004c12:	d100      	bne.n	8004c16 <USB_EPStartXfer+0x3b6>
 8004c14:	3a01      	subs	r2, #1
 8004c16:	7823      	ldrb	r3, [r4, #0]
 8004c18:	00db      	lsls	r3, r3, #3
 8004c1a:	49bd      	ldr	r1, [pc, #756]	; (8004f10 <USB_EPStartXfer+0x6b0>)
 8004c1c:	468c      	mov	ip, r1
 8004c1e:	4463      	add	r3, ip
 8004c20:	6859      	ldr	r1, [r3, #4]
 8004c22:	0692      	lsls	r2, r2, #26
 8004c24:	4311      	orrs	r1, r2
 8004c26:	2280      	movs	r2, #128	; 0x80
 8004c28:	0612      	lsls	r2, r2, #24
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	605a      	str	r2, [r3, #4]
 8004c2e:	e037      	b.n	8004ca0 <USB_EPStartXfer+0x440>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004c30:	00db      	lsls	r3, r3, #3
 8004c32:	4ab7      	ldr	r2, [pc, #732]	; (8004f10 <USB_EPStartXfer+0x6b0>)
 8004c34:	4694      	mov	ip, r2
 8004c36:	4463      	add	r3, ip
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	0412      	lsls	r2, r2, #16
 8004c3c:	0c12      	lsrs	r2, r2, #16
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	7823      	ldrb	r3, [r4, #0]
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	4463      	add	r3, ip
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	0431      	lsls	r1, r6, #16
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	e7c1      	b.n	8004bd4 <USB_EPStartXfer+0x374>
              ep->xfer_len_db = 0U;
 8004c50:	2200      	movs	r2, #0
 8004c52:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8004c54:	001e      	movs	r6, r3
 8004c56:	e7cc      	b.n	8004bf2 <USB_EPStartXfer+0x392>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004c58:	2e00      	cmp	r6, #0
 8004c5a:	d111      	bne.n	8004c80 <USB_EPStartXfer+0x420>
 8004c5c:	7823      	ldrb	r3, [r4, #0]
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	4aab      	ldr	r2, [pc, #684]	; (8004f10 <USB_EPStartXfer+0x6b0>)
 8004c62:	4694      	mov	ip, r2
 8004c64:	4463      	add	r3, ip
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	49aa      	ldr	r1, [pc, #680]	; (8004f14 <USB_EPStartXfer+0x6b4>)
 8004c6a:	400a      	ands	r2, r1
 8004c6c:	605a      	str	r2, [r3, #4]
 8004c6e:	7823      	ldrb	r3, [r4, #0]
 8004c70:	00db      	lsls	r3, r3, #3
 8004c72:	4463      	add	r3, ip
 8004c74:	6859      	ldr	r1, [r3, #4]
 8004c76:	2280      	movs	r2, #128	; 0x80
 8004c78:	0612      	lsls	r2, r2, #24
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	605a      	str	r2, [r3, #4]
 8004c7e:	e00f      	b.n	8004ca0 <USB_EPStartXfer+0x440>
 8004c80:	0872      	lsrs	r2, r6, #1
 8004c82:	07f3      	lsls	r3, r6, #31
 8004c84:	d500      	bpl.n	8004c88 <USB_EPStartXfer+0x428>
 8004c86:	3201      	adds	r2, #1
 8004c88:	7823      	ldrb	r3, [r4, #0]
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	49a0      	ldr	r1, [pc, #640]	; (8004f10 <USB_EPStartXfer+0x6b0>)
 8004c8e:	468c      	mov	ip, r1
 8004c90:	4463      	add	r3, ip
 8004c92:	6859      	ldr	r1, [r3, #4]
 8004c94:	0692      	lsls	r2, r2, #26
 8004c96:	430a      	orrs	r2, r1
 8004c98:	605a      	str	r2, [r3, #4]
 8004c9a:	e001      	b.n	8004ca0 <USB_EPStartXfer+0x440>
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d006      	beq.n	8004cae <USB_EPStartXfer+0x44e>
            pmabuffer = ep->pmaaddr1;
 8004ca0:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ca2:	b2b3      	uxth	r3, r6
 8004ca4:	6961      	ldr	r1, [r4, #20]
 8004ca6:	0028      	movs	r0, r5
 8004ca8:	f7ff fdac 	bl	8004804 <USB_WritePMA>
 8004cac:	e65d      	b.n	800496a <USB_EPStartXfer+0x10a>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004cae:	7823      	ldrb	r3, [r4, #0]
 8004cb0:	00db      	lsls	r3, r3, #3
 8004cb2:	4a97      	ldr	r2, [pc, #604]	; (8004f10 <USB_EPStartXfer+0x6b0>)
 8004cb4:	4694      	mov	ip, r2
 8004cb6:	4463      	add	r3, ip
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	0412      	lsls	r2, r2, #16
 8004cbc:	0c12      	lsrs	r2, r2, #16
 8004cbe:	605a      	str	r2, [r3, #4]
 8004cc0:	7823      	ldrb	r3, [r4, #0]
 8004cc2:	00db      	lsls	r3, r3, #3
 8004cc4:	4463      	add	r3, ip
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	0431      	lsls	r1, r6, #16
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	605a      	str	r2, [r3, #4]
 8004cce:	e7e7      	b.n	8004ca0 <USB_EPStartXfer+0x440>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004cd0:	7822      	ldrb	r2, [r4, #0]
 8004cd2:	0092      	lsls	r2, r2, #2
 8004cd4:	18aa      	adds	r2, r5, r2
 8004cd6:	6810      	ldr	r0, [r2, #0]
 8004cd8:	498f      	ldr	r1, [pc, #572]	; (8004f18 <USB_EPStartXfer+0x6b8>)
 8004cda:	4008      	ands	r0, r1
 8004cdc:	498f      	ldr	r1, [pc, #572]	; (8004f1c <USB_EPStartXfer+0x6bc>)
 8004cde:	4301      	orrs	r1, r0
 8004ce0:	6011      	str	r1, [r2, #0]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004ce2:	7822      	ldrb	r2, [r4, #0]
 8004ce4:	00d2      	lsls	r2, r2, #3
 8004ce6:	498a      	ldr	r1, [pc, #552]	; (8004f10 <USB_EPStartXfer+0x6b0>)
 8004ce8:	468c      	mov	ip, r1
 8004cea:	4462      	add	r2, ip
 8004cec:	6811      	ldr	r1, [r2, #0]
 8004cee:	0409      	lsls	r1, r1, #16
 8004cf0:	0c09      	lsrs	r1, r1, #16
 8004cf2:	6011      	str	r1, [r2, #0]
 8004cf4:	7822      	ldrb	r2, [r4, #0]
 8004cf6:	00d2      	lsls	r2, r2, #3
 8004cf8:	4462      	add	r2, ip
 8004cfa:	6811      	ldr	r1, [r2, #0]
 8004cfc:	0418      	lsls	r0, r3, #16
 8004cfe:	4301      	orrs	r1, r0
 8004d00:	6011      	str	r1, [r2, #0]
          pmabuffer = ep->pmaaddr0;
 8004d02:	88e2      	ldrh	r2, [r4, #6]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	6961      	ldr	r1, [r4, #20]
 8004d08:	0028      	movs	r0, r5
 8004d0a:	f7ff fd7b 	bl	8004804 <USB_WritePMA>
 8004d0e:	e62c      	b.n	800496a <USB_EPStartXfer+0x10a>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d10:	2e00      	cmp	r6, #0
 8004d12:	d111      	bne.n	8004d38 <USB_EPStartXfer+0x4d8>
 8004d14:	7823      	ldrb	r3, [r4, #0]
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	4a7d      	ldr	r2, [pc, #500]	; (8004f10 <USB_EPStartXfer+0x6b0>)
 8004d1a:	4694      	mov	ip, r2
 8004d1c:	4463      	add	r3, ip
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	497c      	ldr	r1, [pc, #496]	; (8004f14 <USB_EPStartXfer+0x6b4>)
 8004d22:	400a      	ands	r2, r1
 8004d24:	605a      	str	r2, [r3, #4]
 8004d26:	7823      	ldrb	r3, [r4, #0]
 8004d28:	00db      	lsls	r3, r3, #3
 8004d2a:	4463      	add	r3, ip
 8004d2c:	6859      	ldr	r1, [r3, #4]
 8004d2e:	2280      	movs	r2, #128	; 0x80
 8004d30:	0612      	lsls	r2, r2, #24
 8004d32:	430a      	orrs	r2, r1
 8004d34:	605a      	str	r2, [r3, #4]
 8004d36:	e01c      	b.n	8004d72 <USB_EPStartXfer+0x512>
 8004d38:	0872      	lsrs	r2, r6, #1
 8004d3a:	07f3      	lsls	r3, r6, #31
 8004d3c:	d500      	bpl.n	8004d40 <USB_EPStartXfer+0x4e0>
 8004d3e:	3201      	adds	r2, #1
 8004d40:	7823      	ldrb	r3, [r4, #0]
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	4972      	ldr	r1, [pc, #456]	; (8004f10 <USB_EPStartXfer+0x6b0>)
 8004d46:	468c      	mov	ip, r1
 8004d48:	4463      	add	r3, ip
 8004d4a:	6859      	ldr	r1, [r3, #4]
 8004d4c:	0692      	lsls	r2, r2, #26
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	605a      	str	r2, [r3, #4]
 8004d52:	e00e      	b.n	8004d72 <USB_EPStartXfer+0x512>
 8004d54:	00d2      	lsls	r2, r2, #3
 8004d56:	4b6e      	ldr	r3, [pc, #440]	; (8004f10 <USB_EPStartXfer+0x6b0>)
 8004d58:	469c      	mov	ip, r3
 8004d5a:	4462      	add	r2, ip
 8004d5c:	6853      	ldr	r3, [r2, #4]
 8004d5e:	041b      	lsls	r3, r3, #16
 8004d60:	0c1b      	lsrs	r3, r3, #16
 8004d62:	6053      	str	r3, [r2, #4]
 8004d64:	7823      	ldrb	r3, [r4, #0]
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	4463      	add	r3, ip
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	0431      	lsls	r1, r6, #16
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 8004d72:	8922      	ldrh	r2, [r4, #8]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d74:	b2b3      	uxth	r3, r6
 8004d76:	6961      	ldr	r1, [r4, #20]
 8004d78:	0028      	movs	r0, r5
 8004d7a:	f7ff fd43 	bl	8004804 <USB_WritePMA>
 8004d7e:	e5f4      	b.n	800496a <USB_EPStartXfer+0x10a>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d13c      	bne.n	8004dfe <USB_EPStartXfer+0x59e>
 8004d84:	00d2      	lsls	r2, r2, #3
 8004d86:	4b62      	ldr	r3, [pc, #392]	; (8004f10 <USB_EPStartXfer+0x6b0>)
 8004d88:	469c      	mov	ip, r3
 8004d8a:	4462      	add	r2, ip
 8004d8c:	6813      	ldr	r3, [r2, #0]
 8004d8e:	041b      	lsls	r3, r3, #16
 8004d90:	0c1b      	lsrs	r3, r3, #16
 8004d92:	6013      	str	r3, [r2, #0]
 8004d94:	2e3e      	cmp	r6, #62	; 0x3e
 8004d96:	d910      	bls.n	8004dba <USB_EPStartXfer+0x55a>
 8004d98:	0972      	lsrs	r2, r6, #5
 8004d9a:	06f3      	lsls	r3, r6, #27
 8004d9c:	d100      	bne.n	8004da0 <USB_EPStartXfer+0x540>
 8004d9e:	3a01      	subs	r2, #1
 8004da0:	7823      	ldrb	r3, [r4, #0]
 8004da2:	00db      	lsls	r3, r3, #3
 8004da4:	495a      	ldr	r1, [pc, #360]	; (8004f10 <USB_EPStartXfer+0x6b0>)
 8004da6:	468c      	mov	ip, r1
 8004da8:	4463      	add	r3, ip
 8004daa:	6819      	ldr	r1, [r3, #0]
 8004dac:	0692      	lsls	r2, r2, #26
 8004dae:	4311      	orrs	r1, r2
 8004db0:	2280      	movs	r2, #128	; 0x80
 8004db2:	0612      	lsls	r2, r2, #24
 8004db4:	430a      	orrs	r2, r1
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	e030      	b.n	8004e1c <USB_EPStartXfer+0x5bc>
 8004dba:	2e00      	cmp	r6, #0
 8004dbc:	d111      	bne.n	8004de2 <USB_EPStartXfer+0x582>
 8004dbe:	7823      	ldrb	r3, [r4, #0]
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	4a53      	ldr	r2, [pc, #332]	; (8004f10 <USB_EPStartXfer+0x6b0>)
 8004dc4:	4694      	mov	ip, r2
 8004dc6:	4463      	add	r3, ip
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	4952      	ldr	r1, [pc, #328]	; (8004f14 <USB_EPStartXfer+0x6b4>)
 8004dcc:	400a      	ands	r2, r1
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	7823      	ldrb	r3, [r4, #0]
 8004dd2:	00db      	lsls	r3, r3, #3
 8004dd4:	4463      	add	r3, ip
 8004dd6:	6819      	ldr	r1, [r3, #0]
 8004dd8:	2280      	movs	r2, #128	; 0x80
 8004dda:	0612      	lsls	r2, r2, #24
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	601a      	str	r2, [r3, #0]
 8004de0:	e01c      	b.n	8004e1c <USB_EPStartXfer+0x5bc>
 8004de2:	0872      	lsrs	r2, r6, #1
 8004de4:	07f3      	lsls	r3, r6, #31
 8004de6:	d500      	bpl.n	8004dea <USB_EPStartXfer+0x58a>
 8004de8:	3201      	adds	r2, #1
 8004dea:	7823      	ldrb	r3, [r4, #0]
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	4948      	ldr	r1, [pc, #288]	; (8004f10 <USB_EPStartXfer+0x6b0>)
 8004df0:	468c      	mov	ip, r1
 8004df2:	4463      	add	r3, ip
 8004df4:	6819      	ldr	r1, [r3, #0]
 8004df6:	0692      	lsls	r2, r2, #26
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	601a      	str	r2, [r3, #0]
 8004dfc:	e00e      	b.n	8004e1c <USB_EPStartXfer+0x5bc>
 8004dfe:	00d2      	lsls	r2, r2, #3
 8004e00:	4b43      	ldr	r3, [pc, #268]	; (8004f10 <USB_EPStartXfer+0x6b0>)
 8004e02:	469c      	mov	ip, r3
 8004e04:	4462      	add	r2, ip
 8004e06:	6813      	ldr	r3, [r2, #0]
 8004e08:	041b      	lsls	r3, r3, #16
 8004e0a:	0c1b      	lsrs	r3, r3, #16
 8004e0c:	6013      	str	r3, [r2, #0]
 8004e0e:	7823      	ldrb	r3, [r4, #0]
 8004e10:	00db      	lsls	r3, r3, #3
 8004e12:	4463      	add	r3, ip
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	0431      	lsls	r1, r6, #16
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004e1c:	88e2      	ldrh	r2, [r4, #6]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e1e:	b2b3      	uxth	r3, r6
 8004e20:	6961      	ldr	r1, [r4, #20]
 8004e22:	0028      	movs	r0, r5
 8004e24:	f7ff fcee 	bl	8004804 <USB_WritePMA>
 8004e28:	e59f      	b.n	800496a <USB_EPStartXfer+0x10a>
        ep->xfer_len = 0U;
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	618a      	str	r2, [r1, #24]
        len = ep->xfer_len;
 8004e2e:	001a      	movs	r2, r3
 8004e30:	e527      	b.n	8004882 <USB_EPStartXfer+0x22>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004e32:	2a00      	cmp	r2, #0
 8004e34:	d111      	bne.n	8004e5a <USB_EPStartXfer+0x5fa>
 8004e36:	7823      	ldrb	r3, [r4, #0]
 8004e38:	00db      	lsls	r3, r3, #3
 8004e3a:	4a35      	ldr	r2, [pc, #212]	; (8004f10 <USB_EPStartXfer+0x6b0>)
 8004e3c:	4694      	mov	ip, r2
 8004e3e:	4463      	add	r3, ip
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	4934      	ldr	r1, [pc, #208]	; (8004f14 <USB_EPStartXfer+0x6b4>)
 8004e44:	400a      	ands	r2, r1
 8004e46:	605a      	str	r2, [r3, #4]
 8004e48:	7823      	ldrb	r3, [r4, #0]
 8004e4a:	00db      	lsls	r3, r3, #3
 8004e4c:	4463      	add	r3, ip
 8004e4e:	6859      	ldr	r1, [r3, #4]
 8004e50:	2280      	movs	r2, #128	; 0x80
 8004e52:	0612      	lsls	r2, r2, #24
 8004e54:	430a      	orrs	r2, r1
 8004e56:	605a      	str	r2, [r3, #4]
 8004e58:	e52f      	b.n	80048ba <USB_EPStartXfer+0x5a>
 8004e5a:	0851      	lsrs	r1, r2, #1
 8004e5c:	07d2      	lsls	r2, r2, #31
 8004e5e:	d500      	bpl.n	8004e62 <USB_EPStartXfer+0x602>
 8004e60:	3101      	adds	r1, #1
 8004e62:	7823      	ldrb	r3, [r4, #0]
 8004e64:	00db      	lsls	r3, r3, #3
 8004e66:	4a2a      	ldr	r2, [pc, #168]	; (8004f10 <USB_EPStartXfer+0x6b0>)
 8004e68:	4694      	mov	ip, r2
 8004e6a:	4463      	add	r3, ip
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	0689      	lsls	r1, r1, #26
 8004e70:	430a      	orrs	r2, r1
 8004e72:	605a      	str	r2, [r3, #4]
 8004e74:	e521      	b.n	80048ba <USB_EPStartXfer+0x5a>
      if (ep->type == EP_TYPE_BULK)
 8004e76:	78ca      	ldrb	r2, [r1, #3]
 8004e78:	2a02      	cmp	r2, #2
 8004e7a:	d051      	beq.n	8004f20 <USB_EPStartXfer+0x6c0>
      else if (ep->type == EP_TYPE_ISOC)
 8004e7c:	2a01      	cmp	r2, #1
 8004e7e:	d000      	beq.n	8004e82 <USB_EPStartXfer+0x622>
 8004e80:	e15a      	b.n	8005138 <USB_EPStartXfer+0x8d8>
        if (ep->xfer_len > ep->maxpacket)
 8004e82:	6989      	ldr	r1, [r1, #24]
 8004e84:	6922      	ldr	r2, [r4, #16]
 8004e86:	4291      	cmp	r1, r2
 8004e88:	d800      	bhi.n	8004e8c <USB_EPStartXfer+0x62c>
 8004e8a:	e0f5      	b.n	8005078 <USB_EPStartXfer+0x818>
          ep->xfer_len -= len;
 8004e8c:	1a89      	subs	r1, r1, r2
 8004e8e:	61a1      	str	r1, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d11b      	bne.n	8004ecc <USB_EPStartXfer+0x66c>
 8004e94:	7823      	ldrb	r3, [r4, #0]
 8004e96:	00db      	lsls	r3, r3, #3
 8004e98:	491d      	ldr	r1, [pc, #116]	; (8004f10 <USB_EPStartXfer+0x6b0>)
 8004e9a:	468c      	mov	ip, r1
 8004e9c:	4463      	add	r3, ip
 8004e9e:	6819      	ldr	r1, [r3, #0]
 8004ea0:	0409      	lsls	r1, r1, #16
 8004ea2:	0c09      	lsrs	r1, r1, #16
 8004ea4:	6019      	str	r1, [r3, #0]
 8004ea6:	2a3e      	cmp	r2, #62	; 0x3e
 8004ea8:	d800      	bhi.n	8004eac <USB_EPStartXfer+0x64c>
 8004eaa:	e0e9      	b.n	8005080 <USB_EPStartXfer+0x820>
 8004eac:	0951      	lsrs	r1, r2, #5
 8004eae:	06d3      	lsls	r3, r2, #27
 8004eb0:	d100      	bne.n	8004eb4 <USB_EPStartXfer+0x654>
 8004eb2:	3901      	subs	r1, #1
 8004eb4:	7823      	ldrb	r3, [r4, #0]
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	4815      	ldr	r0, [pc, #84]	; (8004f10 <USB_EPStartXfer+0x6b0>)
 8004eba:	4684      	mov	ip, r0
 8004ebc:	4463      	add	r3, ip
 8004ebe:	6818      	ldr	r0, [r3, #0]
 8004ec0:	0689      	lsls	r1, r1, #26
 8004ec2:	4308      	orrs	r0, r1
 8004ec4:	2180      	movs	r1, #128	; 0x80
 8004ec6:	0609      	lsls	r1, r1, #24
 8004ec8:	4301      	orrs	r1, r0
 8004eca:	6019      	str	r1, [r3, #0]
 8004ecc:	7863      	ldrb	r3, [r4, #1]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d000      	beq.n	8004ed4 <USB_EPStartXfer+0x674>
 8004ed2:	e11b      	b.n	800510c <USB_EPStartXfer+0x8ac>
 8004ed4:	7823      	ldrb	r3, [r4, #0]
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	490d      	ldr	r1, [pc, #52]	; (8004f10 <USB_EPStartXfer+0x6b0>)
 8004eda:	468c      	mov	ip, r1
 8004edc:	4463      	add	r3, ip
 8004ede:	6859      	ldr	r1, [r3, #4]
 8004ee0:	0409      	lsls	r1, r1, #16
 8004ee2:	0c09      	lsrs	r1, r1, #16
 8004ee4:	6059      	str	r1, [r3, #4]
 8004ee6:	2a3e      	cmp	r2, #62	; 0x3e
 8004ee8:	d800      	bhi.n	8004eec <USB_EPStartXfer+0x68c>
 8004eea:	e0eb      	b.n	80050c4 <USB_EPStartXfer+0x864>
 8004eec:	0951      	lsrs	r1, r2, #5
 8004eee:	06d2      	lsls	r2, r2, #27
 8004ef0:	d100      	bne.n	8004ef4 <USB_EPStartXfer+0x694>
 8004ef2:	3901      	subs	r1, #1
 8004ef4:	7823      	ldrb	r3, [r4, #0]
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	4a05      	ldr	r2, [pc, #20]	; (8004f10 <USB_EPStartXfer+0x6b0>)
 8004efa:	4694      	mov	ip, r2
 8004efc:	4463      	add	r3, ip
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	0689      	lsls	r1, r1, #26
 8004f02:	4311      	orrs	r1, r2
 8004f04:	2280      	movs	r2, #128	; 0x80
 8004f06:	0612      	lsls	r2, r2, #24
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	605a      	str	r2, [r3, #4]
 8004f0c:	e4d5      	b.n	80048ba <USB_EPStartXfer+0x5a>
 8004f0e:	46c0      	nop			; (mov r8, r8)
 8004f10:	40009800 	.word	0x40009800
 8004f14:	83ffffff 	.word	0x83ffffff
 8004f18:	07ff8e8f 	.word	0x07ff8e8f
 8004f1c:	00008080 	.word	0x00008080
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d11b      	bne.n	8004f5c <USB_EPStartXfer+0x6fc>
 8004f24:	780b      	ldrb	r3, [r1, #0]
 8004f26:	00db      	lsls	r3, r3, #3
 8004f28:	4a85      	ldr	r2, [pc, #532]	; (8005140 <USB_EPStartXfer+0x8e0>)
 8004f2a:	4694      	mov	ip, r2
 8004f2c:	4463      	add	r3, ip
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	0412      	lsls	r2, r2, #16
 8004f32:	0c12      	lsrs	r2, r2, #16
 8004f34:	601a      	str	r2, [r3, #0]
 8004f36:	690b      	ldr	r3, [r1, #16]
 8004f38:	2b3e      	cmp	r3, #62	; 0x3e
 8004f3a:	d92f      	bls.n	8004f9c <USB_EPStartXfer+0x73c>
 8004f3c:	095a      	lsrs	r2, r3, #5
 8004f3e:	06db      	lsls	r3, r3, #27
 8004f40:	d100      	bne.n	8004f44 <USB_EPStartXfer+0x6e4>
 8004f42:	3a01      	subs	r2, #1
 8004f44:	7823      	ldrb	r3, [r4, #0]
 8004f46:	00db      	lsls	r3, r3, #3
 8004f48:	497d      	ldr	r1, [pc, #500]	; (8005140 <USB_EPStartXfer+0x8e0>)
 8004f4a:	468c      	mov	ip, r1
 8004f4c:	4463      	add	r3, ip
 8004f4e:	6819      	ldr	r1, [r3, #0]
 8004f50:	0692      	lsls	r2, r2, #26
 8004f52:	4311      	orrs	r1, r2
 8004f54:	2280      	movs	r2, #128	; 0x80
 8004f56:	0612      	lsls	r2, r2, #24
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	601a      	str	r2, [r3, #0]
 8004f5c:	7863      	ldrb	r3, [r4, #1]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d160      	bne.n	8005024 <USB_EPStartXfer+0x7c4>
 8004f62:	7823      	ldrb	r3, [r4, #0]
 8004f64:	00db      	lsls	r3, r3, #3
 8004f66:	4a76      	ldr	r2, [pc, #472]	; (8005140 <USB_EPStartXfer+0x8e0>)
 8004f68:	4694      	mov	ip, r2
 8004f6a:	4463      	add	r3, ip
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	0412      	lsls	r2, r2, #16
 8004f70:	0c12      	lsrs	r2, r2, #16
 8004f72:	605a      	str	r2, [r3, #4]
 8004f74:	6923      	ldr	r3, [r4, #16]
 8004f76:	2b3e      	cmp	r3, #62	; 0x3e
 8004f78:	d932      	bls.n	8004fe0 <USB_EPStartXfer+0x780>
 8004f7a:	095a      	lsrs	r2, r3, #5
 8004f7c:	06db      	lsls	r3, r3, #27
 8004f7e:	d100      	bne.n	8004f82 <USB_EPStartXfer+0x722>
 8004f80:	3a01      	subs	r2, #1
 8004f82:	7823      	ldrb	r3, [r4, #0]
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	496e      	ldr	r1, [pc, #440]	; (8005140 <USB_EPStartXfer+0x8e0>)
 8004f88:	468c      	mov	ip, r1
 8004f8a:	4463      	add	r3, ip
 8004f8c:	6859      	ldr	r1, [r3, #4]
 8004f8e:	0692      	lsls	r2, r2, #26
 8004f90:	4311      	orrs	r1, r2
 8004f92:	2280      	movs	r2, #128	; 0x80
 8004f94:	0612      	lsls	r2, r2, #24
 8004f96:	430a      	orrs	r2, r1
 8004f98:	605a      	str	r2, [r3, #4]
 8004f9a:	e045      	b.n	8005028 <USB_EPStartXfer+0x7c8>
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d111      	bne.n	8004fc4 <USB_EPStartXfer+0x764>
 8004fa0:	780b      	ldrb	r3, [r1, #0]
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	4a66      	ldr	r2, [pc, #408]	; (8005140 <USB_EPStartXfer+0x8e0>)
 8004fa6:	4694      	mov	ip, r2
 8004fa8:	4463      	add	r3, ip
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	4965      	ldr	r1, [pc, #404]	; (8005144 <USB_EPStartXfer+0x8e4>)
 8004fae:	400a      	ands	r2, r1
 8004fb0:	601a      	str	r2, [r3, #0]
 8004fb2:	7823      	ldrb	r3, [r4, #0]
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	4463      	add	r3, ip
 8004fb8:	6819      	ldr	r1, [r3, #0]
 8004fba:	2280      	movs	r2, #128	; 0x80
 8004fbc:	0612      	lsls	r2, r2, #24
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	601a      	str	r2, [r3, #0]
 8004fc2:	e7cb      	b.n	8004f5c <USB_EPStartXfer+0x6fc>
 8004fc4:	085a      	lsrs	r2, r3, #1
 8004fc6:	07db      	lsls	r3, r3, #31
 8004fc8:	d500      	bpl.n	8004fcc <USB_EPStartXfer+0x76c>
 8004fca:	3201      	adds	r2, #1
 8004fcc:	7823      	ldrb	r3, [r4, #0]
 8004fce:	00db      	lsls	r3, r3, #3
 8004fd0:	495b      	ldr	r1, [pc, #364]	; (8005140 <USB_EPStartXfer+0x8e0>)
 8004fd2:	468c      	mov	ip, r1
 8004fd4:	4463      	add	r3, ip
 8004fd6:	6819      	ldr	r1, [r3, #0]
 8004fd8:	0692      	lsls	r2, r2, #26
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	e7bd      	b.n	8004f5c <USB_EPStartXfer+0x6fc>
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d111      	bne.n	8005008 <USB_EPStartXfer+0x7a8>
 8004fe4:	7823      	ldrb	r3, [r4, #0]
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	4a55      	ldr	r2, [pc, #340]	; (8005140 <USB_EPStartXfer+0x8e0>)
 8004fea:	4694      	mov	ip, r2
 8004fec:	4463      	add	r3, ip
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	4954      	ldr	r1, [pc, #336]	; (8005144 <USB_EPStartXfer+0x8e4>)
 8004ff2:	400a      	ands	r2, r1
 8004ff4:	605a      	str	r2, [r3, #4]
 8004ff6:	7823      	ldrb	r3, [r4, #0]
 8004ff8:	00db      	lsls	r3, r3, #3
 8004ffa:	4463      	add	r3, ip
 8004ffc:	6859      	ldr	r1, [r3, #4]
 8004ffe:	2280      	movs	r2, #128	; 0x80
 8005000:	0612      	lsls	r2, r2, #24
 8005002:	430a      	orrs	r2, r1
 8005004:	605a      	str	r2, [r3, #4]
 8005006:	e00f      	b.n	8005028 <USB_EPStartXfer+0x7c8>
 8005008:	085a      	lsrs	r2, r3, #1
 800500a:	07db      	lsls	r3, r3, #31
 800500c:	d500      	bpl.n	8005010 <USB_EPStartXfer+0x7b0>
 800500e:	3201      	adds	r2, #1
 8005010:	7823      	ldrb	r3, [r4, #0]
 8005012:	00db      	lsls	r3, r3, #3
 8005014:	494a      	ldr	r1, [pc, #296]	; (8005140 <USB_EPStartXfer+0x8e0>)
 8005016:	468c      	mov	ip, r1
 8005018:	4463      	add	r3, ip
 800501a:	6859      	ldr	r1, [r3, #4]
 800501c:	0692      	lsls	r2, r2, #26
 800501e:	430a      	orrs	r2, r1
 8005020:	605a      	str	r2, [r3, #4]
 8005022:	e001      	b.n	8005028 <USB_EPStartXfer+0x7c8>
 8005024:	2b01      	cmp	r3, #1
 8005026:	d015      	beq.n	8005054 <USB_EPStartXfer+0x7f4>
        if (ep->xfer_count != 0U)
 8005028:	69e3      	ldr	r3, [r4, #28]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d100      	bne.n	8005030 <USB_EPStartXfer+0x7d0>
 800502e:	e444      	b.n	80048ba <USB_EPStartXfer+0x5a>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 8005030:	7823      	ldrb	r3, [r4, #0]
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	18eb      	adds	r3, r5, r3
 8005036:	681a      	ldr	r2, [r3, #0]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005038:	4943      	ldr	r1, [pc, #268]	; (8005148 <USB_EPStartXfer+0x8e8>)
 800503a:	400a      	ands	r2, r1
 800503c:	428a      	cmp	r2, r1
 800503e:	d002      	beq.n	8005046 <USB_EPStartXfer+0x7e6>
 8005040:	2a00      	cmp	r2, #0
 8005042:	d000      	beq.n	8005046 <USB_EPStartXfer+0x7e6>
 8005044:	e439      	b.n	80048ba <USB_EPStartXfer+0x5a>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005046:	6819      	ldr	r1, [r3, #0]
 8005048:	4a40      	ldr	r2, [pc, #256]	; (800514c <USB_EPStartXfer+0x8ec>)
 800504a:	4011      	ands	r1, r2
 800504c:	4a40      	ldr	r2, [pc, #256]	; (8005150 <USB_EPStartXfer+0x8f0>)
 800504e:	430a      	orrs	r2, r1
 8005050:	601a      	str	r2, [r3, #0]
 8005052:	e432      	b.n	80048ba <USB_EPStartXfer+0x5a>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005054:	7823      	ldrb	r3, [r4, #0]
 8005056:	00db      	lsls	r3, r3, #3
 8005058:	4a39      	ldr	r2, [pc, #228]	; (8005140 <USB_EPStartXfer+0x8e0>)
 800505a:	4694      	mov	ip, r2
 800505c:	4463      	add	r3, ip
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	0412      	lsls	r2, r2, #16
 8005062:	0c12      	lsrs	r2, r2, #16
 8005064:	605a      	str	r2, [r3, #4]
 8005066:	7823      	ldrb	r3, [r4, #0]
 8005068:	00db      	lsls	r3, r3, #3
 800506a:	4463      	add	r3, ip
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	6921      	ldr	r1, [r4, #16]
 8005070:	0409      	lsls	r1, r1, #16
 8005072:	430a      	orrs	r2, r1
 8005074:	605a      	str	r2, [r3, #4]
 8005076:	e7d7      	b.n	8005028 <USB_EPStartXfer+0x7c8>
          ep->xfer_len = 0U;
 8005078:	2200      	movs	r2, #0
 800507a:	61a2      	str	r2, [r4, #24]
          len = ep->xfer_len;
 800507c:	000a      	movs	r2, r1
 800507e:	e707      	b.n	8004e90 <USB_EPStartXfer+0x630>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005080:	2a00      	cmp	r2, #0
 8005082:	d111      	bne.n	80050a8 <USB_EPStartXfer+0x848>
 8005084:	7823      	ldrb	r3, [r4, #0]
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	492d      	ldr	r1, [pc, #180]	; (8005140 <USB_EPStartXfer+0x8e0>)
 800508a:	468c      	mov	ip, r1
 800508c:	4463      	add	r3, ip
 800508e:	6819      	ldr	r1, [r3, #0]
 8005090:	482c      	ldr	r0, [pc, #176]	; (8005144 <USB_EPStartXfer+0x8e4>)
 8005092:	4001      	ands	r1, r0
 8005094:	6019      	str	r1, [r3, #0]
 8005096:	7823      	ldrb	r3, [r4, #0]
 8005098:	00db      	lsls	r3, r3, #3
 800509a:	4463      	add	r3, ip
 800509c:	6818      	ldr	r0, [r3, #0]
 800509e:	2180      	movs	r1, #128	; 0x80
 80050a0:	0609      	lsls	r1, r1, #24
 80050a2:	4301      	orrs	r1, r0
 80050a4:	6019      	str	r1, [r3, #0]
 80050a6:	e711      	b.n	8004ecc <USB_EPStartXfer+0x66c>
 80050a8:	0851      	lsrs	r1, r2, #1
 80050aa:	07d3      	lsls	r3, r2, #31
 80050ac:	d500      	bpl.n	80050b0 <USB_EPStartXfer+0x850>
 80050ae:	3101      	adds	r1, #1
 80050b0:	7823      	ldrb	r3, [r4, #0]
 80050b2:	00db      	lsls	r3, r3, #3
 80050b4:	4822      	ldr	r0, [pc, #136]	; (8005140 <USB_EPStartXfer+0x8e0>)
 80050b6:	4684      	mov	ip, r0
 80050b8:	4463      	add	r3, ip
 80050ba:	6818      	ldr	r0, [r3, #0]
 80050bc:	0689      	lsls	r1, r1, #26
 80050be:	4301      	orrs	r1, r0
 80050c0:	6019      	str	r1, [r3, #0]
 80050c2:	e703      	b.n	8004ecc <USB_EPStartXfer+0x66c>
 80050c4:	2a00      	cmp	r2, #0
 80050c6:	d112      	bne.n	80050ee <USB_EPStartXfer+0x88e>
 80050c8:	7823      	ldrb	r3, [r4, #0]
 80050ca:	00db      	lsls	r3, r3, #3
 80050cc:	4a1c      	ldr	r2, [pc, #112]	; (8005140 <USB_EPStartXfer+0x8e0>)
 80050ce:	4694      	mov	ip, r2
 80050d0:	4463      	add	r3, ip
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	491b      	ldr	r1, [pc, #108]	; (8005144 <USB_EPStartXfer+0x8e4>)
 80050d6:	400a      	ands	r2, r1
 80050d8:	605a      	str	r2, [r3, #4]
 80050da:	7823      	ldrb	r3, [r4, #0]
 80050dc:	00db      	lsls	r3, r3, #3
 80050de:	4463      	add	r3, ip
 80050e0:	6859      	ldr	r1, [r3, #4]
 80050e2:	2280      	movs	r2, #128	; 0x80
 80050e4:	0612      	lsls	r2, r2, #24
 80050e6:	430a      	orrs	r2, r1
 80050e8:	605a      	str	r2, [r3, #4]
 80050ea:	f7ff fbe6 	bl	80048ba <USB_EPStartXfer+0x5a>
 80050ee:	0851      	lsrs	r1, r2, #1
 80050f0:	07d2      	lsls	r2, r2, #31
 80050f2:	d500      	bpl.n	80050f6 <USB_EPStartXfer+0x896>
 80050f4:	3101      	adds	r1, #1
 80050f6:	7823      	ldrb	r3, [r4, #0]
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	4a11      	ldr	r2, [pc, #68]	; (8005140 <USB_EPStartXfer+0x8e0>)
 80050fc:	4694      	mov	ip, r2
 80050fe:	4463      	add	r3, ip
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	0689      	lsls	r1, r1, #26
 8005104:	430a      	orrs	r2, r1
 8005106:	605a      	str	r2, [r3, #4]
 8005108:	f7ff fbd7 	bl	80048ba <USB_EPStartXfer+0x5a>
 800510c:	2b01      	cmp	r3, #1
 800510e:	d001      	beq.n	8005114 <USB_EPStartXfer+0x8b4>
 8005110:	f7ff fbd3 	bl	80048ba <USB_EPStartXfer+0x5a>
 8005114:	7823      	ldrb	r3, [r4, #0]
 8005116:	00db      	lsls	r3, r3, #3
 8005118:	4909      	ldr	r1, [pc, #36]	; (8005140 <USB_EPStartXfer+0x8e0>)
 800511a:	468c      	mov	ip, r1
 800511c:	4463      	add	r3, ip
 800511e:	6859      	ldr	r1, [r3, #4]
 8005120:	0409      	lsls	r1, r1, #16
 8005122:	0c09      	lsrs	r1, r1, #16
 8005124:	6059      	str	r1, [r3, #4]
 8005126:	7823      	ldrb	r3, [r4, #0]
 8005128:	00db      	lsls	r3, r3, #3
 800512a:	4463      	add	r3, ip
 800512c:	6859      	ldr	r1, [r3, #4]
 800512e:	0412      	lsls	r2, r2, #16
 8005130:	430a      	orrs	r2, r1
 8005132:	605a      	str	r2, [r3, #4]
 8005134:	f7ff fbc1 	bl	80048ba <USB_EPStartXfer+0x5a>
        return HAL_ERROR;
 8005138:	2001      	movs	r0, #1
 800513a:	f7ff fbcb 	bl	80048d4 <USB_EPStartXfer+0x74>
 800513e:	46c0      	nop			; (mov r8, r8)
 8005140:	40009800 	.word	0x40009800
 8005144:	83ffffff 	.word	0x83ffffff
 8005148:	00004040 	.word	0x00004040
 800514c:	07ff8f8f 	.word	0x07ff8f8f
 8005150:	000080c0 	.word	0x000080c0

08005154 <USBD_DFU_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 8005154:	231b      	movs	r3, #27
 8005156:	8003      	strh	r3, [r0, #0]

  return USBD_DFU_CfgDesc;
 8005158:	4800      	ldr	r0, [pc, #0]	; (800515c <USBD_DFU_GetCfgDesc+0x8>)
}
 800515a:	4770      	bx	lr
 800515c:	20000048 	.word	0x20000048

08005160 <USBD_DFU_EP0_RxReady>:
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
}
 8005160:	2000      	movs	r0, #0
 8005162:	4770      	bx	lr

08005164 <USBD_DFU_SOF>:
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
}
 8005164:	2000      	movs	r0, #0
 8005166:	4770      	bx	lr

08005168 <USBD_DFU_GetDeviceQualifierDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 8005168:	230a      	movs	r3, #10
 800516a:	8003      	strh	r3, [r0, #0]

  return USBD_DFU_DeviceQualifierDesc;
 800516c:	4800      	ldr	r0, [pc, #0]	; (8005170 <USBD_DFU_GetDeviceQualifierDesc+0x8>)
}
 800516e:	4770      	bx	lr
 8005170:	20000064 	.word	0x20000064

08005174 <DFU_ClearStatus>:
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005174:	23b5      	movs	r3, #181	; 0xb5
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	58c3      	ldr	r3, [r0, r3]
 800517a:	33b0      	adds	r3, #176	; 0xb0
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	581b      	ldr	r3, [r3, r0]

  if (hdfu == NULL)
 8005180:	2b00      	cmp	r3, #0
 8005182:	d016      	beq.n	80051b2 <DFU_ClearStatus+0x3e>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 8005184:	2283      	movs	r2, #131	; 0x83
 8005186:	00d2      	lsls	r2, r2, #3
 8005188:	5c9a      	ldrb	r2, [r3, r2]
 800518a:	2a0a      	cmp	r2, #10
 800518c:	d012      	beq.n	80051b4 <DFU_ClearStatus+0x40>
    hdfu->dev_status[5] = 0U; /* iString */
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 800518e:	210a      	movs	r1, #10
 8005190:	2283      	movs	r2, #131	; 0x83
 8005192:	00d2      	lsls	r2, r2, #3
 8005194:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 8005196:	3a08      	subs	r2, #8
 8005198:	200e      	movs	r0, #14
 800519a:	5498      	strb	r0, [r3, r2]
    hdfu->dev_status[1] = 0U;
 800519c:	2200      	movs	r2, #0
 800519e:	480f      	ldr	r0, [pc, #60]	; (80051dc <DFU_ClearStatus+0x68>)
 80051a0:	541a      	strb	r2, [r3, r0]
    hdfu->dev_status[2] = 0U;
 80051a2:	480f      	ldr	r0, [pc, #60]	; (80051e0 <DFU_ClearStatus+0x6c>)
 80051a4:	541a      	strb	r2, [r3, r0]
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 80051a6:	480f      	ldr	r0, [pc, #60]	; (80051e4 <DFU_ClearStatus+0x70>)
 80051a8:	541a      	strb	r2, [r3, r0]
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 80051aa:	480f      	ldr	r0, [pc, #60]	; (80051e8 <DFU_ClearStatus+0x74>)
 80051ac:	5419      	strb	r1, [r3, r0]
    hdfu->dev_status[5] = 0U; /* iString */
 80051ae:	490f      	ldr	r1, [pc, #60]	; (80051ec <DFU_ClearStatus+0x78>)
 80051b0:	545a      	strb	r2, [r3, r1]
  }
}
 80051b2:	4770      	bx	lr
    hdfu->dev_state = DFU_STATE_IDLE;
 80051b4:	2102      	movs	r1, #2
 80051b6:	2283      	movs	r2, #131	; 0x83
 80051b8:	00d2      	lsls	r2, r2, #3
 80051ba:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 80051bc:	2200      	movs	r2, #0
 80051be:	2082      	movs	r0, #130	; 0x82
 80051c0:	00c0      	lsls	r0, r0, #3
 80051c2:	541a      	strb	r2, [r3, r0]
    hdfu->dev_status[1] = 0U;
 80051c4:	4805      	ldr	r0, [pc, #20]	; (80051dc <DFU_ClearStatus+0x68>)
 80051c6:	541a      	strb	r2, [r3, r0]
    hdfu->dev_status[2] = 0U;
 80051c8:	4805      	ldr	r0, [pc, #20]	; (80051e0 <DFU_ClearStatus+0x6c>)
 80051ca:	541a      	strb	r2, [r3, r0]
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 80051cc:	4805      	ldr	r0, [pc, #20]	; (80051e4 <DFU_ClearStatus+0x70>)
 80051ce:	541a      	strb	r2, [r3, r0]
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 80051d0:	4805      	ldr	r0, [pc, #20]	; (80051e8 <DFU_ClearStatus+0x74>)
 80051d2:	5419      	strb	r1, [r3, r0]
    hdfu->dev_status[5] = 0U; /* iString */
 80051d4:	4905      	ldr	r1, [pc, #20]	; (80051ec <DFU_ClearStatus+0x78>)
 80051d6:	545a      	strb	r2, [r3, r1]
 80051d8:	e7eb      	b.n	80051b2 <DFU_ClearStatus+0x3e>
 80051da:	46c0      	nop			; (mov r8, r8)
 80051dc:	00000411 	.word	0x00000411
 80051e0:	00000412 	.word	0x00000412
 80051e4:	00000413 	.word	0x00000413
 80051e8:	00000414 	.word	0x00000414
 80051ec:	00000415 	.word	0x00000415

080051f0 <DFU_Abort>:
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80051f0:	23b5      	movs	r3, #181	; 0xb5
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	58c3      	ldr	r3, [r0, r3]
 80051f6:	33b0      	adds	r3, #176	; 0xb0
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	581b      	ldr	r3, [r3, r0]

  if (hdfu == NULL)
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d022      	beq.n	8005246 <DFU_Abort+0x56>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8005200:	2283      	movs	r2, #131	; 0x83
 8005202:	00d2      	lsls	r2, r2, #3
 8005204:	5c99      	ldrb	r1, [r3, r2]
 8005206:	1e8a      	subs	r2, r1, #2
 8005208:	b2d2      	uxtb	r2, r2
 800520a:	2a01      	cmp	r2, #1
 800520c:	d905      	bls.n	800521a <DFU_Abort+0x2a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800520e:	2905      	cmp	r1, #5
 8005210:	d003      	beq.n	800521a <DFU_Abort+0x2a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8005212:	2906      	cmp	r1, #6
 8005214:	d001      	beq.n	800521a <DFU_Abort+0x2a>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8005216:	2909      	cmp	r1, #9
 8005218:	d115      	bne.n	8005246 <DFU_Abort+0x56>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800521a:	2102      	movs	r1, #2
 800521c:	2283      	movs	r2, #131	; 0x83
 800521e:	00d2      	lsls	r2, r2, #3
 8005220:	5499      	strb	r1, [r3, r2]
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8005222:	2200      	movs	r2, #0
 8005224:	2082      	movs	r0, #130	; 0x82
 8005226:	00c0      	lsls	r0, r0, #3
 8005228:	541a      	strb	r2, [r3, r0]
    hdfu->dev_status[1] = 0U;
 800522a:	4807      	ldr	r0, [pc, #28]	; (8005248 <DFU_Abort+0x58>)
 800522c:	541a      	strb	r2, [r3, r0]
    hdfu->dev_status[2] = 0U;
 800522e:	4807      	ldr	r0, [pc, #28]	; (800524c <DFU_Abort+0x5c>)
 8005230:	541a      	strb	r2, [r3, r0]
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8005232:	4807      	ldr	r0, [pc, #28]	; (8005250 <DFU_Abort+0x60>)
 8005234:	541a      	strb	r2, [r3, r0]
    hdfu->dev_status[4] = hdfu->dev_state;
 8005236:	4807      	ldr	r0, [pc, #28]	; (8005254 <DFU_Abort+0x64>)
 8005238:	5419      	strb	r1, [r3, r0]
    hdfu->dev_status[5] = 0U; /* iString */
 800523a:	4907      	ldr	r1, [pc, #28]	; (8005258 <DFU_Abort+0x68>)
 800523c:	545a      	strb	r2, [r3, r1]
    hdfu->wblock_num = 0U;
 800523e:	3915      	subs	r1, #21
 8005240:	505a      	str	r2, [r3, r1]
    hdfu->wlength = 0U;
 8005242:	4906      	ldr	r1, [pc, #24]	; (800525c <DFU_Abort+0x6c>)
 8005244:	505a      	str	r2, [r3, r1]
  }
}
 8005246:	4770      	bx	lr
 8005248:	00000411 	.word	0x00000411
 800524c:	00000412 	.word	0x00000412
 8005250:	00000413 	.word	0x00000413
 8005254:	00000414 	.word	0x00000414
 8005258:	00000415 	.word	0x00000415
 800525c:	00000404 	.word	0x00000404

08005260 <USBD_DFU_GetUsrStringDesc>:
{
 8005260:	b510      	push	{r4, lr}
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8005262:	23b5      	movs	r3, #181	; 0xb5
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	58c3      	ldr	r3, [r0, r3]
 8005268:	33b0      	adds	r3, #176	; 0xb0
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	18c0      	adds	r0, r0, r3
 800526e:	6843      	ldr	r3, [r0, #4]
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8005270:	2906      	cmp	r1, #6
 8005272:	d806      	bhi.n	8005282 <USBD_DFU_GetUsrStringDesc+0x22>
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 8005274:	6818      	ldr	r0, [r3, #0]
 8005276:	4c04      	ldr	r4, [pc, #16]	; (8005288 <USBD_DFU_GetUsrStringDesc+0x28>)
 8005278:	0021      	movs	r1, r4
 800527a:	f000 fc8a 	bl	8005b92 <USBD_GetString>
    return USBD_StrDesc;
 800527e:	0020      	movs	r0, r4
}
 8005280:	bd10      	pop	{r4, pc}
    return NULL;
 8005282:	2000      	movs	r0, #0
 8005284:	e7fc      	b.n	8005280 <USBD_DFU_GetUsrStringDesc+0x20>
 8005286:	46c0      	nop			; (mov r8, r8)
 8005288:	20000904 	.word	0x20000904

0800528c <USBD_DFU_GetDfuFuncDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the DFU descriptor
  */
static void *USBD_DFU_GetDfuFuncDesc(uint8_t *pConfDesc)
{
 800528c:	b510      	push	{r4, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	0004      	movs	r4, r0
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
  uint8_t *pDfuDesc = NULL;
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005292:	7882      	ldrb	r2, [r0, #2]
 8005294:	78c3      	ldrb	r3, [r0, #3]
 8005296:	021b      	lsls	r3, r3, #8
 8005298:	4313      	orrs	r3, r2
 800529a:	7802      	ldrb	r2, [r0, #0]
 800529c:	4293      	cmp	r3, r2
 800529e:	d915      	bls.n	80052cc <USBD_DFU_GetDfuFuncDesc+0x40>
  {
    ptr = desc->bLength;
 80052a0:	466b      	mov	r3, sp
 80052a2:	80da      	strh	r2, [r3, #6]

    while (ptr < desc->wTotalLength)
 80052a4:	78a2      	ldrb	r2, [r4, #2]
 80052a6:	78e3      	ldrb	r3, [r4, #3]
 80052a8:	021b      	lsls	r3, r3, #8
 80052aa:	4313      	orrs	r3, r2
 80052ac:	466a      	mov	r2, sp
 80052ae:	3206      	adds	r2, #6
 80052b0:	8812      	ldrh	r2, [r2, #0]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d207      	bcs.n	80052c6 <USBD_DFU_GetDfuFuncDesc+0x3a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80052b6:	466b      	mov	r3, sp
 80052b8:	1d99      	adds	r1, r3, #6
 80052ba:	f000 fc4f 	bl	8005b5c <USBD_GetNextDesc>

      if (pdesc->bDescriptorType == DFU_DESCRIPTOR_TYPE)
 80052be:	7843      	ldrb	r3, [r0, #1]
 80052c0:	2b21      	cmp	r3, #33	; 0x21
 80052c2:	d1ef      	bne.n	80052a4 <USBD_DFU_GetDfuFuncDesc+0x18>
 80052c4:	e000      	b.n	80052c8 <USBD_DFU_GetDfuFuncDesc+0x3c>
  uint8_t *pDfuDesc = NULL;
 80052c6:	2000      	movs	r0, #0
        break;
      }
    }
  }
  return pDfuDesc;
}
 80052c8:	b002      	add	sp, #8
 80052ca:	bd10      	pop	{r4, pc}
  uint8_t *pDfuDesc = NULL;
 80052cc:	2000      	movs	r0, #0
  return pDfuDesc;
 80052ce:	e7fb      	b.n	80052c8 <USBD_DFU_GetDfuFuncDesc+0x3c>

080052d0 <DFU_Leave>:
{
 80052d0:	b570      	push	{r4, r5, r6, lr}
 80052d2:	0005      	movs	r5, r0
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80052d4:	23b5      	movs	r3, #181	; 0xb5
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	58c3      	ldr	r3, [r0, r3]
 80052da:	33b0      	adds	r3, #176	; 0xb0
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	581c      	ldr	r4, [r3, r0]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 80052e0:	23b4      	movs	r3, #180	; 0xb4
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	58c0      	ldr	r0, [r0, r3]
 80052e6:	f7ff ffd1 	bl	800528c <USBD_DFU_GetDfuFuncDesc>
  if ((hdfu == NULL) || (pDfuFunc == NULL))
 80052ea:	2c00      	cmp	r4, #0
 80052ec:	d014      	beq.n	8005318 <DFU_Leave+0x48>
 80052ee:	2800      	cmp	r0, #0
 80052f0:	d012      	beq.n	8005318 <DFU_Leave+0x48>
  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 80052f2:	4b16      	ldr	r3, [pc, #88]	; (800534c <DFU_Leave+0x7c>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	54e2      	strb	r2, [r4, r3]
  if ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U)
 80052f8:	7883      	ldrb	r3, [r0, #2]
 80052fa:	075b      	lsls	r3, r3, #29
 80052fc:	d50d      	bpl.n	800531a <DFU_Leave+0x4a>
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 80052fe:	3206      	adds	r2, #6
 8005300:	2383      	movs	r3, #131	; 0x83
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	54e2      	strb	r2, [r4, r3]
    hdfu->dev_status[1] = 0U;
 8005306:	2300      	movs	r3, #0
 8005308:	4911      	ldr	r1, [pc, #68]	; (8005350 <DFU_Leave+0x80>)
 800530a:	5463      	strb	r3, [r4, r1]
    hdfu->dev_status[2] = 0U;
 800530c:	4911      	ldr	r1, [pc, #68]	; (8005354 <DFU_Leave+0x84>)
 800530e:	5463      	strb	r3, [r4, r1]
    hdfu->dev_status[3] = 0U;
 8005310:	4911      	ldr	r1, [pc, #68]	; (8005358 <DFU_Leave+0x88>)
 8005312:	5463      	strb	r3, [r4, r1]
    hdfu->dev_status[4] = hdfu->dev_state;
 8005314:	4b11      	ldr	r3, [pc, #68]	; (800535c <DFU_Leave+0x8c>)
 8005316:	54e2      	strb	r2, [r4, r3]
}
 8005318:	bd70      	pop	{r4, r5, r6, pc}
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 800531a:	2208      	movs	r2, #8
 800531c:	2383      	movs	r3, #131	; 0x83
 800531e:	00db      	lsls	r3, r3, #3
 8005320:	54e2      	strb	r2, [r4, r3]
    hdfu->dev_status[1] = 0U;
 8005322:	2300      	movs	r3, #0
 8005324:	490a      	ldr	r1, [pc, #40]	; (8005350 <DFU_Leave+0x80>)
 8005326:	5463      	strb	r3, [r4, r1]
    hdfu->dev_status[2] = 0U;
 8005328:	490a      	ldr	r1, [pc, #40]	; (8005354 <DFU_Leave+0x84>)
 800532a:	5463      	strb	r3, [r4, r1]
    hdfu->dev_status[3] = 0U;
 800532c:	490a      	ldr	r1, [pc, #40]	; (8005358 <DFU_Leave+0x88>)
 800532e:	5463      	strb	r3, [r4, r1]
    hdfu->dev_status[4] = hdfu->dev_state;
 8005330:	4b0a      	ldr	r3, [pc, #40]	; (800535c <DFU_Leave+0x8c>)
 8005332:	54e2      	strb	r2, [r4, r3]
    (void)USBD_Stop(pdev);
 8005334:	0028      	movs	r0, r5
 8005336:	f000 fc02 	bl	8005b3e <USBD_Stop>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800533a:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800533e:	4b08      	ldr	r3, [pc, #32]	; (8005360 <DFU_Leave+0x90>)
 8005340:	4a08      	ldr	r2, [pc, #32]	; (8005364 <DFU_Leave+0x94>)
 8005342:	60da      	str	r2, [r3, #12]
 8005344:	f3bf 8f4f 	dsb	sy
    __NOP();
 8005348:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 800534a:	e7fd      	b.n	8005348 <DFU_Leave+0x78>
 800534c:	00000419 	.word	0x00000419
 8005350:	00000411 	.word	0x00000411
 8005354:	00000412 	.word	0x00000412
 8005358:	00000413 	.word	0x00000413
 800535c:	00000414 	.word	0x00000414
 8005360:	e000ed00 	.word	0xe000ed00
 8005364:	05fa0004 	.word	0x05fa0004

08005368 <USBD_DFU_EP0_TxReady>:
{
 8005368:	b510      	push	{r4, lr}
 800536a:	b082      	sub	sp, #8
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800536c:	23b5      	movs	r3, #181	; 0xb5
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	58c3      	ldr	r3, [r0, r3]
 8005372:	33b0      	adds	r3, #176	; 0xb0
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	581c      	ldr	r4, [r3, r0]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8005378:	18c3      	adds	r3, r0, r3
 800537a:	685a      	ldr	r2, [r3, #4]
  if (hdfu == NULL)
 800537c:	2c00      	cmp	r4, #0
 800537e:	d100      	bne.n	8005382 <USBD_DFU_EP0_TxReady+0x1a>
 8005380:	e073      	b.n	800546a <USBD_DFU_EP0_TxReady+0x102>
  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8005382:	2383      	movs	r3, #131	; 0x83
 8005384:	00db      	lsls	r3, r3, #3
 8005386:	5ce3      	ldrb	r3, [r4, r3]
 8005388:	2b04      	cmp	r3, #4
 800538a:	d004      	beq.n	8005396 <USBD_DFU_EP0_TxReady+0x2e>
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 800538c:	2b07      	cmp	r3, #7
 800538e:	d068      	beq.n	8005462 <USBD_DFU_EP0_TxReady+0xfa>
    return (uint8_t)USBD_FAIL;
 8005390:	2003      	movs	r0, #3
}
 8005392:	b002      	add	sp, #8
 8005394:	bd10      	pop	{r4, pc}
    if (hdfu->wblock_num == 0U)
 8005396:	2380      	movs	r3, #128	; 0x80
 8005398:	00db      	lsls	r3, r3, #3
 800539a:	58e1      	ldr	r1, [r4, r3]
 800539c:	2900      	cmp	r1, #0
 800539e:	d13e      	bne.n	800541e <USBD_DFU_EP0_TxReady+0xb6>
      if (hdfu->wlength == 1U)
 80053a0:	4b35      	ldr	r3, [pc, #212]	; (8005478 <USBD_DFU_EP0_TxReady+0x110>)
 80053a2:	58e3      	ldr	r3, [r4, r3]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d049      	beq.n	800543c <USBD_DFU_EP0_TxReady+0xd4>
      else if (hdfu->wlength == 5U)
 80053a8:	2b05      	cmp	r3, #5
 80053aa:	d12b      	bne.n	8005404 <USBD_DFU_EP0_TxReady+0x9c>
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 80053ac:	7823      	ldrb	r3, [r4, #0]
 80053ae:	2b21      	cmp	r3, #33	; 0x21
 80053b0:	d017      	beq.n	80053e2 <USBD_DFU_EP0_TxReady+0x7a>
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 80053b2:	2b41      	cmp	r3, #65	; 0x41
 80053b4:	d15b      	bne.n	800546e <USBD_DFU_EP0_TxReady+0x106>
          hdfu->data_ptr = hdfu->buffer.d8[1];
 80053b6:	7860      	ldrb	r0, [r4, #1]
 80053b8:	2381      	movs	r3, #129	; 0x81
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	50e0      	str	r0, [r4, r3]
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 80053be:	78a1      	ldrb	r1, [r4, #2]
 80053c0:	0209      	lsls	r1, r1, #8
 80053c2:	1840      	adds	r0, r0, r1
 80053c4:	50e0      	str	r0, [r4, r3]
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 80053c6:	78e1      	ldrb	r1, [r4, #3]
 80053c8:	0409      	lsls	r1, r1, #16
 80053ca:	1840      	adds	r0, r0, r1
 80053cc:	50e0      	str	r0, [r4, r3]
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 80053ce:	7921      	ldrb	r1, [r4, #4]
 80053d0:	0609      	lsls	r1, r1, #24
 80053d2:	1840      	adds	r0, r0, r1
 80053d4:	50e0      	str	r0, [r4, r3]
          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 80053d6:	68d3      	ldr	r3, [r2, #12]
 80053d8:	4798      	blx	r3
 80053da:	2800      	cmp	r0, #0
 80053dc:	d02e      	beq.n	800543c <USBD_DFU_EP0_TxReady+0xd4>
            return (uint8_t)USBD_FAIL;
 80053de:	2003      	movs	r0, #3
 80053e0:	e7d7      	b.n	8005392 <USBD_DFU_EP0_TxReady+0x2a>
          hdfu->data_ptr = hdfu->buffer.d8[1];
 80053e2:	7863      	ldrb	r3, [r4, #1]
 80053e4:	2281      	movs	r2, #129	; 0x81
 80053e6:	00d2      	lsls	r2, r2, #3
 80053e8:	50a3      	str	r3, [r4, r2]
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 80053ea:	78a1      	ldrb	r1, [r4, #2]
 80053ec:	0209      	lsls	r1, r1, #8
 80053ee:	185b      	adds	r3, r3, r1
 80053f0:	50a3      	str	r3, [r4, r2]
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 80053f2:	78e1      	ldrb	r1, [r4, #3]
 80053f4:	0409      	lsls	r1, r1, #16
 80053f6:	185b      	adds	r3, r3, r1
 80053f8:	50a3      	str	r3, [r4, r2]
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 80053fa:	7921      	ldrb	r1, [r4, #4]
 80053fc:	0609      	lsls	r1, r1, #24
 80053fe:	185b      	adds	r3, r3, r1
 8005400:	50a3      	str	r3, [r4, r2]
 8005402:	e01b      	b.n	800543c <USBD_DFU_EP0_TxReady+0xd4>
        hdfu->wlength = 0U;
 8005404:	2300      	movs	r3, #0
 8005406:	4a1c      	ldr	r2, [pc, #112]	; (8005478 <USBD_DFU_EP0_TxReady+0x110>)
 8005408:	50a3      	str	r3, [r4, r2]
        hdfu->wblock_num = 0U;
 800540a:	3a04      	subs	r2, #4
 800540c:	50a3      	str	r3, [r4, r2]
        req.bmRequest = 0U;
 800540e:	466a      	mov	r2, sp
 8005410:	7013      	strb	r3, [r2, #0]
        req.wLength = 1U;
 8005412:	3301      	adds	r3, #1
 8005414:	80d3      	strh	r3, [r2, #6]
        USBD_CtlError(pdev, &req);
 8005416:	4669      	mov	r1, sp
 8005418:	f000 fbb1 	bl	8005b7e <USBD_CtlError>
 800541c:	e00e      	b.n	800543c <USBD_DFU_EP0_TxReady+0xd4>
      if (hdfu->wblock_num > 1U)
 800541e:	2901      	cmp	r1, #1
 8005420:	d90c      	bls.n	800543c <USBD_DFU_EP0_TxReady+0xd4>
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8005422:	3902      	subs	r1, #2
 8005424:	0289      	lsls	r1, r1, #10
 8005426:	2381      	movs	r3, #129	; 0x81
 8005428:	00db      	lsls	r3, r3, #3
 800542a:	58e3      	ldr	r3, [r4, r3]
 800542c:	18c9      	adds	r1, r1, r3
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 800542e:	6913      	ldr	r3, [r2, #16]
 8005430:	4a11      	ldr	r2, [pc, #68]	; (8005478 <USBD_DFU_EP0_TxReady+0x110>)
 8005432:	58a2      	ldr	r2, [r4, r2]
 8005434:	0020      	movs	r0, r4
 8005436:	4798      	blx	r3
 8005438:	2800      	cmp	r0, #0
 800543a:	d11a      	bne.n	8005472 <USBD_DFU_EP0_TxReady+0x10a>
    hdfu->wlength = 0U;
 800543c:	2300      	movs	r3, #0
 800543e:	4a0e      	ldr	r2, [pc, #56]	; (8005478 <USBD_DFU_EP0_TxReady+0x110>)
 8005440:	50a3      	str	r3, [r4, r2]
    hdfu->wblock_num = 0U;
 8005442:	3a04      	subs	r2, #4
 8005444:	50a3      	str	r3, [r4, r2]
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8005446:	2203      	movs	r2, #3
 8005448:	2183      	movs	r1, #131	; 0x83
 800544a:	00c9      	lsls	r1, r1, #3
 800544c:	5462      	strb	r2, [r4, r1]
    hdfu->dev_status[1] = 0U;
 800544e:	490b      	ldr	r1, [pc, #44]	; (800547c <USBD_DFU_EP0_TxReady+0x114>)
 8005450:	5463      	strb	r3, [r4, r1]
    hdfu->dev_status[2] = 0U;
 8005452:	490b      	ldr	r1, [pc, #44]	; (8005480 <USBD_DFU_EP0_TxReady+0x118>)
 8005454:	5463      	strb	r3, [r4, r1]
    hdfu->dev_status[3] = 0U;
 8005456:	490b      	ldr	r1, [pc, #44]	; (8005484 <USBD_DFU_EP0_TxReady+0x11c>)
 8005458:	5463      	strb	r3, [r4, r1]
    hdfu->dev_status[4] = hdfu->dev_state;
 800545a:	4b0b      	ldr	r3, [pc, #44]	; (8005488 <USBD_DFU_EP0_TxReady+0x120>)
 800545c:	54e2      	strb	r2, [r4, r3]
  return (uint8_t)USBD_OK;
 800545e:	2000      	movs	r0, #0
 8005460:	e797      	b.n	8005392 <USBD_DFU_EP0_TxReady+0x2a>
    DFU_Leave(pdev);
 8005462:	f7ff ff35 	bl	80052d0 <DFU_Leave>
  return (uint8_t)USBD_OK;
 8005466:	2000      	movs	r0, #0
 8005468:	e793      	b.n	8005392 <USBD_DFU_EP0_TxReady+0x2a>
    return (uint8_t)USBD_FAIL;
 800546a:	2003      	movs	r0, #3
 800546c:	e791      	b.n	8005392 <USBD_DFU_EP0_TxReady+0x2a>
          return (uint8_t)USBD_FAIL;
 800546e:	2003      	movs	r0, #3
 8005470:	e78f      	b.n	8005392 <USBD_DFU_EP0_TxReady+0x2a>
          return (uint8_t)USBD_FAIL;
 8005472:	2003      	movs	r0, #3
 8005474:	e78d      	b.n	8005392 <USBD_DFU_EP0_TxReady+0x2a>
 8005476:	46c0      	nop			; (mov r8, r8)
 8005478:	00000404 	.word	0x00000404
 800547c:	00000411 	.word	0x00000411
 8005480:	00000412 	.word	0x00000412
 8005484:	00000413 	.word	0x00000413
 8005488:	00000414 	.word	0x00000414

0800548c <DFU_Upload>:
{
 800548c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548e:	0005      	movs	r5, r0
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005490:	23b5      	movs	r3, #181	; 0xb5
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	58c3      	ldr	r3, [r0, r3]
 8005496:	33b0      	adds	r3, #176	; 0xb0
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	581c      	ldr	r4, [r3, r0]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 800549c:	18c3      	adds	r3, r0, r3
 800549e:	685e      	ldr	r6, [r3, #4]
  if (hdfu == NULL)
 80054a0:	2c00      	cmp	r4, #0
 80054a2:	d077      	beq.n	8005594 <DFU_Upload+0x108>
  if (req->wLength > 0U)
 80054a4:	88cb      	ldrh	r3, [r1, #6]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d067      	beq.n	800557a <DFU_Upload+0xee>
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 80054aa:	2383      	movs	r3, #131	; 0x83
 80054ac:	00db      	lsls	r3, r3, #3
 80054ae:	5ce3      	ldrb	r3, [r4, r3]
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d001      	beq.n	80054b8 <DFU_Upload+0x2c>
 80054b4:	2b09      	cmp	r3, #9
 80054b6:	d158      	bne.n	800556a <DFU_Upload+0xde>
      hdfu->wblock_num = req->wValue;
 80054b8:	8848      	ldrh	r0, [r1, #2]
 80054ba:	2380      	movs	r3, #128	; 0x80
 80054bc:	00db      	lsls	r3, r3, #3
 80054be:	50e0      	str	r0, [r4, r3]
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 80054c0:	88cf      	ldrh	r7, [r1, #6]
 80054c2:	1c3a      	adds	r2, r7, #0
 80054c4:	429f      	cmp	r7, r3
 80054c6:	d900      	bls.n	80054ca <DFU_Upload+0x3e>
 80054c8:	1c1a      	adds	r2, r3, #0
 80054ca:	b292      	uxth	r2, r2
 80054cc:	4b32      	ldr	r3, [pc, #200]	; (8005598 <DFU_Upload+0x10c>)
 80054ce:	50e2      	str	r2, [r4, r3]
      if (hdfu->wblock_num == 0U)
 80054d0:	2800      	cmp	r0, #0
 80054d2:	d11b      	bne.n	800550c <DFU_Upload+0x80>
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 80054d4:	2a03      	cmp	r2, #3
 80054d6:	d917      	bls.n	8005508 <DFU_Upload+0x7c>
 80054d8:	2202      	movs	r2, #2
 80054da:	2383      	movs	r3, #131	; 0x83
 80054dc:	00db      	lsls	r3, r3, #3
 80054de:	54e2      	strb	r2, [r4, r3]
        hdfu->dev_status[1] = 0U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	492e      	ldr	r1, [pc, #184]	; (800559c <DFU_Upload+0x110>)
 80054e4:	5463      	strb	r3, [r4, r1]
        hdfu->dev_status[2] = 0U;
 80054e6:	492e      	ldr	r1, [pc, #184]	; (80055a0 <DFU_Upload+0x114>)
 80054e8:	5463      	strb	r3, [r4, r1]
        hdfu->dev_status[3] = 0U;
 80054ea:	492e      	ldr	r1, [pc, #184]	; (80055a4 <DFU_Upload+0x118>)
 80054ec:	5463      	strb	r3, [r4, r1]
        hdfu->dev_status[4] = hdfu->dev_state;
 80054ee:	492e      	ldr	r1, [pc, #184]	; (80055a8 <DFU_Upload+0x11c>)
 80054f0:	5462      	strb	r2, [r4, r1]
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 80054f2:	7023      	strb	r3, [r4, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 80054f4:	3321      	adds	r3, #33	; 0x21
 80054f6:	7063      	strb	r3, [r4, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 80054f8:	3320      	adds	r3, #32
 80054fa:	70a3      	strb	r3, [r4, #2]
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 80054fc:	2203      	movs	r2, #3
 80054fe:	0021      	movs	r1, r4
 8005500:	0028      	movs	r0, r5
 8005502:	f000 fb64 	bl	8005bce <USBD_CtlSendData>
 8005506:	e045      	b.n	8005594 <DFU_Upload+0x108>
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8005508:	2209      	movs	r2, #9
 800550a:	e7e6      	b.n	80054da <DFU_Upload+0x4e>
      else if (hdfu->wblock_num > 1U)
 800550c:	2801      	cmp	r0, #1
 800550e:	d91b      	bls.n	8005548 <DFU_Upload+0xbc>
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8005510:	2109      	movs	r1, #9
 8005512:	2383      	movs	r3, #131	; 0x83
 8005514:	00db      	lsls	r3, r3, #3
 8005516:	54e1      	strb	r1, [r4, r3]
        hdfu->dev_status[1] = 0U;
 8005518:	2300      	movs	r3, #0
 800551a:	4f20      	ldr	r7, [pc, #128]	; (800559c <DFU_Upload+0x110>)
 800551c:	55e3      	strb	r3, [r4, r7]
        hdfu->dev_status[2] = 0U;
 800551e:	4f20      	ldr	r7, [pc, #128]	; (80055a0 <DFU_Upload+0x114>)
 8005520:	55e3      	strb	r3, [r4, r7]
        hdfu->dev_status[3] = 0U;
 8005522:	4f20      	ldr	r7, [pc, #128]	; (80055a4 <DFU_Upload+0x118>)
 8005524:	55e3      	strb	r3, [r4, r7]
        hdfu->dev_status[4] = hdfu->dev_state;
 8005526:	4b20      	ldr	r3, [pc, #128]	; (80055a8 <DFU_Upload+0x11c>)
 8005528:	54e1      	strb	r1, [r4, r3]
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800552a:	3802      	subs	r0, #2
 800552c:	0280      	lsls	r0, r0, #10
 800552e:	3b0c      	subs	r3, #12
 8005530:	58e3      	ldr	r3, [r4, r3]
 8005532:	18c0      	adds	r0, r0, r3
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8005534:	6973      	ldr	r3, [r6, #20]
 8005536:	0021      	movs	r1, r4
 8005538:	4798      	blx	r3
 800553a:	0001      	movs	r1, r0
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 800553c:	4b16      	ldr	r3, [pc, #88]	; (8005598 <DFU_Upload+0x10c>)
 800553e:	58e2      	ldr	r2, [r4, r3]
 8005540:	0028      	movs	r0, r5
 8005542:	f000 fb44 	bl	8005bce <USBD_CtlSendData>
 8005546:	e025      	b.n	8005594 <DFU_Upload+0x108>
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8005548:	220f      	movs	r2, #15
 800554a:	2383      	movs	r3, #131	; 0x83
 800554c:	00db      	lsls	r3, r3, #3
 800554e:	54e2      	strb	r2, [r4, r3]
        hdfu->dev_status[1] = 0U;
 8005550:	2300      	movs	r3, #0
 8005552:	4812      	ldr	r0, [pc, #72]	; (800559c <DFU_Upload+0x110>)
 8005554:	5423      	strb	r3, [r4, r0]
        hdfu->dev_status[2] = 0U;
 8005556:	4812      	ldr	r0, [pc, #72]	; (80055a0 <DFU_Upload+0x114>)
 8005558:	5423      	strb	r3, [r4, r0]
        hdfu->dev_status[3] = 0U;
 800555a:	4812      	ldr	r0, [pc, #72]	; (80055a4 <DFU_Upload+0x118>)
 800555c:	5423      	strb	r3, [r4, r0]
        hdfu->dev_status[4] = hdfu->dev_state;
 800555e:	4b12      	ldr	r3, [pc, #72]	; (80055a8 <DFU_Upload+0x11c>)
 8005560:	54e2      	strb	r2, [r4, r3]
        USBD_CtlError(pdev, req);
 8005562:	0028      	movs	r0, r5
 8005564:	f000 fb0b 	bl	8005b7e <USBD_CtlError>
 8005568:	e014      	b.n	8005594 <DFU_Upload+0x108>
      hdfu->wlength = 0U;
 800556a:	2300      	movs	r3, #0
 800556c:	4a0a      	ldr	r2, [pc, #40]	; (8005598 <DFU_Upload+0x10c>)
 800556e:	50a3      	str	r3, [r4, r2]
      hdfu->wblock_num = 0U;
 8005570:	3a04      	subs	r2, #4
 8005572:	50a3      	str	r3, [r4, r2]
      USBD_CtlError(pdev, req);
 8005574:	f000 fb03 	bl	8005b7e <USBD_CtlError>
 8005578:	e00c      	b.n	8005594 <DFU_Upload+0x108>
    hdfu->dev_state = DFU_STATE_IDLE;
 800557a:	2202      	movs	r2, #2
 800557c:	2383      	movs	r3, #131	; 0x83
 800557e:	00db      	lsls	r3, r3, #3
 8005580:	54e2      	strb	r2, [r4, r3]
    hdfu->dev_status[1] = 0U;
 8005582:	2300      	movs	r3, #0
 8005584:	4905      	ldr	r1, [pc, #20]	; (800559c <DFU_Upload+0x110>)
 8005586:	5463      	strb	r3, [r4, r1]
    hdfu->dev_status[2] = 0U;
 8005588:	4905      	ldr	r1, [pc, #20]	; (80055a0 <DFU_Upload+0x114>)
 800558a:	5463      	strb	r3, [r4, r1]
    hdfu->dev_status[3] = 0U;
 800558c:	4905      	ldr	r1, [pc, #20]	; (80055a4 <DFU_Upload+0x118>)
 800558e:	5463      	strb	r3, [r4, r1]
    hdfu->dev_status[4] = hdfu->dev_state;
 8005590:	4b05      	ldr	r3, [pc, #20]	; (80055a8 <DFU_Upload+0x11c>)
 8005592:	54e2      	strb	r2, [r4, r3]
}
 8005594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005596:	46c0      	nop			; (mov r8, r8)
 8005598:	00000404 	.word	0x00000404
 800559c:	00000411 	.word	0x00000411
 80055a0:	00000412 	.word	0x00000412
 80055a4:	00000413 	.word	0x00000413
 80055a8:	00000414 	.word	0x00000414

080055ac <DFU_GetStatus>:
{
 80055ac:	b570      	push	{r4, r5, r6, lr}
 80055ae:	0004      	movs	r4, r0
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80055b0:	23b5      	movs	r3, #181	; 0xb5
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	58c3      	ldr	r3, [r0, r3]
 80055b6:	33b0      	adds	r3, #176	; 0xb0
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	581d      	ldr	r5, [r3, r0]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 80055bc:	18c3      	adds	r3, r0, r3
 80055be:	685e      	ldr	r6, [r3, #4]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 80055c0:	23b4      	movs	r3, #180	; 0xb4
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	58c0      	ldr	r0, [r0, r3]
 80055c6:	f7ff fe61 	bl	800528c <USBD_DFU_GetDfuFuncDesc>
  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 80055ca:	2d00      	cmp	r5, #0
 80055cc:	d011      	beq.n	80055f2 <DFU_GetStatus+0x46>
 80055ce:	2e00      	cmp	r6, #0
 80055d0:	d00f      	beq.n	80055f2 <DFU_GetStatus+0x46>
 80055d2:	2800      	cmp	r0, #0
 80055d4:	d00d      	beq.n	80055f2 <DFU_GetStatus+0x46>
  switch (hdfu->dev_state)
 80055d6:	2383      	movs	r3, #131	; 0x83
 80055d8:	00db      	lsls	r3, r3, #3
 80055da:	5ceb      	ldrb	r3, [r5, r3]
 80055dc:	2b03      	cmp	r3, #3
 80055de:	d009      	beq.n	80055f4 <DFU_GetStatus+0x48>
 80055e0:	2b06      	cmp	r3, #6
 80055e2:	d040      	beq.n	8005666 <DFU_GetStatus+0xba>
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 80055e4:	2382      	movs	r3, #130	; 0x82
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	18e9      	adds	r1, r5, r3
 80055ea:	2206      	movs	r2, #6
 80055ec:	0020      	movs	r0, r4
 80055ee:	f000 faee 	bl	8005bce <USBD_CtlSendData>
}
 80055f2:	bd70      	pop	{r4, r5, r6, pc}
      if (hdfu->wlength != 0U)
 80055f4:	4b2f      	ldr	r3, [pc, #188]	; (80056b4 <DFU_GetStatus+0x108>)
 80055f6:	58eb      	ldr	r3, [r5, r3]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d026      	beq.n	800564a <DFU_GetStatus+0x9e>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 80055fc:	2204      	movs	r2, #4
 80055fe:	2383      	movs	r3, #131	; 0x83
 8005600:	00db      	lsls	r3, r3, #3
 8005602:	54ea      	strb	r2, [r5, r3]
        hdfu->dev_status[1] = 0U;
 8005604:	2300      	movs	r3, #0
 8005606:	492c      	ldr	r1, [pc, #176]	; (80056b8 <DFU_GetStatus+0x10c>)
 8005608:	546b      	strb	r3, [r5, r1]
        hdfu->dev_status[2] = 0U;
 800560a:	492c      	ldr	r1, [pc, #176]	; (80056bc <DFU_GetStatus+0x110>)
 800560c:	546b      	strb	r3, [r5, r1]
        hdfu->dev_status[3] = 0U;
 800560e:	492c      	ldr	r1, [pc, #176]	; (80056c0 <DFU_GetStatus+0x114>)
 8005610:	546b      	strb	r3, [r5, r1]
        hdfu->dev_status[4] = hdfu->dev_state;
 8005612:	4b2c      	ldr	r3, [pc, #176]	; (80056c4 <DFU_GetStatus+0x118>)
 8005614:	54ea      	strb	r2, [r5, r3]
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8005616:	3b14      	subs	r3, #20
 8005618:	58eb      	ldr	r3, [r5, r3]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d102      	bne.n	8005624 <DFU_GetStatus+0x78>
 800561e:	782b      	ldrb	r3, [r5, #0]
 8005620:	2b41      	cmp	r3, #65	; 0x41
 8005622:	d009      	beq.n	8005638 <DFU_GetStatus+0x8c>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 8005624:	69b3      	ldr	r3, [r6, #24]
 8005626:	2282      	movs	r2, #130	; 0x82
 8005628:	00d2      	lsls	r2, r2, #3
 800562a:	18aa      	adds	r2, r5, r2
 800562c:	2181      	movs	r1, #129	; 0x81
 800562e:	00c9      	lsls	r1, r1, #3
 8005630:	5868      	ldr	r0, [r5, r1]
 8005632:	2101      	movs	r1, #1
 8005634:	4798      	blx	r3
 8005636:	e7d5      	b.n	80055e4 <DFU_GetStatus+0x38>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8005638:	69b3      	ldr	r3, [r6, #24]
 800563a:	2282      	movs	r2, #130	; 0x82
 800563c:	00d2      	lsls	r2, r2, #3
 800563e:	18aa      	adds	r2, r5, r2
 8005640:	390b      	subs	r1, #11
 8005642:	5868      	ldr	r0, [r5, r1]
 8005644:	2100      	movs	r1, #0
 8005646:	4798      	blx	r3
 8005648:	e7cc      	b.n	80055e4 <DFU_GetStatus+0x38>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 800564a:	2205      	movs	r2, #5
 800564c:	2383      	movs	r3, #131	; 0x83
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	54ea      	strb	r2, [r5, r3]
        hdfu->dev_status[1] = 0U;
 8005652:	2300      	movs	r3, #0
 8005654:	4918      	ldr	r1, [pc, #96]	; (80056b8 <DFU_GetStatus+0x10c>)
 8005656:	546b      	strb	r3, [r5, r1]
        hdfu->dev_status[2] = 0U;
 8005658:	4918      	ldr	r1, [pc, #96]	; (80056bc <DFU_GetStatus+0x110>)
 800565a:	546b      	strb	r3, [r5, r1]
        hdfu->dev_status[3] = 0U;
 800565c:	4918      	ldr	r1, [pc, #96]	; (80056c0 <DFU_GetStatus+0x114>)
 800565e:	546b      	strb	r3, [r5, r1]
        hdfu->dev_status[4] = hdfu->dev_state;
 8005660:	4b18      	ldr	r3, [pc, #96]	; (80056c4 <DFU_GetStatus+0x118>)
 8005662:	54ea      	strb	r2, [r5, r3]
 8005664:	e7be      	b.n	80055e4 <DFU_GetStatus+0x38>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8005666:	4b18      	ldr	r3, [pc, #96]	; (80056c8 <DFU_GetStatus+0x11c>)
 8005668:	5ceb      	ldrb	r3, [r5, r3]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d012      	beq.n	8005694 <DFU_GetStatus+0xe8>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1b8      	bne.n	80055e4 <DFU_GetStatus+0x38>
            ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U))
 8005672:	7883      	ldrb	r3, [r0, #2]
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8005674:	075b      	lsls	r3, r3, #29
 8005676:	d5b5      	bpl.n	80055e4 <DFU_GetStatus+0x38>
          hdfu->dev_state = DFU_STATE_IDLE;
 8005678:	2202      	movs	r2, #2
 800567a:	2383      	movs	r3, #131	; 0x83
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	54ea      	strb	r2, [r5, r3]
          hdfu->dev_status[1] = 0U;
 8005680:	2300      	movs	r3, #0
 8005682:	490d      	ldr	r1, [pc, #52]	; (80056b8 <DFU_GetStatus+0x10c>)
 8005684:	546b      	strb	r3, [r5, r1]
          hdfu->dev_status[2] = 0U;
 8005686:	490d      	ldr	r1, [pc, #52]	; (80056bc <DFU_GetStatus+0x110>)
 8005688:	546b      	strb	r3, [r5, r1]
          hdfu->dev_status[3] = 0U;
 800568a:	490d      	ldr	r1, [pc, #52]	; (80056c0 <DFU_GetStatus+0x114>)
 800568c:	546b      	strb	r3, [r5, r1]
          hdfu->dev_status[4] = hdfu->dev_state;
 800568e:	4b0d      	ldr	r3, [pc, #52]	; (80056c4 <DFU_GetStatus+0x118>)
 8005690:	54ea      	strb	r2, [r5, r3]
 8005692:	e7a7      	b.n	80055e4 <DFU_GetStatus+0x38>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8005694:	3306      	adds	r3, #6
 8005696:	2283      	movs	r2, #131	; 0x83
 8005698:	00d2      	lsls	r2, r2, #3
 800569a:	54ab      	strb	r3, [r5, r2]
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 800569c:	4a06      	ldr	r2, [pc, #24]	; (80056b8 <DFU_GetStatus+0x10c>)
 800569e:	2101      	movs	r1, #1
 80056a0:	54a9      	strb	r1, [r5, r2]
        hdfu->dev_status[2] = 0U;
 80056a2:	2200      	movs	r2, #0
 80056a4:	4905      	ldr	r1, [pc, #20]	; (80056bc <DFU_GetStatus+0x110>)
 80056a6:	546a      	strb	r2, [r5, r1]
        hdfu->dev_status[3] = 0U;
 80056a8:	4905      	ldr	r1, [pc, #20]	; (80056c0 <DFU_GetStatus+0x114>)
 80056aa:	546a      	strb	r2, [r5, r1]
        hdfu->dev_status[4] = hdfu->dev_state;
 80056ac:	4a05      	ldr	r2, [pc, #20]	; (80056c4 <DFU_GetStatus+0x118>)
 80056ae:	54ab      	strb	r3, [r5, r2]
 80056b0:	e798      	b.n	80055e4 <DFU_GetStatus+0x38>
 80056b2:	46c0      	nop			; (mov r8, r8)
 80056b4:	00000404 	.word	0x00000404
 80056b8:	00000411 	.word	0x00000411
 80056bc:	00000412 	.word	0x00000412
 80056c0:	00000413 	.word	0x00000413
 80056c4:	00000414 	.word	0x00000414
 80056c8:	00000419 	.word	0x00000419

080056cc <DFU_GetState>:
{
 80056cc:	b510      	push	{r4, lr}
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056ce:	23b5      	movs	r3, #181	; 0xb5
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	58c3      	ldr	r3, [r0, r3]
 80056d4:	33b0      	adds	r3, #176	; 0xb0
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	5819      	ldr	r1, [r3, r0]
  if (hdfu == NULL)
 80056da:	2900      	cmp	r1, #0
 80056dc:	d006      	beq.n	80056ec <DFU_GetState+0x20>
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 80056de:	2383      	movs	r3, #131	; 0x83
 80056e0:	00db      	lsls	r3, r3, #3
 80056e2:	469c      	mov	ip, r3
 80056e4:	4461      	add	r1, ip
 80056e6:	2201      	movs	r2, #1
 80056e8:	f000 fa71 	bl	8005bce <USBD_CtlSendData>
}
 80056ec:	bd10      	pop	{r4, pc}
	...

080056f0 <DFU_Download>:
{
 80056f0:	b510      	push	{r4, lr}
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056f2:	23b5      	movs	r3, #181	; 0xb5
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	58c3      	ldr	r3, [r0, r3]
 80056f8:	33b0      	adds	r3, #176	; 0xb0
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	581b      	ldr	r3, [r3, r0]
  if (hdfu == NULL)
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d038      	beq.n	8005774 <DFU_Download+0x84>
  if (req->wLength > 0U)
 8005702:	88ca      	ldrh	r2, [r1, #6]
 8005704:	2a00      	cmp	r2, #0
 8005706:	d01f      	beq.n	8005748 <DFU_Download+0x58>
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8005708:	2283      	movs	r2, #131	; 0x83
 800570a:	00d2      	lsls	r2, r2, #3
 800570c:	5c9a      	ldrb	r2, [r3, r2]
 800570e:	2a02      	cmp	r2, #2
 8005710:	d001      	beq.n	8005716 <DFU_Download+0x26>
 8005712:	2a05      	cmp	r2, #5
 8005714:	d115      	bne.n	8005742 <DFU_Download+0x52>
      hdfu->wblock_num = req->wValue;
 8005716:	884a      	ldrh	r2, [r1, #2]
 8005718:	2480      	movs	r4, #128	; 0x80
 800571a:	00e4      	lsls	r4, r4, #3
 800571c:	511a      	str	r2, [r3, r4]
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 800571e:	88c9      	ldrh	r1, [r1, #6]
 8005720:	1c0a      	adds	r2, r1, #0
 8005722:	42a1      	cmp	r1, r4
 8005724:	d900      	bls.n	8005728 <DFU_Download+0x38>
 8005726:	1c22      	adds	r2, r4, #0
 8005728:	b292      	uxth	r2, r2
 800572a:	4914      	ldr	r1, [pc, #80]	; (800577c <DFU_Download+0x8c>)
 800572c:	505a      	str	r2, [r3, r1]
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 800572e:	2103      	movs	r1, #3
 8005730:	2483      	movs	r4, #131	; 0x83
 8005732:	00e4      	lsls	r4, r4, #3
 8005734:	5519      	strb	r1, [r3, r4]
      hdfu->dev_status[4] = hdfu->dev_state;
 8005736:	4c12      	ldr	r4, [pc, #72]	; (8005780 <DFU_Download+0x90>)
 8005738:	5519      	strb	r1, [r3, r4]
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 800573a:	0019      	movs	r1, r3
 800573c:	f000 fa55 	bl	8005bea <USBD_CtlPrepareRx>
 8005740:	e018      	b.n	8005774 <DFU_Download+0x84>
      USBD_CtlError(pdev, req);
 8005742:	f000 fa1c 	bl	8005b7e <USBD_CtlError>
 8005746:	e015      	b.n	8005774 <DFU_Download+0x84>
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 8005748:	2283      	movs	r2, #131	; 0x83
 800574a:	00d2      	lsls	r2, r2, #3
 800574c:	5c9a      	ldrb	r2, [r3, r2]
 800574e:	2a05      	cmp	r2, #5
 8005750:	d001      	beq.n	8005756 <DFU_Download+0x66>
 8005752:	2a02      	cmp	r2, #2
 8005754:	d10f      	bne.n	8005776 <DFU_Download+0x86>
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8005756:	4a0b      	ldr	r2, [pc, #44]	; (8005784 <DFU_Download+0x94>)
 8005758:	2101      	movs	r1, #1
 800575a:	5499      	strb	r1, [r3, r2]
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800575c:	3105      	adds	r1, #5
 800575e:	3a01      	subs	r2, #1
 8005760:	5499      	strb	r1, [r3, r2]
      hdfu->dev_status[1] = 0U;
 8005762:	2200      	movs	r2, #0
 8005764:	4808      	ldr	r0, [pc, #32]	; (8005788 <DFU_Download+0x98>)
 8005766:	541a      	strb	r2, [r3, r0]
      hdfu->dev_status[2] = 0U;
 8005768:	4808      	ldr	r0, [pc, #32]	; (800578c <DFU_Download+0x9c>)
 800576a:	541a      	strb	r2, [r3, r0]
      hdfu->dev_status[3] = 0U;
 800576c:	4808      	ldr	r0, [pc, #32]	; (8005790 <DFU_Download+0xa0>)
 800576e:	541a      	strb	r2, [r3, r0]
      hdfu->dev_status[4] = hdfu->dev_state;
 8005770:	4a03      	ldr	r2, [pc, #12]	; (8005780 <DFU_Download+0x90>)
 8005772:	5499      	strb	r1, [r3, r2]
}
 8005774:	bd10      	pop	{r4, pc}
      USBD_CtlError(pdev, req);
 8005776:	f000 fa02 	bl	8005b7e <USBD_CtlError>
 800577a:	e7fb      	b.n	8005774 <DFU_Download+0x84>
 800577c:	00000404 	.word	0x00000404
 8005780:	00000414 	.word	0x00000414
 8005784:	00000419 	.word	0x00000419
 8005788:	00000411 	.word	0x00000411
 800578c:	00000412 	.word	0x00000412
 8005790:	00000413 	.word	0x00000413

08005794 <DFU_Detach>:
{
 8005794:	b570      	push	{r4, r5, r6, lr}
 8005796:	0005      	movs	r5, r0
 8005798:	000e      	movs	r6, r1
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800579a:	23b5      	movs	r3, #181	; 0xb5
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	58c3      	ldr	r3, [r0, r3]
 80057a0:	33b0      	adds	r3, #176	; 0xb0
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	581c      	ldr	r4, [r3, r0]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 80057a6:	23b4      	movs	r3, #180	; 0xb4
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	58c0      	ldr	r0, [r0, r3]
 80057ac:	f7ff fd6e 	bl	800528c <USBD_DFU_GetDfuFuncDesc>
  if ((hdfu == NULL) || (pDfuFunc == NULL))
 80057b0:	2c00      	cmp	r4, #0
 80057b2:	d02d      	beq.n	8005810 <DFU_Detach+0x7c>
 80057b4:	2800      	cmp	r0, #0
 80057b6:	d02b      	beq.n	8005810 <DFU_Detach+0x7c>
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 80057b8:	2383      	movs	r3, #131	; 0x83
 80057ba:	00db      	lsls	r3, r3, #3
 80057bc:	5ce2      	ldrb	r2, [r4, r3]
 80057be:	1e93      	subs	r3, r2, #2
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d905      	bls.n	80057d2 <DFU_Detach+0x3e>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 80057c6:	2a05      	cmp	r2, #5
 80057c8:	d003      	beq.n	80057d2 <DFU_Detach+0x3e>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 80057ca:	2a06      	cmp	r2, #6
 80057cc:	d001      	beq.n	80057d2 <DFU_Detach+0x3e>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 80057ce:	2a09      	cmp	r2, #9
 80057d0:	d115      	bne.n	80057fe <DFU_Detach+0x6a>
    hdfu->dev_state = DFU_STATE_IDLE;
 80057d2:	2202      	movs	r2, #2
 80057d4:	2383      	movs	r3, #131	; 0x83
 80057d6:	00db      	lsls	r3, r3, #3
 80057d8:	54e2      	strb	r2, [r4, r3]
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 80057da:	2300      	movs	r3, #0
 80057dc:	2182      	movs	r1, #130	; 0x82
 80057de:	00c9      	lsls	r1, r1, #3
 80057e0:	5463      	strb	r3, [r4, r1]
    hdfu->dev_status[1] = 0U;
 80057e2:	490e      	ldr	r1, [pc, #56]	; (800581c <DFU_Detach+0x88>)
 80057e4:	5463      	strb	r3, [r4, r1]
    hdfu->dev_status[2] = 0U;
 80057e6:	490e      	ldr	r1, [pc, #56]	; (8005820 <DFU_Detach+0x8c>)
 80057e8:	5463      	strb	r3, [r4, r1]
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 80057ea:	490e      	ldr	r1, [pc, #56]	; (8005824 <DFU_Detach+0x90>)
 80057ec:	5463      	strb	r3, [r4, r1]
    hdfu->dev_status[4] = hdfu->dev_state;
 80057ee:	490e      	ldr	r1, [pc, #56]	; (8005828 <DFU_Detach+0x94>)
 80057f0:	5462      	strb	r2, [r4, r1]
    hdfu->dev_status[5] = 0U; /*iString*/
 80057f2:	4a0e      	ldr	r2, [pc, #56]	; (800582c <DFU_Detach+0x98>)
 80057f4:	54a3      	strb	r3, [r4, r2]
    hdfu->wblock_num = 0U;
 80057f6:	3a15      	subs	r2, #21
 80057f8:	50a3      	str	r3, [r4, r2]
    hdfu->wlength = 0U;
 80057fa:	4a0d      	ldr	r2, [pc, #52]	; (8005830 <DFU_Detach+0x9c>)
 80057fc:	50a3      	str	r3, [r4, r2]
  if ((pDfuFunc->bmAttributes & DFU_DETACH_MASK) != 0U)
 80057fe:	7883      	ldrb	r3, [r0, #2]
 8005800:	071b      	lsls	r3, r3, #28
 8005802:	d506      	bpl.n	8005812 <DFU_Detach+0x7e>
    (void)USBD_Stop(pdev);
 8005804:	0028      	movs	r0, r5
 8005806:	f000 f99a 	bl	8005b3e <USBD_Stop>
    (void)USBD_Start(pdev);
 800580a:	0028      	movs	r0, r5
 800580c:	f000 f993 	bl	8005b36 <USBD_Start>
}
 8005810:	bd70      	pop	{r4, r5, r6, pc}
    USBD_Delay((uint32_t)req->wValue);
 8005812:	8870      	ldrh	r0, [r6, #2]
 8005814:	f7fb feae 	bl	8001574 <HAL_Delay>
 8005818:	e7fa      	b.n	8005810 <DFU_Detach+0x7c>
 800581a:	46c0      	nop			; (mov r8, r8)
 800581c:	00000411 	.word	0x00000411
 8005820:	00000412 	.word	0x00000412
 8005824:	00000413 	.word	0x00000413
 8005828:	00000414 	.word	0x00000414
 800582c:	00000415 	.word	0x00000415
 8005830:	00000404 	.word	0x00000404

08005834 <USBD_DFU_Setup>:
{
 8005834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005836:	b083      	sub	sp, #12
 8005838:	0004      	movs	r4, r0
 800583a:	000d      	movs	r5, r1
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800583c:	23b5      	movs	r3, #181	; 0xb5
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	58c3      	ldr	r3, [r0, r3]
 8005842:	33b0      	adds	r3, #176	; 0xb0
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	5819      	ldr	r1, [r3, r0]
  uint16_t status_info = 0U;
 8005848:	466b      	mov	r3, sp
 800584a:	2200      	movs	r2, #0
 800584c:	80da      	strh	r2, [r3, #6]
  if (hdfu == NULL)
 800584e:	2900      	cmp	r1, #0
 8005850:	d100      	bne.n	8005854 <USBD_DFU_Setup+0x20>
 8005852:	e098      	b.n	8005986 <USBD_DFU_Setup+0x152>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005854:	782b      	ldrb	r3, [r5, #0]
 8005856:	3260      	adds	r2, #96	; 0x60
 8005858:	0016      	movs	r6, r2
 800585a:	401e      	ands	r6, r3
 800585c:	421a      	tst	r2, r3
 800585e:	d02c      	beq.n	80058ba <USBD_DFU_Setup+0x86>
 8005860:	2e20      	cmp	r6, #32
 8005862:	d000      	beq.n	8005866 <USBD_DFU_Setup+0x32>
 8005864:	e088      	b.n	8005978 <USBD_DFU_Setup+0x144>
      switch (req->bRequest)
 8005866:	786e      	ldrb	r6, [r5, #1]
 8005868:	2e06      	cmp	r6, #6
 800586a:	d821      	bhi.n	80058b0 <USBD_DFU_Setup+0x7c>
 800586c:	00b3      	lsls	r3, r6, #2
 800586e:	4a47      	ldr	r2, [pc, #284]	; (800598c <USBD_DFU_Setup+0x158>)
 8005870:	58d3      	ldr	r3, [r2, r3]
 8005872:	469f      	mov	pc, r3
          DFU_Download(pdev, req);
 8005874:	0029      	movs	r1, r5
 8005876:	f7ff ff3b 	bl	80056f0 <DFU_Download>
  USBD_StatusTypeDef ret = USBD_OK;
 800587a:	2600      	movs	r6, #0
          break;
 800587c:	e080      	b.n	8005980 <USBD_DFU_Setup+0x14c>
          DFU_Upload(pdev, req);
 800587e:	0029      	movs	r1, r5
 8005880:	f7ff fe04 	bl	800548c <DFU_Upload>
  USBD_StatusTypeDef ret = USBD_OK;
 8005884:	2600      	movs	r6, #0
          break;
 8005886:	e07b      	b.n	8005980 <USBD_DFU_Setup+0x14c>
          DFU_GetStatus(pdev);
 8005888:	f7ff fe90 	bl	80055ac <DFU_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800588c:	2600      	movs	r6, #0
          break;
 800588e:	e077      	b.n	8005980 <USBD_DFU_Setup+0x14c>
          DFU_ClearStatus(pdev);
 8005890:	f7ff fc70 	bl	8005174 <DFU_ClearStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8005894:	2600      	movs	r6, #0
          break;
 8005896:	e073      	b.n	8005980 <USBD_DFU_Setup+0x14c>
          DFU_GetState(pdev);
 8005898:	f7ff ff18 	bl	80056cc <DFU_GetState>
  USBD_StatusTypeDef ret = USBD_OK;
 800589c:	2600      	movs	r6, #0
          break;
 800589e:	e06f      	b.n	8005980 <USBD_DFU_Setup+0x14c>
          DFU_Abort(pdev);
 80058a0:	f7ff fca6 	bl	80051f0 <DFU_Abort>
  USBD_StatusTypeDef ret = USBD_OK;
 80058a4:	2600      	movs	r6, #0
          break;
 80058a6:	e06b      	b.n	8005980 <USBD_DFU_Setup+0x14c>
          DFU_Detach(pdev, req);
 80058a8:	0029      	movs	r1, r5
 80058aa:	f7ff ff73 	bl	8005794 <DFU_Detach>
          break;
 80058ae:	e067      	b.n	8005980 <USBD_DFU_Setup+0x14c>
          USBD_CtlError(pdev, req);
 80058b0:	0029      	movs	r1, r5
 80058b2:	f000 f964 	bl	8005b7e <USBD_CtlError>
          ret = USBD_FAIL;
 80058b6:	2603      	movs	r6, #3
          break;
 80058b8:	e062      	b.n	8005980 <USBD_DFU_Setup+0x14c>
      switch (req->bRequest)
 80058ba:	786f      	ldrb	r7, [r5, #1]
 80058bc:	2f0b      	cmp	r7, #11
 80058be:	d855      	bhi.n	800596c <USBD_DFU_Setup+0x138>
 80058c0:	00bb      	lsls	r3, r7, #2
 80058c2:	4a33      	ldr	r2, [pc, #204]	; (8005990 <USBD_DFU_Setup+0x15c>)
 80058c4:	58d3      	ldr	r3, [r2, r3]
 80058c6:	469f      	mov	pc, r3
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058c8:	23a7      	movs	r3, #167	; 0xa7
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	5cc3      	ldrb	r3, [r0, r3]
 80058ce:	2b03      	cmp	r3, #3
 80058d0:	d004      	beq.n	80058dc <USBD_DFU_Setup+0xa8>
            USBD_CtlError(pdev, req);
 80058d2:	0029      	movs	r1, r5
 80058d4:	f000 f953 	bl	8005b7e <USBD_CtlError>
            ret = USBD_FAIL;
 80058d8:	2603      	movs	r6, #3
 80058da:	e051      	b.n	8005980 <USBD_DFU_Setup+0x14c>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80058dc:	2202      	movs	r2, #2
 80058de:	466b      	mov	r3, sp
 80058e0:	1d99      	adds	r1, r3, #6
 80058e2:	f000 f974 	bl	8005bce <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80058e6:	003e      	movs	r6, r7
 80058e8:	e04a      	b.n	8005980 <USBD_DFU_Setup+0x14c>
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 80058ea:	886b      	ldrh	r3, [r5, #2]
 80058ec:	0a1b      	lsrs	r3, r3, #8
 80058ee:	2b21      	cmp	r3, #33	; 0x21
 80058f0:	d146      	bne.n	8005980 <USBD_DFU_Setup+0x14c>
            pbuf = (uint8_t *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 80058f2:	23b4      	movs	r3, #180	; 0xb4
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	58c0      	ldr	r0, [r0, r3]
 80058f8:	f7ff fcc8 	bl	800528c <USBD_DFU_GetDfuFuncDesc>
 80058fc:	1e01      	subs	r1, r0, #0
            if (pbuf != NULL)
 80058fe:	d009      	beq.n	8005914 <USBD_DFU_Setup+0xe0>
              len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8005900:	88eb      	ldrh	r3, [r5, #6]
 8005902:	1c1a      	adds	r2, r3, #0
 8005904:	2b09      	cmp	r3, #9
 8005906:	d900      	bls.n	800590a <USBD_DFU_Setup+0xd6>
 8005908:	2209      	movs	r2, #9
 800590a:	b292      	uxth	r2, r2
              (void)USBD_CtlSendData(pdev, pbuf, len);
 800590c:	0020      	movs	r0, r4
 800590e:	f000 f95e 	bl	8005bce <USBD_CtlSendData>
 8005912:	e035      	b.n	8005980 <USBD_DFU_Setup+0x14c>
              USBD_CtlError(pdev, req);
 8005914:	0029      	movs	r1, r5
 8005916:	0020      	movs	r0, r4
 8005918:	f000 f931 	bl	8005b7e <USBD_CtlError>
              ret = USBD_FAIL;
 800591c:	2603      	movs	r6, #3
 800591e:	e02f      	b.n	8005980 <USBD_DFU_Setup+0x14c>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005920:	23a7      	movs	r3, #167	; 0xa7
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	5cc3      	ldrb	r3, [r0, r3]
 8005926:	2b03      	cmp	r3, #3
 8005928:	d004      	beq.n	8005934 <USBD_DFU_Setup+0x100>
            USBD_CtlError(pdev, req);
 800592a:	0029      	movs	r1, r5
 800592c:	f000 f927 	bl	8005b7e <USBD_CtlError>
            ret = USBD_FAIL;
 8005930:	2603      	movs	r6, #3
 8005932:	e025      	b.n	8005980 <USBD_DFU_Setup+0x14c>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 8005934:	4b17      	ldr	r3, [pc, #92]	; (8005994 <USBD_DFU_Setup+0x160>)
 8005936:	469c      	mov	ip, r3
 8005938:	4461      	add	r1, ip
 800593a:	2201      	movs	r2, #1
 800593c:	f000 f947 	bl	8005bce <USBD_CtlSendData>
 8005940:	e01e      	b.n	8005980 <USBD_DFU_Setup+0x14c>
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8005942:	78ae      	ldrb	r6, [r5, #2]
 8005944:	2e00      	cmp	r6, #0
 8005946:	d10c      	bne.n	8005962 <USBD_DFU_Setup+0x12e>
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005948:	23a7      	movs	r3, #167	; 0xa7
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	5cc3      	ldrb	r3, [r0, r3]
 800594e:	2b03      	cmp	r3, #3
 8005950:	d102      	bne.n	8005958 <USBD_DFU_Setup+0x124>
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8005952:	4b10      	ldr	r3, [pc, #64]	; (8005994 <USBD_DFU_Setup+0x160>)
 8005954:	50ce      	str	r6, [r1, r3]
 8005956:	e013      	b.n	8005980 <USBD_DFU_Setup+0x14c>
              USBD_CtlError(pdev, req);
 8005958:	0029      	movs	r1, r5
 800595a:	f000 f910 	bl	8005b7e <USBD_CtlError>
              ret = USBD_FAIL;
 800595e:	2603      	movs	r6, #3
 8005960:	e00e      	b.n	8005980 <USBD_DFU_Setup+0x14c>
            USBD_CtlError(pdev, req);
 8005962:	0029      	movs	r1, r5
 8005964:	f000 f90b 	bl	8005b7e <USBD_CtlError>
            ret = USBD_FAIL;
 8005968:	2603      	movs	r6, #3
 800596a:	e009      	b.n	8005980 <USBD_DFU_Setup+0x14c>
          USBD_CtlError(pdev, req);
 800596c:	0029      	movs	r1, r5
 800596e:	0020      	movs	r0, r4
 8005970:	f000 f905 	bl	8005b7e <USBD_CtlError>
          ret = USBD_FAIL;
 8005974:	2603      	movs	r6, #3
          break;
 8005976:	e003      	b.n	8005980 <USBD_DFU_Setup+0x14c>
      USBD_CtlError(pdev, req);
 8005978:	0029      	movs	r1, r5
 800597a:	f000 f900 	bl	8005b7e <USBD_CtlError>
      ret = USBD_FAIL;
 800597e:	2603      	movs	r6, #3
}
 8005980:	0030      	movs	r0, r6
 8005982:	b003      	add	sp, #12
 8005984:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 8005986:	2603      	movs	r6, #3
 8005988:	e7fa      	b.n	8005980 <USBD_DFU_Setup+0x14c>
 800598a:	46c0      	nop			; (mov r8, r8)
 800598c:	08006014 	.word	0x08006014
 8005990:	08006030 	.word	0x08006030
 8005994:	0000040c 	.word	0x0000040c

08005998 <USBD_DFU_DeInit>:
{
 8005998:	b570      	push	{r4, r5, r6, lr}
 800599a:	0004      	movs	r4, r0
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800599c:	23b5      	movs	r3, #181	; 0xb5
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	58c3      	ldr	r3, [r0, r3]
 80059a2:	33b0      	adds	r3, #176	; 0xb0
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	581b      	ldr	r3, [r3, r0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d025      	beq.n	80059f8 <USBD_DFU_DeInit+0x60>
  hdfu->wblock_num = 0U;
 80059ac:	2500      	movs	r5, #0
 80059ae:	2280      	movs	r2, #128	; 0x80
 80059b0:	00d2      	lsls	r2, r2, #3
 80059b2:	509d      	str	r5, [r3, r2]
  hdfu->wlength = 0U;
 80059b4:	4a11      	ldr	r2, [pc, #68]	; (80059fc <USBD_DFU_DeInit+0x64>)
 80059b6:	509d      	str	r5, [r3, r2]
  hdfu->dev_state = DFU_STATE_IDLE;
 80059b8:	2202      	movs	r2, #2
 80059ba:	2183      	movs	r1, #131	; 0x83
 80059bc:	00c9      	lsls	r1, r1, #3
 80059be:	545a      	strb	r2, [r3, r1]
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 80059c0:	3908      	subs	r1, #8
 80059c2:	545d      	strb	r5, [r3, r1]
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 80059c4:	490e      	ldr	r1, [pc, #56]	; (8005a00 <USBD_DFU_DeInit+0x68>)
 80059c6:	545a      	strb	r2, [r3, r1]
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80059c8:	26b5      	movs	r6, #181	; 0xb5
 80059ca:	00b6      	lsls	r6, r6, #2
 80059cc:	5983      	ldr	r3, [r0, r6]
 80059ce:	33b0      	adds	r3, #176	; 0xb0
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	18c3      	adds	r3, r0, r3
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	4798      	blx	r3
  USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80059da:	59a3      	ldr	r3, [r4, r6]
 80059dc:	33b0      	adds	r3, #176	; 0xb0
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	5918      	ldr	r0, [r3, r4]
 80059e2:	f000 fa97 	bl	8005f14 <USBD_static_free>
  pdev->pClassDataCmsit[pdev->classId] = NULL;
 80059e6:	59a3      	ldr	r3, [r4, r6]
 80059e8:	33b0      	adds	r3, #176	; 0xb0
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	511d      	str	r5, [r3, r4]
  pdev->pClassData = NULL;
 80059ee:	23af      	movs	r3, #175	; 0xaf
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	50e5      	str	r5, [r4, r3]
  return (uint8_t)USBD_OK;
 80059f4:	2000      	movs	r0, #0
}
 80059f6:	bd70      	pop	{r4, r5, r6, pc}
    return (uint8_t)USBD_EMEM;
 80059f8:	2002      	movs	r0, #2
 80059fa:	e7fc      	b.n	80059f6 <USBD_DFU_DeInit+0x5e>
 80059fc:	00000404 	.word	0x00000404
 8005a00:	00000414 	.word	0x00000414

08005a04 <USBD_DFU_Init>:
{
 8005a04:	b570      	push	{r4, r5, r6, lr}
 8005a06:	0004      	movs	r4, r0
  hdfu = (USBD_DFU_HandleTypeDef *)USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8005a08:	481f      	ldr	r0, [pc, #124]	; (8005a88 <USBD_DFU_Init+0x84>)
 8005a0a:	f000 fa7f 	bl	8005f0c <USBD_static_malloc>
 8005a0e:	1e03      	subs	r3, r0, #0
  if (hdfu == NULL)
 8005a10:	d02f      	beq.n	8005a72 <USBD_DFU_Init+0x6e>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hdfu;
 8005a12:	21b5      	movs	r1, #181	; 0xb5
 8005a14:	0089      	lsls	r1, r1, #2
 8005a16:	5862      	ldr	r2, [r4, r1]
 8005a18:	32b0      	adds	r2, #176	; 0xb0
 8005a1a:	0092      	lsls	r2, r2, #2
 8005a1c:	5110      	str	r0, [r2, r4]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005a1e:	22af      	movs	r2, #175	; 0xaf
 8005a20:	0092      	lsls	r2, r2, #2
 8005a22:	50a0      	str	r0, [r4, r2]
  hdfu->alt_setting = 0U;
 8005a24:	2200      	movs	r2, #0
 8005a26:	4819      	ldr	r0, [pc, #100]	; (8005a8c <USBD_DFU_Init+0x88>)
 8005a28:	501a      	str	r2, [r3, r0]
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8005a2a:	3804      	subs	r0, #4
 8005a2c:	2580      	movs	r5, #128	; 0x80
 8005a2e:	052d      	lsls	r5, r5, #20
 8005a30:	501d      	str	r5, [r3, r0]
  hdfu->wblock_num = 0U;
 8005a32:	3808      	subs	r0, #8
 8005a34:	501a      	str	r2, [r3, r0]
  hdfu->wlength = 0U;
 8005a36:	4816      	ldr	r0, [pc, #88]	; (8005a90 <USBD_DFU_Init+0x8c>)
 8005a38:	501a      	str	r2, [r3, r0]
  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8005a3a:	4816      	ldr	r0, [pc, #88]	; (8005a94 <USBD_DFU_Init+0x90>)
 8005a3c:	541a      	strb	r2, [r3, r0]
  hdfu->dev_state = DFU_STATE_IDLE;
 8005a3e:	2002      	movs	r0, #2
 8005a40:	2583      	movs	r5, #131	; 0x83
 8005a42:	00ed      	lsls	r5, r5, #3
 8005a44:	5558      	strb	r0, [r3, r5]
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8005a46:	3d08      	subs	r5, #8
 8005a48:	555a      	strb	r2, [r3, r5]
  hdfu->dev_status[1] = 0U;
 8005a4a:	4d13      	ldr	r5, [pc, #76]	; (8005a98 <USBD_DFU_Init+0x94>)
 8005a4c:	555a      	strb	r2, [r3, r5]
  hdfu->dev_status[2] = 0U;
 8005a4e:	4d13      	ldr	r5, [pc, #76]	; (8005a9c <USBD_DFU_Init+0x98>)
 8005a50:	555a      	strb	r2, [r3, r5]
  hdfu->dev_status[3] = 0U;
 8005a52:	4d13      	ldr	r5, [pc, #76]	; (8005aa0 <USBD_DFU_Init+0x9c>)
 8005a54:	555a      	strb	r2, [r3, r5]
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8005a56:	4d13      	ldr	r5, [pc, #76]	; (8005aa4 <USBD_DFU_Init+0xa0>)
 8005a58:	5558      	strb	r0, [r3, r5]
  hdfu->dev_status[5] = 0U;
 8005a5a:	4813      	ldr	r0, [pc, #76]	; (8005aa8 <USBD_DFU_Init+0xa4>)
 8005a5c:	541a      	strb	r2, [r3, r0]
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->Init() != USBD_OK)
 8005a5e:	5863      	ldr	r3, [r4, r1]
 8005a60:	33b0      	adds	r3, #176	; 0xb0
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	18e4      	adds	r4, r4, r3
 8005a66:	6863      	ldr	r3, [r4, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	4798      	blx	r3
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	d109      	bne.n	8005a84 <USBD_DFU_Init+0x80>
}
 8005a70:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005a72:	23b5      	movs	r3, #181	; 0xb5
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	58e3      	ldr	r3, [r4, r3]
 8005a78:	33b0      	adds	r3, #176	; 0xb0
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	511a      	str	r2, [r3, r4]
    return (uint8_t)USBD_EMEM;
 8005a80:	2002      	movs	r0, #2
 8005a82:	e7f5      	b.n	8005a70 <USBD_DFU_Init+0x6c>
    return (uint8_t)USBD_FAIL;
 8005a84:	2003      	movs	r0, #3
 8005a86:	e7f3      	b.n	8005a70 <USBD_DFU_Init+0x6c>
 8005a88:	0000041c 	.word	0x0000041c
 8005a8c:	0000040c 	.word	0x0000040c
 8005a90:	00000404 	.word	0x00000404
 8005a94:	00000419 	.word	0x00000419
 8005a98:	00000411 	.word	0x00000411
 8005a9c:	00000412 	.word	0x00000412
 8005aa0:	00000413 	.word	0x00000413
 8005aa4:	00000414 	.word	0x00000414
 8005aa8:	00000415 	.word	0x00000415

08005aac <USBD_DFU_RegisterMedia>:
  if (fops == NULL)
 8005aac:	2900      	cmp	r1, #0
 8005aae:	d008      	beq.n	8005ac2 <USBD_DFU_RegisterMedia+0x16>
  pdev->pUserData[pdev->classId] = fops;
 8005ab0:	23b5      	movs	r3, #181	; 0xb5
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	58c3      	ldr	r3, [r0, r3]
 8005ab6:	33b0      	adds	r3, #176	; 0xb0
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	18c0      	adds	r0, r0, r3
 8005abc:	6041      	str	r1, [r0, #4]
  return (uint8_t)USBD_OK;
 8005abe:	2000      	movs	r0, #0
}
 8005ac0:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8005ac2:	2003      	movs	r0, #3
 8005ac4:	e7fc      	b.n	8005ac0 <USBD_DFU_RegisterMedia+0x14>

08005ac6 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005ac6:	b510      	push	{r4, lr}
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005ac8:	2800      	cmp	r0, #0
 8005aca:	d014      	beq.n	8005af6 <USBD_Init+0x30>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005acc:	2300      	movs	r3, #0
 8005ace:	24ae      	movs	r4, #174	; 0xae
 8005ad0:	00a4      	lsls	r4, r4, #2
 8005ad2:	5103      	str	r3, [r0, r4]
  pdev->pUserData[0] = NULL;
 8005ad4:	340c      	adds	r4, #12
 8005ad6:	5103      	str	r3, [r0, r4]
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005ad8:	340c      	adds	r4, #12
 8005ada:	5103      	str	r3, [r0, r4]

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005adc:	2900      	cmp	r1, #0
 8005ade:	d002      	beq.n	8005ae6 <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 8005ae0:	23ad      	movs	r3, #173	; 0xad
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	50c1      	str	r1, [r0, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ae6:	23a7      	movs	r3, #167	; 0xa7
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	2101      	movs	r1, #1
 8005aec:	54c1      	strb	r1, [r0, r3]
  pdev->id = id;
 8005aee:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005af0:	f000 f9aa 	bl	8005e48 <USBD_LL_Init>

  return ret;
}
 8005af4:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8005af6:	2003      	movs	r0, #3
 8005af8:	e7fc      	b.n	8005af4 <USBD_Init+0x2e>

08005afa <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005afa:	b510      	push	{r4, lr}
 8005afc:	b082      	sub	sp, #8
 8005afe:	0004      	movs	r4, r0
  uint16_t len = 0U;
 8005b00:	466b      	mov	r3, sp
 8005b02:	2200      	movs	r2, #0
 8005b04:	80da      	strh	r2, [r3, #6]

  if (pclass == NULL)
 8005b06:	2900      	cmp	r1, #0
 8005b08:	d013      	beq.n	8005b32 <USBD_RegisterClass+0x38>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005b0a:	23ae      	movs	r3, #174	; 0xae
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	50c1      	str	r1, [r0, r3]
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005b10:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d005      	beq.n	8005b22 <USBD_RegisterClass+0x28>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005b16:	466a      	mov	r2, sp
 8005b18:	1d90      	adds	r0, r2, #6
 8005b1a:	4798      	blx	r3
 8005b1c:	23b4      	movs	r3, #180	; 0xb4
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	50e0      	str	r0, [r4, r3]
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005b22:	22b6      	movs	r2, #182	; 0xb6
 8005b24:	0092      	lsls	r2, r2, #2
 8005b26:	58a3      	ldr	r3, [r4, r2]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	50a3      	str	r3, [r4, r2]

  return USBD_OK;
 8005b2c:	2000      	movs	r0, #0
}
 8005b2e:	b002      	add	sp, #8
 8005b30:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8005b32:	2003      	movs	r0, #3
 8005b34:	e7fb      	b.n	8005b2e <USBD_RegisterClass+0x34>

08005b36 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005b36:	b510      	push	{r4, lr}
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005b38:	f000 f9ba 	bl	8005eb0 <USBD_LL_Start>
}
 8005b3c:	bd10      	pop	{r4, pc}

08005b3e <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8005b3e:	b510      	push	{r4, lr}
 8005b40:	0004      	movs	r4, r0
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 8005b42:	f000 f9be 	bl	8005ec2 <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 8005b46:	23ae      	movs	r3, #174	; 0xae
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	58e3      	ldr	r3, [r4, r3]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d003      	beq.n	8005b58 <USBD_Stop+0x1a>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	7921      	ldrb	r1, [r4, #4]
 8005b54:	0020      	movs	r0, r4
 8005b56:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
}
 8005b58:	2000      	movs	r0, #0
 8005b5a:	bd10      	pop	{r4, pc}

08005b5c <USBD_GetNextDesc>:
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 8005b5c:	7803      	ldrb	r3, [r0, #0]
 8005b5e:	880a      	ldrh	r2, [r1, #0]
 8005b60:	189b      	adds	r3, r3, r2
 8005b62:	800b      	strh	r3, [r1, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005b64:	7803      	ldrb	r3, [r0, #0]
 8005b66:	18c0      	adds	r0, r0, r3

  return (pnext);
}
 8005b68:	4770      	bx	lr

08005b6a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005b6a:	0003      	movs	r3, r0
  uint8_t  len = 0U;
 8005b6c:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8005b6e:	e002      	b.n	8005b76 <USBD_GetLen+0xc>
  {
    len++;
 8005b70:	3001      	adds	r0, #1
 8005b72:	b2c0      	uxtb	r0, r0
    pbuff++;
 8005b74:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 8005b76:	781a      	ldrb	r2, [r3, #0]
 8005b78:	2a00      	cmp	r2, #0
 8005b7a:	d1f9      	bne.n	8005b70 <USBD_GetLen+0x6>
  }

  return len;
}
 8005b7c:	4770      	bx	lr

08005b7e <USBD_CtlError>:
{
 8005b7e:	b510      	push	{r4, lr}
 8005b80:	0004      	movs	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b82:	2180      	movs	r1, #128	; 0x80
 8005b84:	f000 f9a6 	bl	8005ed4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005b88:	2100      	movs	r1, #0
 8005b8a:	0020      	movs	r0, r4
 8005b8c:	f000 f9a2 	bl	8005ed4 <USBD_LL_StallEP>
}
 8005b90:	bd10      	pop	{r4, pc}

08005b92 <USBD_GetString>:
{
 8005b92:	b570      	push	{r4, r5, r6, lr}
 8005b94:	0004      	movs	r4, r0
 8005b96:	000d      	movs	r5, r1
 8005b98:	0016      	movs	r6, r2
  if (desc == NULL)
 8005b9a:	2800      	cmp	r0, #0
 8005b9c:	d016      	beq.n	8005bcc <USBD_GetString+0x3a>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005b9e:	f7ff ffe4 	bl	8005b6a <USBD_GetLen>
 8005ba2:	3001      	adds	r0, #1
 8005ba4:	0043      	lsls	r3, r0, #1
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 8005baa:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005bac:	2303      	movs	r3, #3
 8005bae:	706b      	strb	r3, [r5, #1]
  idx++;
 8005bb0:	3b01      	subs	r3, #1
  while (*pdesc != (uint8_t)'\0')
 8005bb2:	e008      	b.n	8005bc6 <USBD_GetString+0x34>
    unicode[idx] = *pdesc;
 8005bb4:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 8005bb6:	3401      	adds	r4, #1
    idx++;
 8005bb8:	1c5a      	adds	r2, r3, #1
 8005bba:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 8005bbc:	18aa      	adds	r2, r5, r2
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	7011      	strb	r1, [r2, #0]
    idx++;
 8005bc2:	3302      	adds	r3, #2
 8005bc4:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 8005bc6:	7822      	ldrb	r2, [r4, #0]
 8005bc8:	2a00      	cmp	r2, #0
 8005bca:	d1f3      	bne.n	8005bb4 <USBD_GetString+0x22>
}
 8005bcc:	bd70      	pop	{r4, r5, r6, pc}

08005bce <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005bce:	b510      	push	{r4, lr}
 8005bd0:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005bd2:	22a5      	movs	r2, #165	; 0xa5
 8005bd4:	0092      	lsls	r2, r2, #2
 8005bd6:	2402      	movs	r4, #2
 8005bd8:	5084      	str	r4, [r0, r2]
  pdev->ep_in[0].total_length = len;
 8005bda:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005bdc:	61c3      	str	r3, [r0, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005bde:	000a      	movs	r2, r1
 8005be0:	2100      	movs	r1, #0
 8005be2:	f000 f980 	bl	8005ee6 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005be6:	2000      	movs	r0, #0
 8005be8:	bd10      	pop	{r4, pc}

08005bea <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005bea:	b510      	push	{r4, lr}
 8005bec:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005bee:	22a5      	movs	r2, #165	; 0xa5
 8005bf0:	0092      	lsls	r2, r2, #2
 8005bf2:	2403      	movs	r4, #3
 8005bf4:	5084      	str	r4, [r0, r2]
  pdev->ep_out[0].total_length = len;
 8005bf6:	3a3d      	subs	r2, #61	; 0x3d
 8005bf8:	3aff      	subs	r2, #255	; 0xff
 8005bfa:	5083      	str	r3, [r0, r2]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8005bfc:	3204      	adds	r2, #4
 8005bfe:	5083      	str	r3, [r0, r2]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005c00:	000a      	movs	r2, r1
 8005c02:	2100      	movs	r1, #0
 8005c04:	f000 f978 	bl	8005ef8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005c08:	2000      	movs	r0, #0
 8005c0a:	bd10      	pop	{r4, pc}

08005c0c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8005c0c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &DFU_Desc, DEVICE_FS) != USBD_OK) {
 8005c0e:	4912      	ldr	r1, [pc, #72]	; (8005c58 <MX_USB_Device_Init+0x4c>)
 8005c10:	4812      	ldr	r0, [pc, #72]	; (8005c5c <MX_USB_Device_Init+0x50>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	f7ff ff57 	bl	8005ac6 <USBD_Init>
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	d111      	bne.n	8005c40 <MX_USB_Device_Init+0x34>
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK) {
 8005c1c:	4910      	ldr	r1, [pc, #64]	; (8005c60 <MX_USB_Device_Init+0x54>)
 8005c1e:	480f      	ldr	r0, [pc, #60]	; (8005c5c <MX_USB_Device_Init+0x50>)
 8005c20:	f7ff ff6b 	bl	8005afa <USBD_RegisterClass>
 8005c24:	2800      	cmp	r0, #0
 8005c26:	d10e      	bne.n	8005c46 <MX_USB_Device_Init+0x3a>
    Error_Handler();
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_Flash_fops) != USBD_OK) {
 8005c28:	490e      	ldr	r1, [pc, #56]	; (8005c64 <MX_USB_Device_Init+0x58>)
 8005c2a:	480c      	ldr	r0, [pc, #48]	; (8005c5c <MX_USB_Device_Init+0x50>)
 8005c2c:	f7ff ff3e 	bl	8005aac <USBD_DFU_RegisterMedia>
 8005c30:	2800      	cmp	r0, #0
 8005c32:	d10b      	bne.n	8005c4c <MX_USB_Device_Init+0x40>
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8005c34:	4809      	ldr	r0, [pc, #36]	; (8005c5c <MX_USB_Device_Init+0x50>)
 8005c36:	f7ff ff7e 	bl	8005b36 <USBD_Start>
 8005c3a:	2800      	cmp	r0, #0
 8005c3c:	d109      	bne.n	8005c52 <MX_USB_Device_Init+0x46>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8005c3e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8005c40:	f7fa ff20 	bl	8000a84 <Error_Handler>
 8005c44:	e7ea      	b.n	8005c1c <MX_USB_Device_Init+0x10>
    Error_Handler();
 8005c46:	f7fa ff1d 	bl	8000a84 <Error_Handler>
 8005c4a:	e7ed      	b.n	8005c28 <MX_USB_Device_Init+0x1c>
    Error_Handler();
 8005c4c:	f7fa ff1a 	bl	8000a84 <Error_Handler>
 8005c50:	e7f0      	b.n	8005c34 <MX_USB_Device_Init+0x28>
    Error_Handler();
 8005c52:	f7fa ff17 	bl	8000a84 <Error_Handler>
}
 8005c56:	e7f2      	b.n	8005c3e <MX_USB_Device_Init+0x32>
 8005c58:	20000070 	.word	0x20000070
 8005c5c:	20000a04 	.word	0x20000a04
 8005c60:	2000000c 	.word	0x2000000c
 8005c64:	200000c4 	.word	0x200000c4

08005c68 <USBD_DFU_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_DFU_DeviceDesc);
 8005c68:	2312      	movs	r3, #18
 8005c6a:	800b      	strh	r3, [r1, #0]
  return USBD_DFU_DeviceDesc;
 8005c6c:	4800      	ldr	r0, [pc, #0]	; (8005c70 <USBD_DFU_DeviceDescriptor+0x8>)
}
 8005c6e:	4770      	bx	lr
 8005c70:	20000090 	.word	0x20000090

08005c74 <USBD_DFU_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005c74:	2304      	movs	r3, #4
 8005c76:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
 8005c78:	4800      	ldr	r0, [pc, #0]	; (8005c7c <USBD_DFU_LangIDStrDescriptor+0x8>)
}
 8005c7a:	4770      	bx	lr
 8005c7c:	200000a4 	.word	0x200000a4

08005c80 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005c80:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8005c82:	2300      	movs	r3, #0
 8005c84:	e00a      	b.n	8005c9c <IntToUnicode+0x1c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005c86:	005d      	lsls	r5, r3, #1
 8005c88:	3437      	adds	r4, #55	; 0x37
 8005c8a:	554c      	strb	r4, [r1, r5]
    }

    value = value << 4;
 8005c8c:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8005c8e:	005c      	lsls	r4, r3, #1
 8005c90:	3401      	adds	r4, #1
 8005c92:	190c      	adds	r4, r1, r4
 8005c94:	2500      	movs	r5, #0
 8005c96:	7025      	strb	r5, [r4, #0]
  for (idx = 0; idx < len; idx++)
 8005c98:	3301      	adds	r3, #1
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d206      	bcs.n	8005cae <IntToUnicode+0x2e>
    if (((value >> 28)) < 0xA)
 8005ca0:	0f04      	lsrs	r4, r0, #28
 8005ca2:	2c09      	cmp	r4, #9
 8005ca4:	d8ef      	bhi.n	8005c86 <IntToUnicode+0x6>
      pbuf[2 * idx] = (value >> 28) + '0';
 8005ca6:	005d      	lsls	r5, r3, #1
 8005ca8:	3430      	adds	r4, #48	; 0x30
 8005caa:	554c      	strb	r4, [r1, r5]
 8005cac:	e7ee      	b.n	8005c8c <IntToUnicode+0xc>
  }
}
 8005cae:	bd30      	pop	{r4, r5, pc}

08005cb0 <Get_SerialNum>:
{
 8005cb0:	b570      	push	{r4, r5, r6, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005cb2:	4b0b      	ldr	r3, [pc, #44]	; (8005ce0 <Get_SerialNum+0x30>)
 8005cb4:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005cb6:	4b0b      	ldr	r3, [pc, #44]	; (8005ce4 <Get_SerialNum+0x34>)
 8005cb8:	681d      	ldr	r5, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005cba:	4b0b      	ldr	r3, [pc, #44]	; (8005ce8 <Get_SerialNum+0x38>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
  deviceserial0 += deviceserial2;
 8005cbe:	18c0      	adds	r0, r0, r3
  if (deviceserial0 != 0)
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	d100      	bne.n	8005cc6 <Get_SerialNum+0x16>
}
 8005cc4:	bd70      	pop	{r4, r5, r6, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005cc6:	4c09      	ldr	r4, [pc, #36]	; (8005cec <Get_SerialNum+0x3c>)
 8005cc8:	1ca1      	adds	r1, r4, #2
 8005cca:	2208      	movs	r2, #8
 8005ccc:	f7ff ffd8 	bl	8005c80 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005cd0:	0021      	movs	r1, r4
 8005cd2:	3112      	adds	r1, #18
 8005cd4:	2204      	movs	r2, #4
 8005cd6:	0028      	movs	r0, r5
 8005cd8:	f7ff ffd2 	bl	8005c80 <IntToUnicode>
}
 8005cdc:	e7f2      	b.n	8005cc4 <Get_SerialNum+0x14>
 8005cde:	46c0      	nop			; (mov r8, r8)
 8005ce0:	1fff7590 	.word	0x1fff7590
 8005ce4:	1fff7594 	.word	0x1fff7594
 8005ce8:	1fff7598 	.word	0x1fff7598
 8005cec:	200000a8 	.word	0x200000a8

08005cf0 <USBD_DFU_SerialStrDescriptor>:
{
 8005cf0:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8005cf2:	231a      	movs	r3, #26
 8005cf4:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8005cf6:	f7ff ffdb 	bl	8005cb0 <Get_SerialNum>
  return (uint8_t *) USBD_StringSerial;
 8005cfa:	4801      	ldr	r0, [pc, #4]	; (8005d00 <USBD_DFU_SerialStrDescriptor+0x10>)
}
 8005cfc:	bd10      	pop	{r4, pc}
 8005cfe:	46c0      	nop			; (mov r8, r8)
 8005d00:	200000a8 	.word	0x200000a8

08005d04 <USBD_DFU_ProductStrDescriptor>:
{
 8005d04:	b510      	push	{r4, lr}
 8005d06:	000a      	movs	r2, r1
  if(speed == 0)
 8005d08:	2800      	cmp	r0, #0
 8005d0a:	d105      	bne.n	8005d18 <USBD_DFU_ProductStrDescriptor+0x14>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8005d0c:	4905      	ldr	r1, [pc, #20]	; (8005d24 <USBD_DFU_ProductStrDescriptor+0x20>)
 8005d0e:	4806      	ldr	r0, [pc, #24]	; (8005d28 <USBD_DFU_ProductStrDescriptor+0x24>)
 8005d10:	f7ff ff3f 	bl	8005b92 <USBD_GetString>
  return USBD_StrDesc;
 8005d14:	4803      	ldr	r0, [pc, #12]	; (8005d24 <USBD_DFU_ProductStrDescriptor+0x20>)
}
 8005d16:	bd10      	pop	{r4, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8005d18:	4902      	ldr	r1, [pc, #8]	; (8005d24 <USBD_DFU_ProductStrDescriptor+0x20>)
 8005d1a:	4803      	ldr	r0, [pc, #12]	; (8005d28 <USBD_DFU_ProductStrDescriptor+0x24>)
 8005d1c:	f7ff ff39 	bl	8005b92 <USBD_GetString>
 8005d20:	e7f8      	b.n	8005d14 <USBD_DFU_ProductStrDescriptor+0x10>
 8005d22:	46c0      	nop			; (mov r8, r8)
 8005d24:	20000ce0 	.word	0x20000ce0
 8005d28:	08006060 	.word	0x08006060

08005d2c <USBD_DFU_ManufacturerStrDescriptor>:
{
 8005d2c:	b510      	push	{r4, lr}
 8005d2e:	000a      	movs	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005d30:	4c03      	ldr	r4, [pc, #12]	; (8005d40 <USBD_DFU_ManufacturerStrDescriptor+0x14>)
 8005d32:	4804      	ldr	r0, [pc, #16]	; (8005d44 <USBD_DFU_ManufacturerStrDescriptor+0x18>)
 8005d34:	0021      	movs	r1, r4
 8005d36:	f7ff ff2c 	bl	8005b92 <USBD_GetString>
}
 8005d3a:	0020      	movs	r0, r4
 8005d3c:	bd10      	pop	{r4, pc}
 8005d3e:	46c0      	nop			; (mov r8, r8)
 8005d40:	20000ce0 	.word	0x20000ce0
 8005d44:	08006080 	.word	0x08006080

08005d48 <USBD_DFU_ConfigStrDescriptor>:
{
 8005d48:	b510      	push	{r4, lr}
 8005d4a:	000a      	movs	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8005d4c:	2800      	cmp	r0, #0
 8005d4e:	d105      	bne.n	8005d5c <USBD_DFU_ConfigStrDescriptor+0x14>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8005d50:	4905      	ldr	r1, [pc, #20]	; (8005d68 <USBD_DFU_ConfigStrDescriptor+0x20>)
 8005d52:	4806      	ldr	r0, [pc, #24]	; (8005d6c <USBD_DFU_ConfigStrDescriptor+0x24>)
 8005d54:	f7ff ff1d 	bl	8005b92 <USBD_GetString>
  return USBD_StrDesc;
 8005d58:	4803      	ldr	r0, [pc, #12]	; (8005d68 <USBD_DFU_ConfigStrDescriptor+0x20>)
}
 8005d5a:	bd10      	pop	{r4, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8005d5c:	4902      	ldr	r1, [pc, #8]	; (8005d68 <USBD_DFU_ConfigStrDescriptor+0x20>)
 8005d5e:	4803      	ldr	r0, [pc, #12]	; (8005d6c <USBD_DFU_ConfigStrDescriptor+0x24>)
 8005d60:	f7ff ff17 	bl	8005b92 <USBD_GetString>
 8005d64:	e7f8      	b.n	8005d58 <USBD_DFU_ConfigStrDescriptor+0x10>
 8005d66:	46c0      	nop			; (mov r8, r8)
 8005d68:	20000ce0 	.word	0x20000ce0
 8005d6c:	08006094 	.word	0x08006094

08005d70 <USBD_DFU_InterfaceStrDescriptor>:
{
 8005d70:	b510      	push	{r4, lr}
 8005d72:	000a      	movs	r2, r1
  if(speed == 0)
 8005d74:	2800      	cmp	r0, #0
 8005d76:	d105      	bne.n	8005d84 <USBD_DFU_InterfaceStrDescriptor+0x14>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8005d78:	4905      	ldr	r1, [pc, #20]	; (8005d90 <USBD_DFU_InterfaceStrDescriptor+0x20>)
 8005d7a:	4806      	ldr	r0, [pc, #24]	; (8005d94 <USBD_DFU_InterfaceStrDescriptor+0x24>)
 8005d7c:	f7ff ff09 	bl	8005b92 <USBD_GetString>
  return USBD_StrDesc;
 8005d80:	4803      	ldr	r0, [pc, #12]	; (8005d90 <USBD_DFU_InterfaceStrDescriptor+0x20>)
}
 8005d82:	bd10      	pop	{r4, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8005d84:	4902      	ldr	r1, [pc, #8]	; (8005d90 <USBD_DFU_InterfaceStrDescriptor+0x20>)
 8005d86:	4803      	ldr	r0, [pc, #12]	; (8005d94 <USBD_DFU_InterfaceStrDescriptor+0x24>)
 8005d88:	f7ff ff03 	bl	8005b92 <USBD_GetString>
 8005d8c:	e7f8      	b.n	8005d80 <USBD_DFU_InterfaceStrDescriptor+0x10>
 8005d8e:	46c0      	nop			; (mov r8, r8)
 8005d90:	20000ce0 	.word	0x20000ce0
 8005d94:	080060a0 	.word	0x080060a0

08005d98 <FLASH_If_Init>:
uint16_t FLASH_If_Init(void)
{
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
  /* USER CODE END 0 */
}
 8005d98:	2000      	movs	r0, #0
 8005d9a:	4770      	bx	lr

08005d9c <FLASH_If_DeInit>:
uint16_t FLASH_If_DeInit(void)
{
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
  /* USER CODE END 1 */
}
 8005d9c:	2000      	movs	r0, #0
 8005d9e:	4770      	bx	lr

08005da0 <FLASH_If_Erase>:
{
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
  /* USER CODE END 2 */
}
 8005da0:	2000      	movs	r0, #0
 8005da2:	4770      	bx	lr

08005da4 <FLASH_If_Write>:
uint16_t FLASH_If_Write(uint8_t *src, uint8_t *dest, uint32_t Len)
{
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
  /* USER CODE END 3 */
}
 8005da4:	2000      	movs	r0, #0
 8005da6:	4770      	bx	lr

08005da8 <FLASH_If_Read>:
  */
uint8_t *FLASH_If_Read(uint8_t *src, uint8_t *dest, uint32_t Len)
{
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(FLASH_BASE);
 8005da8:	2080      	movs	r0, #128	; 0x80
  /* USER CODE END 4 */
}
 8005daa:	0500      	lsls	r0, r0, #20
 8005dac:	4770      	bx	lr

08005dae <FLASH_If_GetStatus>:

    break;
  }
  return (USBD_OK);
  /* USER CODE END 5 */
}
 8005dae:	2000      	movs	r0, #0
 8005db0:	4770      	bx	lr

08005db2 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8005db2:	2802      	cmp	r0, #2
 8005db4:	d004      	beq.n	8005dc0 <USBD_Get_USB_Status+0xe>
 8005db6:	d805      	bhi.n	8005dc4 <USBD_Get_USB_Status+0x12>
 8005db8:	2800      	cmp	r0, #0
 8005dba:	d000      	beq.n	8005dbe <USBD_Get_USB_Status+0xc>
  {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005dbc:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8005dbe:	4770      	bx	lr
      usb_status = USBD_BUSY;
 8005dc0:	2001      	movs	r0, #1
 8005dc2:	e7fc      	b.n	8005dbe <USBD_Get_USB_Status+0xc>
      usb_status = USBD_FAIL;
 8005dc4:	2003      	movs	r0, #3
 8005dc6:	e7fa      	b.n	8005dbe <USBD_Get_USB_Status+0xc>

08005dc8 <HAL_PCD_MspInit>:
{
 8005dc8:	b510      	push	{r4, lr}
 8005dca:	b096      	sub	sp, #88	; 0x58
 8005dcc:	0004      	movs	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005dce:	224c      	movs	r2, #76	; 0x4c
 8005dd0:	2100      	movs	r1, #0
 8005dd2:	a803      	add	r0, sp, #12
 8005dd4:	f000 f8a1 	bl	8005f1a <memset>
  if(pcdHandle->Instance==USB_DRD_FS)
 8005dd8:	6822      	ldr	r2, [r4, #0]
 8005dda:	4b18      	ldr	r3, [pc, #96]	; (8005e3c <HAL_PCD_MspInit+0x74>)
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d001      	beq.n	8005de4 <HAL_PCD_MspInit+0x1c>
}
 8005de0:	b016      	add	sp, #88	; 0x58
 8005de2:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8005de4:	2380      	movs	r3, #128	; 0x80
 8005de6:	045b      	lsls	r3, r3, #17
 8005de8:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005dea:	a803      	add	r0, sp, #12
 8005dec:	f7fd fa10 	bl	8003210 <HAL_RCCEx_PeriphCLKConfig>
 8005df0:	2800      	cmp	r0, #0
 8005df2:	d11d      	bne.n	8005e30 <HAL_PCD_MspInit+0x68>
    __HAL_RCC_USB_CLK_ENABLE();
 8005df4:	4b12      	ldr	r3, [pc, #72]	; (8005e40 <HAL_PCD_MspInit+0x78>)
 8005df6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005df8:	2180      	movs	r1, #128	; 0x80
 8005dfa:	0189      	lsls	r1, r1, #6
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	63da      	str	r2, [r3, #60]	; 0x3c
 8005e00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e02:	400a      	ands	r2, r1
 8005e04:	9201      	str	r2, [sp, #4]
 8005e06:	9a01      	ldr	r2, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e0a:	00db      	lsls	r3, r3, #3
 8005e0c:	d413      	bmi.n	8005e36 <HAL_PCD_MspInit+0x6e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e0e:	4c0c      	ldr	r4, [pc, #48]	; (8005e40 <HAL_PCD_MspInit+0x78>)
 8005e10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005e12:	2280      	movs	r2, #128	; 0x80
 8005e14:	0552      	lsls	r2, r2, #21
 8005e16:	4313      	orrs	r3, r2
 8005e18:	63e3      	str	r3, [r4, #60]	; 0x3c
 8005e1a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	9302      	str	r3, [sp, #8]
 8005e20:	9b02      	ldr	r3, [sp, #8]
      HAL_PWREx_EnableVddUSB();
 8005e22:	f7fc fdf9 	bl	8002a18 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005e28:	4a06      	ldr	r2, [pc, #24]	; (8005e44 <HAL_PCD_MspInit+0x7c>)
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	63e3      	str	r3, [r4, #60]	; 0x3c
 8005e2e:	e7d7      	b.n	8005de0 <HAL_PCD_MspInit+0x18>
      Error_Handler();
 8005e30:	f7fa fe28 	bl	8000a84 <Error_Handler>
 8005e34:	e7de      	b.n	8005df4 <HAL_PCD_MspInit+0x2c>
      HAL_PWREx_EnableVddUSB();
 8005e36:	f7fc fdef 	bl	8002a18 <HAL_PWREx_EnableVddUSB>
}
 8005e3a:	e7d1      	b.n	8005de0 <HAL_PCD_MspInit+0x18>
 8005e3c:	40005c00 	.word	0x40005c00
 8005e40:	40021000 	.word	0x40021000
 8005e44:	efffffff 	.word	0xefffffff

08005e48 <USBD_LL_Init>:
{
 8005e48:	b570      	push	{r4, r5, r6, lr}
 8005e4a:	0004      	movs	r4, r0
  hpcd_USB_DRD_FS.pData = pdev;
 8005e4c:	4816      	ldr	r0, [pc, #88]	; (8005ea8 <USBD_LL_Init+0x60>)
 8005e4e:	23c1      	movs	r3, #193	; 0xc1
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	50c4      	str	r4, [r0, r3]
  pdev->pData = &hpcd_USB_DRD_FS;
 8005e54:	3b3c      	subs	r3, #60	; 0x3c
 8005e56:	50e0      	str	r0, [r4, r3]
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8005e58:	4b14      	ldr	r3, [pc, #80]	; (8005eac <USBD_LL_Init+0x64>)
 8005e5a:	6003      	str	r3, [r0, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8005e5c:	2308      	movs	r3, #8
 8005e5e:	6043      	str	r3, [r0, #4]
  hpcd_USB_DRD_FS.Init.Host_channels = 8;
 8005e60:	6083      	str	r3, [r0, #8]
  hpcd_USB_DRD_FS.Init.speed = PCD_SPEED_FULL;
 8005e62:	3b06      	subs	r3, #6
 8005e64:	60c3      	str	r3, [r0, #12]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005e66:	6183      	str	r3, [r0, #24]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	61c3      	str	r3, [r0, #28]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8005e6c:	6203      	str	r3, [r0, #32]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8005e6e:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8005e70:	6283      	str	r3, [r0, #40]	; 0x28
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8005e72:	62c3      	str	r3, [r0, #44]	; 0x2c
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8005e74:	6303      	str	r3, [r0, #48]	; 0x30
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8005e76:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8005e78:	f7fc fc68 	bl	800274c <HAL_PCD_Init>
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	d10f      	bne.n	8005ea0 <USBD_LL_Init+0x58>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8005e80:	25b2      	movs	r5, #178	; 0xb2
 8005e82:	00ad      	lsls	r5, r5, #2
 8005e84:	5960      	ldr	r0, [r4, r5]
 8005e86:	2318      	movs	r3, #24
 8005e88:	2200      	movs	r2, #0
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	f7fc fd92 	bl	80029b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8005e90:	5960      	ldr	r0, [r4, r5]
 8005e92:	2358      	movs	r3, #88	; 0x58
 8005e94:	2200      	movs	r2, #0
 8005e96:	2180      	movs	r1, #128	; 0x80
 8005e98:	f7fc fd8c 	bl	80029b4 <HAL_PCDEx_PMAConfig>
}
 8005e9c:	2000      	movs	r0, #0
 8005e9e:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler( );
 8005ea0:	f7fa fdf0 	bl	8000a84 <Error_Handler>
 8005ea4:	e7ec      	b.n	8005e80 <USBD_LL_Init+0x38>
 8005ea6:	46c0      	nop			; (mov r8, r8)
 8005ea8:	20000ee0 	.word	0x20000ee0
 8005eac:	40005c00 	.word	0x40005c00

08005eb0 <USBD_LL_Start>:
{
 8005eb0:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8005eb2:	23b2      	movs	r3, #178	; 0xb2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	58c0      	ldr	r0, [r0, r3]
 8005eb8:	f7fc fcbe 	bl	8002838 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005ebc:	f7ff ff79 	bl	8005db2 <USBD_Get_USB_Status>
}
 8005ec0:	bd10      	pop	{r4, pc}

08005ec2 <USBD_LL_Stop>:
{
 8005ec2:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_Stop(pdev->pData);
 8005ec4:	23b2      	movs	r3, #178	; 0xb2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	58c0      	ldr	r0, [r0, r3]
 8005eca:	f7fc fccc 	bl	8002866 <HAL_PCD_Stop>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005ece:	f7ff ff70 	bl	8005db2 <USBD_Get_USB_Status>
}
 8005ed2:	bd10      	pop	{r4, pc}

08005ed4 <USBD_LL_StallEP>:
{
 8005ed4:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005ed6:	23b2      	movs	r3, #178	; 0xb2
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	58c0      	ldr	r0, [r0, r3]
 8005edc:	f7fc fd2d 	bl	800293a <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005ee0:	f7ff ff67 	bl	8005db2 <USBD_Get_USB_Status>
}
 8005ee4:	bd10      	pop	{r4, pc}

08005ee6 <USBD_LL_Transmit>:
{
 8005ee6:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005ee8:	24b2      	movs	r4, #178	; 0xb2
 8005eea:	00a4      	lsls	r4, r4, #2
 8005eec:	5900      	ldr	r0, [r0, r4]
 8005eee:	f7fc fcfd 	bl	80028ec <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005ef2:	f7ff ff5e 	bl	8005db2 <USBD_Get_USB_Status>
}
 8005ef6:	bd10      	pop	{r4, pc}

08005ef8 <USBD_LL_PrepareReceive>:
{
 8005ef8:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005efa:	24b2      	movs	r4, #178	; 0xb2
 8005efc:	00a4      	lsls	r4, r4, #2
 8005efe:	5900      	ldr	r0, [r0, r4]
 8005f00:	f7fc fcc8 	bl	8002894 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005f04:	f7ff ff55 	bl	8005db2 <USBD_Get_USB_Status>
}
 8005f08:	bd10      	pop	{r4, pc}
	...

08005f0c <USBD_static_malloc>:
  return mem;
 8005f0c:	4800      	ldr	r0, [pc, #0]	; (8005f10 <USBD_static_malloc+0x4>)
}
 8005f0e:	4770      	bx	lr
 8005f10:	200011e8 	.word	0x200011e8

08005f14 <USBD_static_free>:
}
 8005f14:	4770      	bx	lr

08005f16 <PROCESS_Init>:


void PROCESS_Init(void)
{

}
 8005f16:	4770      	bx	lr

08005f18 <PROCESS_Main>:

void PROCESS_Main(void)
{

}
 8005f18:	4770      	bx	lr

08005f1a <memset>:
 8005f1a:	0003      	movs	r3, r0
 8005f1c:	1882      	adds	r2, r0, r2
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d100      	bne.n	8005f24 <memset+0xa>
 8005f22:	4770      	bx	lr
 8005f24:	7019      	strb	r1, [r3, #0]
 8005f26:	3301      	adds	r3, #1
 8005f28:	e7f9      	b.n	8005f1e <memset+0x4>
	...

08005f2c <__libc_init_array>:
 8005f2c:	b570      	push	{r4, r5, r6, lr}
 8005f2e:	2600      	movs	r6, #0
 8005f30:	4c0c      	ldr	r4, [pc, #48]	; (8005f64 <__libc_init_array+0x38>)
 8005f32:	4d0d      	ldr	r5, [pc, #52]	; (8005f68 <__libc_init_array+0x3c>)
 8005f34:	1b64      	subs	r4, r4, r5
 8005f36:	10a4      	asrs	r4, r4, #2
 8005f38:	42a6      	cmp	r6, r4
 8005f3a:	d109      	bne.n	8005f50 <__libc_init_array+0x24>
 8005f3c:	2600      	movs	r6, #0
 8005f3e:	f000 f819 	bl	8005f74 <_init>
 8005f42:	4c0a      	ldr	r4, [pc, #40]	; (8005f6c <__libc_init_array+0x40>)
 8005f44:	4d0a      	ldr	r5, [pc, #40]	; (8005f70 <__libc_init_array+0x44>)
 8005f46:	1b64      	subs	r4, r4, r5
 8005f48:	10a4      	asrs	r4, r4, #2
 8005f4a:	42a6      	cmp	r6, r4
 8005f4c:	d105      	bne.n	8005f5a <__libc_init_array+0x2e>
 8005f4e:	bd70      	pop	{r4, r5, r6, pc}
 8005f50:	00b3      	lsls	r3, r6, #2
 8005f52:	58eb      	ldr	r3, [r5, r3]
 8005f54:	4798      	blx	r3
 8005f56:	3601      	adds	r6, #1
 8005f58:	e7ee      	b.n	8005f38 <__libc_init_array+0xc>
 8005f5a:	00b3      	lsls	r3, r6, #2
 8005f5c:	58eb      	ldr	r3, [r5, r3]
 8005f5e:	4798      	blx	r3
 8005f60:	3601      	adds	r6, #1
 8005f62:	e7f2      	b.n	8005f4a <__libc_init_array+0x1e>
 8005f64:	08006118 	.word	0x08006118
 8005f68:	08006118 	.word	0x08006118
 8005f6c:	0800611c 	.word	0x0800611c
 8005f70:	08006118 	.word	0x08006118

08005f74 <_init>:
 8005f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f76:	46c0      	nop			; (mov r8, r8)
 8005f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f7a:	bc08      	pop	{r3}
 8005f7c:	469e      	mov	lr, r3
 8005f7e:	4770      	bx	lr

08005f80 <_fini>:
 8005f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f82:	46c0      	nop			; (mov r8, r8)
 8005f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f86:	bc08      	pop	{r3}
 8005f88:	469e      	mov	lr, r3
 8005f8a:	4770      	bx	lr
